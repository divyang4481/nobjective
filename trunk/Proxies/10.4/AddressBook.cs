//
// Copyright (C) 2009 Eugeny Grishul
//
// See license in License.txt
//

namespace NObjective.Proxies {
	using System;
	using System.Runtime.InteropServices;
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct AB_AFCard : IEquatable<AB_AFCard> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.AB_AFCard;
		public static implicit operator NSObject( AB_AFCard value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( AB_AFCard value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( AB_AFCard value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as AB_AFCard?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( AB_AFCard value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( AB_AFCard value1, AB_AFCard value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( AB_AFCard value1, AB_AFCard value2 ) {
			return value1.Handle != value2.Handle;
		}
		public AB_AFCard( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static AB_AFCard alloc() {
			return new AB_AFCard( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject cardsFromGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cardsFromGroup( Handle, CachedSelectors.cardsFromGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject dataFile() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dataFile( Handle, CachedSelectors.dataFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject dataValueOfProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dataValueOfProperty_( Handle, CachedSelectors.dataValueOfProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public double doubleValueOfProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doubleValueOfProperty_( Handle, CachedSelectors.doubleValueOfProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject emailList() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.emailList( Handle, CachedSelectors.emailList, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject firstName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.firstName( Handle, CachedSelectors.firstName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject firstStringValueOfProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.firstStringValueOfProperty_( Handle, CachedSelectors.firstStringValueOfProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public float floatValueOfProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.floatValueOfProperty_( Handle, CachedSelectors.floatValueOfProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int getRow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getRow( Handle, CachedSelectors.getRow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char hasTag_( NObjective.RuntimeObject tag ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasTag_( Handle, CachedSelectors.hasTag_, out ___occuredException, sizeof( NObjective.RuntimeObject ), tag );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject initWithUID_dataFile_( int uid, NObjective.RuntimeObject dataFile ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUID_dataFile_( Handle, CachedSelectors.initWithUID_dataFile_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ), uid, dataFile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int intValueOfProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.intValueOfProperty_( Handle, CachedSelectors.intValueOfProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject stringValueOfProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringValueOfProperty_( Handle, CachedSelectors.stringValueOfProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject stringValuesOfProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringValuesOfProperty_( Handle, CachedSelectors.stringValuesOfProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject tagList() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tagList( Handle, CachedSelectors.tagList, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int UID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.UID( Handle, CachedSelectors.UID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject valueOfProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueOfProperty_( Handle, CachedSelectors.valueOfProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cardsFromGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dataFile( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dataValueOfProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double doubleValueOfProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr emailList( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr firstName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr firstStringValueOfProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float floatValueOfProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int getRow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasTag_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject tag );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithUID_dataFile_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int uid, NObjective.RuntimeObject dataFile );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int intValueOfProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringValueOfProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringValuesOfProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr tagList( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int UID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueOfProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
		}
		static internal class CachedSelectors {
			public static readonly Selector cardsFromGroup = "cardsFromGroup";
			public static readonly Selector dataFile = "dataFile";
			public static readonly Selector dataValueOfProperty_ = "dataValueOfProperty:";
			public static readonly Selector doubleValueOfProperty_ = "doubleValueOfProperty:";
			public static readonly Selector emailList = "emailList";
			public static readonly Selector firstName = "firstName";
			public static readonly Selector firstStringValueOfProperty_ = "firstStringValueOfProperty:";
			public static readonly Selector floatValueOfProperty_ = "floatValueOfProperty:";
			public static readonly Selector getRow = "getRow";
			public static readonly Selector hasTag_ = "hasTag:";
			public static readonly Selector initWithUID_dataFile_ = "initWithUID:dataFile:";
			public static readonly Selector intValueOfProperty_ = "intValueOfProperty:";
			public static readonly Selector stringValueOfProperty_ = "stringValueOfProperty:";
			public static readonly Selector stringValuesOfProperty_ = "stringValuesOfProperty:";
			public static readonly Selector tagList = "tagList";
			public static readonly Selector UID = "UID";
			public static readonly Selector valueOfProperty_ = "valueOfProperty:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct AB_AFDataFile : IEquatable<AB_AFDataFile> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.AB_AFDataFile;
		public static implicit operator NSObject( AB_AFDataFile value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( AB_AFDataFile value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( AB_AFDataFile value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as AB_AFDataFile?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( AB_AFDataFile value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( AB_AFDataFile value1, AB_AFDataFile value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( AB_AFDataFile value1, AB_AFDataFile value2 ) {
			return value1.Handle != value2.Handle;
		}
		public AB_AFDataFile( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static AB_AFDataFile alloc() {
			return new AB_AFDataFile( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject allCards() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allCards( Handle, CachedSelectors.allCards, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject buildPropertyDict_( NObjective.RuntimeObject dict ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.buildPropertyDict_( Handle, CachedSelectors.buildPropertyDict_, out ___occuredException, sizeof( NObjective.RuntimeObject ), dict );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject cardsWithCategory_( NObjective.RuntimeObject category ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cardsWithCategory_( Handle, CachedSelectors.cardsWithCategory_, out ___occuredException, sizeof( NObjective.RuntimeObject ), category );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void clearDataFileInfo() {
			RuntimeObject ___occuredException;
			NativeMethods.clearDataFileInfo( Handle, CachedSelectors.clearDataFileInfo, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void closeDataFile() {
			RuntimeObject ___occuredException;
			NativeMethods.closeDataFile( Handle, CachedSelectors.closeDataFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject combineStructures_withCustom_( NObjective.RuntimeObject structures, NObjective.RuntimeObject withCustom ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.combineStructures_withCustom_( Handle, CachedSelectors.combineStructures_withCustom_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), structures, withCustom );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char dataTypeDoesNotExist_forKey_inCurrentStruct_inCustomStruct_( NObjective.RuntimeObject exist, NObjective.RuntimeObject forKey, NObjective.RuntimeObject inCurrentStruct, NObjective.RuntimeObject inCustomStruct ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dataTypeDoesNotExist_forKey_inCurrentStruct_inCustomStruct_( Handle, CachedSelectors.dataTypeDoesNotExist_forKey_inCurrentStruct_inCustomStruct_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), exist, forKey, inCurrentStruct, inCustomStruct );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char initializeDataFileInfo_( NObjective.RuntimeObject info ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initializeDataFileInfo_( Handle, CachedSelectors.initializeDataFileInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), info );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char initWithDataFile_lockMode_cardClass_snoop_( NObjective.RuntimeObject file, short lockMode, NObjective.RuntimeClass cardClass, char snoop ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithDataFile_lockMode_cardClass_snoop_( Handle, CachedSelectors.initWithDataFile_lockMode_cardClass_snoop_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( short ) + sizeof( NObjective.RuntimeClass ) + sizeof( char ), file, lockMode, cardClass, snoop );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject makeProperties_verifyWith_( NObjective.RuntimeObject properties, NObjective.RuntimeObject verifyWith ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.makeProperties_verifyWith_( Handle, CachedSelectors.makeProperties_verifyWith_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), properties, verifyWith );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject ownerCard() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ownerCard( Handle, CachedSelectors.ownerCard, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void releaseLock_( short @lock ) {
			RuntimeObject ___occuredException;
			NativeMethods.releaseLock_( Handle, CachedSelectors.releaseLock_, out ___occuredException, sizeof( short ), @lock );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char verifyDataType_forKey_( NObjective.RuntimeObject type, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.verifyDataType_forKey_( Handle, CachedSelectors.verifyDataType_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), type, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject whatIsKeyType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.whatIsKeyType_( Handle, CachedSelectors.whatIsKeyType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allCards( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr buildPropertyDict_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dict );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cardsWithCategory_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject category );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clearDataFileInfo( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void closeDataFile( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr combineStructures_withCustom_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject structures, NObjective.RuntimeObject withCustom );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char dataTypeDoesNotExist_forKey_inCurrentStruct_inCustomStruct_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject exist, NObjective.RuntimeObject forKey, NObjective.RuntimeObject inCurrentStruct, NObjective.RuntimeObject inCustomStruct );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char initializeDataFileInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject info );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char initWithDataFile_lockMode_cardClass_snoop_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject file, short lockMode, NObjective.RuntimeClass cardClass, char snoop );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr makeProperties_verifyWith_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject properties, NObjective.RuntimeObject verifyWith );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr ownerCard( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void releaseLock_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, short @lock );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char verifyDataType_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type, NObjective.RuntimeObject forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr whatIsKeyType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
		}
		static internal class CachedSelectors {
			public static readonly Selector allCards = "allCards";
			public static readonly Selector buildPropertyDict_ = "buildPropertyDict:";
			public static readonly Selector cardsWithCategory_ = "cardsWithCategory:";
			public static readonly Selector clearDataFileInfo = "clearDataFileInfo";
			public static readonly Selector closeDataFile = "closeDataFile";
			public static readonly Selector combineStructures_withCustom_ = "combineStructures:withCustom:";
			public static readonly Selector dataTypeDoesNotExist_forKey_inCurrentStruct_inCustomStruct_ = "dataTypeDoesNotExist:forKey:inCurrentStruct:inCustomStruct:";
			public static readonly Selector initializeDataFileInfo_ = "initializeDataFileInfo:";
			public static readonly Selector initWithDataFile_lockMode_cardClass_snoop_ = "initWithDataFile:lockMode:cardClass:snoop:";
			public static readonly Selector makeProperties_verifyWith_ = "makeProperties:verifyWith:";
			public static readonly Selector ownerCard = "ownerCard";
			public static readonly Selector releaseLock_ = "releaseLock:";
			public static readonly Selector verifyDataType_forKey_ = "verifyDataType:forKey:";
			public static readonly Selector whatIsKeyType_ = "whatIsKeyType:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABAccessibilityMockUIElement : IEquatable<ABAccessibilityMockUIElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABAccessibilityMockUIElement;
		public static implicit operator NSObject( ABAccessibilityMockUIElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABAccessibilityMockUIElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABAccessibilityMockUIElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABAccessibilityMockUIElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABAccessibilityMockUIElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABAccessibilityMockUIElement value1, ABAccessibilityMockUIElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABAccessibilityMockUIElement value1, ABAccessibilityMockUIElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABAccessibilityMockUIElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABAccessibilityMockUIElement alloc() {
			return new ABAccessibilityMockUIElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject elementWithRole_parent_( NObjective.RuntimeObject role, NObjective.RuntimeObject parent ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.elementWithRole_parent_( ClassHandle, CachedSelectors.elementWithRole_parent_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), role, parent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityActionDescription_( NObjective.RuntimeObject description ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityActionDescription_( Handle, CachedSelectors.accessibilityActionDescription_, out ___occuredException, sizeof( NObjective.RuntimeObject ), description );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityActionNames() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityActionNames( Handle, CachedSelectors.accessibilityActionNames, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityAttributeNames() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityAttributeNames( Handle, CachedSelectors.accessibilityAttributeNames, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityAttributeValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityAttributeValue_( Handle, CachedSelectors.accessibilityAttributeValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityFocusedAttribute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityFocusedAttribute( Handle, CachedSelectors.accessibilityFocusedAttribute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityFocusedUIElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityFocusedUIElement( Handle, CachedSelectors.accessibilityFocusedUIElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityHelpAttribute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityHelpAttribute( Handle, CachedSelectors.accessibilityHelpAttribute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char accessibilityIsAttributeSettable_( NObjective.RuntimeObject settable ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityIsAttributeSettable_( Handle, CachedSelectors.accessibilityIsAttributeSettable_, out ___occuredException, sizeof( NObjective.RuntimeObject ), settable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char accessibilityIsFocusedAttributeSettable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityIsFocusedAttributeSettable( Handle, CachedSelectors.accessibilityIsFocusedAttributeSettable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char accessibilityIsHelpAttributeSettable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityIsHelpAttributeSettable( Handle, CachedSelectors.accessibilityIsHelpAttributeSettable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char accessibilityIsIgnored() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityIsIgnored( Handle, CachedSelectors.accessibilityIsIgnored, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char accessibilityIsParentAttributeSettable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityIsParentAttributeSettable( Handle, CachedSelectors.accessibilityIsParentAttributeSettable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char accessibilityIsPositionAttributeSettable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityIsPositionAttributeSettable( Handle, CachedSelectors.accessibilityIsPositionAttributeSettable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char accessibilityIsRoleAttributeSettable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityIsRoleAttributeSettable( Handle, CachedSelectors.accessibilityIsRoleAttributeSettable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char accessibilityIsRoleDescriptionAttributeSettable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityIsRoleDescriptionAttributeSettable( Handle, CachedSelectors.accessibilityIsRoleDescriptionAttributeSettable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char accessibilityIsSizeAttributeSettable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityIsSizeAttributeSettable( Handle, CachedSelectors.accessibilityIsSizeAttributeSettable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char accessibilityIsWindowAttributeSettable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityIsWindowAttributeSettable( Handle, CachedSelectors.accessibilityIsWindowAttributeSettable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject accessibilityParentAttribute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityParentAttribute( Handle, CachedSelectors.accessibilityParentAttribute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void accessibilityPerformAction_( NObjective.RuntimeObject action ) {
			RuntimeObject ___occuredException;
			NativeMethods.accessibilityPerformAction_( Handle, CachedSelectors.accessibilityPerformAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject accessibilityPositionAttribute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityPositionAttribute( Handle, CachedSelectors.accessibilityPositionAttribute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityRoleAttribute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityRoleAttribute( Handle, CachedSelectors.accessibilityRoleAttribute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityRoleDescriptionAttribute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityRoleDescriptionAttribute( Handle, CachedSelectors.accessibilityRoleDescriptionAttribute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void accessibilitySetFocusedAttribute_( NObjective.RuntimeObject attribute ) {
			RuntimeObject ___occuredException;
			NativeMethods.accessibilitySetFocusedAttribute_( Handle, CachedSelectors.accessibilitySetFocusedAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void accessibilitySetValue_forAttribute_( NObjective.RuntimeObject value, NObjective.RuntimeObject forAttribute ) {
			RuntimeObject ___occuredException;
			NativeMethods.accessibilitySetValue_forAttribute_( Handle, CachedSelectors.accessibilitySetValue_forAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forAttribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char accessibilityShouldUseUniqueId() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityShouldUseUniqueId( Handle, CachedSelectors.accessibilityShouldUseUniqueId, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject accessibilitySizeAttribute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilitySizeAttribute( Handle, CachedSelectors.accessibilitySizeAttribute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityWindowAttribute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityWindowAttribute( Handle, CachedSelectors.accessibilityWindowAttribute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithRole_parent_( NObjective.RuntimeObject role, NObjective.RuntimeObject parent ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithRole_parent_( Handle, CachedSelectors.initWithRole_parent_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), role, parent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityActionDescription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject description );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityActionNames( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityAttributeNames( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityAttributeValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityFocusedAttribute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityFocusedUIElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityHelpAttribute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char accessibilityIsAttributeSettable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject settable );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char accessibilityIsFocusedAttributeSettable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char accessibilityIsHelpAttributeSettable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char accessibilityIsIgnored( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char accessibilityIsParentAttributeSettable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char accessibilityIsPositionAttributeSettable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char accessibilityIsRoleAttributeSettable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char accessibilityIsRoleDescriptionAttributeSettable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char accessibilityIsSizeAttributeSettable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char accessibilityIsWindowAttributeSettable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityParentAttribute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void accessibilityPerformAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject action );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityPositionAttribute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityRoleAttribute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityRoleDescriptionAttribute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void accessibilitySetFocusedAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void accessibilitySetValue_forAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forAttribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char accessibilityShouldUseUniqueId( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilitySizeAttribute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityWindowAttribute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr elementWithRole_parent_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject role, NObjective.RuntimeObject parent );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithRole_parent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject role, NObjective.RuntimeObject parent );
		}
		static internal class CachedSelectors {
			public static readonly Selector accessibilityActionDescription_ = "accessibilityActionDescription:";
			public static readonly Selector accessibilityActionNames = "accessibilityActionNames";
			public static readonly Selector accessibilityAttributeNames = "accessibilityAttributeNames";
			public static readonly Selector accessibilityAttributeValue_ = "accessibilityAttributeValue:";
			public static readonly Selector accessibilityFocusedAttribute = "accessibilityFocusedAttribute";
			public static readonly Selector accessibilityFocusedUIElement = "accessibilityFocusedUIElement";
			public static readonly Selector accessibilityHelpAttribute = "accessibilityHelpAttribute";
			public static readonly Selector accessibilityIsAttributeSettable_ = "accessibilityIsAttributeSettable:";
			public static readonly Selector accessibilityIsFocusedAttributeSettable = "accessibilityIsFocusedAttributeSettable";
			public static readonly Selector accessibilityIsHelpAttributeSettable = "accessibilityIsHelpAttributeSettable";
			public static readonly Selector accessibilityIsIgnored = "accessibilityIsIgnored";
			public static readonly Selector accessibilityIsParentAttributeSettable = "accessibilityIsParentAttributeSettable";
			public static readonly Selector accessibilityIsPositionAttributeSettable = "accessibilityIsPositionAttributeSettable";
			public static readonly Selector accessibilityIsRoleAttributeSettable = "accessibilityIsRoleAttributeSettable";
			public static readonly Selector accessibilityIsRoleDescriptionAttributeSettable = "accessibilityIsRoleDescriptionAttributeSettable";
			public static readonly Selector accessibilityIsSizeAttributeSettable = "accessibilityIsSizeAttributeSettable";
			public static readonly Selector accessibilityIsWindowAttributeSettable = "accessibilityIsWindowAttributeSettable";
			public static readonly Selector accessibilityParentAttribute = "accessibilityParentAttribute";
			public static readonly Selector accessibilityPerformAction_ = "accessibilityPerformAction:";
			public static readonly Selector accessibilityPositionAttribute = "accessibilityPositionAttribute";
			public static readonly Selector accessibilityRoleAttribute = "accessibilityRoleAttribute";
			public static readonly Selector accessibilityRoleDescriptionAttribute = "accessibilityRoleDescriptionAttribute";
			public static readonly Selector accessibilitySetFocusedAttribute_ = "accessibilitySetFocusedAttribute:";
			public static readonly Selector accessibilitySetValue_forAttribute_ = "accessibilitySetValue:forAttribute:";
			public static readonly Selector accessibilityShouldUseUniqueId = "accessibilityShouldUseUniqueId";
			public static readonly Selector accessibilitySizeAttribute = "accessibilitySizeAttribute";
			public static readonly Selector accessibilityWindowAttribute = "accessibilityWindowAttribute";
			public static readonly Selector elementWithRole_parent_ = "elementWithRole:parent:";
			public static readonly Selector initWithRole_parent_ = "initWithRole:parent:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABACE : IEquatable<ABACE> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABACE;
		public static implicit operator NSObject( ABACE value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABACE value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABACE value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABACE?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABACE value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABACE value1, ABACE value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABACE value1, ABACE value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABACE( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABACE alloc() {
			return new ABACE( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char canRead() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canRead( Handle, CachedSelectors.canRead, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char canWrite() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canWrite( Handle, CachedSelectors.canWrite, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject initWithACENode_( NObjective.RuntimeObject node ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithACENode_( Handle, CachedSelectors.initWithACENode_, out ___occuredException, sizeof( NObjective.RuntimeObject ), node );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithCurrentUserPrivNode_( NObjective.RuntimeObject node ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCurrentUserPrivNode_( Handle, CachedSelectors.initWithCurrentUserPrivNode_, out ___occuredException, sizeof( NObjective.RuntimeObject ), node );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithPrincipal_( NObjective.RuntimeObject principal ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithPrincipal_( Handle, CachedSelectors.initWithPrincipal_, out ___occuredException, sizeof( NObjective.RuntimeObject ), principal );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isInherited() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isInherited( Handle, CachedSelectors.isInherited, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isProtected() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isProtected( Handle, CachedSelectors.isProtected, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject principal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.principal( Handle, CachedSelectors.principal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setCanRead_( char read ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCanRead_( Handle, CachedSelectors.setCanRead_, out ___occuredException, sizeof( char ), read );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCanWrite_( char write ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCanWrite_( Handle, CachedSelectors.setCanWrite_, out ___occuredException, sizeof( char ), write );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPrincipal_( NObjective.RuntimeObject principal ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPrincipal_( Handle, CachedSelectors.setPrincipal_, out ___occuredException, sizeof( NObjective.RuntimeObject ), principal );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setType_( int type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setType_( Handle, CachedSelectors.setType_, out ___occuredException, sizeof( int ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int type() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.type( Handle, CachedSelectors.type, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char canRead( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char canWrite( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithACENode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject node );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCurrentUserPrivNode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject node );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithPrincipal_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject principal );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isInherited( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isProtected( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr principal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCanRead_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char read );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCanWrite_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char write );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPrincipal_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject principal );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int type( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector canRead = "canRead";
			public static readonly Selector canWrite = "canWrite";
			public static readonly Selector initWithACENode_ = "initWithACENode:";
			public static readonly Selector initWithCurrentUserPrivNode_ = "initWithCurrentUserPrivNode:";
			public static readonly Selector initWithPrincipal_ = "initWithPrincipal:";
			public static readonly Selector isInherited = "isInherited";
			public static readonly Selector isProtected = "isProtected";
			public static readonly Selector principal = "principal";
			public static readonly Selector setCanRead_ = "setCanRead:";
			public static readonly Selector setCanWrite_ = "setCanWrite:";
			public static readonly Selector setPrincipal_ = "setPrincipal:";
			public static readonly Selector setType_ = "setType:";
			public static readonly Selector type = "type";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABACL : IEquatable<ABACL> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABACL;
		public static implicit operator NSObject( ABACL value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABACL value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABACL value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABACL?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABACL value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABACL value1, ABACL value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABACL value1, ABACL value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABACL( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABACL alloc() {
			return new ABACL( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject ACEs() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ACEs( Handle, CachedSelectors.ACEs, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addACE_append_( NObjective.RuntimeObject ace, char append ) {
			RuntimeObject ___occuredException;
			NativeMethods.addACE_append_( Handle, CachedSelectors.addACE_append_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), ace, append );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addACEs_( NObjective.RuntimeObject es ) {
			RuntimeObject ___occuredException;
			NativeMethods.addACEs_( Handle, CachedSelectors.addACEs_, out ___occuredException, sizeof( NObjective.RuntimeObject ), es );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char hasACEs() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasACEs( Handle, CachedSelectors.hasACEs, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject initWithACLNode_( NObjective.RuntimeObject node ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithACLNode_( Handle, CachedSelectors.initWithACLNode_, out ___occuredException, sizeof( NObjective.RuntimeObject ), node );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void removeACE_( NObjective.RuntimeObject ace ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeACE_( Handle, CachedSelectors.removeACE_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ace );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setACEs_( NObjective.RuntimeObject es ) {
			RuntimeObject ___occuredException;
			NativeMethods.setACEs_( Handle, CachedSelectors.setACEs_, out ___occuredException, sizeof( NObjective.RuntimeObject ), es );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr ACEs( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addACE_append_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ace, char append );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addACEs_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject es );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasACEs( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithACLNode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject node );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeACE_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ace );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setACEs_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject es );
		}
		static internal class CachedSelectors {
			public static readonly Selector ACEs = "ACEs";
			public static readonly Selector addACE_append_ = "addACE:append:";
			public static readonly Selector addACEs_ = "addACEs:";
			public static readonly Selector hasACEs = "hasACEs";
			public static readonly Selector initWithACLNode_ = "initWithACLNode:";
			public static readonly Selector removeACE_ = "removeACE:";
			public static readonly Selector setACEs_ = "setACEs:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABAddressAttributedString : IEquatable<ABAddressAttributedString> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABAddressAttributedString;
		public static implicit operator NSObject( ABAddressAttributedString value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABAddressAttributedString value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABAddressAttributedString value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABAddressAttributedString?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABAddressAttributedString value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABAddressAttributedString value1, ABAddressAttributedString value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABAddressAttributedString value1, ABAddressAttributedString value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABAddressAttributedString( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABAddressAttributedString alloc() {
			return new ABAddressAttributedString( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void appendField_label_withText_( NObjective.RuntimeObject field, NObjective.RuntimeObject label, NObjective.RuntimeObject withText ) {
			RuntimeObject ___occuredException;
			NativeMethods.appendField_label_withText_( Handle, CachedSelectors.appendField_label_withText_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), field, label, withText );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void appendString_withFont_andAttribute_( NObjective.RuntimeObject @string, NObjective.RuntimeObject withFont, NObjective.RuntimeObject andAttribute ) {
			RuntimeObject ___occuredException;
			NativeMethods.appendString_withFont_andAttribute_( Handle, CachedSelectors.appendString_withFont_andAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @string, withFont, andAttribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject attributedString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attributedString( Handle, CachedSelectors.attributedString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void buildString() {
			RuntimeObject ___occuredException;
			NativeMethods.buildString( Handle, CachedSelectors.buildString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithCountryCode_identifier_label_insertPopups_andInputController_( NObjective.RuntimeObject code, NObjective.RuntimeObject identifier, NObjective.RuntimeObject label, char insertPopups, NObjective.RuntimeObject andInputController ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCountryCode_identifier_label_insertPopups_andInputController_( Handle, CachedSelectors.initWithCountryCode_identifier_label_insertPopups_andInputController_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( NObjective.RuntimeObject ), code, identifier, label, insertPopups, andInputController );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void appendField_label_withText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject field, NObjective.RuntimeObject label, NObjective.RuntimeObject withText );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void appendString_withFont_andAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, NObjective.RuntimeObject withFont, NObjective.RuntimeObject andAttribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attributedString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void buildString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCountryCode_identifier_label_insertPopups_andInputController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject code, NObjective.RuntimeObject identifier, NObjective.RuntimeObject label, char insertPopups, NObjective.RuntimeObject andInputController );
		}
		static internal class CachedSelectors {
			public static readonly Selector appendField_label_withText_ = "appendField:label:withText:";
			public static readonly Selector appendString_withFont_andAttribute_ = "appendString:withFont:andAttribute:";
			public static readonly Selector attributedString = "attributedString";
			public static readonly Selector buildString = "buildString";
			public static readonly Selector initWithCountryCode_identifier_label_insertPopups_andInputController_ = "initWithCountryCode:identifier:label:insertPopups:andInputController:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABAddressBook : IEquatable<ABAddressBook> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABAddressBook;
		public static implicit operator NSObject( ABAddressBook value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABAddressBook value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABAddressBook value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABAddressBook?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABAddressBook value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABAddressBook value1, ABAddressBook value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABAddressBook value1, ABAddressBook value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABAddressBook( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABAddressBook alloc() {
			return new ABAddressBook( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject addressBookCompactedDataFile() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBookCompactedDataFile( ClassHandle, CachedSelectors.addressBookCompactedDataFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject addressBookDataFile() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBookDataFile( ClassHandle, CachedSelectors.addressBookDataFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject addressBookDirectory() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBookDirectory( ClassHandle, CachedSelectors.addressBookDirectory, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject addressBookImagesDirectory() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBookImagesDirectory( ClassHandle, CachedSelectors.addressBookImagesDirectory, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject addressBookLockFile() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBookLockFile( ClassHandle, CachedSelectors.addressBookLockFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject addressBookSaveFile() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBookSaveFile( ClassHandle, CachedSelectors.addressBookSaveFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject addressFormats() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressFormats( ClassHandle, CachedSelectors.addressFormats, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static bool isUsingDefaultAddressBookDirectory() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isUsingDefaultAddressBookDirectory( ClassHandle, CachedSelectors.isUsingDefaultAddressBookDirectory, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject nts_CreateSharedAddressBook() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_CreateSharedAddressBook( ClassHandle, CachedSelectors.nts_CreateSharedAddressBook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static char nts_hasSharedInstance() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_hasSharedInstance( ClassHandle, CachedSelectors.nts_hasSharedInstance, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static void nts_setupTables() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_setupTables( ClassHandle, CachedSelectors.nts_setupTables, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject nts_SharedAddressBook() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SharedAddressBook( ClassHandle, CachedSelectors.nts_SharedAddressBook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void setAddressBookDirectory_( NObjective.RuntimeObject directory ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAddressBookDirectory_( ClassHandle, CachedSelectors.setAddressBookDirectory_, out ___occuredException, sizeof( NObjective.RuntimeObject ), directory );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static ABAddressBook sharedAddressBook() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedAddressBook( ClassHandle, CachedSelectors.sharedAddressBook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new ABAddressBook( ___result );
		}
		unsafe public bool addRecord_( ABRecord record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addRecord_( Handle, CachedSelectors.addRecord_, out ___occuredException, sizeof( ABRecord ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char backupDatabaseToPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backupDatabaseToPath_( Handle, CachedSelectors.backupDatabaseToPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char beginAsyncIndexSearchForRecordsMatching_withDelegate_( NObjective.RuntimeObject matching, NObjective.RuntimeObject withDelegate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.beginAsyncIndexSearchForRecordsMatching_withDelegate_( Handle, CachedSelectors.beginAsyncIndexSearchForRecordsMatching_withDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), matching, withDelegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char beginAsyncIndexSearchForSubscribedRecordsMatching_withDelegate_( NObjective.RuntimeObject matching, NObjective.RuntimeObject withDelegate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.beginAsyncIndexSearchForSubscribedRecordsMatching_withDelegate_( Handle, CachedSelectors.beginAsyncIndexSearchForSubscribedRecordsMatching_withDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), matching, withDelegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void cancelAsyncIndexSearchForDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancelAsyncIndexSearchForDelegate_( Handle, CachedSelectors.cancelAsyncIndexSearchForDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void cancelSubscribedAsyncIndexSearchForDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancelSubscribedAsyncIndexSearchForDelegate_( Handle, CachedSelectors.cancelSubscribedAsyncIndexSearchForDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject categories() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.categories( Handle, CachedSelectors.categories, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void clearTemporaryCaches() {
			RuntimeObject ___occuredException;
			NativeMethods.clearTemporaryCaches( Handle, CachedSelectors.clearTemporaryCaches, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void databaseChangedExternally_( NObjective.RuntimeObject externally ) {
			RuntimeObject ___occuredException;
			NativeMethods.databaseChangedExternally_( Handle, CachedSelectors.databaseChangedExternally_, out ___occuredException, sizeof( NObjective.RuntimeObject ), externally );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char dblCheckPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dblCheckPath_( Handle, CachedSelectors.dblCheckPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string defaultCountryCode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultCountryCode( Handle, CachedSelectors.defaultCountryCode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public int defaultNameOrdering() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultNameOrdering( Handle, CachedSelectors.defaultNameOrdering, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void disconnect_( NObjective.RuntimeObject disconnect ) {
			RuntimeObject ___occuredException;
			NativeMethods.disconnect_( Handle, CachedSelectors.disconnect_, out ___occuredException, sizeof( NObjective.RuntimeObject ), disconnect );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char doesPropertyExist_inTable_( NObjective.RuntimeObject exist, NObjective.RuntimeObject inTable ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doesPropertyExist_inTable_( Handle, CachedSelectors.doesPropertyExist_inTable_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), exist, inTable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char fileManager_shouldProceedAfterError_( NObjective.RuntimeObject manager, NObjective.RuntimeObject shouldProceedAfterError ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileManager_shouldProceedAfterError_( Handle, CachedSelectors.fileManager_shouldProceedAfterError_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), manager, shouldProceedAfterError );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSAttributedString formattedAddressFromDictionary_( NSDictionary dictionary ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.formattedAddressFromDictionary_( Handle, CachedSelectors.formattedAddressFromDictionary_, out ___occuredException, sizeof( NSDictionary ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSAttributedString( ___result );
		}
		unsafe public NSArray groups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groups( Handle, CachedSelectors.groups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NObjective.RuntimeObject groupsAtRemoteLocation_( NObjective.RuntimeObject location ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupsAtRemoteLocation_( Handle, CachedSelectors.groupsAtRemoteLocation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), location );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool hasUnsavedChanges() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasUnsavedChanges( Handle, CachedSelectors.hasUnsavedChanges, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isPublished() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isPublished( Handle, CachedSelectors.isPublished, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void launchABDForSyncing() {
			RuntimeObject ___occuredException;
			NativeMethods.launchABDForSyncing( Handle, CachedSelectors.launchABDForSyncing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char launchABDIfNeeded() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.launchABDIfNeeded( Handle, CachedSelectors.launchABDIfNeeded, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject localizedDefaults() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.localizedDefaults( Handle, CachedSelectors.localizedDefaults, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject logs() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.logs( Handle, CachedSelectors.logs, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject mailRecentForEmail_( NObjective.RuntimeObject email ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mailRecentForEmail_( Handle, CachedSelectors.mailRecentForEmail_, out ___occuredException, sizeof( NObjective.RuntimeObject ), email );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject mailRecents() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mailRecents( Handle, CachedSelectors.mailRecents, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject mailRecentsMatching_( NObjective.RuntimeObject matching ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mailRecentsMatching_( Handle, CachedSelectors.mailRecentsMatching_, out ___occuredException, sizeof( NObjective.RuntimeObject ), matching );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public ABPerson me() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.me( Handle, CachedSelectors.me, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new ABPerson( ___result );
		}
		unsafe public int nts_AddPropertiesAndTypes_toTable_needsReadWriteMode_registerDataTypes_( NObjective.RuntimeObject types, NObjective.RuntimeObject toTable, char needsReadWriteMode, char registerDataTypes ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_AddPropertiesAndTypes_toTable_needsReadWriteMode_registerDataTypes_( Handle, CachedSelectors.nts_AddPropertiesAndTypes_toTable_needsReadWriteMode_registerDataTypes_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ), types, toTable, needsReadWriteMode, registerDataTypes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_AddRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_AddRecord_( Handle, CachedSelectors.nts_AddRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_AddTable_withPropertiesAndTypes_needsReadWriteMode_( NObjective.RuntimeObject table, NObjective.RuntimeObject withPropertiesAndTypes, char needsReadWriteMode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_AddTable_withPropertiesAndTypes_needsReadWriteMode_( Handle, CachedSelectors.nts_AddTable_withPropertiesAndTypes_needsReadWriteMode_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), table, withPropertiesAndTypes, needsReadWriteMode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_AddTable_withPropertiesAndTypes_needsReadWriteMode_registerDataTypes_neededRegistering_( NObjective.RuntimeObject table, NObjective.RuntimeObject withPropertiesAndTypes, char needsReadWriteMode, char registerDataTypes, System.IntPtr neededRegistering ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_AddTable_withPropertiesAndTypes_needsReadWriteMode_registerDataTypes_neededRegistering_( Handle, CachedSelectors.nts_AddTable_withPropertiesAndTypes_needsReadWriteMode_registerDataTypes_neededRegistering_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ) + sizeof( System.IntPtr ), table, withPropertiesAndTypes, needsReadWriteMode, registerDataTypes, neededRegistering );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void nts_AddToModifiedRecordsList_( NObjective.RuntimeObject list ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_AddToModifiedRecordsList_( Handle, CachedSelectors.nts_AddToModifiedRecordsList_, out ___occuredException, sizeof( NObjective.RuntimeObject ), list );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_CacheDataFileSchema() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_CacheDataFileSchema( Handle, CachedSelectors.nts_CacheDataFileSchema, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nts_CachedRecordWithUID_( NObjective.RuntimeObject uid ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_CachedRecordWithUID_( Handle, CachedSelectors.nts_CachedRecordWithUID_, out ___occuredException, sizeof( NObjective.RuntimeObject ), uid );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_CacheNewRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_CacheNewRecord_( Handle, CachedSelectors.nts_CacheNewRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_CacheRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_CacheRecord_( Handle, CachedSelectors.nts_CacheRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_Cleanup() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_Cleanup( Handle, CachedSelectors.nts_Cleanup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_ConvertPumaAddressBook() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_ConvertPumaAddressBook( Handle, CachedSelectors.nts_ConvertPumaAddressBook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char nts_DoesPropertyExist_inTable_( NObjective.RuntimeObject exist, NObjective.RuntimeObject inTable ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_DoesPropertyExist_inTable_( Handle, CachedSelectors.nts_DoesPropertyExist_inTable_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), exist, inTable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nts_Groups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_Groups( Handle, CachedSelectors.nts_Groups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_ImportMacBuddyMeCard() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_ImportMacBuddyMeCard( Handle, CachedSelectors.nts_ImportMacBuddyMeCard, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_ImportTipCards() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_ImportTipCards( Handle, CachedSelectors.nts_ImportTipCards, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nts_InitDefaultContactManager() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_InitDefaultContactManager( Handle, CachedSelectors.nts_InitDefaultContactManager, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts_IsPublished() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_IsPublished( Handle, CachedSelectors.nts_IsPublished, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_LaunchABDIfNeeded() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_LaunchABDIfNeeded( Handle, CachedSelectors.nts_LaunchABDIfNeeded, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nts_Me() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_Me( Handle, CachedSelectors.nts_Me, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts_OpenContactManagerWithMode_cacheSchema_( int mode, char cacheSchema ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_OpenContactManagerWithMode_cacheSchema_( Handle, CachedSelectors.nts_OpenContactManagerWithMode_cacheSchema_, out ___occuredException, sizeof( int ) + sizeof( char ), mode, cacheSchema );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nts_PropertiesForTable_( NObjective.RuntimeObject table ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_PropertiesForTable_( Handle, CachedSelectors.nts_PropertiesForTable_, out ___occuredException, sizeof( NObjective.RuntimeObject ), table );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_Reconnect() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_Reconnect( Handle, CachedSelectors.nts_Reconnect, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nts_RecordForRow_table_( int row, NObjective.RuntimeObject table ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_RecordForRow_table_( Handle, CachedSelectors.nts_RecordForRow_table_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ), row, table );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_RecordForUniqueId_( NObjective.RuntimeObject id ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_RecordForUniqueId_( Handle, CachedSelectors.nts_RecordForUniqueId_, out ___occuredException, sizeof( NObjective.RuntimeObject ), id );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_RegisterQualifiedTable_forTable_hashView_( NObjective.RuntimeObject table, NObjective.RuntimeObject forTable, char hashView ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_RegisterQualifiedTable_forTable_hashView_( Handle, CachedSelectors.nts_RegisterQualifiedTable_forTable_hashView_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), table, forTable, hashView );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int nts_RemoveProperties_fromTable_( NObjective.RuntimeObject properties, NObjective.RuntimeObject fromTable ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_RemoveProperties_fromTable_( Handle, CachedSelectors.nts_RemoveProperties_fromTable_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), properties, fromTable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_RemoveRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_RemoveRecord_( Handle, CachedSelectors.nts_RemoveRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void nts_RestoreFromMetaDataIfNeeded() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_RestoreFromMetaDataIfNeeded( Handle, CachedSelectors.nts_RestoreFromMetaDataIfNeeded, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char nts_Save() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_Save( Handle, CachedSelectors.nts_Save, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_SaveAndTriggerSync_updateModificationDate_( char sync, NObjective.RuntimeObject updateModificationDate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SaveAndTriggerSync_updateModificationDate_( Handle, CachedSelectors.nts_SaveAndTriggerSync_updateModificationDate_, out ___occuredException, sizeof( char ) + sizeof( NObjective.RuntimeObject ), sync, updateModificationDate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_SaveWithFileLock_( char @lock ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SaveWithFileLock_( Handle, CachedSelectors.nts_SaveWithFileLock_, out ___occuredException, sizeof( char ), @lock );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_SaveWithFileLock_triggerSync_updateModificationDate_( char @lock, char triggerSync, NObjective.RuntimeObject updateModificationDate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SaveWithFileLock_triggerSync_updateModificationDate_( Handle, CachedSelectors.nts_SaveWithFileLock_triggerSync_updateModificationDate_, out ___occuredException, sizeof( char ) + sizeof( char ) + sizeof( NObjective.RuntimeObject ), @lock, triggerSync, updateModificationDate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nts_SchemaForTable_( NObjective.RuntimeObject table ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SchemaForTable_( Handle, CachedSelectors.nts_SchemaForTable_, out ___occuredException, sizeof( NObjective.RuntimeObject ), table );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_SetHasUnsavedChanges_( char changes ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_SetHasUnsavedChanges_( Handle, CachedSelectors.nts_SetHasUnsavedChanges_, out ___occuredException, sizeof( char ), changes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_SetMe_( NObjective.RuntimeObject me ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_SetMe_( Handle, CachedSelectors.nts_SetMe_, out ___occuredException, sizeof( NObjective.RuntimeObject ), me );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_SetNeedsToRestoreFromMetaData_( char data ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_SetNeedsToRestoreFromMetaData_( Handle, CachedSelectors.nts_SetNeedsToRestoreFromMetaData_, out ___occuredException, sizeof( char ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int nts_ShareCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_ShareCount( Handle, CachedSelectors.nts_ShareCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_ShouldLaunchABDForListening() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_ShouldLaunchABDForListening( Handle, CachedSelectors.nts_ShouldLaunchABDForListening, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_shouldUpdateDateRelatedSmartGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_shouldUpdateDateRelatedSmartGroups( Handle, CachedSelectors.nts_shouldUpdateDateRelatedSmartGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int nts_SyncCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SyncCount( Handle, CachedSelectors.nts_SyncCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void nts_syncGroupSmartGroupPropertiesWithLock_( char @lock ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_syncGroupSmartGroupPropertiesWithLock_( Handle, CachedSelectors.nts_syncGroupSmartGroupPropertiesWithLock_, out ___occuredException, sizeof( char ), @lock );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_SynchronizeCaches() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_SynchronizeCaches( Handle, CachedSelectors.nts_SynchronizeCaches, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char nts_SynchronizeData() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SynchronizeData( Handle, CachedSelectors.nts_SynchronizeData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_SynchronizeDataAndUpdateModificationDate_( NObjective.RuntimeObject date ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SynchronizeDataAndUpdateModificationDate_( Handle, CachedSelectors.nts_SynchronizeDataAndUpdateModificationDate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int nts_TypeOfProperty_forTable_( NObjective.RuntimeObject property, NObjective.RuntimeObject forTable ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_TypeOfProperty_forTable_( Handle, CachedSelectors.nts_TypeOfProperty_forTable_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, forTable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void nts_UncacheRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_UncacheRecord_( Handle, CachedSelectors.nts_UncacheRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_UpdateDatabaseSchemasWithLock_( char @lock ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_UpdateDatabaseSchemasWithLock_( Handle, CachedSelectors.nts_UpdateDatabaseSchemasWithLock_, out ___occuredException, sizeof( char ), @lock );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_UpdateDateRelatedSmartGroups() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_UpdateDateRelatedSmartGroups( Handle, CachedSelectors.nts_UpdateDateRelatedSmartGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_VerifyDotMacAccountMatchesSharedContent() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_VerifyDotMacAccountMatchesSharedContent( Handle, CachedSelectors.nts_VerifyDotMacAccountMatchesSharedContent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSArray people() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.people( Handle, CachedSelectors.people, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NObjective.RuntimeObject peopleAtRemoteLocation_( NObjective.RuntimeObject location ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.peopleAtRemoteLocation_( Handle, CachedSelectors.peopleAtRemoteLocation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), location );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string recordClassFromUniqueId_( string id ) {
			RuntimeObject ___occuredException;
			var ___wrappedid = Runtime.CreateStringProxy( id );
			var ___result = NativeMethods.recordClassFromUniqueId_( Handle, CachedSelectors.recordClassFromUniqueId_, out ___occuredException, sizeof( IntPtr ), ___wrappedid );
			Runtime.ReleaseNativeObject( ___wrappedid );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject recordClassFromUniqueID_( NObjective.RuntimeObject id ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.recordClassFromUniqueID_( Handle, CachedSelectors.recordClassFromUniqueID_, out ___occuredException, sizeof( NObjective.RuntimeObject ), id );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public ABRecord recordForUniqueId_( string id ) {
			RuntimeObject ___occuredException;
			var ___wrappedid = Runtime.CreateStringProxy( id );
			var ___result = NativeMethods.recordForUniqueId_( Handle, CachedSelectors.recordForUniqueId_, out ___occuredException, sizeof( IntPtr ), ___wrappedid );
			Runtime.ReleaseNativeObject( ___wrappedid );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new ABRecord( ___result );
		}
		unsafe public NSArray recordsMatchingSearchElement_( ABSearchElement element ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.recordsMatchingSearchElement_( Handle, CachedSelectors.recordsMatchingSearchElement_, out ___occuredException, sizeof( ABSearchElement ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NObjective.RuntimeObject recordsMatchingSearchElementNoHinting_( NObjective.RuntimeObject hinting ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.recordsMatchingSearchElementNoHinting_( Handle, CachedSelectors.recordsMatchingSearchElementNoHinting_, out ___occuredException, sizeof( NObjective.RuntimeObject ), hinting );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool removeRecord_( ABRecord record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeRecord_( Handle, CachedSelectors.removeRecord_, out ___occuredException, sizeof( ABRecord ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char revertToBackupFromPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.revertToBackupFromPath_( Handle, CachedSelectors.revertToBackupFromPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool save() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.save( Handle, CachedSelectors.save, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char saveAndTriggerSync_udpateModificationDate_( char sync, NObjective.RuntimeObject udpateModificationDate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.saveAndTriggerSync_udpateModificationDate_( Handle, CachedSelectors.saveAndTriggerSync_udpateModificationDate_, out ___occuredException, sizeof( char ) + sizeof( NObjective.RuntimeObject ), sync, udpateModificationDate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject searchIndexForRecordsMatching_( NObjective.RuntimeObject matching ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchIndexForRecordsMatching_( Handle, CachedSelectors.searchIndexForRecordsMatching_, out ___occuredException, sizeof( NObjective.RuntimeObject ), matching );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject searchIndexForSubscribedRecordsMatching_( NObjective.RuntimeObject matching ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchIndexForSubscribedRecordsMatching_( Handle, CachedSelectors.searchIndexForSubscribedRecordsMatching_, out ___occuredException, sizeof( NObjective.RuntimeObject ), matching );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setDefaultCountryCode_( NObjective.RuntimeObject code ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDefaultCountryCode_( Handle, CachedSelectors.setDefaultCountryCode_, out ___occuredException, sizeof( NObjective.RuntimeObject ), code );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMe_( ABPerson me ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMe_( Handle, CachedSelectors.setMe_, out ___occuredException, sizeof( ABPerson ), me );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShareCount_( int count ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShareCount_( Handle, CachedSelectors.setShareCount_, out ___occuredException, sizeof( int ), count );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSyncCount_( int count ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSyncCount_( Handle, CachedSelectors.setSyncCount_, out ___occuredException, sizeof( int ), count );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int shareCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shareCount( Handle, CachedSelectors.shareCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject subscribedGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subscribedGroups( Handle, CachedSelectors.subscribedGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject subscribedPeople() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subscribedPeople( Handle, CachedSelectors.subscribedPeople, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject subscriptions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subscriptions( Handle, CachedSelectors.subscriptions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int syncCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.syncCount( Handle, CachedSelectors.syncCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int typeOfProperty_forTable_( NObjective.RuntimeObject property, NObjective.RuntimeObject forTable ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.typeOfProperty_forTable_( Handle, CachedSelectors.typeOfProperty_forTable_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, forTable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void updateDateRelatedSmartGroups() {
			RuntimeObject ___occuredException;
			NativeMethods.updateDateRelatedSmartGroups( Handle, CachedSelectors.updateDateRelatedSmartGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void validateMetaData() {
			RuntimeObject ___occuredException;
			NativeMethods.validateMetaData( Handle, CachedSelectors.validateMetaData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int version() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.version( Handle, CachedSelectors.version, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool addRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ABRecord record );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr addressBookCompactedDataFile( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr addressBookDataFile( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr addressBookDirectory( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr addressBookImagesDirectory( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr addressBookLockFile( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr addressBookSaveFile( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr addressFormats( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char backupDatabaseToPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char beginAsyncIndexSearchForRecordsMatching_withDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject matching, NObjective.RuntimeObject withDelegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char beginAsyncIndexSearchForSubscribedRecordsMatching_withDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject matching, NObjective.RuntimeObject withDelegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancelAsyncIndexSearchForDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancelSubscribedAsyncIndexSearchForDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr categories( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clearTemporaryCaches( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void databaseChangedExternally_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject externally );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char dblCheckPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultCountryCode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int defaultNameOrdering( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void disconnect_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject disconnect );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char doesPropertyExist_inTable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject exist, NObjective.RuntimeObject inTable );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char fileManager_shouldProceedAfterError_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject manager, NObjective.RuntimeObject shouldProceedAfterError );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr formattedAddressFromDictionary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary dictionary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr groups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr groupsAtRemoteLocation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject location );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool hasUnsavedChanges( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isPublished( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isUsingDefaultAddressBookDirectory( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void launchABDForSyncing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char launchABDIfNeeded( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr localizedDefaults( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr logs( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mailRecentForEmail_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject email );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mailRecents( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mailRecentsMatching_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject matching );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr me( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int nts_AddPropertiesAndTypes_toTable_needsReadWriteMode_registerDataTypes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject types, NObjective.RuntimeObject toTable, char needsReadWriteMode, char registerDataTypes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_AddRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_AddTable_withPropertiesAndTypes_needsReadWriteMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject table, NObjective.RuntimeObject withPropertiesAndTypes, char needsReadWriteMode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_AddTable_withPropertiesAndTypes_needsReadWriteMode_registerDataTypes_neededRegistering_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject table, NObjective.RuntimeObject withPropertiesAndTypes, char needsReadWriteMode, char registerDataTypes, System.IntPtr neededRegistering );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_AddToModifiedRecordsList_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject list );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_CacheDataFileSchema( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_CachedRecordWithUID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject uid );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_CacheNewRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_CacheRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_Cleanup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_ConvertPumaAddressBook( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_CreateSharedAddressBook( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_DoesPropertyExist_inTable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject exist, NObjective.RuntimeObject inTable );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_Groups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_hasSharedInstance( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_ImportMacBuddyMeCard( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_ImportTipCards( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_InitDefaultContactManager( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_IsPublished( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_LaunchABDIfNeeded( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_Me( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_OpenContactManagerWithMode_cacheSchema_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int mode, char cacheSchema );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_PropertiesForTable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject table );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_Reconnect( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_RecordForRow_table_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row, NObjective.RuntimeObject table );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_RecordForUniqueId_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_RegisterQualifiedTable_forTable_hashView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject table, NObjective.RuntimeObject forTable, char hashView );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int nts_RemoveProperties_fromTable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject properties, NObjective.RuntimeObject fromTable );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_RemoveRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_RestoreFromMetaDataIfNeeded( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_Save( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_SaveAndTriggerSync_updateModificationDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char sync, NObjective.RuntimeObject updateModificationDate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_SaveWithFileLock_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @lock );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_SaveWithFileLock_triggerSync_updateModificationDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @lock, char triggerSync, NObjective.RuntimeObject updateModificationDate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_SchemaForTable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject table );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_SetHasUnsavedChanges_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char changes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_SetMe_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject me );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_SetNeedsToRestoreFromMetaData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_setupTables( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int nts_ShareCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_SharedAddressBook( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_ShouldLaunchABDForListening( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_shouldUpdateDateRelatedSmartGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int nts_SyncCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_syncGroupSmartGroupPropertiesWithLock_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @lock );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_SynchronizeCaches( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_SynchronizeData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_SynchronizeDataAndUpdateModificationDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject date );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int nts_TypeOfProperty_forTable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject forTable );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_UncacheRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_UpdateDatabaseSchemasWithLock_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @lock );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_UpdateDateRelatedSmartGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_VerifyDotMacAccountMatchesSharedContent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr people( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr peopleAtRemoteLocation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject location );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr recordClassFromUniqueId_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr id );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr recordClassFromUniqueID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr recordForUniqueId_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr id );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr recordsMatchingSearchElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ABSearchElement element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr recordsMatchingSearchElementNoHinting_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject hinting );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool removeRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ABRecord record );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char revertToBackupFromPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool save( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char saveAndTriggerSync_udpateModificationDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char sync, NObjective.RuntimeObject udpateModificationDate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr searchIndexForRecordsMatching_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject matching );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr searchIndexForSubscribedRecordsMatching_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject matching );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAddressBookDirectory_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject directory );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDefaultCountryCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject code );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMe_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ABPerson me );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setShareCount_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int count );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSyncCount_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int count );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int shareCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedAddressBook( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr subscribedGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr subscribedPeople( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr subscriptions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int syncCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int typeOfProperty_forTable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject forTable );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateDateRelatedSmartGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void validateMetaData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int version( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addRecord_ = "addRecord:";
			public static readonly Selector addressBookCompactedDataFile = "addressBookCompactedDataFile";
			public static readonly Selector addressBookDataFile = "addressBookDataFile";
			public static readonly Selector addressBookDirectory = "addressBookDirectory";
			public static readonly Selector addressBookImagesDirectory = "addressBookImagesDirectory";
			public static readonly Selector addressBookLockFile = "addressBookLockFile";
			public static readonly Selector addressBookSaveFile = "addressBookSaveFile";
			public static readonly Selector addressFormats = "addressFormats";
			public static readonly Selector backupDatabaseToPath_ = "backupDatabaseToPath:";
			public static readonly Selector beginAsyncIndexSearchForRecordsMatching_withDelegate_ = "beginAsyncIndexSearchForRecordsMatching:withDelegate:";
			public static readonly Selector beginAsyncIndexSearchForSubscribedRecordsMatching_withDelegate_ = "beginAsyncIndexSearchForSubscribedRecordsMatching:withDelegate:";
			public static readonly Selector cancelAsyncIndexSearchForDelegate_ = "cancelAsyncIndexSearchForDelegate:";
			public static readonly Selector cancelSubscribedAsyncIndexSearchForDelegate_ = "cancelSubscribedAsyncIndexSearchForDelegate:";
			public static readonly Selector categories = "categories";
			public static readonly Selector clearTemporaryCaches = "clearTemporaryCaches";
			public static readonly Selector databaseChangedExternally_ = "databaseChangedExternally:";
			public static readonly Selector dblCheckPath_ = "dblCheckPath:";
			public static readonly Selector defaultCountryCode = "defaultCountryCode";
			public static readonly Selector defaultNameOrdering = "defaultNameOrdering";
			public static readonly Selector disconnect_ = "disconnect:";
			public static readonly Selector doesPropertyExist_inTable_ = "doesPropertyExist:inTable:";
			public static readonly Selector fileManager_shouldProceedAfterError_ = "fileManager:shouldProceedAfterError:";
			public static readonly Selector formattedAddressFromDictionary_ = "formattedAddressFromDictionary:";
			public static readonly Selector groups = "groups";
			public static readonly Selector groupsAtRemoteLocation_ = "groupsAtRemoteLocation:";
			public static readonly Selector hasUnsavedChanges = "hasUnsavedChanges";
			public static readonly Selector isPublished = "isPublished";
			public static readonly Selector isUsingDefaultAddressBookDirectory = "isUsingDefaultAddressBookDirectory";
			public static readonly Selector launchABDForSyncing = "launchABDForSyncing";
			public static readonly Selector launchABDIfNeeded = "launchABDIfNeeded";
			public static readonly Selector localizedDefaults = "localizedDefaults";
			public static readonly Selector logs = "logs";
			public static readonly Selector mailRecentForEmail_ = "mailRecentForEmail:";
			public static readonly Selector mailRecents = "mailRecents";
			public static readonly Selector mailRecentsMatching_ = "mailRecentsMatching:";
			public static readonly Selector me = "me";
			public static readonly Selector nts_AddPropertiesAndTypes_toTable_needsReadWriteMode_registerDataTypes_ = "nts_AddPropertiesAndTypes:toTable:needsReadWriteMode:registerDataTypes:";
			public static readonly Selector nts_AddRecord_ = "nts_AddRecord:";
			public static readonly Selector nts_AddTable_withPropertiesAndTypes_needsReadWriteMode_ = "nts_AddTable:withPropertiesAndTypes:needsReadWriteMode:";
			public static readonly Selector nts_AddTable_withPropertiesAndTypes_needsReadWriteMode_registerDataTypes_neededRegistering_ = "nts_AddTable:withPropertiesAndTypes:needsReadWriteMode:registerDataTypes:neededRegistering:";
			public static readonly Selector nts_AddToModifiedRecordsList_ = "nts_AddToModifiedRecordsList:";
			public static readonly Selector nts_CacheDataFileSchema = "nts_CacheDataFileSchema";
			public static readonly Selector nts_CachedRecordWithUID_ = "nts_CachedRecordWithUID:";
			public static readonly Selector nts_CacheNewRecord_ = "nts_CacheNewRecord:";
			public static readonly Selector nts_CacheRecord_ = "nts_CacheRecord:";
			public static readonly Selector nts_Cleanup = "nts_Cleanup";
			public static readonly Selector nts_ConvertPumaAddressBook = "nts_ConvertPumaAddressBook";
			public static readonly Selector nts_CreateSharedAddressBook = "nts_CreateSharedAddressBook";
			public static readonly Selector nts_DoesPropertyExist_inTable_ = "nts_DoesPropertyExist:inTable:";
			public static readonly Selector nts_Groups = "nts_Groups";
			public static readonly Selector nts_hasSharedInstance = "nts_hasSharedInstance";
			public static readonly Selector nts_ImportMacBuddyMeCard = "nts_ImportMacBuddyMeCard";
			public static readonly Selector nts_ImportTipCards = "nts_ImportTipCards";
			public static readonly Selector nts_InitDefaultContactManager = "nts_InitDefaultContactManager";
			public static readonly Selector nts_IsPublished = "nts_IsPublished";
			public static readonly Selector nts_LaunchABDIfNeeded = "nts_LaunchABDIfNeeded";
			public static readonly Selector nts_Me = "nts_Me";
			public static readonly Selector nts_OpenContactManagerWithMode_cacheSchema_ = "nts_OpenContactManagerWithMode:cacheSchema:";
			public static readonly Selector nts_PropertiesForTable_ = "nts_PropertiesForTable:";
			public static readonly Selector nts_Reconnect = "nts_Reconnect";
			public static readonly Selector nts_RecordForRow_table_ = "nts_RecordForRow:table:";
			public static readonly Selector nts_RecordForUniqueId_ = "nts_RecordForUniqueId:";
			public static readonly Selector nts_RegisterQualifiedTable_forTable_hashView_ = "nts_RegisterQualifiedTable:forTable:hashView:";
			public static readonly Selector nts_RemoveProperties_fromTable_ = "nts_RemoveProperties:fromTable:";
			public static readonly Selector nts_RemoveRecord_ = "nts_RemoveRecord:";
			public static readonly Selector nts_RestoreFromMetaDataIfNeeded = "nts_RestoreFromMetaDataIfNeeded";
			public static readonly Selector nts_Save = "nts_Save";
			public static readonly Selector nts_SaveAndTriggerSync_updateModificationDate_ = "nts_SaveAndTriggerSync:updateModificationDate:";
			public static readonly Selector nts_SaveWithFileLock_ = "nts_SaveWithFileLock:";
			public static readonly Selector nts_SaveWithFileLock_triggerSync_updateModificationDate_ = "nts_SaveWithFileLock:triggerSync:updateModificationDate:";
			public static readonly Selector nts_SchemaForTable_ = "nts_SchemaForTable:";
			public static readonly Selector nts_SetHasUnsavedChanges_ = "nts_SetHasUnsavedChanges:";
			public static readonly Selector nts_SetMe_ = "nts_SetMe:";
			public static readonly Selector nts_SetNeedsToRestoreFromMetaData_ = "nts_SetNeedsToRestoreFromMetaData:";
			public static readonly Selector nts_setupTables = "nts_setupTables";
			public static readonly Selector nts_ShareCount = "nts_ShareCount";
			public static readonly Selector nts_SharedAddressBook = "nts_SharedAddressBook";
			public static readonly Selector nts_ShouldLaunchABDForListening = "nts_ShouldLaunchABDForListening";
			public static readonly Selector nts_shouldUpdateDateRelatedSmartGroups = "nts_shouldUpdateDateRelatedSmartGroups";
			public static readonly Selector nts_SyncCount = "nts_SyncCount";
			public static readonly Selector nts_syncGroupSmartGroupPropertiesWithLock_ = "nts_syncGroupSmartGroupPropertiesWithLock:";
			public static readonly Selector nts_SynchronizeCaches = "nts_SynchronizeCaches";
			public static readonly Selector nts_SynchronizeData = "nts_SynchronizeData";
			public static readonly Selector nts_SynchronizeDataAndUpdateModificationDate_ = "nts_SynchronizeDataAndUpdateModificationDate:";
			public static readonly Selector nts_TypeOfProperty_forTable_ = "nts_TypeOfProperty:forTable:";
			public static readonly Selector nts_UncacheRecord_ = "nts_UncacheRecord:";
			public static readonly Selector nts_UpdateDatabaseSchemasWithLock_ = "nts_UpdateDatabaseSchemasWithLock:";
			public static readonly Selector nts_UpdateDateRelatedSmartGroups = "nts_UpdateDateRelatedSmartGroups";
			public static readonly Selector nts_VerifyDotMacAccountMatchesSharedContent = "nts_VerifyDotMacAccountMatchesSharedContent";
			public static readonly Selector people = "people";
			public static readonly Selector peopleAtRemoteLocation_ = "peopleAtRemoteLocation:";
			public static readonly Selector recordClassFromUniqueId_ = "recordClassFromUniqueId:";
			public static readonly Selector recordClassFromUniqueID_ = "recordClassFromUniqueID:";
			public static readonly Selector recordForUniqueId_ = "recordForUniqueId:";
			public static readonly Selector recordsMatchingSearchElement_ = "recordsMatchingSearchElement:";
			public static readonly Selector recordsMatchingSearchElementNoHinting_ = "recordsMatchingSearchElementNoHinting:";
			public static readonly Selector removeRecord_ = "removeRecord:";
			public static readonly Selector revertToBackupFromPath_ = "revertToBackupFromPath:";
			public static readonly Selector save = "save";
			public static readonly Selector saveAndTriggerSync_udpateModificationDate_ = "saveAndTriggerSync:udpateModificationDate:";
			public static readonly Selector searchIndexForRecordsMatching_ = "searchIndexForRecordsMatching:";
			public static readonly Selector searchIndexForSubscribedRecordsMatching_ = "searchIndexForSubscribedRecordsMatching:";
			public static readonly Selector setAddressBookDirectory_ = "setAddressBookDirectory:";
			public static readonly Selector setDefaultCountryCode_ = "setDefaultCountryCode:";
			public static readonly Selector setMe_ = "setMe:";
			public static readonly Selector setShareCount_ = "setShareCount:";
			public static readonly Selector setSyncCount_ = "setSyncCount:";
			public static readonly Selector shareCount = "shareCount";
			public static readonly Selector sharedAddressBook = "sharedAddressBook";
			public static readonly Selector subscribedGroups = "subscribedGroups";
			public static readonly Selector subscribedPeople = "subscribedPeople";
			public static readonly Selector subscriptions = "subscriptions";
			public static readonly Selector syncCount = "syncCount";
			public static readonly Selector typeOfProperty_forTable_ = "typeOfProperty:forTable:";
			public static readonly Selector updateDateRelatedSmartGroups = "updateDateRelatedSmartGroups";
			public static readonly Selector validateMetaData = "validateMetaData";
			public static readonly Selector version = "version";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABGroupCommand ) )]
	public struct ABAddToGroupCommand : IEquatable<ABAddToGroupCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABAddToGroupCommand;
		public static implicit operator ABGroupCommand( ABAddToGroupCommand value ) {
			return new ABGroupCommand( value.Handle );
		}
		public static implicit operator ABCommand( ABAddToGroupCommand value ) {
			return new ABCommand( value.Handle );
		}
		public static implicit operator NSObject( ABAddToGroupCommand value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABAddToGroupCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABAddToGroupCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABAddToGroupCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABAddToGroupCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABAddToGroupCommand value1, ABAddToGroupCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABAddToGroupCommand value1, ABAddToGroupCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABAddToGroupCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABAddToGroupCommand alloc() {
			return new ABAddToGroupCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithGroup_records_assimilatedMap_( NObjective.RuntimeObject @group, NObjective.RuntimeObject records, NObjective.RuntimeObject assimilatedMap ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithGroup_records_assimilatedMap_( Handle, CachedSelectors.initWithGroup_records_assimilatedMap_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @group, records, assimilatedMap );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithGroup_records_assimilatedMap_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject records, NObjective.RuntimeObject assimilatedMap );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithGroup_records_assimilatedMap_ = "initWithGroup:records:assimilatedMap:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABGroup ) )]
	public struct ABAllGroup : IEquatable<ABAllGroup> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABAllGroup;
		public static implicit operator ABGroup( ABAllGroup value ) {
			return new ABGroup( value.Handle );
		}
		public static implicit operator ABRecord( ABAllGroup value ) {
			return new ABRecord( value.Handle );
		}
		public static implicit operator NSObject( ABAllGroup value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABAllGroup value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABAllGroup value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABAllGroup?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABAllGroup value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABAllGroup value1, ABAllGroup value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABAllGroup value1, ABAllGroup value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABAllGroup( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABAllGroup alloc() {
			return new ABAllGroup( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject allGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allGroup( ClassHandle, CachedSelectors.allGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject allGroupForRemoteLocation_( NObjective.RuntimeObject location ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allGroupForRemoteLocation_( ClassHandle, CachedSelectors.allGroupForRemoteLocation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), location );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithRemoteLocation_( NObjective.RuntimeObject location ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithRemoteLocation_( Handle, CachedSelectors.initWithRemoteLocation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), location );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void markRecordWithGroupSubscription_( NObjective.RuntimeObject subscription ) {
			RuntimeObject ___occuredException;
			NativeMethods.markRecordWithGroupSubscription_( Handle, CachedSelectors.markRecordWithGroupSubscription_, out ___occuredException, sizeof( NObjective.RuntimeObject ), subscription );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char removeValueforProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeValueforProperty_( Handle, CachedSelectors.removeValueforProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject subscription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subscription( Handle, CachedSelectors.subscription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allGroup( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allGroupForRemoteLocation_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject location );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithRemoteLocation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject location );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void markRecordWithGroupSubscription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject subscription );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char removeValueforProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr subscription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector allGroup = "allGroup";
			public static readonly Selector allGroupForRemoteLocation_ = "allGroupForRemoteLocation:";
			public static readonly Selector initWithRemoteLocation_ = "initWithRemoteLocation:";
			public static readonly Selector markRecordWithGroupSubscription_ = "markRecordWithGroupSubscription:";
			public static readonly Selector removeValueforProperty_ = "removeValueforProperty:";
			public static readonly Selector subscription = "subscription";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABAuthenticationInfo : IEquatable<ABAuthenticationInfo> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABAuthenticationInfo;
		public static implicit operator NSObject( ABAuthenticationInfo value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABAuthenticationInfo value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABAuthenticationInfo value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABAuthenticationInfo?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABAuthenticationInfo value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABAuthenticationInfo value1, ABAuthenticationInfo value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABAuthenticationInfo value1, ABAuthenticationInfo value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABAuthenticationInfo( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABAuthenticationInfo alloc() {
			return new ABAuthenticationInfo( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSButtonCell ) )]
	public struct ABBackgroundImageButtonCell : IEquatable<ABBackgroundImageButtonCell> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABBackgroundImageButtonCell;
		public static implicit operator NSButtonCell( ABBackgroundImageButtonCell value ) {
			return new NSButtonCell( value.Handle );
		}
		public static implicit operator NSActionCell( ABBackgroundImageButtonCell value ) {
			return new NSActionCell( value.Handle );
		}
		public static implicit operator NSCell( ABBackgroundImageButtonCell value ) {
			return new NSCell( value.Handle );
		}
		public static implicit operator NSObject( ABBackgroundImageButtonCell value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABBackgroundImageButtonCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABBackgroundImageButtonCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABBackgroundImageButtonCell?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABBackgroundImageButtonCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABBackgroundImageButtonCell value1, ABBackgroundImageButtonCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABBackgroundImageButtonCell value1, ABBackgroundImageButtonCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABBackgroundImageButtonCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABBackgroundImageButtonCell alloc() {
			return new ABBackgroundImageButtonCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject selectedImageBackgroundPiece() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedImageBackgroundPiece( Handle, CachedSelectors.selectedImageBackgroundPiece, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject unSelectedImageBackgroundPiece() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.unSelectedImageBackgroundPiece( Handle, CachedSelectors.unSelectedImageBackgroundPiece, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedImageBackgroundPiece( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr unSelectedImageBackgroundPiece( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector selectedImageBackgroundPiece = "selectedImageBackgroundPiece";
			public static readonly Selector unSelectedImageBackgroundPiece = "unSelectedImageBackgroundPiece";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABBackupManager : IEquatable<ABBackupManager> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABBackupManager;
		public static implicit operator NSObject( ABBackupManager value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABBackupManager value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABBackupManager value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABBackupManager?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABBackupManager value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABBackupManager value1, ABBackupManager value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABBackupManager value1, ABBackupManager value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABBackupManager( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABBackupManager alloc() {
			return new ABBackupManager( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject backupFileExtension() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backupFileExtension( ClassHandle, CachedSelectors.backupFileExtension, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject defaultBackupFileName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultBackupFileName( ClassHandle, CachedSelectors.defaultBackupFileName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject defaultBackupFileNameConvertingFromHFSToPosix_( char posix ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultBackupFileNameConvertingFromHFSToPosix_( ClassHandle, CachedSelectors.defaultBackupFileNameConvertingFromHFSToPosix_, out ___occuredException, sizeof( char ), posix );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject defaultBackupManager() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultBackupManager( ClassHandle, CachedSelectors.defaultBackupManager, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject availableBackups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.availableBackups( Handle, CachedSelectors.availableBackups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char backupDatabaseToPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backupDatabaseToPath_( Handle, CachedSelectors.backupDatabaseToPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char backupDatabaseToPath_addBackupInfo_( NObjective.RuntimeObject path, char addBackupInfo ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backupDatabaseToPath_addBackupInfo_( Handle, CachedSelectors.backupDatabaseToPath_addBackupInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), path, addBackupInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject backupDirectory() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backupDirectory( Handle, CachedSelectors.backupDirectory, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject backupInfoDictionariesSortedByDate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backupInfoDictionariesSortedByDate( Handle, CachedSelectors.backupInfoDictionariesSortedByDate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject backupInfoForBackupAtPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backupInfoForBackupAtPath_( Handle, CachedSelectors.backupInfoForBackupAtPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char revertToBackupFromPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.revertToBackupFromPath_( Handle, CachedSelectors.revertToBackupFromPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char validateBackupFileAtPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validateBackupFileAtPath_( Handle, CachedSelectors.validateBackupFileAtPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr availableBackups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char backupDatabaseToPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char backupDatabaseToPath_addBackupInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path, char addBackupInfo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr backupDirectory( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr backupFileExtension( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr backupInfoDictionariesSortedByDate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr backupInfoForBackupAtPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultBackupFileName( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultBackupFileNameConvertingFromHFSToPosix_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char posix );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultBackupManager( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char revertToBackupFromPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char validateBackupFileAtPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
		}
		static internal class CachedSelectors {
			public static readonly Selector availableBackups = "availableBackups";
			public static readonly Selector backupDatabaseToPath_ = "backupDatabaseToPath:";
			public static readonly Selector backupDatabaseToPath_addBackupInfo_ = "backupDatabaseToPath:addBackupInfo:";
			public static readonly Selector backupDirectory = "backupDirectory";
			public static readonly Selector backupFileExtension = "backupFileExtension";
			public static readonly Selector backupInfoDictionariesSortedByDate = "backupInfoDictionariesSortedByDate";
			public static readonly Selector backupInfoForBackupAtPath_ = "backupInfoForBackupAtPath:";
			public static readonly Selector defaultBackupFileName = "defaultBackupFileName";
			public static readonly Selector defaultBackupFileNameConvertingFromHFSToPosix_ = "defaultBackupFileNameConvertingFromHFSToPosix:";
			public static readonly Selector defaultBackupManager = "defaultBackupManager";
			public static readonly Selector revertToBackupFromPath_ = "revertToBackupFromPath:";
			public static readonly Selector validateBackupFileAtPath_ = "validateBackupFileAtPath:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABBackupScheduler : IEquatable<ABBackupScheduler> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABBackupScheduler;
		public static implicit operator NSObject( ABBackupScheduler value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABBackupScheduler value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABBackupScheduler value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABBackupScheduler?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABBackupScheduler value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABBackupScheduler value1, ABBackupScheduler value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABBackupScheduler value1, ABBackupScheduler value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABBackupScheduler( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABBackupScheduler alloc() {
			return new ABBackupScheduler( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject backupScheduler() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backupScheduler( ClassHandle, CachedSelectors.backupScheduler, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char autoBackupEnabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.autoBackupEnabled( Handle, CachedSelectors.autoBackupEnabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int frequency() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.frequency( Handle, CachedSelectors.frequency, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject frequencyArgument() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.frequencyArgument( Handle, CachedSelectors.frequencyArgument, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char performScheduledBackup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.performScheduledBackup( Handle, CachedSelectors.performScheduledBackup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void read() {
			RuntimeObject ___occuredException;
			NativeMethods.read( Handle, CachedSelectors.read, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeCurrentSchedule() {
			RuntimeObject ___occuredException;
			NativeMethods.removeCurrentSchedule( Handle, CachedSelectors.removeCurrentSchedule, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char removeExtraBackupsForInterval_endingOn_andUpdateList_( double interval, NObjective.RuntimeObject endingOn, NObjective.RuntimeObject andUpdateList ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeExtraBackupsForInterval_endingOn_andUpdateList_( Handle, CachedSelectors.removeExtraBackupsForInterval_endingOn_andUpdateList_, out ___occuredException, sizeof( double ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), interval, endingOn, andUpdateList );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char removeExtraBackupsForMinimumTimeInterval_maximumTimeInterval_andUpdateList_( double interval, double maximumTimeInterval, NObjective.RuntimeObject andUpdateList ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeExtraBackupsForMinimumTimeInterval_maximumTimeInterval_andUpdateList_( Handle, CachedSelectors.removeExtraBackupsForMinimumTimeInterval_maximumTimeInterval_andUpdateList_, out ___occuredException, sizeof( double ) + sizeof( double ) + sizeof( NObjective.RuntimeObject ), interval, maximumTimeInterval, andUpdateList );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void removeOldBackups_( NObjective.RuntimeObject backups ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeOldBackups_( Handle, CachedSelectors.removeOldBackups_, out ___occuredException, sizeof( NObjective.RuntimeObject ), backups );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void rescheduleWithFrequency_( int frequency ) {
			RuntimeObject ___occuredException;
			NativeMethods.rescheduleWithFrequency_( Handle, CachedSelectors.rescheduleWithFrequency_, out ___occuredException, sizeof( int ), frequency );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject scheduledDate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scheduledDate( Handle, CachedSelectors.scheduledDate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAutoBackupEnabled_( char enabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAutoBackupEnabled_( Handle, CachedSelectors.setAutoBackupEnabled_, out ___occuredException, sizeof( char ), enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFrequency_( int frequency ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFrequency_( Handle, CachedSelectors.setFrequency_, out ___occuredException, sizeof( int ), frequency );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setScheduledDate_( NObjective.RuntimeObject date ) {
			RuntimeObject ___occuredException;
			NativeMethods.setScheduledDate_( Handle, CachedSelectors.setScheduledDate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void write() {
			RuntimeObject ___occuredException;
			NativeMethods.write( Handle, CachedSelectors.write, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char autoBackupEnabled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr backupScheduler( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int frequency( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr frequencyArgument( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char performScheduledBackup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void read( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeCurrentSchedule( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char removeExtraBackupsForInterval_endingOn_andUpdateList_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double interval, NObjective.RuntimeObject endingOn, NObjective.RuntimeObject andUpdateList );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char removeExtraBackupsForMinimumTimeInterval_maximumTimeInterval_andUpdateList_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double interval, double maximumTimeInterval, NObjective.RuntimeObject andUpdateList );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeOldBackups_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject backups );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void rescheduleWithFrequency_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int frequency );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr scheduledDate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAutoBackupEnabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char enabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFrequency_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int frequency );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setScheduledDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject date );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void write( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector autoBackupEnabled = "autoBackupEnabled";
			public static readonly Selector backupScheduler = "backupScheduler";
			public static readonly Selector frequency = "frequency";
			public static readonly Selector frequencyArgument = "frequencyArgument";
			public static readonly Selector performScheduledBackup = "performScheduledBackup";
			public static readonly Selector read = "read";
			public static readonly Selector removeCurrentSchedule = "removeCurrentSchedule";
			public static readonly Selector removeExtraBackupsForInterval_endingOn_andUpdateList_ = "removeExtraBackupsForInterval:endingOn:andUpdateList:";
			public static readonly Selector removeExtraBackupsForMinimumTimeInterval_maximumTimeInterval_andUpdateList_ = "removeExtraBackupsForMinimumTimeInterval:maximumTimeInterval:andUpdateList:";
			public static readonly Selector removeOldBackups_ = "removeOldBackups:";
			public static readonly Selector rescheduleWithFrequency_ = "rescheduleWithFrequency:";
			public static readonly Selector scheduledDate = "scheduledDate";
			public static readonly Selector setAutoBackupEnabled_ = "setAutoBackupEnabled:";
			public static readonly Selector setFrequency_ = "setFrequency:";
			public static readonly Selector setScheduledDate_ = "setScheduledDate:";
			public static readonly Selector write = "write";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSView ) )]
	public struct ABBevellerView : IEquatable<ABBevellerView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABBevellerView;
		public static implicit operator NSView( ABBevellerView value ) {
			return new NSView( value.Handle );
		}
		public static implicit operator NSResponder( ABBevellerView value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABBevellerView value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABBevellerView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABBevellerView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABBevellerView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABBevellerView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABBevellerView value1, ABBevellerView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABBevellerView value1, ABBevellerView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABBevellerView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABBevellerView alloc() {
			return new ABBevellerView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABBuddyStatus : IEquatable<ABBuddyStatus> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABBuddyStatus;
		public static implicit operator NSObject( ABBuddyStatus value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABBuddyStatus value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABBuddyStatus value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABBuddyStatus?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABBuddyStatus value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABBuddyStatus value1, ABBuddyStatus value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABBuddyStatus value1, ABBuddyStatus value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABBuddyStatus( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABBuddyStatus alloc() {
			return new ABBuddyStatus( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject sharedBuddyStatus() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedBuddyStatus( ClassHandle, CachedSelectors.sharedBuddyStatus, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isAvaliable_( NObjective.RuntimeObject avaliable ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isAvaliable_( Handle, CachedSelectors.isAvaliable_, out ___occuredException, sizeof( NObjective.RuntimeObject ), avaliable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isHandleAvailable_( NObjective.RuntimeObject available ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isHandleAvailable_( Handle, CachedSelectors.isHandleAvailable_, out ___occuredException, sizeof( NObjective.RuntimeObject ), available );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isAvaliable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject avaliable );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isHandleAvailable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject available );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedBuddyStatus( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector isAvaliable_ = "isAvaliable:";
			public static readonly Selector isHandleAvailable_ = "isHandleAvailable:";
			public static readonly Selector sharedBuddyStatus = "sharedBuddyStatus";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSButtonCell ) )]
	public struct ABButtonCell : IEquatable<ABButtonCell> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABButtonCell;
		public static implicit operator NSButtonCell( ABButtonCell value ) {
			return new NSButtonCell( value.Handle );
		}
		public static implicit operator NSActionCell( ABButtonCell value ) {
			return new NSActionCell( value.Handle );
		}
		public static implicit operator NSCell( ABButtonCell value ) {
			return new NSCell( value.Handle );
		}
		public static implicit operator NSObject( ABButtonCell value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABButtonCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABButtonCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABButtonCell?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABButtonCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABButtonCell value1, ABButtonCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABButtonCell value1, ABButtonCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABButtonCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABButtonCell alloc() {
			return new ABButtonCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject disabledImageForControlTint_( int tint ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.disabledImageForControlTint_( Handle, CachedSelectors.disabledImageForControlTint_, out ___occuredException, sizeof( int ), tint );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject imageForControlTint_( int tint ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.imageForControlTint_( Handle, CachedSelectors.imageForControlTint_, out ___occuredException, sizeof( int ), tint );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject pressedImageForControlTint_( int tint ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pressedImageForControlTint_( Handle, CachedSelectors.pressedImageForControlTint_, out ___occuredException, sizeof( int ), tint );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedImageForControlTint_( int tint ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedImageForControlTint_( Handle, CachedSelectors.selectedImageForControlTint_, out ___occuredException, sizeof( int ), tint );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setDisabledImage_forControlTint_( NObjective.RuntimeObject image, int forControlTint ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDisabledImage_forControlTint_( Handle, CachedSelectors.setDisabledImage_forControlTint_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), image, forControlTint );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setImage_forControlTint_( NObjective.RuntimeObject image, int forControlTint ) {
			RuntimeObject ___occuredException;
			NativeMethods.setImage_forControlTint_( Handle, CachedSelectors.setImage_forControlTint_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), image, forControlTint );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPressedImage_forControlTint_( NObjective.RuntimeObject image, int forControlTint ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPressedImage_forControlTint_( Handle, CachedSelectors.setPressedImage_forControlTint_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), image, forControlTint );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedImage_forControlTint_( NObjective.RuntimeObject image, int forControlTint ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedImage_forControlTint_( Handle, CachedSelectors.setSelectedImage_forControlTint_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), image, forControlTint );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr disabledImageForControlTint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int tint );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr imageForControlTint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int tint );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pressedImageForControlTint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int tint );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedImageForControlTint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int tint );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDisabledImage_forControlTint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image, int forControlTint );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setImage_forControlTint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image, int forControlTint );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPressedImage_forControlTint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image, int forControlTint );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSelectedImage_forControlTint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image, int forControlTint );
		}
		static internal class CachedSelectors {
			public static readonly Selector disabledImageForControlTint_ = "disabledImageForControlTint:";
			public static readonly Selector imageForControlTint_ = "imageForControlTint:";
			public static readonly Selector pressedImageForControlTint_ = "pressedImageForControlTint:";
			public static readonly Selector selectedImageForControlTint_ = "selectedImageForControlTint:";
			public static readonly Selector setDisabledImage_forControlTint_ = "setDisabledImage:forControlTint:";
			public static readonly Selector setImage_forControlTint_ = "setImage:forControlTint:";
			public static readonly Selector setPressedImage_forControlTint_ = "setPressedImage:forControlTint:";
			public static readonly Selector setSelectedImage_forControlTint_ = "setSelectedImage:forControlTint:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABBevellerView ) )]
	public struct ABCardBackgroundView : IEquatable<ABCardBackgroundView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCardBackgroundView;
		public static implicit operator ABBevellerView( ABCardBackgroundView value ) {
			return new ABBevellerView( value.Handle );
		}
		public static implicit operator NSView( ABCardBackgroundView value ) {
			return new NSView( value.Handle );
		}
		public static implicit operator NSResponder( ABCardBackgroundView value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABCardBackgroundView value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABCardBackgroundView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCardBackgroundView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABCardBackgroundView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABCardBackgroundView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCardBackgroundView value1, ABCardBackgroundView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCardBackgroundView value1, ABCardBackgroundView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCardBackgroundView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCardBackgroundView alloc() {
			return new ABCardBackgroundView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSRulerView ) )]
	public struct ABCardItemRuler : IEquatable<ABCardItemRuler> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCardItemRuler;
		public static implicit operator NSRulerView( ABCardItemRuler value ) {
			return new NSRulerView( value.Handle );
		}
		public static implicit operator NSView( ABCardItemRuler value ) {
			return new NSView( value.Handle );
		}
		public static implicit operator NSResponder( ABCardItemRuler value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABCardItemRuler value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABCardItemRuler value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCardItemRuler value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABCardItemRuler?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABCardItemRuler value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCardItemRuler value1, ABCardItemRuler value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCardItemRuler value1, ABCardItemRuler value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCardItemRuler( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCardItemRuler alloc() {
			return new ABCardItemRuler( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject accessibleChildren() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibleChildren( Handle, CachedSelectors.accessibleChildren, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void prepareForDifferentCard() {
			RuntimeObject ___occuredException;
			NativeMethods.prepareForDifferentCard( Handle, CachedSelectors.prepareForDifferentCard, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShouldUpdateMarkers_( char markers ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShouldUpdateMarkers_( Handle, CachedSelectors.setShouldUpdateMarkers_, out ___occuredException, sizeof( char ), markers );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateMarkers() {
			RuntimeObject ___occuredException;
			NativeMethods.updateMarkers( Handle, CachedSelectors.updateMarkers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibleChildren( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void prepareForDifferentCard( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setShouldUpdateMarkers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char markers );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateMarkers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector accessibleChildren = "accessibleChildren";
			public static readonly Selector prepareForDifferentCard = "prepareForDifferentCard";
			public static readonly Selector setShouldUpdateMarkers_ = "setShouldUpdateMarkers:";
			public static readonly Selector updateMarkers = "updateMarkers";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABAccessibilityMockUIElement ) )]
	public struct ABCardItemRulerAccessibilityElement : IEquatable<ABCardItemRulerAccessibilityElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCardItemRulerAccessibilityElement;
		public static implicit operator ABAccessibilityMockUIElement( ABCardItemRulerAccessibilityElement value ) {
			return new ABAccessibilityMockUIElement( value.Handle );
		}
		public static implicit operator NSObject( ABCardItemRulerAccessibilityElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABCardItemRulerAccessibilityElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCardItemRulerAccessibilityElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABCardItemRulerAccessibilityElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABCardItemRulerAccessibilityElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCardItemRulerAccessibilityElement value1, ABCardItemRulerAccessibilityElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCardItemRulerAccessibilityElement value1, ABCardItemRulerAccessibilityElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCardItemRulerAccessibilityElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCardItemRulerAccessibilityElement alloc() {
			return new ABCardItemRulerAccessibilityElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithRole_parent_marker_( NObjective.RuntimeObject role, NObjective.RuntimeObject parent, NObjective.RuntimeObject marker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithRole_parent_marker_( Handle, CachedSelectors.initWithRole_parent_marker_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), role, parent, marker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject marker() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.marker( Handle, CachedSelectors.marker, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithRole_parent_marker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject role, NObjective.RuntimeObject parent, NObjective.RuntimeObject marker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr marker( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithRole_parent_marker_ = "initWithRole:parent:marker:";
			public static readonly Selector marker = "marker";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABCardViewerController : IEquatable<ABCardViewerController> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCardViewerController;
		public static implicit operator NSObject( ABCardViewerController value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABCardViewerController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCardViewerController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABCardViewerController?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABCardViewerController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCardViewerController value1, ABCardViewerController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCardViewerController value1, ABCardViewerController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCardViewerController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCardViewerController alloc() {
			return new ABCardViewerController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void apply() {
			RuntimeObject ___occuredException;
			NativeMethods.apply( Handle, CachedSelectors.apply, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void applyToAll_( NObjective.RuntimeObject all ) {
			RuntimeObject ___occuredException;
			NativeMethods.applyToAll_( Handle, CachedSelectors.applyToAll_, out ___occuredException, sizeof( NObjective.RuntimeObject ), all );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void cancel_( NObjective.RuntimeObject cancel ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancel_( Handle, CachedSelectors.cancel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cancel );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changeAction_( NObjective.RuntimeObject action ) {
			RuntimeObject ___occuredException;
			NativeMethods.changeAction_( Handle, CachedSelectors.changeAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void help_( NObjective.RuntimeObject help ) {
			RuntimeObject ___occuredException;
			NativeMethods.help_( Handle, CachedSelectors.help_, out ___occuredException, sizeof( NObjective.RuntimeObject ), help );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithCards_duplicates_group_selectGroup_uiController_( NObjective.RuntimeObject cards, NObjective.RuntimeObject duplicates, NObjective.RuntimeObject @group, char selectGroup, NObjective.RuntimeObject uiController ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCards_duplicates_group_selectGroup_uiController_( Handle, CachedSelectors.initWithCards_duplicates_group_selectGroup_uiController_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( NObjective.RuntimeObject ), cards, duplicates, @group, selectGroup, uiController );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void ok_( NObjective.RuntimeObject ok ) {
			RuntimeObject ___occuredException;
			NativeMethods.ok_( Handle, CachedSelectors.ok_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ok );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char splitView_canCollapseSubview_( NObjective.RuntimeObject view, NObjective.RuntimeObject canCollapseSubview ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.splitView_canCollapseSubview_( Handle, CachedSelectors.splitView_canCollapseSubview_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, canCollapseSubview );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float splitView_constrainSplitPosition_ofSubviewAt_( NObjective.RuntimeObject view, float constrainSplitPosition, int ofSubviewAt ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.splitView_constrainSplitPosition_ofSubviewAt_( Handle, CachedSelectors.splitView_constrainSplitPosition_ofSubviewAt_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( float ) + sizeof( int ), view, constrainSplitPosition, ofSubviewAt );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void apply( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void applyToAll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject all );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cancel );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void changeAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject action );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void help_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject help );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCards_duplicates_group_selectGroup_uiController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cards, NObjective.RuntimeObject duplicates, NObjective.RuntimeObject @group, char selectGroup, NObjective.RuntimeObject uiController );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void ok_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ok );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char splitView_canCollapseSubview_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject canCollapseSubview );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float splitView_constrainSplitPosition_ofSubviewAt_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, float constrainSplitPosition, int ofSubviewAt );
		}
		static internal class CachedSelectors {
			public static readonly Selector apply = "apply";
			public static readonly Selector applyToAll_ = "applyToAll:";
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector cancel_ = "cancel:";
			public static readonly Selector changeAction_ = "changeAction:";
			public static readonly Selector help_ = "help:";
			public static readonly Selector initWithCards_duplicates_group_selectGroup_uiController_ = "initWithCards:duplicates:group:selectGroup:uiController:";
			public static readonly Selector ok_ = "ok:";
			public static readonly Selector splitView_canCollapseSubview_ = "splitView:canCollapseSubview:";
			public static readonly Selector splitView_constrainSplitPosition_ofSubviewAt_ = "splitView:constrainSplitPosition:ofSubviewAt:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABCardWindowController : IEquatable<ABCardWindowController> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCardWindowController;
		public static implicit operator NSObject( ABCardWindowController value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABCardWindowController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCardWindowController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABCardWindowController?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABCardWindowController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCardWindowController value1, ABCardWindowController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCardWindowController value1, ABCardWindowController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCardWindowController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCardWindowController alloc() {
			return new ABCardWindowController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void closeWindowForPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			NativeMethods.closeWindowForPerson_( ClassHandle, CachedSelectors.closeWindowForPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject openInSeparateWindow_model_mainWindow_( NObjective.RuntimeObject window, NObjective.RuntimeObject model, NObjective.RuntimeObject mainWindow ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.openInSeparateWindow_model_mainWindow_( ClassHandle, CachedSelectors.openInSeparateWindow_model_mainWindow_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), window, model, mainWindow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void restoreCardWindowStateWithModel_( NObjective.RuntimeObject model ) {
			RuntimeObject ___occuredException;
			NativeMethods.restoreCardWindowStateWithModel_( ClassHandle, CachedSelectors.restoreCardWindowStateWithModel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), model );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void saveCardWindowState() {
			RuntimeObject ___occuredException;
			NativeMethods.saveCardWindowState( ClassHandle, CachedSelectors.saveCardWindowState, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject separateWindowForPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.separateWindowForPerson_( ClassHandle, CachedSelectors.separateWindowForPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char abShowWindowDragProxie() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abShowWindowDragProxie( Handle, CachedSelectors.abShowWindowDragProxie, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void addFieldWithNoPopup_( NObjective.RuntimeObject popup ) {
			RuntimeObject ___occuredException;
			NativeMethods.addFieldWithNoPopup_( Handle, CachedSelectors.addFieldWithNoPopup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), popup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void chooseCustomImage_( NObjective.RuntimeObject image ) {
			RuntimeObject ___occuredException;
			NativeMethods.chooseCustomImage_( Handle, CachedSelectors.chooseCustomImage_, out ___occuredException, sizeof( NObjective.RuntimeObject ), image );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearCustomImage_( NObjective.RuntimeObject image ) {
			RuntimeObject ___occuredException;
			NativeMethods.clearCustomImage_( Handle, CachedSelectors.clearCustomImage_, out ___occuredException, sizeof( NObjective.RuntimeObject ), image );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void databaseChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.databaseChanged_( Handle, CachedSelectors.databaseChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void editCard_( NObjective.RuntimeObject card ) {
			RuntimeObject ___occuredException;
			NativeMethods.editCard_( Handle, CachedSelectors.editCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject filenameToDrag_( NObjective.RuntimeObject drag ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.filenameToDrag_( Handle, CachedSelectors.filenameToDrag_, out ___occuredException, sizeof( NObjective.RuntimeObject ), drag );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithPerson_model_( NObjective.RuntimeObject person, NObjective.RuntimeObject model ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithPerson_model_( Handle, CachedSelectors.initWithPerson_model_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), person, model );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void personChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.personChanged_( Handle, CachedSelectors.personChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void resetFirstLastName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.resetFirstLastName_( Handle, CachedSelectors.resetFirstLastName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showAsCompany_( NObjective.RuntimeObject company ) {
			RuntimeObject ___occuredException;
			NativeMethods.showAsCompany_( Handle, CachedSelectors.showAsCompany_, out ___occuredException, sizeof( NObjective.RuntimeObject ), company );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showAsPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			NativeMethods.showAsPerson_( Handle, CachedSelectors.showAsPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showWindow() {
			RuntimeObject ___occuredException;
			NativeMethods.showWindow( Handle, CachedSelectors.showWindow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void swapFirstLastName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.swapFirstLastName_( Handle, CachedSelectors.swapFirstLastName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void thisIsACompany_( NObjective.RuntimeObject company ) {
			RuntimeObject ___occuredException;
			NativeMethods.thisIsACompany_( Handle, CachedSelectors.thisIsACompany_, out ___occuredException, sizeof( NObjective.RuntimeObject ), company );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void thisIsMe_( NObjective.RuntimeObject me ) {
			RuntimeObject ___occuredException;
			NativeMethods.thisIsMe_( Handle, CachedSelectors.thisIsMe_, out ___occuredException, sizeof( NObjective.RuntimeObject ), me );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateEditButton_( NObjective.RuntimeObject button ) {
			RuntimeObject ___occuredException;
			NativeMethods.updateEditButton_( Handle, CachedSelectors.updateEditButton_, out ___occuredException, sizeof( NObjective.RuntimeObject ), button );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char validateMenuItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validateMenuItem_( Handle, CachedSelectors.validateMenuItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject window() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.window( Handle, CachedSelectors.window, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void windowDidBecomeMain_( NObjective.RuntimeObject main ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowDidBecomeMain_( Handle, CachedSelectors.windowDidBecomeMain_, out ___occuredException, sizeof( NObjective.RuntimeObject ), main );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void windowDidResignKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowDidResignKey_( Handle, CachedSelectors.windowDidResignKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void windowWillClose_( NObjective.RuntimeObject close ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowWillClose_( Handle, CachedSelectors.windowWillClose_, out ___occuredException, sizeof( NObjective.RuntimeObject ), close );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject windowWillReturnUndoManager_( NObjective.RuntimeObject manager ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.windowWillReturnUndoManager_( Handle, CachedSelectors.windowWillReturnUndoManager_, out ___occuredException, sizeof( NObjective.RuntimeObject ), manager );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char abShowWindowDragProxie( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addFieldWithNoPopup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject popup );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void chooseCustomImage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clearCustomImage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void closeWindowForPerson_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void databaseChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void editCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr filenameToDrag_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject drag );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithPerson_model_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person, NObjective.RuntimeObject model );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr openInSeparateWindow_model_mainWindow_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject window, NObjective.RuntimeObject model, NObjective.RuntimeObject mainWindow );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void personChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resetFirstLastName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void restoreCardWindowStateWithModel_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject model );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void saveCardWindowState( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr separateWindowForPerson_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void showAsCompany_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject company );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void showAsPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void showWindow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void swapFirstLastName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void thisIsACompany_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject company );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void thisIsMe_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject me );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateEditButton_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject button );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char validateMenuItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr window( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void windowDidBecomeMain_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject main );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void windowDidResignKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void windowWillClose_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject close );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr windowWillReturnUndoManager_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject manager );
		}
		static internal class CachedSelectors {
			public static readonly Selector abShowWindowDragProxie = "abShowWindowDragProxie";
			public static readonly Selector addFieldWithNoPopup_ = "addFieldWithNoPopup:";
			public static readonly Selector chooseCustomImage_ = "chooseCustomImage:";
			public static readonly Selector clearCustomImage_ = "clearCustomImage:";
			public static readonly Selector closeWindowForPerson_ = "closeWindowForPerson:";
			public static readonly Selector databaseChanged_ = "databaseChanged:";
			public static readonly Selector editCard_ = "editCard:";
			public static readonly Selector filenameToDrag_ = "filenameToDrag:";
			public static readonly Selector initWithPerson_model_ = "initWithPerson:model:";
			public static readonly Selector openInSeparateWindow_model_mainWindow_ = "openInSeparateWindow:model:mainWindow:";
			public static readonly Selector personChanged_ = "personChanged:";
			public static readonly Selector resetFirstLastName_ = "resetFirstLastName:";
			public static readonly Selector restoreCardWindowStateWithModel_ = "restoreCardWindowStateWithModel:";
			public static readonly Selector saveCardWindowState = "saveCardWindowState";
			public static readonly Selector separateWindowForPerson_ = "separateWindowForPerson:";
			public static readonly Selector showAsCompany_ = "showAsCompany:";
			public static readonly Selector showAsPerson_ = "showAsPerson:";
			public static readonly Selector showWindow = "showWindow";
			public static readonly Selector swapFirstLastName_ = "swapFirstLastName:";
			public static readonly Selector thisIsACompany_ = "thisIsACompany:";
			public static readonly Selector thisIsMe_ = "thisIsMe:";
			public static readonly Selector updateEditButton_ = "updateEditButton:";
			public static readonly Selector validateMenuItem_ = "validateMenuItem:";
			public static readonly Selector window = "window";
			public static readonly Selector windowDidBecomeMain_ = "windowDidBecomeMain:";
			public static readonly Selector windowDidResignKey_ = "windowDidResignKey:";
			public static readonly Selector windowWillClose_ = "windowWillClose:";
			public static readonly Selector windowWillReturnUndoManager_ = "windowWillReturnUndoManager:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABCertController : IEquatable<ABCertController> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCertController;
		public static implicit operator NSObject( ABCertController value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABCertController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCertController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABCertController?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABCertController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCertController value1, ABCertController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCertController value1, ABCertController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCertController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCertController alloc() {
			return new ABCertController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void loadBundle() {
			RuntimeObject ___occuredException;
			NativeMethods.loadBundle( ClassHandle, CachedSelectors.loadBundle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject sharedCertificatePanel() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedCertificatePanel( ClassHandle, CachedSelectors.sharedCertificatePanel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int beginCertLookupForEmail_( NObjective.RuntimeObject email ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.beginCertLookupForEmail_( Handle, CachedSelectors.beginCertLookupForEmail_, out ___occuredException, sizeof( NObjective.RuntimeObject ), email );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void cancelPendingLookups() {
			RuntimeObject ___occuredException;
			NativeMethods.cancelPendingLookups( Handle, CachedSelectors.cancelPendingLookups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithDelegate_( Handle, CachedSelectors.initWithDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDelegate_( Handle, CachedSelectors.setDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void tellDelegateAboutJobResult_( NObjective.RuntimeObject result ) {
			RuntimeObject ___occuredException;
			NativeMethods.tellDelegateAboutJobResult_( Handle, CachedSelectors.tellDelegateAboutJobResult_, out ___occuredException, sizeof( NObjective.RuntimeObject ), result );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void workLoop() {
			RuntimeObject ___occuredException;
			NativeMethods.workLoop( Handle, CachedSelectors.workLoop, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int beginCertLookupForEmail_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject email );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancelPendingLookups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void loadBundle( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedCertificatePanel( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void tellDelegateAboutJobResult_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject result );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void workLoop( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector beginCertLookupForEmail_ = "beginCertLookupForEmail:";
			public static readonly Selector cancelPendingLookups = "cancelPendingLookups";
			public static readonly Selector initWithDelegate_ = "initWithDelegate:";
			public static readonly Selector loadBundle = "loadBundle";
			public static readonly Selector setDelegate_ = "setDelegate:";
			public static readonly Selector sharedCertificatePanel = "sharedCertificatePanel";
			public static readonly Selector tellDelegateAboutJobResult_ = "tellDelegateAboutJobResult:";
			public static readonly Selector workLoop = "workLoop";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSButtonCell ) )]
	public struct ABCertificateButtonCell : IEquatable<ABCertificateButtonCell> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCertificateButtonCell;
		public static implicit operator NSButtonCell( ABCertificateButtonCell value ) {
			return new NSButtonCell( value.Handle );
		}
		public static implicit operator NSActionCell( ABCertificateButtonCell value ) {
			return new NSActionCell( value.Handle );
		}
		public static implicit operator NSCell( ABCertificateButtonCell value ) {
			return new NSCell( value.Handle );
		}
		public static implicit operator NSObject( ABCertificateButtonCell value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABCertificateButtonCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCertificateButtonCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABCertificateButtonCell?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABCertificateButtonCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCertificateButtonCell value1, ABCertificateButtonCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCertificateButtonCell value1, ABCertificateButtonCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCertificateButtonCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCertificateButtonCell alloc() {
			return new ABCertificateButtonCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject attachment() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attachment( Handle, CachedSelectors.attachment, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject email() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.email( Handle, CachedSelectors.email, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithInputController_( NObjective.RuntimeObject controller ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithInputController_( Handle, CachedSelectors.initWithInputController_, out ___occuredException, sizeof( NObjective.RuntimeObject ), controller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAttachment_( NObjective.RuntimeObject attachment ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAttachment_( Handle, CachedSelectors.setAttachment_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attachment );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEmail_( NObjective.RuntimeObject email ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEmail_( Handle, CachedSelectors.setEmail_, out ___occuredException, sizeof( NObjective.RuntimeObject ), email );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char wantsToTrackMouse() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.wantsToTrackMouse( Handle, CachedSelectors.wantsToTrackMouse, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attachment( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr email( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithInputController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAttachment_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attachment );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEmail_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject email );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char wantsToTrackMouse( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector attachment = "attachment";
			public static readonly Selector email = "email";
			public static readonly Selector initWithInputController_ = "initWithInputController:";
			public static readonly Selector setAttachment_ = "setAttachment:";
			public static readonly Selector setEmail_ = "setEmail:";
			public static readonly Selector wantsToTrackMouse = "wantsToTrackMouse";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABCommand ) )]
	public struct ABChangePropertiesCommand : IEquatable<ABChangePropertiesCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABChangePropertiesCommand;
		public static implicit operator ABCommand( ABChangePropertiesCommand value ) {
			return new ABCommand( value.Handle );
		}
		public static implicit operator NSObject( ABChangePropertiesCommand value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABChangePropertiesCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABChangePropertiesCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABChangePropertiesCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABChangePropertiesCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABChangePropertiesCommand value1, ABChangePropertiesCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABChangePropertiesCommand value1, ABChangePropertiesCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABChangePropertiesCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABChangePropertiesCommand alloc() {
			return new ABChangePropertiesCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithGroup_person_properties_( NObjective.RuntimeObject @group, NObjective.RuntimeObject person, NObjective.RuntimeObject properties ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithGroup_person_properties_( Handle, CachedSelectors.initWithGroup_person_properties_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @group, person, properties );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithGroup_person_properties_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject person, NObjective.RuntimeObject properties );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithGroup_person_properties_ = "initWithGroup:person:properties:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABCommand ) )]
	public struct ABChangePropertyCommand : IEquatable<ABChangePropertyCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABChangePropertyCommand;
		public static implicit operator ABCommand( ABChangePropertyCommand value ) {
			return new ABCommand( value.Handle );
		}
		public static implicit operator NSObject( ABChangePropertyCommand value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABChangePropertyCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABChangePropertyCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABChangePropertyCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABChangePropertyCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABChangePropertyCommand value1, ABChangePropertyCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABChangePropertyCommand value1, ABChangePropertyCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABChangePropertyCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABChangePropertyCommand alloc() {
			return new ABChangePropertyCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithPerson_propertyPath_oldValue_inputController_( NObjective.RuntimeObject person, NObjective.RuntimeObject propertyPath, NObjective.RuntimeObject oldValue, NObjective.RuntimeObject inputController ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithPerson_propertyPath_oldValue_inputController_( Handle, CachedSelectors.initWithPerson_propertyPath_oldValue_inputController_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), person, propertyPath, oldValue, inputController );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject propertyPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyPath( Handle, CachedSelectors.propertyPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setNewValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.setNewValue_( Handle, CachedSelectors.setNewValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithPerson_propertyPath_oldValue_inputController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person, NObjective.RuntimeObject propertyPath, NObjective.RuntimeObject oldValue, NObjective.RuntimeObject inputController );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr propertyPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNewValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithPerson_propertyPath_oldValue_inputController_ = "initWithPerson:propertyPath:oldValue:inputController:";
			public static readonly Selector propertyPath = "propertyPath";
			public static readonly Selector setNewValue_ = "setNewValue:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABCommand : IEquatable<ABCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCommand;
		public static implicit operator NSObject( ABCommand value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCommand value1, ABCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCommand value1, ABCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCommand alloc() {
			return new ABCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject bundle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bundle( ClassHandle, CachedSelectors.bundle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char doIt() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doIt( Handle, CachedSelectors.doIt, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char performWithActionName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.performWithActionName_( Handle, CachedSelectors.performWithActionName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void redoIt() {
			RuntimeObject ___occuredException;
			NativeMethods.redoIt( Handle, CachedSelectors.redoIt, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char save() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.save( Handle, CachedSelectors.save, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setSave_( char save ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSave_( Handle, CachedSelectors.setSave_, out ___occuredException, sizeof( char ), save );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject undoer() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.undoer( Handle, CachedSelectors.undoer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void undoIt() {
			RuntimeObject ___occuredException;
			NativeMethods.undoIt( Handle, CachedSelectors.undoIt, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr bundle( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char doIt( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char performWithActionName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void redoIt( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char save( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSave_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char save );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr undoer( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void undoIt( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector bundle = "bundle";
			public static readonly Selector doIt = "doIt";
			public static readonly Selector performWithActionName_ = "performWithActionName:";
			public static readonly Selector redoIt = "redoIt";
			public static readonly Selector save = "save";
			public static readonly Selector setSave_ = "setSave:";
			public static readonly Selector undoer = "undoer";
			public static readonly Selector undoIt = "undoIt";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSButtonCell ) )]
	public struct ABCompanyButtonCell : IEquatable<ABCompanyButtonCell> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCompanyButtonCell;
		public static implicit operator NSButtonCell( ABCompanyButtonCell value ) {
			return new NSButtonCell( value.Handle );
		}
		public static implicit operator NSActionCell( ABCompanyButtonCell value ) {
			return new NSActionCell( value.Handle );
		}
		public static implicit operator NSCell( ABCompanyButtonCell value ) {
			return new NSCell( value.Handle );
		}
		public static implicit operator NSObject( ABCompanyButtonCell value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABCompanyButtonCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCompanyButtonCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABCompanyButtonCell?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABCompanyButtonCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCompanyButtonCell value1, ABCompanyButtonCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCompanyButtonCell value1, ABCompanyButtonCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCompanyButtonCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCompanyButtonCell alloc() {
			return new ABCompanyButtonCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject attachment() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attachment( Handle, CachedSelectors.attachment, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithInputController_( NObjective.RuntimeObject controller ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithInputController_( Handle, CachedSelectors.initWithInputController_, out ___occuredException, sizeof( NObjective.RuntimeObject ), controller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAttachment_( NObjective.RuntimeObject attachment ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAttachment_( Handle, CachedSelectors.setAttachment_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attachment );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char wantsToTrackMouse() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.wantsToTrackMouse( Handle, CachedSelectors.wantsToTrackMouse, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attachment( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithInputController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAttachment_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attachment );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char wantsToTrackMouse( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector attachment = "attachment";
			public static readonly Selector initWithInputController_ = "initWithInputController:";
			public static readonly Selector setAttachment_ = "setAttachment:";
			public static readonly Selector wantsToTrackMouse = "wantsToTrackMouse";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABConverter : IEquatable<ABConverter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABConverter;
		public static implicit operator NSObject( ABConverter value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABConverter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABConverter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABConverter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABConverter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABConverter value1, ABConverter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABConverter value1, ABConverter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABConverter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABConverter alloc() {
			return new ABConverter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject converterLockFileName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.converterLockFileName( ClassHandle, CachedSelectors.converterLockFileName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static char importLock() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.importLock( ClassHandle, CachedSelectors.importLock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static void importUnlock() {
			RuntimeObject ___occuredException;
			NativeMethods.importUnlock( ClassHandle, CachedSelectors.importUnlock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void stopSendingConversionUpdates() {
			RuntimeObject ___occuredException;
			NativeMethods.stopSendingConversionUpdates( ClassHandle, CachedSelectors.stopSendingConversionUpdates, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void updateLockFileTimeStamp() {
			RuntimeObject ___occuredException;
			NativeMethods.updateLockFileTimeStamp( ClassHandle, CachedSelectors.updateLockFileTimeStamp, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void waitTillConversionIsDone() {
			RuntimeObject ___occuredException;
			NativeMethods.waitTillConversionIsDone( ClassHandle, CachedSelectors.waitTillConversionIsDone, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int current() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.current( Handle, CachedSelectors.current, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char hasCardWithEmail_( NObjective.RuntimeObject email ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasCardWithEmail_( Handle, CachedSelectors.hasCardWithEmail_, out ___occuredException, sizeof( NObjective.RuntimeObject ), email );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void importPumaAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			NativeMethods.importPumaAddressBook_( Handle, CachedSelectors.importPumaAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void importPumaLDAPServers() {
			RuntimeObject ___occuredException;
			NativeMethods.importPumaLDAPServers( Handle, CachedSelectors.importPumaLDAPServers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject pumaLDAPServers() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pumaLDAPServers( Handle, CachedSelectors.pumaLDAPServers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject title() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.title( Handle, CachedSelectors.title, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int totalCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.totalCount( Handle, CachedSelectors.totalCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr converterLockFileName( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int current( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasCardWithEmail_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject email );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char importLock( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void importPumaAddressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void importPumaLDAPServers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void importUnlock( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pumaLDAPServers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void stopSendingConversionUpdates( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr title( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int totalCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateLockFileTimeStamp( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void waitTillConversionIsDone( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector converterLockFileName = "converterLockFileName";
			public static readonly Selector current = "current";
			public static readonly Selector hasCardWithEmail_ = "hasCardWithEmail:";
			public static readonly Selector importLock = "importLock";
			public static readonly Selector importPumaAddressBook_ = "importPumaAddressBook:";
			public static readonly Selector importPumaLDAPServers = "importPumaLDAPServers";
			public static readonly Selector importUnlock = "importUnlock";
			public static readonly Selector pumaLDAPServers = "pumaLDAPServers";
			public static readonly Selector stopSendingConversionUpdates = "stopSendingConversionUpdates";
			public static readonly Selector title = "title";
			public static readonly Selector totalCount = "totalCount";
			public static readonly Selector updateLockFileTimeStamp = "updateLockFileTimeStamp";
			public static readonly Selector waitTillConversionIsDone = "waitTillConversionIsDone";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABCustomLabelEditor : IEquatable<ABCustomLabelEditor> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABCustomLabelEditor;
		public static implicit operator NSObject( ABCustomLabelEditor value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABCustomLabelEditor value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABCustomLabelEditor value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABCustomLabelEditor?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABCustomLabelEditor value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABCustomLabelEditor value1, ABCustomLabelEditor value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABCustomLabelEditor value1, ABCustomLabelEditor value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABCustomLabelEditor( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABCustomLabelEditor alloc() {
			return new ABCustomLabelEditor( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void openCustomLabelEditorForProperty_withPopup_( NObjective.RuntimeObject property, NObjective.RuntimeObject withPopup ) {
			RuntimeObject ___occuredException;
			NativeMethods.openCustomLabelEditorForProperty_withPopup_( ClassHandle, CachedSelectors.openCustomLabelEditorForProperty_withPopup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, withPopup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void cancel_( NObjective.RuntimeObject cancel ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancel_( Handle, CachedSelectors.cancel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cancel );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void help_( NObjective.RuntimeObject help ) {
			RuntimeObject ___occuredException;
			NativeMethods.help_( Handle, CachedSelectors.help_, out ___occuredException, sizeof( NObjective.RuntimeObject ), help );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithProperty_withPopup_( NObjective.RuntimeObject property, NObjective.RuntimeObject withPopup ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithProperty_withPopup_( Handle, CachedSelectors.initWithProperty_withPopup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, withPopup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void ok_( NObjective.RuntimeObject ok ) {
			RuntimeObject ___occuredException;
			NativeMethods.ok_( Handle, CachedSelectors.ok_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ok );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void sheetDidEnd_returnCode_contextInfo_( NObjective.RuntimeObject end, int returnCode, System.IntPtr contextInfo ) {
			RuntimeObject ___occuredException;
			NativeMethods.sheetDidEnd_returnCode_contextInfo_( Handle, CachedSelectors.sheetDidEnd_returnCode_contextInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( System.IntPtr ), end, returnCode, contextInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void windowWillClose_( NObjective.RuntimeObject close ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowWillClose_( Handle, CachedSelectors.windowWillClose_, out ___occuredException, sizeof( NObjective.RuntimeObject ), close );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cancel );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void help_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject help );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithProperty_withPopup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject withPopup );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void ok_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ok );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void openCustomLabelEditorForProperty_withPopup_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject withPopup );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void sheetDidEnd_returnCode_contextInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject end, int returnCode, System.IntPtr contextInfo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void windowWillClose_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject close );
		}
		static internal class CachedSelectors {
			public static readonly Selector cancel_ = "cancel:";
			public static readonly Selector help_ = "help:";
			public static readonly Selector initWithProperty_withPopup_ = "initWithProperty:withPopup:";
			public static readonly Selector ok_ = "ok:";
			public static readonly Selector openCustomLabelEditorForProperty_withPopup_ = "openCustomLabelEditorForProperty:withPopup:";
			public static readonly Selector sheetDidEnd_returnCode_contextInfo_ = "sheetDidEnd:returnCode:contextInfo:";
			public static readonly Selector windowWillClose_ = "windowWillClose:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABRecord ) )]
	public struct ABDataType : IEquatable<ABDataType> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABDataType;
		public static implicit operator ABRecord( ABDataType value ) {
			return new ABRecord( value.Handle );
		}
		public static implicit operator NSObject( ABDataType value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABDataType value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABDataType value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABDataType?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABDataType value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABDataType value1, ABDataType value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABDataType value1, ABDataType value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABDataType( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABDataType alloc() {
			return new ABDataType( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABFileManager ) )]
	public struct ABDAVManager : IEquatable<ABDAVManager> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABDAVManager;
		public static implicit operator ABFileManager( ABDAVManager value ) {
			return new ABFileManager( value.Handle );
		}
		public static implicit operator NSObject( ABDAVManager value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABDAVManager value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABDAVManager value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABDAVManager?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABDAVManager value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABDAVManager value1, ABDAVManager value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABDAVManager value1, ABDAVManager value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABDAVManager( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABDAVManager alloc() {
			return new ABDAVManager( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static char canReachDotMacError_( System.IntPtr error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canReachDotMacError_( ClassHandle, CachedSelectors.canReachDotMacError_, out ___occuredException, sizeof( System.IntPtr ), error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char configDataChangedSince_( NObjective.RuntimeObject since ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.configDataChangedSince_( ClassHandle, CachedSelectors.configDataChangedSince_, out ___occuredException, sizeof( NObjective.RuntimeObject ), since );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject configValueForKey_defaultValue_( NObjective.RuntimeObject key, NObjective.RuntimeObject defaultValue ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.configValueForKey_defaultValue_( ClassHandle, CachedSelectors.configValueForKey_defaultValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), key, defaultValue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject directoryListQuery() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryListQuery( ClassHandle, CachedSelectors.directoryListQuery, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject dotMacBaseLocationForDotMacUser_( NObjective.RuntimeObject user ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dotMacBaseLocationForDotMacUser_( ClassHandle, CachedSelectors.dotMacBaseLocationForDotMacUser_, out ___occuredException, sizeof( NObjective.RuntimeObject ), user );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject dotMacSubscriptionTurdURLSubscriber_publisher_( NObjective.RuntimeObject subscriber, NObjective.RuntimeObject publisher ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dotMacSubscriptionTurdURLSubscriber_publisher_( ClassHandle, CachedSelectors.dotMacSubscriptionTurdURLSubscriber_publisher_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), subscriber, publisher );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject dotMacUserAgent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dotMacUserAgent( ClassHandle, CachedSelectors.dotMacUserAgent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject iDiskAddress() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.iDiskAddress( ClassHandle, CachedSelectors.iDiskAddress, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject iDiskUser() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.iDiskUser( ClassHandle, CachedSelectors.iDiskUser, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject modDateQuery() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.modDateQuery( ClassHandle, CachedSelectors.modDateQuery, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject password() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.password( ClassHandle, CachedSelectors.password, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void resetPasswordCache() {
			RuntimeObject ___occuredException;
			NativeMethods.resetPasswordCache( ClassHandle, CachedSelectors.resetPasswordCache, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void updateConfigDataIfNeeded() {
			RuntimeObject ___occuredException;
			NativeMethods.updateConfigDataIfNeeded( ClassHandle, CachedSelectors.updateConfigDataIfNeeded, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject clearACLsBody() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.clearACLsBody( Handle, CachedSelectors.clearACLsBody, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char createDirectoryAtAURL_andReturnResultCode_( NObjective.RuntimeObject aurl, System.IntPtr andReturnResultCode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createDirectoryAtAURL_andReturnResultCode_( Handle, CachedSelectors.createDirectoryAtAURL_andReturnResultCode_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), aurl, andReturnResultCode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject dateFromHTTPStyleString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dateFromHTTPStyleString_( Handle, CachedSelectors.dateFromHTTPStyleString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject dateFromISO8601String_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dateFromISO8601String_( Handle, CachedSelectors.dateFromISO8601String_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject deniedPrivileges_( NObjective.RuntimeObject privileges ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.deniedPrivileges_( Handle, CachedSelectors.deniedPrivileges_, out ___occuredException, sizeof( NObjective.RuntimeObject ), privileges );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject dictionaryAtURL_securely_andReturnResultCode_( NObjective.RuntimeObject url, char securely, System.IntPtr andReturnResultCode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dictionaryAtURL_securely_andReturnResultCode_( Handle, CachedSelectors.dictionaryAtURL_securely_andReturnResultCode_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( System.IntPtr ), url, securely, andReturnResultCode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject directoryContentsAtURL_andReturnResultCode_( NObjective.RuntimeObject url, System.IntPtr andReturnResultCode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryContentsAtURL_andReturnResultCode_( Handle, CachedSelectors.directoryContentsAtURL_andReturnResultCode_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), url, andReturnResultCode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char fileExistsAtURL_andReturnResultCode_( NObjective.RuntimeObject url, System.IntPtr andReturnResultCode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileExistsAtURL_andReturnResultCode_( Handle, CachedSelectors.fileExistsAtURL_andReturnResultCode_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), url, andReturnResultCode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject fillTemplate_withReplacements_( NObjective.RuntimeObject template, NObjective.RuntimeObject withReplacements ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fillTemplate_withReplacements_( Handle, CachedSelectors.fillTemplate_withReplacements_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), template, withReplacements );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject infoForFilesInContainer_andReturnResultCode_( NObjective.RuntimeObject container, System.IntPtr andReturnResultCode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.infoForFilesInContainer_andReturnResultCode_( Handle, CachedSelectors.infoForFilesInContainer_andReturnResultCode_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), container, andReturnResultCode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject infoQuery() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.infoQuery( Handle, CachedSelectors.infoQuery, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject modDateForURL_andReturnResultCode_( NObjective.RuntimeObject url, System.IntPtr andReturnResultCode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.modDateForURL_andReturnResultCode_( Handle, CachedSelectors.modDateForURL_andReturnResultCode_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), url, andReturnResultCode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject passwordForUser_( NObjective.RuntimeObject user ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.passwordForUser_( Handle, CachedSelectors.passwordForUser_, out ___occuredException, sizeof( NObjective.RuntimeObject ), user );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char removeDirectoryAndContentsAtURL_andReturnResultCode_( NObjective.RuntimeObject url, System.IntPtr andReturnResultCode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeDirectoryAndContentsAtURL_andReturnResultCode_( Handle, CachedSelectors.removeDirectoryAndContentsAtURL_andReturnResultCode_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), url, andReturnResultCode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char removeFileAtURL_andReturnResultCode_( NObjective.RuntimeObject url, System.IntPtr andReturnResultCode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeFileAtURL_andReturnResultCode_( Handle, CachedSelectors.removeFileAtURL_andReturnResultCode_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), url, andReturnResultCode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char sanityCheckPublishStructureCreate_( char create ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sanityCheckPublishStructureCreate_( Handle, CachedSelectors.sanityCheckPublishStructureCreate_, out ___occuredException, sizeof( char ), create );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject simpleACLBodyForReadPrincipals_writePrincipals_( NObjective.RuntimeObject principals, NObjective.RuntimeObject writePrincipals ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.simpleACLBodyForReadPrincipals_writePrincipals_( Handle, CachedSelectors.simpleACLBodyForReadPrincipals_writePrincipals_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), principals, writePrincipals );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject user() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.user( Handle, CachedSelectors.user, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char write_toURL_securely_andReturnResultCode_( NObjective.RuntimeObject write, NObjective.RuntimeObject toURL, char securely, System.IntPtr andReturnResultCode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.write_toURL_securely_andReturnResultCode_( Handle, CachedSelectors.write_toURL_securely_andReturnResultCode_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( System.IntPtr ), write, toURL, securely, andReturnResultCode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char writeDictionary_toURL_securely_( NObjective.RuntimeObject dictionary, NObjective.RuntimeObject toURL, char securely ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.writeDictionary_toURL_securely_( Handle, CachedSelectors.writeDictionary_toURL_securely_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), dictionary, toURL, securely );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char writeDictionary_toURL_securely_andReturnResultCode_( NObjective.RuntimeObject dictionary, NObjective.RuntimeObject toURL, char securely, System.IntPtr andReturnResultCode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.writeDictionary_toURL_securely_andReturnResultCode_( Handle, CachedSelectors.writeDictionary_toURL_securely_andReturnResultCode_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( System.IntPtr ), dictionary, toURL, securely, andReturnResultCode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char canReachDotMacError_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr clearACLsBody( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char configDataChangedSince_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject since );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr configValueForKey_defaultValue_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject defaultValue );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char createDirectoryAtAURL_andReturnResultCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject aurl, System.IntPtr andReturnResultCode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dateFromHTTPStyleString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dateFromISO8601String_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr deniedPrivileges_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject privileges );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dictionaryAtURL_securely_andReturnResultCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url, char securely, System.IntPtr andReturnResultCode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr directoryContentsAtURL_andReturnResultCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url, System.IntPtr andReturnResultCode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr directoryListQuery( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dotMacBaseLocationForDotMacUser_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject user );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dotMacSubscriptionTurdURLSubscriber_publisher_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject subscriber, NObjective.RuntimeObject publisher );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dotMacUserAgent( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char fileExistsAtURL_andReturnResultCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url, System.IntPtr andReturnResultCode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fillTemplate_withReplacements_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject template, NObjective.RuntimeObject withReplacements );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr iDiskAddress( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr iDiskUser( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr infoForFilesInContainer_andReturnResultCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject container, System.IntPtr andReturnResultCode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr infoQuery( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr modDateForURL_andReturnResultCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url, System.IntPtr andReturnResultCode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr modDateQuery( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr password( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr passwordForUser_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject user );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char removeDirectoryAndContentsAtURL_andReturnResultCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url, System.IntPtr andReturnResultCode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char removeFileAtURL_andReturnResultCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url, System.IntPtr andReturnResultCode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resetPasswordCache( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char sanityCheckPublishStructureCreate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char create );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr simpleACLBodyForReadPrincipals_writePrincipals_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject principals, NObjective.RuntimeObject writePrincipals );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateConfigDataIfNeeded( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr user( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char write_toURL_securely_andReturnResultCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject write, NObjective.RuntimeObject toURL, char securely, System.IntPtr andReturnResultCode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char writeDictionary_toURL_securely_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary, NObjective.RuntimeObject toURL, char securely );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char writeDictionary_toURL_securely_andReturnResultCode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary, NObjective.RuntimeObject toURL, char securely, System.IntPtr andReturnResultCode );
		}
		static internal class CachedSelectors {
			public static readonly Selector canReachDotMacError_ = "canReachDotMacError:";
			public static readonly Selector clearACLsBody = "clearACLsBody";
			public static readonly Selector configDataChangedSince_ = "configDataChangedSince:";
			public static readonly Selector configValueForKey_defaultValue_ = "configValueForKey:defaultValue:";
			public static readonly Selector createDirectoryAtAURL_andReturnResultCode_ = "createDirectoryAtAURL:andReturnResultCode:";
			public static readonly Selector dateFromHTTPStyleString_ = "dateFromHTTPStyleString:";
			public static readonly Selector dateFromISO8601String_ = "dateFromISO8601String:";
			public static readonly Selector deniedPrivileges_ = "deniedPrivileges:";
			public static readonly Selector dictionaryAtURL_securely_andReturnResultCode_ = "dictionaryAtURL:securely:andReturnResultCode:";
			public static readonly Selector directoryContentsAtURL_andReturnResultCode_ = "directoryContentsAtURL:andReturnResultCode:";
			public static readonly Selector directoryListQuery = "directoryListQuery";
			public static readonly Selector dotMacBaseLocationForDotMacUser_ = "dotMacBaseLocationForDotMacUser:";
			public static readonly Selector dotMacSubscriptionTurdURLSubscriber_publisher_ = "dotMacSubscriptionTurdURLSubscriber:publisher:";
			public static readonly Selector dotMacUserAgent = "dotMacUserAgent";
			public static readonly Selector fileExistsAtURL_andReturnResultCode_ = "fileExistsAtURL:andReturnResultCode:";
			public static readonly Selector fillTemplate_withReplacements_ = "fillTemplate:withReplacements:";
			public static readonly Selector iDiskAddress = "iDiskAddress";
			public static readonly Selector iDiskUser = "iDiskUser";
			public static readonly Selector infoForFilesInContainer_andReturnResultCode_ = "infoForFilesInContainer:andReturnResultCode:";
			public static readonly Selector infoQuery = "infoQuery";
			public static readonly Selector modDateForURL_andReturnResultCode_ = "modDateForURL:andReturnResultCode:";
			public static readonly Selector modDateQuery = "modDateQuery";
			public static readonly Selector password = "password";
			public static readonly Selector passwordForUser_ = "passwordForUser:";
			public static readonly Selector removeDirectoryAndContentsAtURL_andReturnResultCode_ = "removeDirectoryAndContentsAtURL:andReturnResultCode:";
			public static readonly Selector removeFileAtURL_andReturnResultCode_ = "removeFileAtURL:andReturnResultCode:";
			public static readonly Selector resetPasswordCache = "resetPasswordCache";
			public static readonly Selector sanityCheckPublishStructureCreate_ = "sanityCheckPublishStructureCreate:";
			public static readonly Selector simpleACLBodyForReadPrincipals_writePrincipals_ = "simpleACLBodyForReadPrincipals:writePrincipals:";
			public static readonly Selector updateConfigDataIfNeeded = "updateConfigDataIfNeeded";
			public static readonly Selector user = "user";
			public static readonly Selector write_toURL_securely_andReturnResultCode_ = "write:toURL:securely:andReturnResultCode:";
			public static readonly Selector writeDictionary_toURL_securely_ = "writeDictionary:toURL:securely:";
			public static readonly Selector writeDictionary_toURL_securely_andReturnResultCode_ = "writeDictionary:toURL:securely:andReturnResultCode:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABDAVQuery : IEquatable<ABDAVQuery> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABDAVQuery;
		public static implicit operator NSObject( ABDAVQuery value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABDAVQuery value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABDAVQuery value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABDAVQuery?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABDAVQuery value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABDAVQuery value1, ABDAVQuery value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABDAVQuery value1, ABDAVQuery value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABDAVQuery( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABDAVQuery alloc() {
			return new ABDAVQuery( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void addAuthInfo_( NObjective.RuntimeObject info ) {
			RuntimeObject ___occuredException;
			NativeMethods.addAuthInfo_( ClassHandle, CachedSelectors.addAuthInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), info );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject authenticationList() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.authenticationList( ClassHandle, CachedSelectors.authenticationList, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject lastQueryDate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lastQueryDate( ClassHandle, CachedSelectors.lastQueryDate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void resetAuthList() {
			RuntimeObject ___occuredException;
			NativeMethods.resetAuthList( ClassHandle, CachedSelectors.resetAuthList, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void setLastQueryDate_( NObjective.RuntimeObject date ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLastQueryDate_( ClassHandle, CachedSelectors.setLastQueryDate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addHeaderValue_forKey_( NObjective.RuntimeObject value, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.addHeaderValue_forKey_( Handle, CachedSelectors.addHeaderValue_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject body() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.body( Handle, CachedSelectors.body, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int depth() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.depth( Handle, CachedSelectors.depth, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject dereferencedEntity_( NObjective.RuntimeObject entity ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dereferencedEntity_( Handle, CachedSelectors.dereferencedEntity_, out ___occuredException, sizeof( NObjective.RuntimeObject ), entity );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject execute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.execute( Handle, CachedSelectors.execute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithAuthDelegate_url_( NObjective.RuntimeObject @delegate, NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithAuthDelegate_url_( Handle, CachedSelectors.initWithAuthDelegate_url_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @delegate, url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithURL_( Handle, CachedSelectors.initWithURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithUser_password_url_( NObjective.RuntimeObject user, NObjective.RuntimeObject password, NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUser_password_url_( Handle, CachedSelectors.initWithUser_password_url_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), user, password, url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject lockToken() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lockToken( Handle, CachedSelectors.lockToken, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char parseData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseData_( Handle, CachedSelectors.parseData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject password() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.password( Handle, CachedSelectors.password, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int queryType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.queryType( Handle, CachedSelectors.queryType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject responseAsString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.responseAsString( Handle, CachedSelectors.responseAsString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject responseDate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.responseDate( Handle, CachedSelectors.responseDate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject responseList() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.responseList( Handle, CachedSelectors.responseList, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int resultCode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.resultCode( Handle, CachedSelectors.resultCode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject resultData() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.resultData( Handle, CachedSelectors.resultData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject returnHeader() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.returnHeader( Handle, CachedSelectors.returnHeader, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setBody_( NObjective.RuntimeObject body ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBody_( Handle, CachedSelectors.setBody_, out ___occuredException, sizeof( NObjective.RuntimeObject ), body );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDepth_( int depth ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDepth_( Handle, CachedSelectors.setDepth_, out ___occuredException, sizeof( int ), depth );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setQueryType_( int type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setQueryType_( Handle, CachedSelectors.setQueryType_, out ___occuredException, sizeof( int ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUserAgent_( NObjective.RuntimeObject agent ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUserAgent_( Handle, CachedSelectors.setUserAgent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), agent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char succeeded() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.succeeded( Handle, CachedSelectors.succeeded, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject user() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.user( Handle, CachedSelectors.user, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject valuesForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valuesForProperty_( Handle, CachedSelectors.valuesForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addAuthInfo_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject info );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addHeaderValue_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr authenticationList( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr body( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int depth( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dereferencedEntity_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject entity );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr execute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithAuthDelegate_url_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate, NObjective.RuntimeObject url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithUser_password_url_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject user, NObjective.RuntimeObject password, NObjective.RuntimeObject url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lastQueryDate( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lockToken( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char parseData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr password( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int queryType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resetAuthList( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr responseAsString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr responseDate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr responseList( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int resultCode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr resultData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr returnHeader( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBody_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject body );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDepth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int depth );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLastQueryDate_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject date );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setQueryType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUserAgent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject agent );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char succeeded( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr user( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valuesForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
		}
		static internal class CachedSelectors {
			public static readonly Selector addAuthInfo_ = "addAuthInfo:";
			public static readonly Selector addHeaderValue_forKey_ = "addHeaderValue:forKey:";
			public static readonly Selector authenticationList = "authenticationList";
			public static readonly Selector body = "body";
			public static readonly Selector depth = "depth";
			public static readonly Selector dereferencedEntity_ = "dereferencedEntity:";
			public static readonly Selector execute = "execute";
			public static readonly Selector initWithAuthDelegate_url_ = "initWithAuthDelegate:url:";
			public static readonly Selector initWithURL_ = "initWithURL:";
			public static readonly Selector initWithUser_password_url_ = "initWithUser:password:url:";
			public static readonly Selector lastQueryDate = "lastQueryDate";
			public static readonly Selector lockToken = "lockToken";
			public static readonly Selector parseData_ = "parseData:";
			public static readonly Selector password = "password";
			public static readonly Selector queryType = "queryType";
			public static readonly Selector resetAuthList = "resetAuthList";
			public static readonly Selector responseAsString = "responseAsString";
			public static readonly Selector responseDate = "responseDate";
			public static readonly Selector responseList = "responseList";
			public static readonly Selector resultCode = "resultCode";
			public static readonly Selector resultData = "resultData";
			public static readonly Selector returnHeader = "returnHeader";
			public static readonly Selector setBody_ = "setBody:";
			public static readonly Selector setDepth_ = "setDepth:";
			public static readonly Selector setLastQueryDate_ = "setLastQueryDate:";
			public static readonly Selector setQueryType_ = "setQueryType:";
			public static readonly Selector setUserAgent_ = "setUserAgent:";
			public static readonly Selector succeeded = "succeeded";
			public static readonly Selector user = "user";
			public static readonly Selector valuesForProperty_ = "valuesForProperty:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABDBCache : IEquatable<ABDBCache> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABDBCache;
		public static implicit operator NSObject( ABDBCache value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABDBCache value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABDBCache value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABDBCache?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABDBCache value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABDBCache value1, ABDBCache value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABDBCache value1, ABDBCache value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABDBCache( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABDBCache alloc() {
			return new ABDBCache( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject sharedDBCache() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedDBCache( ClassHandle, CachedSelectors.sharedDBCache, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addedGroups_( NObjective.RuntimeObject groups ) {
			RuntimeObject ___occuredException;
			NativeMethods.addedGroups_( Handle, CachedSelectors.addedGroups_, out ___occuredException, sizeof( NObjective.RuntimeObject ), groups );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addedMembers_( NObjective.RuntimeObject members ) {
			RuntimeObject ___occuredException;
			NativeMethods.addedMembers_( Handle, CachedSelectors.addedMembers_, out ___occuredException, sizeof( NObjective.RuntimeObject ), members );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addedMembers_toGroup_( NObjective.RuntimeObject members, NObjective.RuntimeObject toGroup ) {
			RuntimeObject ___occuredException;
			NativeMethods.addedMembers_toGroup_( Handle, CachedSelectors.addedMembers_toGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), members, toGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject allGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allGroups( Handle, CachedSelectors.allGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject allPeople() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allPeople( Handle, CachedSelectors.allPeople, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject allPeopleForRemoteLocation_( NObjective.RuntimeObject location ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allPeopleForRemoteLocation_( Handle, CachedSelectors.allPeopleForRemoteLocation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), location );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject allSimpleGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allSimpleGroups( Handle, CachedSelectors.allSimpleGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void changedGroups_( NObjective.RuntimeObject groups ) {
			RuntimeObject ___occuredException;
			NativeMethods.changedGroups_( Handle, CachedSelectors.changedGroups_, out ___occuredException, sizeof( NObjective.RuntimeObject ), groups );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changedMember_( NObjective.RuntimeObject member ) {
			RuntimeObject ___occuredException;
			NativeMethods.changedMember_( Handle, CachedSelectors.changedMember_, out ___occuredException, sizeof( NObjective.RuntimeObject ), member );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changedMembers_( NObjective.RuntimeObject members ) {
			RuntimeObject ___occuredException;
			NativeMethods.changedMembers_( Handle, CachedSelectors.changedMembers_, out ___occuredException, sizeof( NObjective.RuntimeObject ), members );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearAll() {
			RuntimeObject ___occuredException;
			NativeMethods.clearAll( Handle, CachedSelectors.clearAll, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearAllForRemoteLocation_( NObjective.RuntimeObject location ) {
			RuntimeObject ___occuredException;
			NativeMethods.clearAllForRemoteLocation_( Handle, CachedSelectors.clearAllForRemoteLocation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), location );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearCacheForGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			NativeMethods.clearCacheForGroup_( Handle, CachedSelectors.clearCacheForGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void databaseChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.databaseChanged_( Handle, CachedSelectors.databaseChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void databaseChangedForUserInfo_groupsChanged_peopleChanged_( NObjective.RuntimeObject info, System.IntPtr groupsChanged, System.IntPtr peopleChanged ) {
			RuntimeObject ___occuredException;
			NativeMethods.databaseChangedForUserInfo_groupsChanged_peopleChanged_( Handle, CachedSelectors.databaseChangedForUserInfo_groupsChanged_peopleChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ), info, groupsChanged, peopleChanged );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deletedGroups_( NObjective.RuntimeObject groups ) {
			RuntimeObject ___occuredException;
			NativeMethods.deletedGroups_( Handle, CachedSelectors.deletedGroups_, out ___occuredException, sizeof( NObjective.RuntimeObject ), groups );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deletedMembers_( NObjective.RuntimeObject members ) {
			RuntimeObject ___occuredException;
			NativeMethods.deletedMembers_( Handle, CachedSelectors.deletedMembers_, out ___occuredException, sizeof( NObjective.RuntimeObject ), members );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject enclosedSubscriptionGroupsForAllGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.enclosedSubscriptionGroupsForAllGroup_( Handle, CachedSelectors.enclosedSubscriptionGroupsForAllGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void endEditing_( NObjective.RuntimeObject editing ) {
			RuntimeObject ___occuredException;
			NativeMethods.endEditing_( Handle, CachedSelectors.endEditing_, out ___occuredException, sizeof( NObjective.RuntimeObject ), editing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint indexOfMember_inSortedMembers_( NObjective.RuntimeObject member, NObjective.RuntimeObject inSortedMembers ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfMember_inSortedMembers_( Handle, CachedSelectors.indexOfMember_inSortedMembers_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), member, inSortedMembers );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint insertionIndexForMember_inSortedMembers_( NObjective.RuntimeObject member, NObjective.RuntimeObject inSortedMembers ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.insertionIndexForMember_inSortedMembers_( Handle, CachedSelectors.insertionIndexForMember_inSortedMembers_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), member, inSortedMembers );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public bool isNewPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isNewPerson_( Handle, CachedSelectors.isNewPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject membersOfGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.membersOfGroup_( Handle, CachedSelectors.membersOfGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int nameSorting() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nameSorting( Handle, CachedSelectors.nameSorting, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nonThreadedSave() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nonThreadedSave( Handle, CachedSelectors.nonThreadedSave, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void registerModel_( NObjective.RuntimeObject model ) {
			RuntimeObject ___occuredException;
			NativeMethods.registerModel_( Handle, CachedSelectors.registerModel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), model );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void reinsertRecord_inSortedList_( NObjective.RuntimeObject record, NObjective.RuntimeObject inSortedList ) {
			RuntimeObject ___occuredException;
			NativeMethods.reinsertRecord_inSortedList_( Handle, CachedSelectors.reinsertRecord_inSortedList_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), record, inSortedList );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void reloadGroups() {
			RuntimeObject ___occuredException;
			NativeMethods.reloadGroups( Handle, CachedSelectors.reloadGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removedMembers_fromGroup_( NObjective.RuntimeObject members, NObjective.RuntimeObject fromGroup ) {
			RuntimeObject ___occuredException;
			NativeMethods.removedMembers_fromGroup_( Handle, CachedSelectors.removedMembers_fromGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), members, fromGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void sortMembers_( NObjective.RuntimeObject members ) {
			RuntimeObject ___occuredException;
			NativeMethods.sortMembers_( Handle, CachedSelectors.sortMembers_, out ___occuredException, sizeof( NObjective.RuntimeObject ), members );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void startEditingNewPerson_inGroup_( NObjective.RuntimeObject person, NObjective.RuntimeObject inGroup ) {
			RuntimeObject ___occuredException;
			NativeMethods.startEditingNewPerson_inGroup_( Handle, CachedSelectors.startEditingNewPerson_inGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), person, inGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char threadedSave() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.threadedSave( Handle, CachedSelectors.threadedSave, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject undoManager() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.undoManager( Handle, CachedSelectors.undoManager, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void unregisterModel_( NObjective.RuntimeObject model ) {
			RuntimeObject ___occuredException;
			NativeMethods.unregisterModel_( Handle, CachedSelectors.unregisterModel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), model );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateGroupSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.updateGroupSelection_( Handle, CachedSelectors.updateGroupSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateGroupsSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.updateGroupsSelection_( Handle, CachedSelectors.updateGroupsSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateMembersSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.updateMembersSelection_( Handle, CachedSelectors.updateMembersSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addedGroups_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject groups );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addedMembers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addedMembers_toGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members, NObjective.RuntimeObject toGroup );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allPeople( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allPeopleForRemoteLocation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject location );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allSimpleGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void changedGroups_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject groups );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void changedMember_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject member );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void changedMembers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clearAll( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clearAllForRemoteLocation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject location );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clearCacheForGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void databaseChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void databaseChangedForUserInfo_groupsChanged_peopleChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject info, System.IntPtr groupsChanged, System.IntPtr peopleChanged );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deletedGroups_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject groups );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deletedMembers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr enclosedSubscriptionGroupsForAllGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void endEditing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject editing );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint indexOfMember_inSortedMembers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject member, NObjective.RuntimeObject inSortedMembers );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint insertionIndexForMember_inSortedMembers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject member, NObjective.RuntimeObject inSortedMembers );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isNewPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr membersOfGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int nameSorting( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nonThreadedSave( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void registerModel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject model );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void reinsertRecord_inSortedList_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record, NObjective.RuntimeObject inSortedList );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void reloadGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removedMembers_fromGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members, NObjective.RuntimeObject fromGroup );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedDBCache( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void sortMembers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void startEditingNewPerson_inGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person, NObjective.RuntimeObject inGroup );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char threadedSave( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr undoManager( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unregisterModel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject model );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateGroupSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateGroupsSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateMembersSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
		}
		static internal class CachedSelectors {
			public static readonly Selector addedGroups_ = "addedGroups:";
			public static readonly Selector addedMembers_ = "addedMembers:";
			public static readonly Selector addedMembers_toGroup_ = "addedMembers:toGroup:";
			public static readonly Selector allGroups = "allGroups";
			public static readonly Selector allPeople = "allPeople";
			public static readonly Selector allPeopleForRemoteLocation_ = "allPeopleForRemoteLocation:";
			public static readonly Selector allSimpleGroups = "allSimpleGroups";
			public static readonly Selector changedGroups_ = "changedGroups:";
			public static readonly Selector changedMember_ = "changedMember:";
			public static readonly Selector changedMembers_ = "changedMembers:";
			public static readonly Selector clearAll = "clearAll";
			public static readonly Selector clearAllForRemoteLocation_ = "clearAllForRemoteLocation:";
			public static readonly Selector clearCacheForGroup_ = "clearCacheForGroup:";
			public static readonly Selector databaseChanged_ = "databaseChanged:";
			public static readonly Selector databaseChangedForUserInfo_groupsChanged_peopleChanged_ = "databaseChangedForUserInfo:groupsChanged:peopleChanged:";
			public static readonly Selector deletedGroups_ = "deletedGroups:";
			public static readonly Selector deletedMembers_ = "deletedMembers:";
			public static readonly Selector enclosedSubscriptionGroupsForAllGroup_ = "enclosedSubscriptionGroupsForAllGroup:";
			public static readonly Selector endEditing_ = "endEditing:";
			public static readonly Selector indexOfMember_inSortedMembers_ = "indexOfMember:inSortedMembers:";
			public static readonly Selector insertionIndexForMember_inSortedMembers_ = "insertionIndexForMember:inSortedMembers:";
			public static readonly Selector isNewPerson_ = "isNewPerson:";
			public static readonly Selector membersOfGroup_ = "membersOfGroup:";
			public static readonly Selector nameSorting = "nameSorting";
			public static readonly Selector nonThreadedSave = "nonThreadedSave";
			public static readonly Selector registerModel_ = "registerModel:";
			public static readonly Selector reinsertRecord_inSortedList_ = "reinsertRecord:inSortedList:";
			public static readonly Selector reloadGroups = "reloadGroups";
			public static readonly Selector removedMembers_fromGroup_ = "removedMembers:fromGroup:";
			public static readonly Selector sharedDBCache = "sharedDBCache";
			public static readonly Selector sortMembers_ = "sortMembers:";
			public static readonly Selector startEditingNewPerson_inGroup_ = "startEditingNewPerson:inGroup:";
			public static readonly Selector threadedSave = "threadedSave";
			public static readonly Selector undoManager = "undoManager";
			public static readonly Selector unregisterModel_ = "unregisterModel:";
			public static readonly Selector updateGroupSelection_ = "updateGroupSelection:";
			public static readonly Selector updateGroupsSelection_ = "updateGroupsSelection:";
			public static readonly Selector updateMembersSelection_ = "updateMembersSelection:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABCommand ) )]
	public struct ABDeleteGroupsCommand : IEquatable<ABDeleteGroupsCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABDeleteGroupsCommand;
		public static implicit operator ABCommand( ABDeleteGroupsCommand value ) {
			return new ABCommand( value.Handle );
		}
		public static implicit operator NSObject( ABDeleteGroupsCommand value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABDeleteGroupsCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABDeleteGroupsCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABDeleteGroupsCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABDeleteGroupsCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABDeleteGroupsCommand value1, ABDeleteGroupsCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABDeleteGroupsCommand value1, ABDeleteGroupsCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABDeleteGroupsCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABDeleteGroupsCommand alloc() {
			return new ABDeleteGroupsCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithGroups_( NObjective.RuntimeObject groups ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithGroups_( Handle, CachedSelectors.initWithGroups_, out ___occuredException, sizeof( NObjective.RuntimeObject ), groups );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithGroups_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject groups );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithGroups_ = "initWithGroups:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABCommand ) )]
	public struct ABDeleteRecordsCommand : IEquatable<ABDeleteRecordsCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABDeleteRecordsCommand;
		public static implicit operator ABCommand( ABDeleteRecordsCommand value ) {
			return new ABCommand( value.Handle );
		}
		public static implicit operator NSObject( ABDeleteRecordsCommand value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABDeleteRecordsCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABDeleteRecordsCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABDeleteRecordsCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABDeleteRecordsCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABDeleteRecordsCommand value1, ABDeleteRecordsCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABDeleteRecordsCommand value1, ABDeleteRecordsCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABDeleteRecordsCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABDeleteRecordsCommand alloc() {
			return new ABDeleteRecordsCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject deletedGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.deletedGroups( Handle, CachedSelectors.deletedGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject deletedPeople() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.deletedPeople( Handle, CachedSelectors.deletedPeople, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithGroup_records_( NObjective.RuntimeObject @group, NObjective.RuntimeObject records ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithGroup_records_( Handle, CachedSelectors.initWithGroup_records_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @group, records );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr deletedGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr deletedPeople( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithGroup_records_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject records );
		}
		static internal class CachedSelectors {
			public static readonly Selector deletedGroups = "deletedGroups";
			public static readonly Selector deletedPeople = "deletedPeople";
			public static readonly Selector initWithGroup_records_ = "initWithGroup:records:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABTableController ) )]
	public struct ABDirectoriesController : IEquatable<ABDirectoriesController> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABDirectoriesController;
		public static implicit operator ABTableController( ABDirectoriesController value ) {
			return new ABTableController( value.Handle );
		}
		public static implicit operator NSResponder( ABDirectoriesController value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABDirectoriesController value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABDirectoriesController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABDirectoriesController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABDirectoriesController?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABDirectoriesController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABDirectoriesController value1, ABDirectoriesController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABDirectoriesController value1, ABDirectoriesController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABDirectoriesController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABDirectoriesController alloc() {
			return new ABDirectoriesController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void directoriesSelectionChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.directoriesSelectionChanged_( Handle, CachedSelectors.directoriesSelectionChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void doSelectAll_( NObjective.RuntimeObject all ) {
			RuntimeObject ___occuredException;
			NativeMethods.doSelectAll_( Handle, CachedSelectors.doSelectAll_, out ___occuredException, sizeof( NObjective.RuntimeObject ), all );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void LDAPConfigChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.LDAPConfigChanged_( Handle, CachedSelectors.LDAPConfigChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int numberOfRowsInTableView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberOfRowsInTableView_( Handle, CachedSelectors.numberOfRowsInTableView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void tableContentChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.tableContentChanged_( Handle, CachedSelectors.tableContentChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject tableView_objectValueForTableColumn_row_( NObjective.RuntimeObject view, NObjective.RuntimeObject objectValueForTableColumn, int row ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tableView_objectValueForTableColumn_row_( Handle, CachedSelectors.tableView_objectValueForTableColumn_row_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), view, objectValueForTableColumn, row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void tableViewSelectionDidChange_( NObjective.RuntimeObject change ) {
			RuntimeObject ___occuredException;
			NativeMethods.tableViewSelectionDidChange_( Handle, CachedSelectors.tableViewSelectionDidChange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), change );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void directoriesSelectionChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void doSelectAll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject all );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void LDAPConfigChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int numberOfRowsInTableView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void tableContentChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr tableView_objectValueForTableColumn_row_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject objectValueForTableColumn, int row );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void tableViewSelectionDidChange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject change );
		}
		static internal class CachedSelectors {
			public static readonly Selector directoriesSelectionChanged_ = "directoriesSelectionChanged:";
			public static readonly Selector doSelectAll_ = "doSelectAll:";
			public static readonly Selector LDAPConfigChanged_ = "LDAPConfigChanged:";
			public static readonly Selector numberOfRowsInTableView_ = "numberOfRowsInTableView:";
			public static readonly Selector tableContentChanged_ = "tableContentChanged:";
			public static readonly Selector tableView_objectValueForTableColumn_row_ = "tableView:objectValueForTableColumn:row:";
			public static readonly Selector tableViewSelectionDidChange_ = "tableViewSelectionDidChange:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABGroup ) )]
	public struct ABDirectoriesGroup : IEquatable<ABDirectoriesGroup> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABDirectoriesGroup;
		public static implicit operator ABGroup( ABDirectoriesGroup value ) {
			return new ABGroup( value.Handle );
		}
		public static implicit operator ABRecord( ABDirectoriesGroup value ) {
			return new ABRecord( value.Handle );
		}
		public static implicit operator NSObject( ABDirectoriesGroup value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABDirectoriesGroup value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABDirectoriesGroup value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABDirectoriesGroup?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABDirectoriesGroup value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABDirectoriesGroup value1, ABDirectoriesGroup value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABDirectoriesGroup value1, ABDirectoriesGroup value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABDirectoriesGroup( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABDirectoriesGroup alloc() {
			return new ABDirectoriesGroup( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject allDirectoriesServer() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allDirectoriesServer( ClassHandle, CachedSelectors.allDirectoriesServer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject directoriesGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoriesGroup( ClassHandle, CachedSelectors.directoriesGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject directories() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directories( Handle, CachedSelectors.directories, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void LDAPConfigChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.LDAPConfigChanged_( Handle, CachedSelectors.LDAPConfigChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allDirectoriesServer( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr directories( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr directoriesGroup( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void LDAPConfigChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
		}
		static internal class CachedSelectors {
			public static readonly Selector allDirectoriesServer = "allDirectoriesServer";
			public static readonly Selector directories = "directories";
			public static readonly Selector directoriesGroup = "directoriesGroup";
			public static readonly Selector LDAPConfigChanged_ = "LDAPConfigChanged:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABPeopleController ) )]
	public struct ABDirectoryResultsController : IEquatable<ABDirectoryResultsController> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABDirectoryResultsController;
		public static implicit operator ABPeopleController( ABDirectoryResultsController value ) {
			return new ABPeopleController( value.Handle );
		}
		public static implicit operator ABTableController( ABDirectoryResultsController value ) {
			return new ABTableController( value.Handle );
		}
		public static implicit operator NSResponder( ABDirectoryResultsController value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABDirectoryResultsController value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABDirectoryResultsController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABDirectoryResultsController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABDirectoryResultsController?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABDirectoryResultsController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABDirectoryResultsController value1, ABDirectoryResultsController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABDirectoryResultsController value1, ABDirectoryResultsController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABDirectoryResultsController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABDirectoryResultsController alloc() {
			return new ABDirectoryResultsController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void copy_( NObjective.RuntimeObject copy ) {
			RuntimeObject ___occuredException;
			NativeMethods.copy_( Handle, CachedSelectors.copy_, out ___occuredException, sizeof( NObjective.RuntimeObject ), copy );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void directoryResultsSelectionChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.directoryResultsSelectionChanged_( Handle, CachedSelectors.directoryResultsSelectionChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void doSelectAll_( NObjective.RuntimeObject all ) {
			RuntimeObject ___occuredException;
			NativeMethods.doSelectAll_( Handle, CachedSelectors.doSelectAll_, out ___occuredException, sizeof( NObjective.RuntimeObject ), all );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void exportVCard_( NObjective.RuntimeObject card ) {
			RuntimeObject ___occuredException;
			NativeMethods.exportVCard_( Handle, CachedSelectors.exportVCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void handleRollOverSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.handleRollOverSelection_( Handle, CachedSelectors.handleRollOverSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void openInSeparateWindow_( NObjective.RuntimeObject window ) {
			RuntimeObject ___occuredException;
			NativeMethods.openInSeparateWindow_( Handle, CachedSelectors.openInSeparateWindow_, out ___occuredException, sizeof( NObjective.RuntimeObject ), window );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void personSelected_( NObjective.RuntimeObject selected ) {
			RuntimeObject ___occuredException;
			NativeMethods.personSelected_( Handle, CachedSelectors.personSelected_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selected );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint selectedPeople() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedPeople( Handle, CachedSelectors.selectedPeople, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject subrowObjectsForPerson2_( NObjective.RuntimeObject person2 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subrowObjectsForPerson2_( Handle, CachedSelectors.subrowObjectsForPerson2_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void tableContentChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.tableContentChanged_( Handle, CachedSelectors.tableContentChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char validateMenuItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validateMenuItem_( Handle, CachedSelectors.validateMenuItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void copy_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject copy );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void directoryResultsSelectionChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void doSelectAll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject all );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void exportVCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void handleRollOverSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void openInSeparateWindow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject window );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void personSelected_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selected );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint selectedPeople( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr subrowObjectsForPerson2_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void tableContentChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char validateMenuItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
		}
		static internal class CachedSelectors {
			public static readonly Selector copy_ = "copy:";
			public static readonly Selector directoryResultsSelectionChanged_ = "directoryResultsSelectionChanged:";
			public static readonly Selector doSelectAll_ = "doSelectAll:";
			public static readonly Selector exportVCard_ = "exportVCard:";
			public static readonly Selector handleRollOverSelection_ = "handleRollOverSelection:";
			public static readonly Selector openInSeparateWindow_ = "openInSeparateWindow:";
			public static readonly Selector personSelected_ = "personSelected:";
			public static readonly Selector selectedPeople = "selectedPeople";
			public static readonly Selector subrowObjectsForPerson2_ = "subrowObjectsForPerson2:";
			public static readonly Selector tableContentChanged_ = "tableContentChanged:";
			public static readonly Selector validateMenuItem_ = "validateMenuItem:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSView ) )]
	public struct ABDragAnimationView : IEquatable<ABDragAnimationView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABDragAnimationView;
		public static implicit operator NSView( ABDragAnimationView value ) {
			return new NSView( value.Handle );
		}
		public static implicit operator NSResponder( ABDragAnimationView value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABDragAnimationView value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABDragAnimationView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABDragAnimationView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABDragAnimationView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABDragAnimationView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABDragAnimationView value1, ABDragAnimationView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABDragAnimationView value1, ABDragAnimationView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABDragAnimationView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABDragAnimationView alloc() {
			return new ABDragAnimationView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void animate() {
			RuntimeObject ___occuredException;
			NativeMethods.animate( Handle, CachedSelectors.animate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateDragProgress() {
			RuntimeObject ___occuredException;
			NativeMethods.updateDragProgress( Handle, CachedSelectors.updateDragProgress, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void animate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateDragProgress( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector animate = "animate";
			public static readonly Selector updateDragProgress = "updateDragProgress";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSWindow ) )]
	public struct ABDragAnimationWindow : IEquatable<ABDragAnimationWindow> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABDragAnimationWindow;
		public static implicit operator NSWindow( ABDragAnimationWindow value ) {
			return new NSWindow( value.Handle );
		}
		public static implicit operator NSResponder( ABDragAnimationWindow value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABDragAnimationWindow value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABDragAnimationWindow value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABDragAnimationWindow value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABDragAnimationWindow?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABDragAnimationWindow value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABDragAnimationWindow value1, ABDragAnimationWindow value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABDragAnimationWindow value1, ABDragAnimationWindow value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABDragAnimationWindow( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABDragAnimationWindow alloc() {
			return new ABDragAnimationWindow( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void animate() {
			RuntimeObject ___occuredException;
			NativeMethods.animate( Handle, CachedSelectors.animate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithDragInfo_tableView_completion_andRow_( NObjective.RuntimeObject info, NObjective.RuntimeObject tableView, NObjective.RuntimeObject completion, int andRow ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithDragInfo_tableView_completion_andRow_( Handle, CachedSelectors.initWithDragInfo_tableView_completion_andRow_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), info, tableView, completion, andRow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject tableView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tableView( Handle, CachedSelectors.tableView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void animate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithDragInfo_tableView_completion_andRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject info, NObjective.RuntimeObject tableView, NObjective.RuntimeObject completion, int andRow );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr tableView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector animate = "animate";
			public static readonly Selector initWithDragInfo_tableView_completion_andRow_ = "initWithDragInfo:tableView:completion:andRow:";
			public static readonly Selector tableView = "tableView";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABCommand ) )]
	public struct ABEditSmartGroupCommand : IEquatable<ABEditSmartGroupCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABEditSmartGroupCommand;
		public static implicit operator ABCommand( ABEditSmartGroupCommand value ) {
			return new ABCommand( value.Handle );
		}
		public static implicit operator NSObject( ABEditSmartGroupCommand value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABEditSmartGroupCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABEditSmartGroupCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABEditSmartGroupCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABEditSmartGroupCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABEditSmartGroupCommand value1, ABEditSmartGroupCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABEditSmartGroupCommand value1, ABEditSmartGroupCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABEditSmartGroupCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABEditSmartGroupCommand alloc() {
			return new ABEditSmartGroupCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithSmartGroup_name_searchElement_hilights_( NObjective.RuntimeObject @group, NObjective.RuntimeObject name, NObjective.RuntimeObject searchElement, char hilights ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithSmartGroup_name_searchElement_hilights_( Handle, CachedSelectors.initWithSmartGroup_name_searchElement_hilights_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), @group, name, searchElement, hilights );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithSmartGroup_name_searchElement_hilights_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject name, NObjective.RuntimeObject searchElement, char hilights );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithSmartGroup_name_searchElement_hilights_ = "initWithSmartGroup:name:searchElement:hilights:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSControl ) )]
	public struct ABEditSwitch : IEquatable<ABEditSwitch> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABEditSwitch;
		public static implicit operator NSControl( ABEditSwitch value ) {
			return new NSControl( value.Handle );
		}
		public static implicit operator NSView( ABEditSwitch value ) {
			return new NSView( value.Handle );
		}
		public static implicit operator NSResponder( ABEditSwitch value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABEditSwitch value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABEditSwitch value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABEditSwitch value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABEditSwitch?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABEditSwitch value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABEditSwitch value1, ABEditSwitch value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABEditSwitch value1, ABEditSwitch value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABEditSwitch( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABEditSwitch alloc() {
			return new ABEditSwitch( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject backgroundImage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backgroundImage( Handle, CachedSelectors.backgroundImage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setState_( int state ) {
			RuntimeObject ___occuredException;
			NativeMethods.setState_( Handle, CachedSelectors.setState_, out ___occuredException, sizeof( int ), state );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject title() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.title( Handle, CachedSelectors.title, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr backgroundImage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setState_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int state );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr title( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector backgroundImage = "backgroundImage";
			public static readonly Selector setState_ = "setState:";
			public static readonly Selector title = "title";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSView ) )]
	public struct ABEmbossedText : IEquatable<ABEmbossedText> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABEmbossedText;
		public static implicit operator NSView( ABEmbossedText value ) {
			return new NSView( value.Handle );
		}
		public static implicit operator NSResponder( ABEmbossedText value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABEmbossedText value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABEmbossedText value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABEmbossedText value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABEmbossedText?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABEmbossedText value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABEmbossedText value1, ABEmbossedText value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABEmbossedText value1, ABEmbossedText value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABEmbossedText( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABEmbossedText alloc() {
			return new ABEmbossedText( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public int alignment() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.alignment( Handle, CachedSelectors.alignment, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAlignment_( int alignment ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlignment_( Handle, CachedSelectors.setAlignment_, out ___occuredException, sizeof( int ), alignment );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setText_( NObjective.RuntimeObject text ) {
			RuntimeObject ___occuredException;
			NativeMethods.setText_( Handle, CachedSelectors.setText_, out ___occuredException, sizeof( NObjective.RuntimeObject ), text );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject text() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.text( Handle, CachedSelectors.text, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int alignment( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlignment_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int alignment );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject text );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr text( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector alignment = "alignment";
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector setAlignment_ = "setAlignment:";
			public static readonly Selector setText_ = "setText:";
			public static readonly Selector text = "text";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSTextField ) )]
	public struct ABExampleTextField : IEquatable<ABExampleTextField> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABExampleTextField;
		public static implicit operator NSTextField( ABExampleTextField value ) {
			return new NSTextField( value.Handle );
		}
		public static implicit operator NSControl( ABExampleTextField value ) {
			return new NSControl( value.Handle );
		}
		public static implicit operator NSView( ABExampleTextField value ) {
			return new NSView( value.Handle );
		}
		public static implicit operator NSResponder( ABExampleTextField value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABExampleTextField value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABExampleTextField value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABExampleTextField value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABExampleTextField?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABExampleTextField value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABExampleTextField value1, ABExampleTextField value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABExampleTextField value1, ABExampleTextField value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABExampleTextField( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABExampleTextField alloc() {
			return new ABExampleTextField( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeGrayExampleString() {
			RuntimeObject ___occuredException;
			NativeMethods.removeGrayExampleString( Handle, CachedSelectors.removeGrayExampleString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeGrayExampleString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector removeGrayExampleString = "removeGrayExampleString";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABExchangeSetup : IEquatable<ABExchangeSetup> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABExchangeSetup;
		public static implicit operator NSObject( ABExchangeSetup value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABExchangeSetup value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABExchangeSetup value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABExchangeSetup?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABExchangeSetup value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABExchangeSetup value1, ABExchangeSetup value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABExchangeSetup value1, ABExchangeSetup value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABExchangeSetup( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABExchangeSetup alloc() {
			return new ABExchangeSetup( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject sharedExchangeSetup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedExchangeSetup( ClassHandle, CachedSelectors.sharedExchangeSetup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject activeDirectoryEmailAddress() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.activeDirectoryEmailAddress( Handle, CachedSelectors.activeDirectoryEmailAddress, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject activeDirectoryFullName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.activeDirectoryFullName( Handle, CachedSelectors.activeDirectoryFullName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject activeDirectoryPassword() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.activeDirectoryPassword( Handle, CachedSelectors.activeDirectoryPassword, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject activeDirectoryUser() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.activeDirectoryUser( Handle, CachedSelectors.activeDirectoryUser, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject exchangeServer() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.exchangeServer( Handle, CachedSelectors.exchangeServer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject outlookWebAccessPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlookWebAccessPath( Handle, CachedSelectors.outlookWebAccessPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject outlookWebAccessServer() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlookWebAccessServer( Handle, CachedSelectors.outlookWebAccessServer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char setActiveDirectoryPassword_( NObjective.RuntimeObject password ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setActiveDirectoryPassword_( Handle, CachedSelectors.setActiveDirectoryPassword_, out ___occuredException, sizeof( NObjective.RuntimeObject ), password );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setActiveDirectoryUser_( NObjective.RuntimeObject user ) {
			RuntimeObject ___occuredException;
			NativeMethods.setActiveDirectoryUser_( Handle, CachedSelectors.setActiveDirectoryUser_, out ___occuredException, sizeof( NObjective.RuntimeObject ), user );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setExchangeServer_( NObjective.RuntimeObject server ) {
			RuntimeObject ___occuredException;
			NativeMethods.setExchangeServer_( Handle, CachedSelectors.setExchangeServer_, out ___occuredException, sizeof( NObjective.RuntimeObject ), server );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setOutlookWebAccessPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			NativeMethods.setOutlookWebAccessPath_( Handle, CachedSelectors.setOutlookWebAccessPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setOutlookWebAccessServer_( NObjective.RuntimeObject server ) {
			RuntimeObject ___occuredException;
			NativeMethods.setOutlookWebAccessServer_( Handle, CachedSelectors.setOutlookWebAccessServer_, out ___occuredException, sizeof( NObjective.RuntimeObject ), server );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSyncsWithExchange_( char exchange ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSyncsWithExchange_( Handle, CachedSelectors.setSyncsWithExchange_, out ___occuredException, sizeof( char ), exchange );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUseSSL_( char ssl ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUseSSL_( Handle, CachedSelectors.setUseSSL_, out ___occuredException, sizeof( char ), ssl );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char syncsWithExchange() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.syncsWithExchange( Handle, CachedSelectors.syncsWithExchange, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char useSSL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.useSSL( Handle, CachedSelectors.useSSL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char usingActiveDirectory() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.usingActiveDirectory( Handle, CachedSelectors.usingActiveDirectory, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr activeDirectoryEmailAddress( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr activeDirectoryFullName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr activeDirectoryPassword( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr activeDirectoryUser( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr exchangeServer( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr outlookWebAccessPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr outlookWebAccessServer( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char setActiveDirectoryPassword_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject password );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setActiveDirectoryUser_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject user );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setExchangeServer_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject server );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setOutlookWebAccessPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setOutlookWebAccessServer_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject server );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSyncsWithExchange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char exchange );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUseSSL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char ssl );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedExchangeSetup( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char syncsWithExchange( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char useSSL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char usingActiveDirectory( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector activeDirectoryEmailAddress = "activeDirectoryEmailAddress";
			public static readonly Selector activeDirectoryFullName = "activeDirectoryFullName";
			public static readonly Selector activeDirectoryPassword = "activeDirectoryPassword";
			public static readonly Selector activeDirectoryUser = "activeDirectoryUser";
			public static readonly Selector exchangeServer = "exchangeServer";
			public static readonly Selector outlookWebAccessPath = "outlookWebAccessPath";
			public static readonly Selector outlookWebAccessServer = "outlookWebAccessServer";
			public static readonly Selector setActiveDirectoryPassword_ = "setActiveDirectoryPassword:";
			public static readonly Selector setActiveDirectoryUser_ = "setActiveDirectoryUser:";
			public static readonly Selector setExchangeServer_ = "setExchangeServer:";
			public static readonly Selector setOutlookWebAccessPath_ = "setOutlookWebAccessPath:";
			public static readonly Selector setOutlookWebAccessServer_ = "setOutlookWebAccessServer:";
			public static readonly Selector setSyncsWithExchange_ = "setSyncsWithExchange:";
			public static readonly Selector setUseSSL_ = "setUseSSL:";
			public static readonly Selector sharedExchangeSetup = "sharedExchangeSetup";
			public static readonly Selector syncsWithExchange = "syncsWithExchange";
			public static readonly Selector useSSL = "useSSL";
			public static readonly Selector usingActiveDirectory = "usingActiveDirectory";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABFancyImagePickerController : IEquatable<ABFancyImagePickerController> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABFancyImagePickerController;
		public static implicit operator NSObject( ABFancyImagePickerController value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABFancyImagePickerController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABFancyImagePickerController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABFancyImagePickerController?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABFancyImagePickerController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABFancyImagePickerController value1, ABFancyImagePickerController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABFancyImagePickerController value1, ABFancyImagePickerController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABFancyImagePickerController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABFancyImagePickerController alloc() {
			return new ABFancyImagePickerController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static bool isCameraAttached() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isCameraAttached( ClassHandle, CachedSelectors.isCameraAttached, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool isIrisClosed() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isIrisClosed( Handle, CachedSelectors.isIrisClosed, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void maximizeSize_( NObjective.RuntimeObject size ) {
			RuntimeObject ___occuredException;
			NativeMethods.maximizeSize_( Handle, CachedSelectors.maximizeSize_, out ___occuredException, sizeof( NObjective.RuntimeObject ), size );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void minimizeSize_( NObjective.RuntimeObject size ) {
			RuntimeObject ___occuredException;
			NativeMethods.minimizeSize_( Handle, CachedSelectors.minimizeSize_, out ___occuredException, sizeof( NObjective.RuntimeObject ), size );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject originalImage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.originalImage( Handle, CachedSelectors.originalImage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAcceptsDrags_( char drags ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAcceptsDrags_( Handle, CachedSelectors.setAcceptsDrags_, out ___occuredException, sizeof( char ), drags );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDelegate_( Handle, CachedSelectors.setDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void startLivePicture_( NObjective.RuntimeObject picture ) {
			RuntimeObject ___occuredException;
			NativeMethods.startLivePicture_( Handle, CachedSelectors.startLivePicture_, out ___occuredException, sizeof( NObjective.RuntimeObject ), picture );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void startPictureCountDown_( NObjective.RuntimeObject down ) {
			RuntimeObject ___occuredException;
			NativeMethods.startPictureCountDown_( Handle, CachedSelectors.startPictureCountDown_, out ___occuredException, sizeof( NObjective.RuntimeObject ), down );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void startPictureCountDownWithDelay_( NObjective.RuntimeObject delay ) {
			RuntimeObject ___occuredException;
			NativeMethods.startPictureCountDownWithDelay_( Handle, CachedSelectors.startPictureCountDownWithDelay_, out ___occuredException, sizeof( NObjective.RuntimeObject ), delay );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void stopLivePicture_( NObjective.RuntimeObject picture ) {
			RuntimeObject ___occuredException;
			NativeMethods.stopLivePicture_( Handle, CachedSelectors.stopLivePicture_, out ___occuredException, sizeof( NObjective.RuntimeObject ), picture );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void takeCameraCaptureDelayFromFloatValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.takeCameraCaptureDelayFromFloatValue_( Handle, CachedSelectors.takeCameraCaptureDelayFromFloatValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void takeFlashColorFromColorValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.takeFlashColorFromColorValue_( Handle, CachedSelectors.takeFlashColorFromColorValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void takeFlashFallTimeFromFloatValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.takeFlashFallTimeFromFloatValue_( Handle, CachedSelectors.takeFlashFallTimeFromFloatValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void takeFlashRiseTimeFromFloatValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.takeFlashRiseTimeFromFloatValue_( Handle, CachedSelectors.takeFlashRiseTimeFromFloatValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void takeFlashSaturationFromFloatValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.takeFlashSaturationFromFloatValue_( Handle, CachedSelectors.takeFlashSaturationFromFloatValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void takeFlashSustainTimeFromFloatValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.takeFlashSustainTimeFromFloatValue_( Handle, CachedSelectors.takeFlashSustainTimeFromFloatValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void takeSizeFromFloatValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.takeSizeFromFloatValue_( Handle, CachedSelectors.takeSizeFromFloatValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isCameraAttached( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isIrisClosed( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void maximizeSize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject size );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void minimizeSize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject size );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr originalImage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAcceptsDrags_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char drags );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void startLivePicture_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject picture );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void startPictureCountDown_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject down );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void startPictureCountDownWithDelay_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject delay );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void stopLivePicture_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject picture );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void takeCameraCaptureDelayFromFloatValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void takeFlashColorFromColorValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void takeFlashFallTimeFromFloatValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void takeFlashRiseTimeFromFloatValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void takeFlashSaturationFromFloatValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void takeFlashSustainTimeFromFloatValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void takeSizeFromFloatValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
		}
		static internal class CachedSelectors {
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector isCameraAttached = "isCameraAttached";
			public static readonly Selector isIrisClosed = "isIrisClosed";
			public static readonly Selector maximizeSize_ = "maximizeSize:";
			public static readonly Selector minimizeSize_ = "minimizeSize:";
			public static readonly Selector originalImage = "originalImage";
			public static readonly Selector setAcceptsDrags_ = "setAcceptsDrags:";
			public static readonly Selector setDelegate_ = "setDelegate:";
			public static readonly Selector startLivePicture_ = "startLivePicture:";
			public static readonly Selector startPictureCountDown_ = "startPictureCountDown:";
			public static readonly Selector startPictureCountDownWithDelay_ = "startPictureCountDownWithDelay:";
			public static readonly Selector stopLivePicture_ = "stopLivePicture:";
			public static readonly Selector takeCameraCaptureDelayFromFloatValue_ = "takeCameraCaptureDelayFromFloatValue:";
			public static readonly Selector takeFlashColorFromColorValue_ = "takeFlashColorFromColorValue:";
			public static readonly Selector takeFlashFallTimeFromFloatValue_ = "takeFlashFallTimeFromFloatValue:";
			public static readonly Selector takeFlashRiseTimeFromFloatValue_ = "takeFlashRiseTimeFromFloatValue:";
			public static readonly Selector takeFlashSaturationFromFloatValue_ = "takeFlashSaturationFromFloatValue:";
			public static readonly Selector takeFlashSustainTimeFromFloatValue_ = "takeFlashSustainTimeFromFloatValue:";
			public static readonly Selector takeSizeFromFloatValue_ = "takeSizeFromFloatValue:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSView ) )]
	public struct ABFancyImagePickerView : IEquatable<ABFancyImagePickerView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABFancyImagePickerView;
		public static implicit operator NSView( ABFancyImagePickerView value ) {
			return new NSView( value.Handle );
		}
		public static implicit operator NSResponder( ABFancyImagePickerView value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABFancyImagePickerView value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABFancyImagePickerView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABFancyImagePickerView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABFancyImagePickerView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABFancyImagePickerView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABFancyImagePickerView value1, ABFancyImagePickerView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABFancyImagePickerView value1, ABFancyImagePickerView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABFancyImagePickerView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABFancyImagePickerView alloc() {
			return new ABFancyImagePickerView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABFileManager : IEquatable<ABFileManager> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABFileManager;
		public static implicit operator NSObject( ABFileManager value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABFileManager value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABFileManager value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABFileManager?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABFileManager value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABFileManager value1, ABFileManager value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABFileManager value1, ABFileManager value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABFileManager( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABFileManager alloc() {
			return new ABFileManager( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject defaultManager() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultManager( ClassHandle, CachedSelectors.defaultManager, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject failedPasswordHandler() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.failedPasswordHandler( ClassHandle, CachedSelectors.failedPasswordHandler, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void setFailedPasswordHandler_( NObjective.RuntimeObject handler ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFailedPasswordHandler_( ClassHandle, CachedSelectors.setFailedPasswordHandler_, out ___occuredException, sizeof( NObjective.RuntimeObject ), handler );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char ACLsAtURL_read_write_( NObjective.RuntimeObject url, System.IntPtr read, System.IntPtr write ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ACLsAtURL_read_write_( Handle, CachedSelectors.ACLsAtURL_read_write_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ), url, read, write );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char clearACLsForURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.clearACLsForURL_( Handle, CachedSelectors.clearACLsForURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char createDirectoryAtAURL_( NObjective.RuntimeObject aurl ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createDirectoryAtAURL_( Handle, CachedSelectors.createDirectoryAtAURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), aurl );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject dictionaryAtURL_errorCode_securely_( NObjective.RuntimeObject url, System.IntPtr errorCode, char securely ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dictionaryAtURL_errorCode_securely_( Handle, CachedSelectors.dictionaryAtURL_errorCode_securely_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ) + sizeof( char ), url, errorCode, securely );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject directoryContentsAtURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryContentsAtURL_( Handle, CachedSelectors.directoryContentsAtURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char fileExistsAtURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileExistsAtURL_( Handle, CachedSelectors.fileExistsAtURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject infoForFilesInContainer_( NObjective.RuntimeObject container ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.infoForFilesInContainer_( Handle, CachedSelectors.infoForFilesInContainer_, out ___occuredException, sizeof( NObjective.RuntimeObject ), container );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject modDateForURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.modDateForURL_( Handle, CachedSelectors.modDateForURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char removeDirectoryAndContentsAtURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeDirectoryAndContentsAtURL_( Handle, CachedSelectors.removeDirectoryAndContentsAtURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char removeFileAtURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeFileAtURL_( Handle, CachedSelectors.removeFileAtURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char setACLsWithReadPrincipals_writePrincipals_onURL_( NObjective.RuntimeObject principals, NObjective.RuntimeObject writePrincipals, NObjective.RuntimeObject onURL ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setACLsWithReadPrincipals_writePrincipals_onURL_( Handle, CachedSelectors.setACLsWithReadPrincipals_writePrincipals_onURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), principals, writePrincipals, onURL );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char write_toURL_securely_( NObjective.RuntimeObject write, NObjective.RuntimeObject toURL, char securely ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.write_toURL_securely_( Handle, CachedSelectors.write_toURL_securely_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), write, toURL, securely );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char ACLsAtURL_read_write_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url, System.IntPtr read, System.IntPtr write );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char clearACLsForURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char createDirectoryAtAURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject aurl );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultManager( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dictionaryAtURL_errorCode_securely_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url, System.IntPtr errorCode, char securely );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr directoryContentsAtURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr failedPasswordHandler( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char fileExistsAtURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr infoForFilesInContainer_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject container );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr modDateForURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char removeDirectoryAndContentsAtURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char removeFileAtURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char setACLsWithReadPrincipals_writePrincipals_onURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject principals, NObjective.RuntimeObject writePrincipals, NObjective.RuntimeObject onURL );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFailedPasswordHandler_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject handler );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char write_toURL_securely_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject write, NObjective.RuntimeObject toURL, char securely );
		}
		static internal class CachedSelectors {
			public static readonly Selector ACLsAtURL_read_write_ = "ACLsAtURL:read:write:";
			public static readonly Selector clearACLsForURL_ = "clearACLsForURL:";
			public static readonly Selector createDirectoryAtAURL_ = "createDirectoryAtAURL:";
			public static readonly Selector defaultManager = "defaultManager";
			public static readonly Selector dictionaryAtURL_errorCode_securely_ = "dictionaryAtURL:errorCode:securely:";
			public static readonly Selector directoryContentsAtURL_ = "directoryContentsAtURL:";
			public static readonly Selector failedPasswordHandler = "failedPasswordHandler";
			public static readonly Selector fileExistsAtURL_ = "fileExistsAtURL:";
			public static readonly Selector infoForFilesInContainer_ = "infoForFilesInContainer:";
			public static readonly Selector modDateForURL_ = "modDateForURL:";
			public static readonly Selector removeDirectoryAndContentsAtURL_ = "removeDirectoryAndContentsAtURL:";
			public static readonly Selector removeFileAtURL_ = "removeFileAtURL:";
			public static readonly Selector setACLsWithReadPrincipals_writePrincipals_onURL_ = "setACLsWithReadPrincipals:writePrincipals:onURL:";
			public static readonly Selector setFailedPasswordHandler_ = "setFailedPasswordHandler:";
			public static readonly Selector write_toURL_securely_ = "write:toURL:securely:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABScrollView ) )]
	public struct ABFlareScrollView : IEquatable<ABFlareScrollView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABFlareScrollView;
		public static implicit operator ABScrollView( ABFlareScrollView value ) {
			return new ABScrollView( value.Handle );
		}
		public static implicit operator NSScrollView( ABFlareScrollView value ) {
			return new NSScrollView( value.Handle );
		}
		public static implicit operator NSView( ABFlareScrollView value ) {
			return new NSView( value.Handle );
		}
		public static implicit operator NSResponder( ABFlareScrollView value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABFlareScrollView value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABFlareScrollView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABFlareScrollView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABFlareScrollView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABFlareScrollView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABFlareScrollView value1, ABFlareScrollView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABFlareScrollView value1, ABFlareScrollView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABFlareScrollView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABFlareScrollView alloc() {
			return new ABFlareScrollView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public int messageType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.messageType( Handle, CachedSelectors.messageType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setMessageType_( int type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMessageType_( Handle, CachedSelectors.setMessageType_, out ___occuredException, sizeof( int ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShowFlare_( char flare ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShowFlare_( Handle, CachedSelectors.setShowFlare_, out ___occuredException, sizeof( char ), flare );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char showFlare() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.showFlare( Handle, CachedSelectors.showFlare, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void updateFlare() {
			RuntimeObject ___occuredException;
			NativeMethods.updateFlare( Handle, CachedSelectors.updateFlare, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateFlareWindow() {
			RuntimeObject ___occuredException;
			NativeMethods.updateFlareWindow( Handle, CachedSelectors.updateFlareWindow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateNotifications() {
			RuntimeObject ___occuredException;
			NativeMethods.updateNotifications( Handle, CachedSelectors.updateNotifications, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void windowDidBecomeKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowDidBecomeKey_( Handle, CachedSelectors.windowDidBecomeKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void windowDidResignKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowDidResignKey_( Handle, CachedSelectors.windowDidResignKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void windowWillClose_( NObjective.RuntimeObject close ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowWillClose_( Handle, CachedSelectors.windowWillClose_, out ___occuredException, sizeof( NObjective.RuntimeObject ), close );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int messageType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMessageType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setShowFlare_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char flare );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char showFlare( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateFlare( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateFlareWindow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateNotifications( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void windowDidBecomeKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void windowDidResignKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void windowWillClose_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject close );
		}
		static internal class CachedSelectors {
			public static readonly Selector messageType = "messageType";
			public static readonly Selector setMessageType_ = "setMessageType:";
			public static readonly Selector setShowFlare_ = "setShowFlare:";
			public static readonly Selector showFlare = "showFlare";
			public static readonly Selector updateFlare = "updateFlare";
			public static readonly Selector updateFlareWindow = "updateFlareWindow";
			public static readonly Selector updateNotifications = "updateNotifications";
			public static readonly Selector windowDidBecomeKey_ = "windowDidBecomeKey:";
			public static readonly Selector windowDidResignKey_ = "windowDidResignKey:";
			public static readonly Selector windowWillClose_ = "windowWillClose:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABFZServiceClient : IEquatable<ABFZServiceClient> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABFZServiceClient;
		public static implicit operator NSObject( ABFZServiceClient value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABFZServiceClient value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABFZServiceClient value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABFZServiceClient?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABFZServiceClient value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABFZServiceClient value1, ABFZServiceClient value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABFZServiceClient value1, ABFZServiceClient value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABFZServiceClient( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABFZServiceClient alloc() {
			return new ABFZServiceClient( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject allServices() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allServices( ClassHandle, CachedSelectors.allServices, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void connectionDidDie_( NObjective.RuntimeObject die ) {
			RuntimeObject ___occuredException;
			NativeMethods.connectionDidDie_( ClassHandle, CachedSelectors.connectionDidDie_, out ___occuredException, sizeof( NObjective.RuntimeObject ), die );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject serviceWithInternalName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.serviceWithInternalName_( ClassHandle, CachedSelectors.serviceWithInternalName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static char start() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.start( ClassHandle, CachedSelectors.start, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static void stop() {
			RuntimeObject ___occuredException;
			NativeMethods.stop( ClassHandle, CachedSelectors.stop, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject addressBookProperty() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addressBookProperty( Handle, CachedSelectors.addressBookProperty, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject allPeople() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allPeople( Handle, CachedSelectors.allPeople, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject canonicalFormOfID_( NObjective.RuntimeObject id ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canonicalFormOfID_( Handle, CachedSelectors.canonicalFormOfID_, out ___occuredException, sizeof( NObjective.RuntimeObject ), id );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject emailDomains() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.emailDomains( Handle, CachedSelectors.emailDomains, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char equalID_andID_( NObjective.RuntimeObject id, NObjective.RuntimeObject andID ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.equalID_andID_( Handle, CachedSelectors.equalID_andID_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), id, andID );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int IDSensitivity() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.IDSensitivity( Handle, CachedSelectors.IDSensitivity, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject infoForPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.infoForPerson_( Handle, CachedSelectors.infoForPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithFZService_named_( NObjective.RuntimeObject service, NObjective.RuntimeObject named ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithFZService_named_( Handle, CachedSelectors.initWithFZService_named_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), service, named );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject internalName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.internalName( Handle, CachedSelectors.internalName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void service_buddy_shareDirectory_listing_( NObjective.RuntimeObject service, NObjective.RuntimeObject buddy, NObjective.RuntimeObject shareDirectory, NObjective.RuntimeObject listing ) {
			RuntimeObject ___occuredException;
			NativeMethods.service_buddy_shareDirectory_listing_( Handle, CachedSelectors.service_buddy_shareDirectory_listing_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), service, buddy, shareDirectory, listing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void service_buddyGroupsChanged_( NObjective.RuntimeObject service, NObjective.RuntimeObject buddyGroupsChanged ) {
			RuntimeObject ___occuredException;
			NativeMethods.service_buddyGroupsChanged_( Handle, CachedSelectors.service_buddyGroupsChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), service, buddyGroupsChanged );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void service_buddyPictureChanged_imageData_( NObjective.RuntimeObject service, NObjective.RuntimeObject buddyPictureChanged, NObjective.RuntimeObject imageData ) {
			RuntimeObject ___occuredException;
			NativeMethods.service_buddyPictureChanged_imageData_( Handle, CachedSelectors.service_buddyPictureChanged_imageData_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), service, buddyPictureChanged, imageData );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void service_buddyPropertiesChanged_( NObjective.RuntimeObject service, NObjective.RuntimeObject buddyPropertiesChanged ) {
			RuntimeObject ___occuredException;
			NativeMethods.service_buddyPropertiesChanged_( Handle, CachedSelectors.service_buddyPropertiesChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), service, buddyPropertiesChanged );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void service_cancelVCInviteFrom_( NObjective.RuntimeObject service, NObjective.RuntimeObject cancelVCInviteFrom ) {
			RuntimeObject ___occuredException;
			NativeMethods.service_cancelVCInviteFrom_( Handle, CachedSelectors.service_cancelVCInviteFrom_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), service, cancelVCInviteFrom );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void service_chat_member_statusChanged_( NObjective.RuntimeObject service, NObjective.RuntimeObject chat, NObjective.RuntimeObject member, int statusChanged ) {
			RuntimeObject ___occuredException;
			NativeMethods.service_chat_member_statusChanged_( Handle, CachedSelectors.service_chat_member_statusChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), service, chat, member, statusChanged );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void service_chat_messageReceived_( NObjective.RuntimeObject service, NObjective.RuntimeObject chat, NObjective.RuntimeObject messageReceived ) {
			RuntimeObject ___occuredException;
			NativeMethods.service_chat_messageReceived_( Handle, CachedSelectors.service_chat_messageReceived_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), service, chat, messageReceived );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void service_chat_showError_( NObjective.RuntimeObject service, NObjective.RuntimeObject chat, NObjective.RuntimeObject showError ) {
			RuntimeObject ___occuredException;
			NativeMethods.service_chat_showError_( Handle, CachedSelectors.service_chat_showError_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), service, chat, showError );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void service_chat_statusChanged_( NObjective.RuntimeObject service, NObjective.RuntimeObject chat, int statusChanged ) {
			RuntimeObject ___occuredException;
			NativeMethods.service_chat_statusChanged_( Handle, CachedSelectors.service_chat_statusChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), service, chat, statusChanged );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void service_counterProposalFrom_connectData_( NObjective.RuntimeObject service, NObjective.RuntimeObject counterProposalFrom, NObjective.RuntimeObject connectData ) {
			RuntimeObject ___occuredException;
			NativeMethods.service_counterProposalFrom_connectData_( Handle, CachedSelectors.service_counterProposalFrom_connectData_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), service, counterProposalFrom, connectData );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void service_defaultsChanged_( NObjective.RuntimeObject service, NObjective.RuntimeObject defaultsChanged ) {
			RuntimeObject ___occuredException;
			NativeMethods.service_defaultsChanged_( Handle, CachedSelectors.service_defaultsChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), service, defaultsChanged );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void service_directIMRequestFrom_invitation_( NObjective.RuntimeObject service, NObjective.RuntimeObject directIMRequestFrom, NObjective.RuntimeObject invitation ) {
			RuntimeObject ___occuredException;
			NativeMethods.service_directIMRequestFrom_invitation_( Handle, CachedSelectors.service_directIMRequestFrom_invitation_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), service, directIMRequestFrom, invitation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void service_handleVCOOB_action_param_( NObjective.RuntimeObject service, NObjective.RuntimeObject handleVCOOB, uint action, uint param ) {
			RuntimeObject ___occuredException;
			NativeMethods.service_handleVCOOB_action_param_( Handle, CachedSelectors.service_handleVCOOB_action_param_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( uint ), service, handleVCOOB, action, param );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void service_invitedToChat_isChatRoom_invitation_( NObjective.RuntimeObject service, NObjective.RuntimeObject invitedToChat, char isChatRoom, NObjective.RuntimeObject invitation ) {
			RuntimeObject ___occuredException;
			NativeMethods.service_invitedToChat_isChatRoom_invitation_( Handle, CachedSelectors.service_invitedToChat_isChatRoom_invitation_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( NObjective.RuntimeObject ), service, invitedToChat, isChatRoom, invitation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void service_invitedToVC_audioOnly_callerExtIP_callerExtSIP_( NObjective.RuntimeObject service, NObjective.RuntimeObject invitedToVC, char audioOnly, NObjective.RuntimeObject callerExtIP, uint callerExtSIP ) {
			RuntimeObject ___occuredException;
			NativeMethods.service_invitedToVC_audioOnly_callerExtIP_callerExtSIP_( Handle, CachedSelectors.service_invitedToVC_audioOnly_callerExtIP_callerExtSIP_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ), service, invitedToVC, audioOnly, callerExtIP, callerExtSIP );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void service_loginStatusChanged_message_reason_( NObjective.RuntimeObject service, int loginStatusChanged, NObjective.RuntimeObject message, int reason ) {
			RuntimeObject ___occuredException;
			NativeMethods.service_loginStatusChanged_message_reason_( Handle, CachedSelectors.service_loginStatusChanged_message_reason_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), service, loginStatusChanged, message, reason );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void service_providePiggyback_( NObjective.RuntimeObject service, char providePiggyback ) {
			RuntimeObject ___occuredException;
			NativeMethods.service_providePiggyback_( Handle, CachedSelectors.service_providePiggyback_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), service, providePiggyback );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void service_requestIncomingFileXfer_( NObjective.RuntimeObject service, NObjective.RuntimeObject requestIncomingFileXfer ) {
			RuntimeObject ___occuredException;
			NativeMethods.service_requestIncomingFileXfer_( Handle, CachedSelectors.service_requestIncomingFileXfer_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), service, requestIncomingFileXfer );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void service_requestOutgoingFileXfer_( NObjective.RuntimeObject service, NObjective.RuntimeObject requestOutgoingFileXfer ) {
			RuntimeObject ___occuredException;
			NativeMethods.service_requestOutgoingFileXfer_( Handle, CachedSelectors.service_requestOutgoingFileXfer_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), service, requestOutgoingFileXfer );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void service_responseToVCRequest_response_connectData_( NObjective.RuntimeObject service, NObjective.RuntimeObject responseToVCRequest, int response, NObjective.RuntimeObject connectData ) {
			RuntimeObject ___occuredException;
			NativeMethods.service_responseToVCRequest_response_connectData_( Handle, CachedSelectors.service_responseToVCRequest_response_connectData_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), service, responseToVCRequest, response, connectData );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void service_shareUploadStarted_( NObjective.RuntimeObject service, NObjective.RuntimeObject shareUploadStarted ) {
			RuntimeObject ___occuredException;
			NativeMethods.service_shareUploadStarted_( Handle, CachedSelectors.service_shareUploadStarted_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), service, shareUploadStarted );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void service_youAreDesignatedNotifier_( NObjective.RuntimeObject service, char youAreDesignatedNotifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.service_youAreDesignatedNotifier_( Handle, CachedSelectors.service_youAreDesignatedNotifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), service, youAreDesignatedNotifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject shortName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shortName( Handle, CachedSelectors.shortName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int status() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.status( Handle, CachedSelectors.status, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr addressBookProperty( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allPeople( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allServices( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr canonicalFormOfID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connectionDidDie_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject die );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr emailDomains( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char equalID_andID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id, NObjective.RuntimeObject andID );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int IDSensitivity( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr infoForPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithFZService_named_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject service, NObjective.RuntimeObject named );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr internalName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void service_buddy_shareDirectory_listing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject service, NObjective.RuntimeObject buddy, NObjective.RuntimeObject shareDirectory, NObjective.RuntimeObject listing );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void service_buddyGroupsChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject service, NObjective.RuntimeObject buddyGroupsChanged );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void service_buddyPictureChanged_imageData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject service, NObjective.RuntimeObject buddyPictureChanged, NObjective.RuntimeObject imageData );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void service_buddyPropertiesChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject service, NObjective.RuntimeObject buddyPropertiesChanged );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void service_cancelVCInviteFrom_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject service, NObjective.RuntimeObject cancelVCInviteFrom );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void service_chat_member_statusChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject service, NObjective.RuntimeObject chat, NObjective.RuntimeObject member, int statusChanged );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void service_chat_messageReceived_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject service, NObjective.RuntimeObject chat, NObjective.RuntimeObject messageReceived );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void service_chat_showError_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject service, NObjective.RuntimeObject chat, NObjective.RuntimeObject showError );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void service_chat_statusChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject service, NObjective.RuntimeObject chat, int statusChanged );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void service_counterProposalFrom_connectData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject service, NObjective.RuntimeObject counterProposalFrom, NObjective.RuntimeObject connectData );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void service_defaultsChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject service, NObjective.RuntimeObject defaultsChanged );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void service_directIMRequestFrom_invitation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject service, NObjective.RuntimeObject directIMRequestFrom, NObjective.RuntimeObject invitation );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void service_handleVCOOB_action_param_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject service, NObjective.RuntimeObject handleVCOOB, uint action, uint param );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void service_invitedToChat_isChatRoom_invitation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject service, NObjective.RuntimeObject invitedToChat, char isChatRoom, NObjective.RuntimeObject invitation );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void service_invitedToVC_audioOnly_callerExtIP_callerExtSIP_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject service, NObjective.RuntimeObject invitedToVC, char audioOnly, NObjective.RuntimeObject callerExtIP, uint callerExtSIP );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void service_loginStatusChanged_message_reason_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject service, int loginStatusChanged, NObjective.RuntimeObject message, int reason );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void service_providePiggyback_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject service, char providePiggyback );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void service_requestIncomingFileXfer_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject service, NObjective.RuntimeObject requestIncomingFileXfer );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void service_requestOutgoingFileXfer_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject service, NObjective.RuntimeObject requestOutgoingFileXfer );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void service_responseToVCRequest_response_connectData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject service, NObjective.RuntimeObject responseToVCRequest, int response, NObjective.RuntimeObject connectData );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void service_shareUploadStarted_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject service, NObjective.RuntimeObject shareUploadStarted );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void service_youAreDesignatedNotifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject service, char youAreDesignatedNotifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr serviceWithInternalName_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr shortName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char start( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int status( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void stop( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addressBookProperty = "addressBookProperty";
			public static readonly Selector allPeople = "allPeople";
			public static readonly Selector allServices = "allServices";
			public static readonly Selector canonicalFormOfID_ = "canonicalFormOfID:";
			public static readonly Selector connectionDidDie_ = "connectionDidDie:";
			public static readonly Selector emailDomains = "emailDomains";
			public static readonly Selector equalID_andID_ = "equalID:andID:";
			public static readonly Selector IDSensitivity = "IDSensitivity";
			public static readonly Selector infoForPerson_ = "infoForPerson:";
			public static readonly Selector initWithFZService_named_ = "initWithFZService:named:";
			public static readonly Selector internalName = "internalName";
			public static readonly Selector name = "name";
			public static readonly Selector service_buddy_shareDirectory_listing_ = "service:buddy:shareDirectory:listing:";
			public static readonly Selector service_buddyGroupsChanged_ = "service:buddyGroupsChanged:";
			public static readonly Selector service_buddyPictureChanged_imageData_ = "service:buddyPictureChanged:imageData:";
			public static readonly Selector service_buddyPropertiesChanged_ = "service:buddyPropertiesChanged:";
			public static readonly Selector service_cancelVCInviteFrom_ = "service:cancelVCInviteFrom:";
			public static readonly Selector service_chat_member_statusChanged_ = "service:chat:member:statusChanged:";
			public static readonly Selector service_chat_messageReceived_ = "service:chat:messageReceived:";
			public static readonly Selector service_chat_showError_ = "service:chat:showError:";
			public static readonly Selector service_chat_statusChanged_ = "service:chat:statusChanged:";
			public static readonly Selector service_counterProposalFrom_connectData_ = "service:counterProposalFrom:connectData:";
			public static readonly Selector service_defaultsChanged_ = "service:defaultsChanged:";
			public static readonly Selector service_directIMRequestFrom_invitation_ = "service:directIMRequestFrom:invitation:";
			public static readonly Selector service_handleVCOOB_action_param_ = "service:handleVCOOB:action:param:";
			public static readonly Selector service_invitedToChat_isChatRoom_invitation_ = "service:invitedToChat:isChatRoom:invitation:";
			public static readonly Selector service_invitedToVC_audioOnly_callerExtIP_callerExtSIP_ = "service:invitedToVC:audioOnly:callerExtIP:callerExtSIP:";
			public static readonly Selector service_loginStatusChanged_message_reason_ = "service:loginStatusChanged:message:reason:";
			public static readonly Selector service_providePiggyback_ = "service:providePiggyback:";
			public static readonly Selector service_requestIncomingFileXfer_ = "service:requestIncomingFileXfer:";
			public static readonly Selector service_requestOutgoingFileXfer_ = "service:requestOutgoingFileXfer:";
			public static readonly Selector service_responseToVCRequest_response_connectData_ = "service:responseToVCRequest:response:connectData:";
			public static readonly Selector service_shareUploadStarted_ = "service:shareUploadStarted:";
			public static readonly Selector service_youAreDesignatedNotifier_ = "service:youAreDesignatedNotifier:";
			public static readonly Selector serviceWithInternalName_ = "serviceWithInternalName:";
			public static readonly Selector shortName = "shortName";
			public static readonly Selector start = "start";
			public static readonly Selector status = "status";
			public static readonly Selector stop = "stop";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABRecord ) )]
	public struct ABGroup : IEquatable<ABGroup> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABGroup;
		public static implicit operator ABRecord( ABGroup value ) {
			return new ABRecord( value.Handle );
		}
		public static implicit operator NSObject( ABGroup value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABGroup value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABGroup value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABGroup?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABGroup value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABGroup value1, ABGroup value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABGroup value1, ABGroup value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABGroup( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABGroup alloc() {
			return new ABGroup( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject addGroupFromDictionary_( NObjective.RuntimeObject dictionary ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addGroupFromDictionary_( ClassHandle, CachedSelectors.addGroupFromDictionary_, out ___occuredException, sizeof( NObjective.RuntimeObject ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static int addPropertiesAndTypes_( NSDictionary types ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addPropertiesAndTypes_( ClassHandle, CachedSelectors.addPropertiesAndTypes_, out ___occuredException, sizeof( NSDictionary ), types );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject nts_Groups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_Groups( ClassHandle, CachedSelectors.nts_Groups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NSArray properties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.properties( ClassHandle, CachedSelectors.properties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public static int removeProperties_( NSArray properties ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeProperties_( ClassHandle, CachedSelectors.removeProperties_, out ___occuredException, sizeof( NSArray ), properties );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static ABSearchElement searchElementForProperty_label_key_value_comparison_( string property, string label, string key, NObjective.RuntimeObject value, ABSearchComparison comparison ) {
			RuntimeObject ___occuredException;
			var ___wrappedproperty = Runtime.CreateStringProxy( property );
			var ___wrappedlabel = Runtime.CreateStringProxy( label );
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.searchElementForProperty_label_key_value_comparison_( ClassHandle, CachedSelectors.searchElementForProperty_label_key_value_comparison_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( NObjective.RuntimeObject ) + sizeof( ABSearchComparison ), ___wrappedproperty, ___wrappedlabel, ___wrappedkey, value, comparison );
			Runtime.ReleaseNativeObject( ___wrappedproperty );
			Runtime.ReleaseNativeObject( ___wrappedlabel );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new ABSearchElement( ___result );
		}
		unsafe public static ABPropertyType typeOfProperty_( string property ) {
			RuntimeObject ___occuredException;
			var ___wrappedproperty = Runtime.CreateStringProxy( property );
			var ___result = NativeMethods.typeOfProperty_( ClassHandle, CachedSelectors.typeOfProperty_, out ___occuredException, sizeof( IntPtr ), ___wrappedproperty );
			Runtime.ReleaseNativeObject( ___wrappedproperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( ABPropertyType ) ___result;
		}
		unsafe public bool addMember_( ABPerson member ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addMember_( Handle, CachedSelectors.addMember_, out ___occuredException, sizeof( ABPerson ), member );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool addSubgroup_( ABGroup subgroup ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addSubgroup_( Handle, CachedSelectors.addSubgroup_, out ___occuredException, sizeof( ABGroup ), subgroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char addSubrecord_( NObjective.RuntimeObject subrecord ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addSubrecord_( Handle, CachedSelectors.addSubrecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), subrecord );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject allAssociatedMembersAndSubgroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allAssociatedMembersAndSubgroups( Handle, CachedSelectors.allAssociatedMembersAndSubgroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject allAssociatedMembersAndSubgroups_( char subgroups ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allAssociatedMembersAndSubgroups_( Handle, CachedSelectors.allAssociatedMembersAndSubgroups_, out ___occuredException, sizeof( char ), subgroups );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string distributionIdentifierForProperty_person_( string property, ABPerson person ) {
			RuntimeObject ___occuredException;
			var ___wrappedproperty = Runtime.CreateStringProxy( property );
			var ___result = NativeMethods.distributionIdentifierForProperty_person_( Handle, CachedSelectors.distributionIdentifierForProperty_person_, out ___occuredException, sizeof( IntPtr ) + sizeof( ABPerson ), ___wrappedproperty, person );
			Runtime.ReleaseNativeObject( ___wrappedproperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public int distributionIndexForProperty_person_( NObjective.RuntimeObject property, NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.distributionIndexForProperty_person_( Handle, CachedSelectors.distributionIndexForProperty_person_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject distributionStringsForMembers() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.distributionStringsForMembers( Handle, CachedSelectors.distributionStringsForMembers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject distributionValueForProperty_person_( NObjective.RuntimeObject property, NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.distributionValueForProperty_person_( Handle, CachedSelectors.distributionValueForProperty_person_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject enclosedSubscriptionGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.enclosedSubscriptionGroups( Handle, CachedSelectors.enclosedSubscriptionGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject icon() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.icon( Handle, CachedSelectors.icon, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isPublishable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isPublishable( Handle, CachedSelectors.isPublishable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isSpecialGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isSpecialGroup( Handle, CachedSelectors.isSpecialGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSArray members() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.members( Handle, CachedSelectors.members, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NObjective.RuntimeObject membersAndSubgroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.membersAndSubgroups( Handle, CachedSelectors.membersAndSubgroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void mergeRemoteLocations_( NObjective.RuntimeObject locations ) {
			RuntimeObject ___occuredException;
			NativeMethods.mergeRemoteLocations_( Handle, CachedSelectors.mergeRemoteLocations_, out ___occuredException, sizeof( NObjective.RuntimeObject ), locations );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts_AddMember_( NObjective.RuntimeObject member ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_AddMember_( Handle, CachedSelectors.nts_AddMember_, out ___occuredException, sizeof( NObjective.RuntimeObject ), member );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void nts_AddMembersAndSubgroupsFromDictionaryRepresentation_withRecordMapping_( NObjective.RuntimeObject representation, NObjective.RuntimeObject withRecordMapping ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_AddMembersAndSubgroupsFromDictionaryRepresentation_withRecordMapping_( Handle, CachedSelectors.nts_AddMembersAndSubgroupsFromDictionaryRepresentation_withRecordMapping_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), representation, withRecordMapping );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char nts_AddRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_AddRecord_( Handle, CachedSelectors.nts_AddRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_AddSubgroup_( NObjective.RuntimeObject subgroup ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_AddSubgroup_( Handle, CachedSelectors.nts_AddSubgroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), subgroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void nts_ClearInstanceCaches() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_ClearInstanceCaches( Handle, CachedSelectors.nts_ClearInstanceCaches, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int nts_IndexOfMemberWithUID_( NObjective.RuntimeObject uid ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_IndexOfMemberWithUID_( Handle, CachedSelectors.nts_IndexOfMemberWithUID_, out ___occuredException, sizeof( NObjective.RuntimeObject ), uid );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nts_Members() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_Members( Handle, CachedSelectors.nts_Members, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts_RecursiveContainsGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_RecursiveContainsGroup_( Handle, CachedSelectors.nts_RecursiveContainsGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_RemoveRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_RemoveRecord_( Handle, CachedSelectors.nts_RemoveRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_SetDistributionIdentifier_forProperty_person_( NObjective.RuntimeObject identifier, NObjective.RuntimeObject forProperty, NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SetDistributionIdentifier_forProperty_person_( Handle, CachedSelectors.nts_SetDistributionIdentifier_forProperty_person_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), identifier, forProperty, person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nts_Subgroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_Subgroups( Handle, CachedSelectors.nts_Subgroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char recursiveContainsGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.recursiveContainsGroup_( Handle, CachedSelectors.recursiveContainsGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool removeMember_( ABPerson member ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeMember_( Handle, CachedSelectors.removeMember_, out ___occuredException, sizeof( ABPerson ), member );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool removeSubgroup_( ABGroup subgroup ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeSubgroup_( Handle, CachedSelectors.removeSubgroup_, out ___occuredException, sizeof( ABGroup ), subgroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char removeSubrecord_( NObjective.RuntimeObject subrecord ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeSubrecord_( Handle, CachedSelectors.removeSubrecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), subrecord );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool setDistributionIdentifier_forProperty_person_( string identifier, string forProperty, ABPerson person ) {
			RuntimeObject ___occuredException;
			var ___wrappedidentifier = Runtime.CreateStringProxy( identifier );
			var ___wrappedforProperty = Runtime.CreateStringProxy( forProperty );
			var ___result = NativeMethods.setDistributionIdentifier_forProperty_person_( Handle, CachedSelectors.setDistributionIdentifier_forProperty_person_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( ABPerson ), ___wrappedidentifier, ___wrappedforProperty, person );
			Runtime.ReleaseNativeObject( ___wrappedidentifier );
			Runtime.ReleaseNativeObject( ___wrappedforProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool shouldClearSearchWhenSwitchingTo_( NObjective.RuntimeObject to ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shouldClearSearchWhenSwitchingTo_( Handle, CachedSelectors.shouldClearSearchWhenSwitchingTo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), to );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSArray subgroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subgroups( Handle, CachedSelectors.subgroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr addGroupFromDictionary_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool addMember_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ABPerson member );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int addPropertiesAndTypes_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary types );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool addSubgroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ABGroup subgroup );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char addSubrecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject subrecord );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allAssociatedMembersAndSubgroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allAssociatedMembersAndSubgroups_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char subgroups );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr distributionIdentifierForProperty_person_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr property, ABPerson person );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int distributionIndexForProperty_person_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject person );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr distributionStringsForMembers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr distributionValueForProperty_person_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject person );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr enclosedSubscriptionGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr icon( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isPublishable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isSpecialGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr members( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr membersAndSubgroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void mergeRemoteLocations_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject locations );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_AddMember_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject member );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_AddMembersAndSubgroupsFromDictionaryRepresentation_withRecordMapping_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject representation, NObjective.RuntimeObject withRecordMapping );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_AddRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_AddSubgroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject subgroup );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_ClearInstanceCaches( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_Groups( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int nts_IndexOfMemberWithUID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject uid );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_Members( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_RecursiveContainsGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_RemoveRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_SetDistributionIdentifier_forProperty_person_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier, NObjective.RuntimeObject forProperty, NObjective.RuntimeObject person );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_Subgroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr properties( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char recursiveContainsGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool removeMember_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ABPerson member );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int removeProperties_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray properties );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool removeSubgroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ABGroup subgroup );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char removeSubrecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject subrecord );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr searchElementForProperty_label_key_value_comparison_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr property, IntPtr label, IntPtr key, NObjective.RuntimeObject value, ABSearchComparison comparison );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool setDistributionIdentifier_forProperty_person_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr identifier, IntPtr forProperty, ABPerson person );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool shouldClearSearchWhenSwitchingTo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject to );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr subgroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int typeOfProperty_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr property );
		}
		static internal class CachedSelectors {
			public static readonly Selector addGroupFromDictionary_ = "addGroupFromDictionary:";
			public static readonly Selector addMember_ = "addMember:";
			public static readonly Selector addPropertiesAndTypes_ = "addPropertiesAndTypes:";
			public static readonly Selector addSubgroup_ = "addSubgroup:";
			public static readonly Selector addSubrecord_ = "addSubrecord:";
			public static readonly Selector allAssociatedMembersAndSubgroups = "allAssociatedMembersAndSubgroups";
			public static readonly Selector allAssociatedMembersAndSubgroups_ = "allAssociatedMembersAndSubgroups:";
			public static readonly Selector distributionIdentifierForProperty_person_ = "distributionIdentifierForProperty:person:";
			public static readonly Selector distributionIndexForProperty_person_ = "distributionIndexForProperty:person:";
			public static readonly Selector distributionStringsForMembers = "distributionStringsForMembers";
			public static readonly Selector distributionValueForProperty_person_ = "distributionValueForProperty:person:";
			public static readonly Selector enclosedSubscriptionGroups = "enclosedSubscriptionGroups";
			public static readonly Selector icon = "icon";
			public static readonly Selector isPublishable = "isPublishable";
			public static readonly Selector isSpecialGroup = "isSpecialGroup";
			public static readonly Selector members = "members";
			public static readonly Selector membersAndSubgroups = "membersAndSubgroups";
			public static readonly Selector mergeRemoteLocations_ = "mergeRemoteLocations:";
			public static readonly Selector name = "name";
			public static readonly Selector nts_AddMember_ = "nts_AddMember:";
			public static readonly Selector nts_AddMembersAndSubgroupsFromDictionaryRepresentation_withRecordMapping_ = "nts_AddMembersAndSubgroupsFromDictionaryRepresentation:withRecordMapping:";
			public static readonly Selector nts_AddRecord_ = "nts_AddRecord:";
			public static readonly Selector nts_AddSubgroup_ = "nts_AddSubgroup:";
			public static readonly Selector nts_ClearInstanceCaches = "nts_ClearInstanceCaches";
			public static readonly Selector nts_Groups = "nts_Groups";
			public static readonly Selector nts_IndexOfMemberWithUID_ = "nts_IndexOfMemberWithUID:";
			public static readonly Selector nts_Members = "nts_Members";
			public static readonly Selector nts_RecursiveContainsGroup_ = "nts_RecursiveContainsGroup:";
			public static readonly Selector nts_RemoveRecord_ = "nts_RemoveRecord:";
			public static readonly Selector nts_SetDistributionIdentifier_forProperty_person_ = "nts_SetDistributionIdentifier:forProperty:person:";
			public static readonly Selector nts_Subgroups = "nts_Subgroups";
			public static readonly Selector properties = "properties";
			public static readonly Selector recursiveContainsGroup_ = "recursiveContainsGroup:";
			public static readonly Selector removeMember_ = "removeMember:";
			public static readonly Selector removeProperties_ = "removeProperties:";
			public static readonly Selector removeSubgroup_ = "removeSubgroup:";
			public static readonly Selector removeSubrecord_ = "removeSubrecord:";
			public static readonly Selector searchElementForProperty_label_key_value_comparison_ = "searchElementForProperty:label:key:value:comparison:";
			public static readonly Selector setDistributionIdentifier_forProperty_person_ = "setDistributionIdentifier:forProperty:person:";
			public static readonly Selector shouldClearSearchWhenSwitchingTo_ = "shouldClearSearchWhenSwitchingTo:";
			public static readonly Selector subgroups = "subgroups";
			public static readonly Selector typeOfProperty_ = "typeOfProperty:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABCommand ) )]
	public struct ABGroupCommand : IEquatable<ABGroupCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABGroupCommand;
		public static implicit operator ABCommand( ABGroupCommand value ) {
			return new ABCommand( value.Handle );
		}
		public static implicit operator NSObject( ABGroupCommand value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABGroupCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABGroupCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABGroupCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABGroupCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABGroupCommand value1, ABGroupCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABGroupCommand value1, ABGroupCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABGroupCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABGroupCommand alloc() {
			return new ABGroupCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject addRecordsToGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addRecordsToGroup( Handle, CachedSelectors.addRecordsToGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithGroup_records_( NObjective.RuntimeObject @group, NObjective.RuntimeObject records ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithGroup_records_( Handle, CachedSelectors.initWithGroup_records_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @group, records );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject removeRecordsFromGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeRecordsFromGroup( Handle, CachedSelectors.removeRecordsFromGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr addRecordsToGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithGroup_records_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject records );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr removeRecordsFromGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addRecordsToGroup = "addRecordsToGroup";
			public static readonly Selector initWithGroup_records_ = "initWithGroup:records:";
			public static readonly Selector removeRecordsFromGroup = "removeRecordsFromGroup";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABRecord ) )]
	public struct ABGroupContents : IEquatable<ABGroupContents> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABGroupContents;
		public static implicit operator ABRecord( ABGroupContents value ) {
			return new ABRecord( value.Handle );
		}
		public static implicit operator NSObject( ABGroupContents value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABGroupContents value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABGroupContents value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABGroupContents?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABGroupContents value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABGroupContents value1, ABGroupContents value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABGroupContents value1, ABGroupContents value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABGroupContents( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABGroupContents alloc() {
			return new ABGroupContents( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static int nts_FindMemberUID_inArray_( NObjective.RuntimeObject uid, NObjective.RuntimeObject inArray ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_FindMemberUID_inArray_( ClassHandle, CachedSelectors.nts_FindMemberUID_inArray_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), uid, inArray );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject nts_GroupContents() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_GroupContents( ClassHandle, CachedSelectors.nts_GroupContents, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_DistributionIdentifierForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_DistributionIdentifierForProperty_( Handle, CachedSelectors.nts_DistributionIdentifierForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_GroupUID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_GroupUID( Handle, CachedSelectors.nts_GroupUID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_InitWithGroupUID_memberUID_( NObjective.RuntimeObject uid, NObjective.RuntimeObject memberUID ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_InitWithGroupUID_memberUID_( Handle, CachedSelectors.nts_InitWithGroupUID_memberUID_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), uid, memberUID );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_InsertInArray_( NObjective.RuntimeObject array ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_InsertInArray_( Handle, CachedSelectors.nts_InsertInArray_, out ___occuredException, sizeof( NObjective.RuntimeObject ), array );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nts_MemberUID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_MemberUID( Handle, CachedSelectors.nts_MemberUID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts_SetDistributionIdentifier_forProperty_( NObjective.RuntimeObject identifier, NObjective.RuntimeObject forProperty ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SetDistributionIdentifier_forProperty_( Handle, CachedSelectors.nts_SetDistributionIdentifier_forProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), identifier, forProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_DistributionIdentifierForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int nts_FindMemberUID_inArray_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject uid, NObjective.RuntimeObject inArray );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_GroupContents( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_GroupUID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_InitWithGroupUID_memberUID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject uid, NObjective.RuntimeObject memberUID );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_InsertInArray_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject array );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_MemberUID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_SetDistributionIdentifier_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier, NObjective.RuntimeObject forProperty );
		}
		static internal class CachedSelectors {
			public static readonly Selector nts_DistributionIdentifierForProperty_ = "nts_DistributionIdentifierForProperty:";
			public static readonly Selector nts_FindMemberUID_inArray_ = "nts_FindMemberUID:inArray:";
			public static readonly Selector nts_GroupContents = "nts_GroupContents";
			public static readonly Selector nts_GroupUID = "nts_GroupUID";
			public static readonly Selector nts_InitWithGroupUID_memberUID_ = "nts_InitWithGroupUID:memberUID:";
			public static readonly Selector nts_InsertInArray_ = "nts_InsertInArray:";
			public static readonly Selector nts_MemberUID = "nts_MemberUID";
			public static readonly Selector nts_SetDistributionIdentifier_forProperty_ = "nts_SetDistributionIdentifier:forProperty:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABTableController ) )]
	public struct ABGroupsController : IEquatable<ABGroupsController> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABGroupsController;
		public static implicit operator ABTableController( ABGroupsController value ) {
			return new ABTableController( value.Handle );
		}
		public static implicit operator NSResponder( ABGroupsController value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABGroupsController value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABGroupsController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABGroupsController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABGroupsController?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABGroupsController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABGroupsController value1, ABGroupsController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABGroupsController value1, ABGroupsController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABGroupsController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABGroupsController alloc() {
			return new ABGroupsController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject dividerRowItem() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dividerRowItem( ClassHandle, CachedSelectors.dividerRowItem, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void abdStartedSyncing_( NObjective.RuntimeObject syncing ) {
			RuntimeObject ___occuredException;
			NativeMethods.abdStartedSyncing_( Handle, CachedSelectors.abdStartedSyncing_, out ___occuredException, sizeof( NObjective.RuntimeObject ), syncing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void abdStoppedSyncing_( NObjective.RuntimeObject syncing ) {
			RuntimeObject ___occuredException;
			NativeMethods.abdStoppedSyncing_( Handle, CachedSelectors.abdStoppedSyncing_, out ___occuredException, sizeof( NObjective.RuntimeObject ), syncing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void abdSyncProgress_( NObjective.RuntimeObject progress ) {
			RuntimeObject ___occuredException;
			NativeMethods.abdSyncProgress_( Handle, CachedSelectors.abdSyncProgress_, out ___occuredException, sizeof( NObjective.RuntimeObject ), progress );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char addGroupsFromPasteboard_toGroup_( NObjective.RuntimeObject pasteboard, NObjective.RuntimeObject toGroup ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addGroupsFromPasteboard_toGroup_( Handle, CachedSelectors.addGroupsFromPasteboard_toGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), pasteboard, toGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char addPeopleFromPasteboard_toGroup_( NObjective.RuntimeObject pasteboard, NObjective.RuntimeObject toGroup ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addPeopleFromPasteboard_toGroup_( Handle, CachedSelectors.addPeopleFromPasteboard_toGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), pasteboard, toGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void adjustTableColumns() {
			RuntimeObject ___occuredException;
			NativeMethods.adjustTableColumns( Handle, CachedSelectors.adjustTableColumns, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void cancelEditing() {
			RuntimeObject ___occuredException;
			NativeMethods.cancelEditing( Handle, CachedSelectors.cancelEditing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void commitPendingChanges() {
			RuntimeObject ___occuredException;
			NativeMethods.commitPendingChanges( Handle, CachedSelectors.commitPendingChanges, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void copy_( NObjective.RuntimeObject copy ) {
			RuntimeObject ___occuredException;
			NativeMethods.copy_( Handle, CachedSelectors.copy_, out ___occuredException, sizeof( NObjective.RuntimeObject ), copy );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void createDragProgressWindow_forRow_( NObjective.RuntimeObject window, int forRow ) {
			RuntimeObject ___occuredException;
			NativeMethods.createDragProgressWindow_forRow_( Handle, CachedSelectors.createDragProgressWindow_forRow_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), window, forRow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void cut_( NObjective.RuntimeObject cut ) {
			RuntimeObject ___occuredException;
			NativeMethods.cut_( Handle, CachedSelectors.cut_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cut );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void databaseChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.databaseChanged_( Handle, CachedSelectors.databaseChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteKey_( Handle, CachedSelectors.deleteKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char deleteMeansRemoveSubscription_( NObjective.RuntimeObject subscription ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.deleteMeansRemoveSubscription_( Handle, CachedSelectors.deleteMeansRemoveSubscription_, out ___occuredException, sizeof( NObjective.RuntimeObject ), subscription );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void doDelete_( NObjective.RuntimeObject delete ) {
			RuntimeObject ___occuredException;
			NativeMethods.doDelete_( Handle, CachedSelectors.doDelete_, out ___occuredException, sizeof( NObjective.RuntimeObject ), delete );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void doRemoveSubscription_( NObjective.RuntimeObject subscription ) {
			RuntimeObject ___occuredException;
			NativeMethods.doRemoveSubscription_( Handle, CachedSelectors.doRemoveSubscription_, out ___occuredException, sizeof( NObjective.RuntimeObject ), subscription );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void doSelectAll_( NObjective.RuntimeObject all ) {
			RuntimeObject ___occuredException;
			NativeMethods.doSelectAll_( Handle, CachedSelectors.doSelectAll_, out ___occuredException, sizeof( NObjective.RuntimeObject ), all );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void dragAnimationComplete_toRow_( NObjective.RuntimeObject complete, int toRow ) {
			RuntimeObject ___occuredException;
			NativeMethods.dragAnimationComplete_toRow_( Handle, CachedSelectors.dragAnimationComplete_toRow_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), complete, toRow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void editSelectedGroupWithUndo_( char undo ) {
			RuntimeObject ___occuredException;
			NativeMethods.editSelectedGroupWithUndo_( Handle, CachedSelectors.editSelectedGroupWithUndo_, out ___occuredException, sizeof( char ), undo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void editSmartGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			NativeMethods.editSmartGroup_( Handle, CachedSelectors.editSmartGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void editSmartGroupSheetDidEnd_returnCode_contextInfo_( NObjective.RuntimeObject end, int returnCode, NObjective.RuntimeObject contextInfo ) {
			RuntimeObject ___occuredException;
			NativeMethods.editSmartGroupSheetDidEnd_returnCode_contextInfo_( Handle, CachedSelectors.editSmartGroupSheetDidEnd_returnCode_contextInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), end, returnCode, contextInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void escapeKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.escapeKey_( Handle, CachedSelectors.escapeKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void exportVCard_( NObjective.RuntimeObject card ) {
			RuntimeObject ___occuredException;
			NativeMethods.exportVCard_( Handle, CachedSelectors.exportVCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject firstSubscribedGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.firstSubscribedGroup( Handle, CachedSelectors.firstSubscribedGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void groupsChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.groupsChanged_( Handle, CachedSelectors.groupsChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void groupsSelectionChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.groupsSelectionChanged_( Handle, CachedSelectors.groupsSelectionChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool isEditingGroupName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEditingGroupName( Handle, CachedSelectors.isEditingGroupName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void membersSelectionChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.membersSelectionChanged_( Handle, CachedSelectors.membersSelectionChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject menuForEvent_( NObjective.RuntimeObject @event ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.menuForEvent_( Handle, CachedSelectors.menuForEvent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @event );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject outlineView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlineView( Handle, CachedSelectors.outlineView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char outlineView_acceptDrop_item_childIndex_( NObjective.RuntimeObject view, NObjective.RuntimeObject acceptDrop, NObjective.RuntimeObject item, int childIndex ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlineView_acceptDrop_item_childIndex_( Handle, CachedSelectors.outlineView_acceptDrop_item_childIndex_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), view, acceptDrop, item, childIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject outlineView_child_ofItem_( NObjective.RuntimeObject view, int child, NObjective.RuntimeObject ofItem ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlineView_child_ofItem_( Handle, CachedSelectors.outlineView_child_ofItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), view, child, ofItem );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char outlineView_isItemExpandable_( NObjective.RuntimeObject view, NObjective.RuntimeObject isItemExpandable ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlineView_isItemExpandable_( Handle, CachedSelectors.outlineView_isItemExpandable_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, isItemExpandable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int outlineView_numberOfChildrenOfItem_( NObjective.RuntimeObject view, NObjective.RuntimeObject numberOfChildrenOfItem ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlineView_numberOfChildrenOfItem_( Handle, CachedSelectors.outlineView_numberOfChildrenOfItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, numberOfChildrenOfItem );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject outlineView_objectValueForTableColumn_byItem_( NObjective.RuntimeObject view, NObjective.RuntimeObject objectValueForTableColumn, NObjective.RuntimeObject byItem ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlineView_objectValueForTableColumn_byItem_( Handle, CachedSelectors.outlineView_objectValueForTableColumn_byItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, objectValueForTableColumn, byItem );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void outlineView_setObjectValue_forTableColumn_byItem_( NObjective.RuntimeObject view, NObjective.RuntimeObject setObjectValue, NObjective.RuntimeObject forTableColumn, NObjective.RuntimeObject byItem ) {
			RuntimeObject ___occuredException;
			NativeMethods.outlineView_setObjectValue_forTableColumn_byItem_( Handle, CachedSelectors.outlineView_setObjectValue_forTableColumn_byItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, setObjectValue, forTableColumn, byItem );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char outlineView_shouldEditTableColumn_item_( NObjective.RuntimeObject view, NObjective.RuntimeObject shouldEditTableColumn, NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlineView_shouldEditTableColumn_item_( Handle, CachedSelectors.outlineView_shouldEditTableColumn_item_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, shouldEditTableColumn, item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char outlineView_shouldSelectItem_( NObjective.RuntimeObject view, NObjective.RuntimeObject shouldSelectItem ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlineView_shouldSelectItem_( Handle, CachedSelectors.outlineView_shouldSelectItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, shouldSelectItem );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint outlineView_validateDrop_proposedItem_proposedChildIndex_( NObjective.RuntimeObject view, NObjective.RuntimeObject validateDrop, NObjective.RuntimeObject proposedItem, int proposedChildIndex ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlineView_validateDrop_proposedItem_proposedChildIndex_( Handle, CachedSelectors.outlineView_validateDrop_proposedItem_proposedChildIndex_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), view, validateDrop, proposedItem, proposedChildIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public void outlineView_willDisplayCell_forTableColumn_item_( NObjective.RuntimeObject view, NObjective.RuntimeObject willDisplayCell, NObjective.RuntimeObject forTableColumn, NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			NativeMethods.outlineView_willDisplayCell_forTableColumn_item_( Handle, CachedSelectors.outlineView_willDisplayCell_forTableColumn_item_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, willDisplayCell, forTableColumn, item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void outlineView_willDisplayOutlineCell_forTableColumn_item_( NObjective.RuntimeObject view, NObjective.RuntimeObject willDisplayOutlineCell, NObjective.RuntimeObject forTableColumn, NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			NativeMethods.outlineView_willDisplayOutlineCell_forTableColumn_item_( Handle, CachedSelectors.outlineView_willDisplayOutlineCell_forTableColumn_item_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, willDisplayOutlineCell, forTableColumn, item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char outlineView_writeItems_toPasteboard_( NObjective.RuntimeObject view, NObjective.RuntimeObject writeItems, NObjective.RuntimeObject toPasteboard ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.outlineView_writeItems_toPasteboard_( Handle, CachedSelectors.outlineView_writeItems_toPasteboard_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, writeItems, toPasteboard );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void outlineViewSelectionDidChange_( NObjective.RuntimeObject change ) {
			RuntimeObject ___occuredException;
			NativeMethods.outlineViewSelectionDidChange_( Handle, CachedSelectors.outlineViewSelectionDidChange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), change );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void paste_( NObjective.RuntimeObject paste ) {
			RuntimeObject ___occuredException;
			NativeMethods.paste_( Handle, CachedSelectors.paste_, out ___occuredException, sizeof( NObjective.RuntimeObject ), paste );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void pasteboard_provideDataForType_( NObjective.RuntimeObject pasteboard, NObjective.RuntimeObject provideDataForType ) {
			RuntimeObject ___occuredException;
			NativeMethods.pasteboard_provideDataForType_( Handle, CachedSelectors.pasteboard_provideDataForType_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), pasteboard, provideDataForType );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void sendEmailToGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			NativeMethods.sendEmailToGroup_( Handle, CachedSelectors.sendEmailToGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsGroupEditing_( char editing ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsGroupEditing_( Handle, CachedSelectors.setAllowsGroupEditing_, out ___occuredException, sizeof( char ), editing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHidesOutlineColumn_( char column ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHidesOutlineColumn_( Handle, CachedSelectors.setHidesOutlineColumn_, out ___occuredException, sizeof( char ), column );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShowGroupMembership_( char membership ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShowGroupMembership_( Handle, CachedSelectors.setShowGroupMembership_, out ___occuredException, sizeof( char ), membership );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float sharingProgressForGroup_showUpdateSharingIndicator_( NObjective.RuntimeObject @group, System.IntPtr showUpdateSharingIndicator ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharingProgressForGroup_showUpdateSharingIndicator_( Handle, CachedSelectors.sharingProgressForGroup_showUpdateSharingIndicator_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), @group, showUpdateSharingIndicator );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char showGroupMembership() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.showGroupMembership( Handle, CachedSelectors.showGroupMembership, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void startEditingSmartGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			NativeMethods.startEditingSmartGroup_( Handle, CachedSelectors.startEditingSmartGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject stringsFromGUIDs_( NObjective.RuntimeObject ds ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringsFromGUIDs_( Handle, CachedSelectors.stringsFromGUIDs_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ds );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject stringsFromSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringsFromSelection( Handle, CachedSelectors.stringsFromSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char textView_doCommandBySelector_( NObjective.RuntimeObject view, NObjective.Selector doCommandBySelector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textView_doCommandBySelector_( Handle, CachedSelectors.textView_doCommandBySelector_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ), view, doCommandBySelector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void typeAhead_( NObjective.RuntimeObject ahead ) {
			RuntimeObject ___occuredException;
			NativeMethods.typeAhead_( Handle, CachedSelectors.typeAhead_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ahead );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateGroupMembership() {
			RuntimeObject ___occuredException;
			NativeMethods.updateGroupMembership( Handle, CachedSelectors.updateGroupMembership, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateSyncIndicators() {
			RuntimeObject ___occuredException;
			NativeMethods.updateSyncIndicators( Handle, CachedSelectors.updateSyncIndicators, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char validateAction_( NObjective.Selector action ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validateAction_( Handle, CachedSelectors.validateAction_, out ___occuredException, sizeof( NObjective.Selector ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char validateMenuItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validateMenuItem_( Handle, CachedSelectors.validateMenuItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject vCardForGUIDs_( NObjective.RuntimeObject ds ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.vCardForGUIDs_( Handle, CachedSelectors.vCardForGUIDs_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ds );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void windowDidUpdate_( NObjective.RuntimeObject update ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowDidUpdate_( Handle, CachedSelectors.windowDidUpdate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), update );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void abdStartedSyncing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject syncing );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void abdStoppedSyncing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject syncing );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void abdSyncProgress_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject progress );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char addGroupsFromPasteboard_toGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject pasteboard, NObjective.RuntimeObject toGroup );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char addPeopleFromPasteboard_toGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject pasteboard, NObjective.RuntimeObject toGroup );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void adjustTableColumns( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancelEditing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void commitPendingChanges( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void copy_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject copy );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void createDragProgressWindow_forRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject window, int forRow );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cut_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cut );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void databaseChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char deleteMeansRemoveSubscription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject subscription );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dividerRowItem( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void doDelete_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject delete );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void doRemoveSubscription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject subscription );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void doSelectAll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject all );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void dragAnimationComplete_toRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject complete, int toRow );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void editSelectedGroupWithUndo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char undo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void editSmartGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void editSmartGroupSheetDidEnd_returnCode_contextInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject end, int returnCode, NObjective.RuntimeObject contextInfo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void escapeKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void exportVCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr firstSubscribedGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void groupsChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void groupsSelectionChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isEditingGroupName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void membersSelectionChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr menuForEvent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @event );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr outlineView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char outlineView_acceptDrop_item_childIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject acceptDrop, NObjective.RuntimeObject item, int childIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr outlineView_child_ofItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, int child, NObjective.RuntimeObject ofItem );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char outlineView_isItemExpandable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject isItemExpandable );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int outlineView_numberOfChildrenOfItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject numberOfChildrenOfItem );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr outlineView_objectValueForTableColumn_byItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject objectValueForTableColumn, NObjective.RuntimeObject byItem );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void outlineView_setObjectValue_forTableColumn_byItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject setObjectValue, NObjective.RuntimeObject forTableColumn, NObjective.RuntimeObject byItem );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char outlineView_shouldEditTableColumn_item_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject shouldEditTableColumn, NObjective.RuntimeObject item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char outlineView_shouldSelectItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject shouldSelectItem );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint outlineView_validateDrop_proposedItem_proposedChildIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject validateDrop, NObjective.RuntimeObject proposedItem, int proposedChildIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void outlineView_willDisplayCell_forTableColumn_item_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject willDisplayCell, NObjective.RuntimeObject forTableColumn, NObjective.RuntimeObject item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void outlineView_willDisplayOutlineCell_forTableColumn_item_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject willDisplayOutlineCell, NObjective.RuntimeObject forTableColumn, NObjective.RuntimeObject item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char outlineView_writeItems_toPasteboard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject writeItems, NObjective.RuntimeObject toPasteboard );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void outlineViewSelectionDidChange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject change );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void paste_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject paste );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pasteboard_provideDataForType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject pasteboard, NObjective.RuntimeObject provideDataForType );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void sendEmailToGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowsGroupEditing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char editing );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHidesOutlineColumn_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char column );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setShowGroupMembership_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char membership );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float sharingProgressForGroup_showUpdateSharingIndicator_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, System.IntPtr showUpdateSharingIndicator );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char showGroupMembership( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void startEditingSmartGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringsFromGUIDs_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ds );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringsFromSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char textView_doCommandBySelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.Selector doCommandBySelector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void typeAhead_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ahead );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateGroupMembership( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateSyncIndicators( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char validateAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector action );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char validateMenuItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr vCardForGUIDs_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ds );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void windowDidUpdate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject update );
		}
		static internal class CachedSelectors {
			public static readonly Selector abdStartedSyncing_ = "abdStartedSyncing:";
			public static readonly Selector abdStoppedSyncing_ = "abdStoppedSyncing:";
			public static readonly Selector abdSyncProgress_ = "abdSyncProgress:";
			public static readonly Selector addGroupsFromPasteboard_toGroup_ = "addGroupsFromPasteboard:toGroup:";
			public static readonly Selector addPeopleFromPasteboard_toGroup_ = "addPeopleFromPasteboard:toGroup:";
			public static readonly Selector adjustTableColumns = "adjustTableColumns";
			public static readonly Selector cancelEditing = "cancelEditing";
			public static readonly Selector commitPendingChanges = "commitPendingChanges";
			public static readonly Selector copy_ = "copy:";
			public static readonly Selector createDragProgressWindow_forRow_ = "createDragProgressWindow:forRow:";
			public static readonly Selector cut_ = "cut:";
			public static readonly Selector databaseChanged_ = "databaseChanged:";
			public static readonly Selector deleteKey_ = "deleteKey:";
			public static readonly Selector deleteMeansRemoveSubscription_ = "deleteMeansRemoveSubscription:";
			public static readonly Selector dividerRowItem = "dividerRowItem";
			public static readonly Selector doDelete_ = "doDelete:";
			public static readonly Selector doRemoveSubscription_ = "doRemoveSubscription:";
			public static readonly Selector doSelectAll_ = "doSelectAll:";
			public static readonly Selector dragAnimationComplete_toRow_ = "dragAnimationComplete:toRow:";
			public static readonly Selector editSelectedGroupWithUndo_ = "editSelectedGroupWithUndo:";
			public static readonly Selector editSmartGroup_ = "editSmartGroup:";
			public static readonly Selector editSmartGroupSheetDidEnd_returnCode_contextInfo_ = "editSmartGroupSheetDidEnd:returnCode:contextInfo:";
			public static readonly Selector escapeKey_ = "escapeKey:";
			public static readonly Selector exportVCard_ = "exportVCard:";
			public static readonly Selector firstSubscribedGroup = "firstSubscribedGroup";
			public static readonly Selector groupsChanged_ = "groupsChanged:";
			public static readonly Selector groupsSelectionChanged_ = "groupsSelectionChanged:";
			public static readonly Selector isEditingGroupName = "isEditingGroupName";
			public static readonly Selector membersSelectionChanged_ = "membersSelectionChanged:";
			public static readonly Selector menuForEvent_ = "menuForEvent:";
			public static readonly Selector outlineView = "outlineView";
			public static readonly Selector outlineView_acceptDrop_item_childIndex_ = "outlineView:acceptDrop:item:childIndex:";
			public static readonly Selector outlineView_child_ofItem_ = "outlineView:child:ofItem:";
			public static readonly Selector outlineView_isItemExpandable_ = "outlineView:isItemExpandable:";
			public static readonly Selector outlineView_numberOfChildrenOfItem_ = "outlineView:numberOfChildrenOfItem:";
			public static readonly Selector outlineView_objectValueForTableColumn_byItem_ = "outlineView:objectValueForTableColumn:byItem:";
			public static readonly Selector outlineView_setObjectValue_forTableColumn_byItem_ = "outlineView:setObjectValue:forTableColumn:byItem:";
			public static readonly Selector outlineView_shouldEditTableColumn_item_ = "outlineView:shouldEditTableColumn:item:";
			public static readonly Selector outlineView_shouldSelectItem_ = "outlineView:shouldSelectItem:";
			public static readonly Selector outlineView_validateDrop_proposedItem_proposedChildIndex_ = "outlineView:validateDrop:proposedItem:proposedChildIndex:";
			public static readonly Selector outlineView_willDisplayCell_forTableColumn_item_ = "outlineView:willDisplayCell:forTableColumn:item:";
			public static readonly Selector outlineView_willDisplayOutlineCell_forTableColumn_item_ = "outlineView:willDisplayOutlineCell:forTableColumn:item:";
			public static readonly Selector outlineView_writeItems_toPasteboard_ = "outlineView:writeItems:toPasteboard:";
			public static readonly Selector outlineViewSelectionDidChange_ = "outlineViewSelectionDidChange:";
			public static readonly Selector paste_ = "paste:";
			public static readonly Selector pasteboard_provideDataForType_ = "pasteboard:provideDataForType:";
			public static readonly Selector sendEmailToGroup_ = "sendEmailToGroup:";
			public static readonly Selector setAllowsGroupEditing_ = "setAllowsGroupEditing:";
			public static readonly Selector setHidesOutlineColumn_ = "setHidesOutlineColumn:";
			public static readonly Selector setShowGroupMembership_ = "setShowGroupMembership:";
			public static readonly Selector sharingProgressForGroup_showUpdateSharingIndicator_ = "sharingProgressForGroup:showUpdateSharingIndicator:";
			public static readonly Selector showGroupMembership = "showGroupMembership";
			public static readonly Selector startEditingSmartGroup_ = "startEditingSmartGroup:";
			public static readonly Selector stringsFromGUIDs_ = "stringsFromGUIDs:";
			public static readonly Selector stringsFromSelection = "stringsFromSelection";
			public static readonly Selector textView_doCommandBySelector_ = "textView:doCommandBySelector:";
			public static readonly Selector typeAhead_ = "typeAhead:";
			public static readonly Selector updateGroupMembership = "updateGroupMembership";
			public static readonly Selector updateSyncIndicators = "updateSyncIndicators";
			public static readonly Selector validateAction_ = "validateAction:";
			public static readonly Selector validateMenuItem_ = "validateMenuItem:";
			public static readonly Selector vCardForGUIDs_ = "vCardForGUIDs:";
			public static readonly Selector windowDidUpdate_ = "windowDidUpdate:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSImageCell ) )]
	public struct ABImageCell : IEquatable<ABImageCell> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABImageCell;
		public static implicit operator NSImageCell( ABImageCell value ) {
			return new NSImageCell( value.Handle );
		}
		public static implicit operator NSCell( ABImageCell value ) {
			return new NSCell( value.Handle );
		}
		public static implicit operator NSObject( ABImageCell value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABImageCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABImageCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABImageCell?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABImageCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABImageCell value1, ABImageCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABImageCell value1, ABImageCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABImageCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABImageCell alloc() {
			return new ABImageCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABCommand ) )]
	public struct ABImportCommand : IEquatable<ABImportCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABImportCommand;
		public static implicit operator ABCommand( ABImportCommand value ) {
			return new ABCommand( value.Handle );
		}
		public static implicit operator NSObject( ABImportCommand value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABImportCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABImportCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABImportCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABImportCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABImportCommand value1, ABImportCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABImportCommand value1, ABImportCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABImportCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABImportCommand alloc() {
			return new ABImportCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithSelectedGroup_addedToGroup_deletedPeople_updatedPeople_updatedPeopleProperties_addedPeople_mergedIntoGroups_( NObjective.RuntimeObject @group, NObjective.RuntimeObject addedToGroup, NObjective.RuntimeObject deletedPeople, NObjective.RuntimeObject updatedPeople, NObjective.RuntimeObject updatedPeopleProperties, NObjective.RuntimeObject addedPeople, NObjective.RuntimeObject mergedIntoGroups ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithSelectedGroup_addedToGroup_deletedPeople_updatedPeople_updatedPeopleProperties_addedPeople_mergedIntoGroups_( Handle, CachedSelectors.initWithSelectedGroup_addedToGroup_deletedPeople_updatedPeople_updatedPeopleProperties_addedPeople_mergedIntoGroups_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @group, addedToGroup, deletedPeople, updatedPeople, updatedPeopleProperties, addedPeople, 
			mergedIntoGroups );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithSelectedGroup_addedToGroup_updatedPeople_updatedPeopleProperties_addedPeople_( NObjective.RuntimeObject @group, NObjective.RuntimeObject addedToGroup, NObjective.RuntimeObject updatedPeople, NObjective.RuntimeObject updatedPeopleProperties, NObjective.RuntimeObject addedPeople ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithSelectedGroup_addedToGroup_updatedPeople_updatedPeopleProperties_addedPeople_( Handle, CachedSelectors.initWithSelectedGroup_addedToGroup_updatedPeople_updatedPeopleProperties_addedPeople_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @group, addedToGroup, updatedPeople, updatedPeopleProperties, addedPeople );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selection( Handle, CachedSelectors.selection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithSelectedGroup_addedToGroup_deletedPeople_updatedPeople_updatedPeopleProperties_addedPeople_mergedIntoGroups_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject addedToGroup, NObjective.RuntimeObject deletedPeople, NObjective.RuntimeObject updatedPeople, NObjective.RuntimeObject updatedPeopleProperties, NObjective.RuntimeObject addedPeople, 
			NObjective.RuntimeObject mergedIntoGroups );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithSelectedGroup_addedToGroup_updatedPeople_updatedPeopleProperties_addedPeople_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject addedToGroup, NObjective.RuntimeObject updatedPeople, NObjective.RuntimeObject updatedPeopleProperties, NObjective.RuntimeObject addedPeople );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithSelectedGroup_addedToGroup_deletedPeople_updatedPeople_updatedPeopleProperties_addedPeople_mergedIntoGroups_ = "initWithSelectedGroup:addedToGroup:deletedPeople:updatedPeople:updatedPeopleProperties:addedPeople:mergedIntoGroups:";
			public static readonly Selector initWithSelectedGroup_addedToGroup_updatedPeople_updatedPeopleProperties_addedPeople_ = "initWithSelectedGroup:addedToGroup:updatedPeople:updatedPeopleProperties:addedPeople:";
			public static readonly Selector selection = "selection";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABImportPanelController : IEquatable<ABImportPanelController> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABImportPanelController;
		public static implicit operator NSObject( ABImportPanelController value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABImportPanelController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABImportPanelController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABImportPanelController?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABImportPanelController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABImportPanelController value1, ABImportPanelController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABImportPanelController value1, ABImportPanelController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABImportPanelController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABImportPanelController alloc() {
			return new ABImportPanelController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void cancelImport_( NObjective.RuntimeObject import ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancelImport_( Handle, CachedSelectors.cancelImport_, out ___occuredException, sizeof( NObjective.RuntimeObject ), import );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void cancelImporting_( NObjective.RuntimeObject importing ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancelImporting_( Handle, CachedSelectors.cancelImporting_, out ___occuredException, sizeof( NObjective.RuntimeObject ), importing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void cleanUp() {
			RuntimeObject ___occuredException;
			NativeMethods.cleanUp( Handle, CachedSelectors.cleanUp, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject @delegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@delegate( Handle, CachedSelectors.@delegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void help_( NObjective.RuntimeObject help ) {
			RuntimeObject ___occuredException;
			NativeMethods.help_( Handle, CachedSelectors.help_, out ___occuredException, sizeof( NObjective.RuntimeObject ), help );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void importBegan_( int began ) {
			RuntimeObject ___occuredException;
			NativeMethods.importBegan_( Handle, CachedSelectors.importBegan_, out ___occuredException, sizeof( int ), began );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void importContinued_( int continued ) {
			RuntimeObject ___occuredException;
			NativeMethods.importContinued_( Handle, CachedSelectors.importContinued_, out ___occuredException, sizeof( int ), continued );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void importFinished() {
			RuntimeObject ___occuredException;
			NativeMethods.importFinished( Handle, CachedSelectors.importFinished, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithUIController_( NObjective.RuntimeObject controller ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUIController_( Handle, CachedSelectors.initWithUIController_, out ___occuredException, sizeof( NObjective.RuntimeObject ), controller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char localDrag() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.localDrag( Handle, CachedSelectors.localDrag, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void noImportableItemsSheetEnded() {
			RuntimeObject ___occuredException;
			NativeMethods.noImportableItemsSheetEnded( Handle, CachedSelectors.noImportableItemsSheetEnded, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void proceedWithImport_( NObjective.RuntimeObject import ) {
			RuntimeObject ___occuredException;
			NativeMethods.proceedWithImport_( Handle, CachedSelectors.proceedWithImport_, out ___occuredException, sizeof( NObjective.RuntimeObject ), import );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void reviewCards_( NObjective.RuntimeObject cards ) {
			RuntimeObject ___occuredException;
			NativeMethods.reviewCards_( Handle, CachedSelectors.reviewCards_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cards );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDelegate_( Handle, CachedSelectors.setDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDoSelectGroup_( char @group ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDoSelectGroup_( Handle, CachedSelectors.setDoSelectGroup_, out ___occuredException, sizeof( char ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			NativeMethods.setGroup_( Handle, CachedSelectors.setGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLocalDrag_( char drag ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLocalDrag_( Handle, CachedSelectors.setLocalDrag_, out ___occuredException, sizeof( char ), drag );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setupImportPanelWithTitle_selector_target_object_( NObjective.RuntimeObject title, NObjective.Selector selector, NObjective.RuntimeObject target, NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.setupImportPanelWithTitle_selector_target_object_( Handle, CachedSelectors.setupImportPanelWithTitle_selector_target_object_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), title, selector, target, @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancelImport_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject import );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancelImporting_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject importing );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cleanUp( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @delegate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void help_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject help );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void importBegan_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int began );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void importContinued_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int continued );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void importFinished( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithUIController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char localDrag( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void noImportableItemsSheetEnded( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void proceedWithImport_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject import );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void reviewCards_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cards );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDoSelectGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @group );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLocalDrag_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char drag );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setupImportPanelWithTitle_selector_target_object_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject title, NObjective.Selector selector, NObjective.RuntimeObject target, NObjective.RuntimeObject @object );
		}
		static internal class CachedSelectors {
			public static readonly Selector cancelImport_ = "cancelImport:";
			public static readonly Selector cancelImporting_ = "cancelImporting:";
			public static readonly Selector cleanUp = "cleanUp";
			public static readonly Selector @delegate = "delegate";
			public static readonly Selector help_ = "help:";
			public static readonly Selector importBegan_ = "importBegan:";
			public static readonly Selector importContinued_ = "importContinued:";
			public static readonly Selector importFinished = "importFinished";
			public static readonly Selector initWithUIController_ = "initWithUIController:";
			public static readonly Selector localDrag = "localDrag";
			public static readonly Selector noImportableItemsSheetEnded = "noImportableItemsSheetEnded";
			public static readonly Selector proceedWithImport_ = "proceedWithImport:";
			public static readonly Selector reviewCards_ = "reviewCards:";
			public static readonly Selector setDelegate_ = "setDelegate:";
			public static readonly Selector setDoSelectGroup_ = "setDoSelectGroup:";
			public static readonly Selector setGroup_ = "setGroup:";
			public static readonly Selector setLocalDrag_ = "setLocalDrag:";
			public static readonly Selector setupImportPanelWithTitle_selector_target_object_ = "setupImportPanelWithTitle:selector:target:object:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABIndexer : IEquatable<ABIndexer> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABIndexer;
		public static implicit operator NSObject( ABIndexer value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABIndexer value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABIndexer value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABIndexer?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABIndexer value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABIndexer value1, ABIndexer value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABIndexer value1, ABIndexer value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABIndexer( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABIndexer alloc() {
			return new ABIndexer( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char beginAsyncIndexSearchForRecordsMatching_withDelegate_( NObjective.RuntimeObject matching, NObjective.RuntimeObject withDelegate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.beginAsyncIndexSearchForRecordsMatching_withDelegate_( Handle, CachedSelectors.beginAsyncIndexSearchForRecordsMatching_withDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), matching, withDelegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void cancelAsyncIndexSearchForDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancelAsyncIndexSearchForDelegate_( Handle, CachedSelectors.cancelAsyncIndexSearchForDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void continueUpdatingAsyncRequests() {
			RuntimeObject ___occuredException;
			NativeMethods.continueUpdatingAsyncRequests( Handle, CachedSelectors.continueUpdatingAsyncRequests, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void indexFoundMatches_done_( NObjective.RuntimeObject matches, char done ) {
			RuntimeObject ___occuredException;
			NativeMethods.indexFoundMatches_done_( Handle, CachedSelectors.indexFoundMatches_done_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), matches, done );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject indexPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexPath( Handle, CachedSelectors.indexPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initIndexForClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initIndexForClass_( Handle, CachedSelectors.initIndexForClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void @lock() {
			RuntimeObject ___occuredException;
			NativeMethods.@lock( Handle, CachedSelectors.@lock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject searchIndexForRecordsMatching_( NObjective.RuntimeObject matching ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchIndexForRecordsMatching_( Handle, CachedSelectors.searchIndexForRecordsMatching_, out ___occuredException, sizeof( NObjective.RuntimeObject ), matching );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void unlock() {
			RuntimeObject ___occuredException;
			NativeMethods.unlock( Handle, CachedSelectors.unlock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateAsyncRequests_gotoRunLoop_( float requests, char gotoRunLoop ) {
			RuntimeObject ___occuredException;
			NativeMethods.updateAsyncRequests_gotoRunLoop_( Handle, CachedSelectors.updateAsyncRequests_gotoRunLoop_, out ___occuredException, sizeof( float ) + sizeof( char ), requests, gotoRunLoop );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateIndex() {
			RuntimeObject ___occuredException;
			NativeMethods.updateIndex( Handle, CachedSelectors.updateIndex, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char updateIndex_( NObjective.RuntimeObject index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.updateIndex_( Handle, CachedSelectors.updateIndex_, out ___occuredException, sizeof( NObjective.RuntimeObject ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void waitForThreadsToFinish() {
			RuntimeObject ___occuredException;
			NativeMethods.waitForThreadsToFinish( Handle, CachedSelectors.waitForThreadsToFinish, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject writeIndexPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.writeIndexPath( Handle, CachedSelectors.writeIndexPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char beginAsyncIndexSearchForRecordsMatching_withDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject matching, NObjective.RuntimeObject withDelegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancelAsyncIndexSearchForDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void continueUpdatingAsyncRequests( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void indexFoundMatches_done_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject matches, char done );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr indexPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initIndexForClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void @lock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr searchIndexForRecordsMatching_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject matching );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unlock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateAsyncRequests_gotoRunLoop_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float requests, char gotoRunLoop );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateIndex( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char updateIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void waitForThreadsToFinish( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr writeIndexPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector beginAsyncIndexSearchForRecordsMatching_withDelegate_ = "beginAsyncIndexSearchForRecordsMatching:withDelegate:";
			public static readonly Selector cancelAsyncIndexSearchForDelegate_ = "cancelAsyncIndexSearchForDelegate:";
			public static readonly Selector continueUpdatingAsyncRequests = "continueUpdatingAsyncRequests";
			public static readonly Selector indexFoundMatches_done_ = "indexFoundMatches:done:";
			public static readonly Selector indexPath = "indexPath";
			public static readonly Selector initIndexForClass_ = "initIndexForClass:";
			public static readonly Selector @lock = "lock";
			public static readonly Selector searchIndexForRecordsMatching_ = "searchIndexForRecordsMatching:";
			public static readonly Selector unlock = "unlock";
			public static readonly Selector updateAsyncRequests_gotoRunLoop_ = "updateAsyncRequests:gotoRunLoop:";
			public static readonly Selector updateIndex = "updateIndex";
			public static readonly Selector updateIndex_ = "updateIndex:";
			public static readonly Selector waitForThreadsToFinish = "waitForThreadsToFinish";
			public static readonly Selector writeIndexPath = "writeIndexPath";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABRecord ) )]
	public struct ABInfo : IEquatable<ABInfo> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABInfo;
		public static implicit operator ABRecord( ABInfo value ) {
			return new ABRecord( value.Handle );
		}
		public static implicit operator NSObject( ABInfo value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABInfo value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABInfo value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABInfo?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABInfo value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABInfo value1, ABInfo value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABInfo value1, ABInfo value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABInfo( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABInfo alloc() {
			return new ABInfo( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject info() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.info( ClassHandle, CachedSelectors.info, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject nts_Info() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_Info( ClassHandle, CachedSelectors.nts_Info, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr info( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_Info( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector info = "info";
			public static readonly Selector nts_Info = "nts_Info";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABInputController : IEquatable<ABInputController> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABInputController;
		public static implicit operator NSObject( ABInputController value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABInputController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABInputController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABInputController?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABInputController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABInputController value1, ABInputController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABInputController value1, ABInputController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABInputController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABInputController alloc() {
			return new ABInputController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void addRollOver_( NObjective.RuntimeObject over ) {
			RuntimeObject ___occuredException;
			NativeMethods.addRollOver_( ClassHandle, CachedSelectors.addRollOver_, out ___occuredException, sizeof( NObjective.RuntimeObject ), over );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void chooseRollOverIdentifier_withSelection_( NObjective.RuntimeObject identifier, NObjective.RuntimeObject withSelection ) {
			RuntimeObject ___occuredException;
			NativeMethods.chooseRollOverIdentifier_withSelection_( ClassHandle, CachedSelectors.chooseRollOverIdentifier_withSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), identifier, withSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject foundCardsForName_label_inRecord_( NObjective.RuntimeObject name, NObjective.RuntimeObject label, NObjective.RuntimeObject inRecord ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.foundCardsForName_label_inRecord_( ClassHandle, CachedSelectors.foundCardsForName_label_inRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), name, label, inRecord );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static char respondsToProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.respondsToProperty_( ClassHandle, CachedSelectors.respondsToProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject rolloverMenuForCardProxy() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rolloverMenuForCardProxy( ClassHandle, CachedSelectors.rolloverMenuForCardProxy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject rolloverMenuForSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rolloverMenuForSelection_( ClassHandle, CachedSelectors.rolloverMenuForSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addAdditionalField_( NObjective.RuntimeObject field ) {
			RuntimeObject ___occuredException;
			NativeMethods.addAdditionalField_( Handle, CachedSelectors.addAdditionalField_, out ___occuredException, sizeof( NObjective.RuntimeObject ), field );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addFieldWithNoPopup_( int popup ) {
			RuntimeObject ___occuredException;
			NativeMethods.addFieldWithNoPopup_( Handle, CachedSelectors.addFieldWithNoPopup_, out ___occuredException, sizeof( int ), popup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void adjustRulersForMaxSize() {
			RuntimeObject ___occuredException;
			NativeMethods.adjustRulersForMaxSize( Handle, CachedSelectors.adjustRulersForMaxSize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char allowEditing() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowEditing( Handle, CachedSelectors.allowEditing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char allowPictureEditing() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowPictureEditing( Handle, CachedSelectors.allowPictureEditing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void associatePopup_withProperty_( NObjective.RuntimeObject popup, NObjective.RuntimeObject withProperty ) {
			RuntimeObject ___occuredException;
			NativeMethods.associatePopup_withProperty_( Handle, CachedSelectors.associatePopup_withProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), popup, withProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void beginCertLookupForEmail_cell_( NObjective.RuntimeObject email, NObjective.RuntimeObject cell ) {
			RuntimeObject ___occuredException;
			NativeMethods.beginCertLookupForEmail_cell_( Handle, CachedSelectors.beginCertLookupForEmail_cell_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), email, cell );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char birthdayFieldPresent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.birthdayFieldPresent( Handle, CachedSelectors.birthdayFieldPresent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char canAddField_( int field ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canAddField_( Handle, CachedSelectors.canAddField_, out ___occuredException, sizeof( int ), field );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void cancelPendingCertLookups() {
			RuntimeObject ___occuredException;
			NativeMethods.cancelPendingCertLookups( Handle, CachedSelectors.cancelPendingCertLookups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject cardPane() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cardPane( Handle, CachedSelectors.cardPane, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject cardScrollView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cardScrollView( Handle, CachedSelectors.cardScrollView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void cardWillCommitChanges_( NObjective.RuntimeObject changes ) {
			RuntimeObject ___occuredException;
			NativeMethods.cardWillCommitChanges_( Handle, CachedSelectors.cardWillCommitChanges_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void certificateSheetDidEnd_returnCode_contextInfo_( NObjective.RuntimeObject end, int returnCode, System.IntPtr contextInfo ) {
			RuntimeObject ___occuredException;
			NativeMethods.certificateSheetDidEnd_returnCode_contextInfo_( Handle, CachedSelectors.certificateSheetDidEnd_returnCode_contextInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( System.IntPtr ), end, returnCode, contextInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changeAddressFormat_( NObjective.RuntimeObject format ) {
			RuntimeObject ___occuredException;
			NativeMethods.changeAddressFormat_( Handle, CachedSelectors.changeAddressFormat_, out ___occuredException, sizeof( NObjective.RuntimeObject ), format );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changeCompanyStatus_( NObjective.RuntimeObject status ) {
			RuntimeObject ___occuredException;
			NativeMethods.changeCompanyStatus_( Handle, CachedSelectors.changeCompanyStatus_, out ___occuredException, sizeof( NObjective.RuntimeObject ), status );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject changedValues() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.changedValues( Handle, CachedSelectors.changedValues, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void changeFieldLabel_( NObjective.RuntimeObject label ) {
			RuntimeObject ___occuredException;
			NativeMethods.changeFieldLabel_( Handle, CachedSelectors.changeFieldLabel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), label );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changeInstantField_( NObjective.RuntimeObject field ) {
			RuntimeObject ___occuredException;
			NativeMethods.changeInstantField_( Handle, CachedSelectors.changeInstantField_, out ___occuredException, sizeof( NObjective.RuntimeObject ), field );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changeValue_forKey_( NObjective.RuntimeObject value, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.changeValue_forKey_( Handle, CachedSelectors.changeValue_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void chatWithPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			NativeMethods.chatWithPerson_( Handle, CachedSelectors.chatWithPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearAllFieldVisiblity() {
			RuntimeObject ___occuredException;
			NativeMethods.clearAllFieldVisiblity( Handle, CachedSelectors.clearAllFieldVisiblity, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearField_( NObjective.RuntimeObject field ) {
			RuntimeObject ___occuredException;
			NativeMethods.clearField_( Handle, CachedSelectors.clearField_, out ___occuredException, sizeof( NObjective.RuntimeObject ), field );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clickedCert_( NObjective.RuntimeObject cert ) {
			RuntimeObject ___occuredException;
			NativeMethods.clickedCert_( Handle, CachedSelectors.clickedCert_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cert );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject colorForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.colorForProperty_( Handle, CachedSelectors.colorForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char commitPendingChangesAndSave_( char save ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.commitPendingChangesAndSave_( Handle, CachedSelectors.commitPendingChangesAndSave_, out ___occuredException, sizeof( char ), save );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void consumeImageData_forTag_( NObjective.RuntimeObject data, int forTag ) {
			RuntimeObject ___occuredException;
			NativeMethods.consumeImageData_forTag_( Handle, CachedSelectors.consumeImageData_forTag_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), data, forTag );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void databaseChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.databaseChanged_( Handle, CachedSelectors.databaseChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject dateFormat() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dateFormat( Handle, CachedSelectors.dateFormat, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char departmentFieldPresent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.departmentFieldPresent( Handle, CachedSelectors.departmentFieldPresent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void disableSelectionChanging() {
			RuntimeObject ___occuredException;
			NativeMethods.disableSelectionChanging( Handle, CachedSelectors.disableSelectionChanging, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject displayedCard() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.displayedCard( Handle, CachedSelectors.displayedCard, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void doDelete_( NObjective.RuntimeObject delete ) {
			RuntimeObject ___occuredException;
			NativeMethods.doDelete_( Handle, CachedSelectors.doDelete_, out ___occuredException, sizeof( NObjective.RuntimeObject ), delete );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void edit_( NObjective.RuntimeObject edit ) {
			RuntimeObject ___occuredException;
			NativeMethods.edit_( Handle, CachedSelectors.edit_, out ___occuredException, sizeof( NObjective.RuntimeObject ), edit );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject editButton() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.editButton( Handle, CachedSelectors.editButton, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void editDisplayedCard_( char card ) {
			RuntimeObject ___occuredException;
			NativeMethods.editDisplayedCard_( Handle, CachedSelectors.editDisplayedCard_, out ___occuredException, sizeof( char ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char editMode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.editMode( Handle, CachedSelectors.editMode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void editPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			NativeMethods.editPerson_( Handle, CachedSelectors.editPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void email_forToken_hasCert_( NObjective.RuntimeObject email, int forToken, char hasCert ) {
			RuntimeObject ___occuredException;
			NativeMethods.email_forToken_hasCert_( Handle, CachedSelectors.email_forToken_hasCert_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( char ), email, forToken, hasCert );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void enabledSelectionChanging() {
			RuntimeObject ___occuredException;
			NativeMethods.enabledSelectionChanging( Handle, CachedSelectors.enabledSelectionChanging, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void exportVCard_( NObjective.RuntimeObject card ) {
			RuntimeObject ___occuredException;
			NativeMethods.exportVCard_( Handle, CachedSelectors.exportVCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void fetchNoteOutOfRecordWithEmptyTemplate_( char template ) {
			RuntimeObject ___occuredException;
			NativeMethods.fetchNoteOutOfRecordWithEmptyTemplate_( Handle, CachedSelectors.fetchNoteOutOfRecordWithEmptyTemplate_, out ___occuredException, sizeof( char ), template );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject fieldContentsForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fieldContentsForProperty_( Handle, CachedSelectors.fieldContentsForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasChangesPending() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasChangesPending( Handle, CachedSelectors.hasChangesPending, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char homePageFieldPresent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.homePageFieldPresent( Handle, CachedSelectors.homePageFieldPresent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void insertRulers() {
			RuntimeObject ___occuredException;
			NativeMethods.insertRulers( Handle, CachedSelectors.insertRulers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool isFieldVisible_( NObjective.RuntimeObject visible ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isFieldVisible_( Handle, CachedSelectors.isFieldVisible_, out ___occuredException, sizeof( NObjective.RuntimeObject ), visible );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isMainInputController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isMainInputController( Handle, CachedSelectors.isMainInputController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void issueChangePropertiesCommand() {
			RuntimeObject ___occuredException;
			NativeMethods.issueChangePropertiesCommand( Handle, CachedSelectors.issueChangePropertiesCommand, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char jobTitleFieldPresent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.jobTitleFieldPresent( Handle, CachedSelectors.jobTitleFieldPresent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject keyNavigationView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.keyNavigationView( Handle, CachedSelectors.keyNavigationView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void layoutChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.layoutChanged_( Handle, CachedSelectors.layoutChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char maidenNameFieldPresent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.maidenNameFieldPresent( Handle, CachedSelectors.maidenNameFieldPresent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void makeSelectedPrimary_( NObjective.RuntimeObject primary ) {
			RuntimeObject ___occuredException;
			NativeMethods.makeSelectedPrimary_( Handle, CachedSelectors.makeSelectedPrimary_, out ___occuredException, sizeof( NObjective.RuntimeObject ), primary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void markAsViewed_( NObjective.RuntimeObject viewed ) {
			RuntimeObject ___occuredException;
			NativeMethods.markAsViewed_( Handle, CachedSelectors.markAsViewed_, out ___occuredException, sizeof( NObjective.RuntimeObject ), viewed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void masterTemplateHasChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.masterTemplateHasChanged_( Handle, CachedSelectors.masterTemplateHasChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject matchableResultsForString_inSingleProperty_( NObjective.RuntimeObject @string, NObjective.RuntimeObject inSingleProperty ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.matchableResultsForString_inSingleProperty_( Handle, CachedSelectors.matchableResultsForString_inSingleProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @string, inSingleProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void membersChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.membersChanged_( Handle, CachedSelectors.membersChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void membersSelectionChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.membersSelectionChanged_( Handle, CachedSelectors.membersSelectionChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char middleNameFieldPresent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.middleNameFieldPresent( Handle, CachedSelectors.middleNameFieldPresent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject model() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.model( Handle, CachedSelectors.model, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject multiValueForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.multiValueForProperty_( Handle, CachedSelectors.multiValueForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nickNameFieldPresent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nickNameFieldPresent( Handle, CachedSelectors.nickNameFieldPresent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char phoneticFieldsPresent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.phoneticFieldsPresent( Handle, CachedSelectors.phoneticFieldsPresent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject popupForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.popupForProperty_( Handle, CachedSelectors.popupForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void reformatValueAtLocation_( uint location ) {
			RuntimeObject ___occuredException;
			NativeMethods.reformatValueAtLocation_( Handle, CachedSelectors.reformatValueAtLocation_, out ___occuredException, sizeof( uint ), location );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void reformatValueAtLocationInNumber_( NObjective.RuntimeObject number ) {
			RuntimeObject ___occuredException;
			NativeMethods.reformatValueAtLocationInNumber_( Handle, CachedSelectors.reformatValueAtLocationInNumber_, out ___occuredException, sizeof( NObjective.RuntimeObject ), number );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void refreshAfterUndo_( NObjective.RuntimeObject undo ) {
			RuntimeObject ___occuredException;
			NativeMethods.refreshAfterUndo_( Handle, CachedSelectors.refreshAfterUndo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), undo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void refreshDisplayedCard() {
			RuntimeObject ___occuredException;
			NativeMethods.refreshDisplayedCard( Handle, CachedSelectors.refreshDisplayedCard, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void refreshDisplayedCardAndReloadImage_( char image ) {
			RuntimeObject ___occuredException;
			NativeMethods.refreshDisplayedCardAndReloadImage_( Handle, CachedSelectors.refreshDisplayedCardAndReloadImage_, out ___occuredException, sizeof( char ), image );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void reload() {
			RuntimeObject ___occuredException;
			NativeMethods.reload( Handle, CachedSelectors.reload, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void saveValueInUndo_forProperty_( NObjective.RuntimeObject undo, NObjective.RuntimeObject forProperty ) {
			RuntimeObject ___occuredException;
			NativeMethods.saveValueInUndo_forProperty_( Handle, CachedSelectors.saveValueInUndo_forProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), undo, forProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowEditing_( char editing ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowEditing_( Handle, CachedSelectors.setAllowEditing_, out ___occuredException, sizeof( char ), editing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowPictureEditing_( char editing ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowPictureEditing_( Handle, CachedSelectors.setAllowPictureEditing_, out ___occuredException, sizeof( char ), editing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setChanged_( char changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.setChanged_( Handle, CachedSelectors.setChanged_, out ___occuredException, sizeof( char ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setChangedValues_( NObjective.RuntimeObject values ) {
			RuntimeObject ___occuredException;
			NativeMethods.setChangedValues_( Handle, CachedSelectors.setChangedValues_, out ___occuredException, sizeof( NObjective.RuntimeObject ), values );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDisplayedCard_( NObjective.RuntimeObject card ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDisplayedCard_( Handle, CachedSelectors.setDisplayedCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDisplayedCard_withHistory_( NObjective.RuntimeObject card, char withHistory ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDisplayedCard_withHistory_( Handle, CachedSelectors.setDisplayedCard_withHistory_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), card, withHistory );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEditButton_( NObjective.RuntimeObject button ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEditButton_( Handle, CachedSelectors.setEditButton_, out ___occuredException, sizeof( NObjective.RuntimeObject ), button );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEditMode_( char mode ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEditMode_( Handle, CachedSelectors.setEditMode_, out ___occuredException, sizeof( char ), mode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFieldVisible_withBool_( NObjective.RuntimeObject visible, char withBool ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFieldVisible_withBool_( Handle, CachedSelectors.setFieldVisible_withBool_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), visible, withBool );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setModel_( NObjective.RuntimeObject model ) {
			RuntimeObject ___occuredException;
			NativeMethods.setModel_( Handle, CachedSelectors.setModel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), model );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMultiValue_forProperty_( NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMultiValue_forProperty_( Handle, CachedSelectors.setMultiValue_forProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTemplateChangedObserver_withSelector_( NObjective.RuntimeObject observer, NObjective.Selector withSelector ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTemplateChangedObserver_withSelector_( Handle, CachedSelectors.setTemplateChangedObserver_withSelector_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ), observer, withSelector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUIController_( NObjective.RuntimeObject controller ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUIController_( Handle, CachedSelectors.setUIController_, out ___occuredException, sizeof( NObjective.RuntimeObject ), controller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char suffixFieldPresent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.suffixFieldPresent( Handle, CachedSelectors.suffixFieldPresent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void templateChanged() {
			RuntimeObject ___occuredException;
			NativeMethods.templateChanged( Handle, CachedSelectors.templateChanged, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void textDidChange_( NObjective.RuntimeObject change ) {
			RuntimeObject ___occuredException;
			NativeMethods.textDidChange_( Handle, CachedSelectors.textDidChange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), change );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject textView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textView( Handle, CachedSelectors.textView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char textView_clickedOnLink_( NObjective.RuntimeObject view, NObjective.RuntimeObject clickedOnLink ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textView_clickedOnLink_( Handle, CachedSelectors.textView_clickedOnLink_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, clickedOnLink );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char titleFieldPresent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.titleFieldPresent( Handle, CachedSelectors.titleFieldPresent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject uiController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.uiController( Handle, CachedSelectors.uiController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void unassociatePopup_( NObjective.RuntimeObject popup ) {
			RuntimeObject ___occuredException;
			NativeMethods.unassociatePopup_( Handle, CachedSelectors.unassociatePopup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), popup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateOnlineStatus() {
			RuntimeObject ___occuredException;
			NativeMethods.updateOnlineStatus( Handle, CachedSelectors.updateOnlineStatus, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updatePersonPicture() {
			RuntimeObject ___occuredException;
			NativeMethods.updatePersonPicture( Handle, CachedSelectors.updatePersonPicture, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateSearchHilight() {
			RuntimeObject ___occuredException;
			NativeMethods.updateSearchHilight( Handle, CachedSelectors.updateSearchHilight, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateSearchHilightWithSearchString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			NativeMethods.updateSearchHilightWithSearchString_( Handle, CachedSelectors.updateSearchHilightWithSearchString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateWidth_( float width ) {
			RuntimeObject ___occuredException;
			NativeMethods.updateWidth_( Handle, CachedSelectors.updateWidth_, out ___occuredException, sizeof( float ), width );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char validateMenuItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validateMenuItem_( Handle, CachedSelectors.validateMenuItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject valueForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueForProperty_( Handle, CachedSelectors.valueForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void writePaneGeometryToDefaults() {
			RuntimeObject ___occuredException;
			NativeMethods.writePaneGeometryToDefaults( Handle, CachedSelectors.writePaneGeometryToDefaults, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addAdditionalField_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject field );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addFieldWithNoPopup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int popup );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addRollOver_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject over );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void adjustRulersForMaxSize( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char allowEditing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char allowPictureEditing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void associatePopup_withProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject popup, NObjective.RuntimeObject withProperty );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void beginCertLookupForEmail_cell_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject email, NObjective.RuntimeObject cell );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char birthdayFieldPresent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char canAddField_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int field );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancelPendingCertLookups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cardPane( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cardScrollView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cardWillCommitChanges_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void certificateSheetDidEnd_returnCode_contextInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject end, int returnCode, System.IntPtr contextInfo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void changeAddressFormat_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject format );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void changeCompanyStatus_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject status );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr changedValues( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void changeFieldLabel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject label );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void changeInstantField_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject field );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void changeValue_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void chatWithPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void chooseRollOverIdentifier_withSelection_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier, NObjective.RuntimeObject withSelection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clearAllFieldVisiblity( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clearField_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject field );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clickedCert_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cert );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr colorForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char commitPendingChangesAndSave_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char save );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void consumeImageData_forTag_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data, int forTag );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void databaseChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dateFormat( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char departmentFieldPresent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void disableSelectionChanging( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr displayedCard( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void doDelete_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject delete );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void edit_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject edit );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr editButton( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void editDisplayedCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char card );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char editMode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void editPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void email_forToken_hasCert_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject email, int forToken, char hasCert );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void enabledSelectionChanging( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void exportVCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void fetchNoteOutOfRecordWithEmptyTemplate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char template );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fieldContentsForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr foundCardsForName_label_inRecord_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, NObjective.RuntimeObject label, NObjective.RuntimeObject inRecord );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasChangesPending( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char homePageFieldPresent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertRulers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isFieldVisible_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject visible );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isMainInputController( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void issueChangePropertiesCommand( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char jobTitleFieldPresent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr keyNavigationView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void layoutChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char maidenNameFieldPresent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void makeSelectedPrimary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject primary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void markAsViewed_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject viewed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void masterTemplateHasChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr matchableResultsForString_inSingleProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, NObjective.RuntimeObject inSingleProperty );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void membersChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void membersSelectionChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char middleNameFieldPresent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr model( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr multiValueForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nickNameFieldPresent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char phoneticFieldsPresent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr popupForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void reformatValueAtLocation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint location );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void reformatValueAtLocationInNumber_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject number );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void refreshAfterUndo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject undo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void refreshDisplayedCard( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void refreshDisplayedCardAndReloadImage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char image );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void reload( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char respondsToProperty_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rolloverMenuForCardProxy( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rolloverMenuForSelection_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void saveValueInUndo_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject undo, NObjective.RuntimeObject forProperty );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowEditing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char editing );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowPictureEditing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char editing );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setChangedValues_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject values );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDisplayedCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDisplayedCard_withHistory_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card, char withHistory );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEditButton_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject button );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEditMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char mode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFieldVisible_withBool_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject visible, char withBool );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setModel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject model );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMultiValue_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTemplateChangedObserver_withSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject observer, NObjective.Selector withSelector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUIController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char suffixFieldPresent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void templateChanged( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void textDidChange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject change );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr textView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char textView_clickedOnLink_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject clickedOnLink );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char titleFieldPresent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr uiController( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unassociatePopup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject popup );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateOnlineStatus( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updatePersonPicture( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateSearchHilight( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateSearchHilightWithSearchString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float width );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char validateMenuItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void writePaneGeometryToDefaults( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addAdditionalField_ = "addAdditionalField:";
			public static readonly Selector addFieldWithNoPopup_ = "addFieldWithNoPopup:";
			public static readonly Selector addRollOver_ = "addRollOver:";
			public static readonly Selector adjustRulersForMaxSize = "adjustRulersForMaxSize";
			public static readonly Selector allowEditing = "allowEditing";
			public static readonly Selector allowPictureEditing = "allowPictureEditing";
			public static readonly Selector associatePopup_withProperty_ = "associatePopup:withProperty:";
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector beginCertLookupForEmail_cell_ = "beginCertLookupForEmail:cell:";
			public static readonly Selector birthdayFieldPresent = "birthdayFieldPresent";
			public static readonly Selector canAddField_ = "canAddField:";
			public static readonly Selector cancelPendingCertLookups = "cancelPendingCertLookups";
			public static readonly Selector cardPane = "cardPane";
			public static readonly Selector cardScrollView = "cardScrollView";
			public static readonly Selector cardWillCommitChanges_ = "cardWillCommitChanges:";
			public static readonly Selector certificateSheetDidEnd_returnCode_contextInfo_ = "certificateSheetDidEnd:returnCode:contextInfo:";
			public static readonly Selector changeAddressFormat_ = "changeAddressFormat:";
			public static readonly Selector changeCompanyStatus_ = "changeCompanyStatus:";
			public static readonly Selector changedValues = "changedValues";
			public static readonly Selector changeFieldLabel_ = "changeFieldLabel:";
			public static readonly Selector changeInstantField_ = "changeInstantField:";
			public static readonly Selector changeValue_forKey_ = "changeValue:forKey:";
			public static readonly Selector chatWithPerson_ = "chatWithPerson:";
			public static readonly Selector chooseRollOverIdentifier_withSelection_ = "chooseRollOverIdentifier:withSelection:";
			public static readonly Selector clearAllFieldVisiblity = "clearAllFieldVisiblity";
			public static readonly Selector clearField_ = "clearField:";
			public static readonly Selector clickedCert_ = "clickedCert:";
			public static readonly Selector colorForProperty_ = "colorForProperty:";
			public static readonly Selector commitPendingChangesAndSave_ = "commitPendingChangesAndSave:";
			public static readonly Selector consumeImageData_forTag_ = "consumeImageData:forTag:";
			public static readonly Selector databaseChanged_ = "databaseChanged:";
			public static readonly Selector dateFormat = "dateFormat";
			public static readonly Selector departmentFieldPresent = "departmentFieldPresent";
			public static readonly Selector disableSelectionChanging = "disableSelectionChanging";
			public static readonly Selector displayedCard = "displayedCard";
			public static readonly Selector doDelete_ = "doDelete:";
			public static readonly Selector edit_ = "edit:";
			public static readonly Selector editButton = "editButton";
			public static readonly Selector editDisplayedCard_ = "editDisplayedCard:";
			public static readonly Selector editMode = "editMode";
			public static readonly Selector editPerson_ = "editPerson:";
			public static readonly Selector email_forToken_hasCert_ = "email:forToken:hasCert:";
			public static readonly Selector enabledSelectionChanging = "enabledSelectionChanging";
			public static readonly Selector exportVCard_ = "exportVCard:";
			public static readonly Selector fetchNoteOutOfRecordWithEmptyTemplate_ = "fetchNoteOutOfRecordWithEmptyTemplate:";
			public static readonly Selector fieldContentsForProperty_ = "fieldContentsForProperty:";
			public static readonly Selector foundCardsForName_label_inRecord_ = "foundCardsForName:label:inRecord:";
			public static readonly Selector hasChangesPending = "hasChangesPending";
			public static readonly Selector homePageFieldPresent = "homePageFieldPresent";
			public static readonly Selector insertRulers = "insertRulers";
			public static readonly Selector isFieldVisible_ = "isFieldVisible:";
			public static readonly Selector isMainInputController = "isMainInputController";
			public static readonly Selector issueChangePropertiesCommand = "issueChangePropertiesCommand";
			public static readonly Selector jobTitleFieldPresent = "jobTitleFieldPresent";
			public static readonly Selector keyNavigationView = "keyNavigationView";
			public static readonly Selector layoutChanged_ = "layoutChanged:";
			public static readonly Selector maidenNameFieldPresent = "maidenNameFieldPresent";
			public static readonly Selector makeSelectedPrimary_ = "makeSelectedPrimary:";
			public static readonly Selector markAsViewed_ = "markAsViewed:";
			public static readonly Selector masterTemplateHasChanged_ = "masterTemplateHasChanged:";
			public static readonly Selector matchableResultsForString_inSingleProperty_ = "matchableResultsForString:inSingleProperty:";
			public static readonly Selector membersChanged_ = "membersChanged:";
			public static readonly Selector membersSelectionChanged_ = "membersSelectionChanged:";
			public static readonly Selector middleNameFieldPresent = "middleNameFieldPresent";
			public static readonly Selector model = "model";
			public static readonly Selector multiValueForProperty_ = "multiValueForProperty:";
			public static readonly Selector nickNameFieldPresent = "nickNameFieldPresent";
			public static readonly Selector phoneticFieldsPresent = "phoneticFieldsPresent";
			public static readonly Selector popupForProperty_ = "popupForProperty:";
			public static readonly Selector reformatValueAtLocation_ = "reformatValueAtLocation:";
			public static readonly Selector reformatValueAtLocationInNumber_ = "reformatValueAtLocationInNumber:";
			public static readonly Selector refreshAfterUndo_ = "refreshAfterUndo:";
			public static readonly Selector refreshDisplayedCard = "refreshDisplayedCard";
			public static readonly Selector refreshDisplayedCardAndReloadImage_ = "refreshDisplayedCardAndReloadImage:";
			public static readonly Selector reload = "reload";
			public static readonly Selector respondsToProperty_ = "respondsToProperty:";
			public static readonly Selector rolloverMenuForCardProxy = "rolloverMenuForCardProxy";
			public static readonly Selector rolloverMenuForSelection_ = "rolloverMenuForSelection:";
			public static readonly Selector saveValueInUndo_forProperty_ = "saveValueInUndo:forProperty:";
			public static readonly Selector setAllowEditing_ = "setAllowEditing:";
			public static readonly Selector setAllowPictureEditing_ = "setAllowPictureEditing:";
			public static readonly Selector setChanged_ = "setChanged:";
			public static readonly Selector setChangedValues_ = "setChangedValues:";
			public static readonly Selector setDisplayedCard_ = "setDisplayedCard:";
			public static readonly Selector setDisplayedCard_withHistory_ = "setDisplayedCard:withHistory:";
			public static readonly Selector setEditButton_ = "setEditButton:";
			public static readonly Selector setEditMode_ = "setEditMode:";
			public static readonly Selector setFieldVisible_withBool_ = "setFieldVisible:withBool:";
			public static readonly Selector setModel_ = "setModel:";
			public static readonly Selector setMultiValue_forProperty_ = "setMultiValue:forProperty:";
			public static readonly Selector setTemplateChangedObserver_withSelector_ = "setTemplateChangedObserver:withSelector:";
			public static readonly Selector setUIController_ = "setUIController:";
			public static readonly Selector suffixFieldPresent = "suffixFieldPresent";
			public static readonly Selector templateChanged = "templateChanged";
			public static readonly Selector textDidChange_ = "textDidChange:";
			public static readonly Selector textView = "textView";
			public static readonly Selector textView_clickedOnLink_ = "textView:clickedOnLink:";
			public static readonly Selector titleFieldPresent = "titleFieldPresent";
			public static readonly Selector uiController = "uiController";
			public static readonly Selector unassociatePopup_ = "unassociatePopup:";
			public static readonly Selector updateOnlineStatus = "updateOnlineStatus";
			public static readonly Selector updatePersonPicture = "updatePersonPicture";
			public static readonly Selector updateSearchHilight = "updateSearchHilight";
			public static readonly Selector updateSearchHilightWithSearchString_ = "updateSearchHilightWithSearchString:";
			public static readonly Selector updateWidth_ = "updateWidth:";
			public static readonly Selector validateMenuItem_ = "validateMenuItem:";
			public static readonly Selector valueForProperty_ = "valueForProperty:";
			public static readonly Selector writePaneGeometryToDefaults = "writePaneGeometryToDefaults";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABInputModel : IEquatable<ABInputModel> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABInputModel;
		public static implicit operator NSObject( ABInputModel value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABInputModel value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABInputModel value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABInputModel?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABInputModel value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABInputModel value1, ABInputModel value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABInputModel value1, ABInputModel value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABInputModel( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABInputModel alloc() {
			return new ABInputModel( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject allKeys() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allKeys( Handle, CachedSelectors.allKeys, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void clear() {
			RuntimeObject ___occuredException;
			NativeMethods.clear( Handle, CachedSelectors.clear, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject objectForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectForKey_( Handle, CachedSelectors.objectForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void pushChangeCommand_( NObjective.RuntimeObject command ) {
			RuntimeObject ___occuredException;
			NativeMethods.pushChangeCommand_( Handle, CachedSelectors.pushChangeCommand_, out ___occuredException, sizeof( NObjective.RuntimeObject ), command );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setObject_forKey_( NObjective.RuntimeObject @object, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.setObject_forKey_( Handle, CachedSelectors.setObject_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @object, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject topChangeCommand() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.topChangeCommand( Handle, CachedSelectors.topChangeCommand, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allKeys( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clear( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pushChangeCommand_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject command );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setObject_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, NObjective.RuntimeObject forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr topChangeCommand( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector allKeys = "allKeys";
			public static readonly Selector clear = "clear";
			public static readonly Selector objectForKey_ = "objectForKey:";
			public static readonly Selector pushChangeCommand_ = "pushChangeCommand:";
			public static readonly Selector setObject_forKey_ = "setObject:forKey:";
			public static readonly Selector topChangeCommand = "topChangeCommand";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABPopUpButtonCell ) )]
	public struct ABInstantPopUpButtonCell : IEquatable<ABInstantPopUpButtonCell> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABInstantPopUpButtonCell;
		public static implicit operator ABPopUpButtonCell( ABInstantPopUpButtonCell value ) {
			return new ABPopUpButtonCell( value.Handle );
		}
		public static implicit operator NSPopUpButtonCell( ABInstantPopUpButtonCell value ) {
			return new NSPopUpButtonCell( value.Handle );
		}
		public static implicit operator NSMenuItemCell( ABInstantPopUpButtonCell value ) {
			return new NSMenuItemCell( value.Handle );
		}
		public static implicit operator NSButtonCell( ABInstantPopUpButtonCell value ) {
			return new NSButtonCell( value.Handle );
		}
		public static implicit operator NSActionCell( ABInstantPopUpButtonCell value ) {
			return new NSActionCell( value.Handle );
		}
		public static implicit operator NSCell( ABInstantPopUpButtonCell value ) {
			return new NSCell( value.Handle );
		}
		public static implicit operator NSObject( ABInstantPopUpButtonCell value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABInstantPopUpButtonCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABInstantPopUpButtonCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABInstantPopUpButtonCell?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABInstantPopUpButtonCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABInstantPopUpButtonCell value1, ABInstantPopUpButtonCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABInstantPopUpButtonCell value1, ABInstantPopUpButtonCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABInstantPopUpButtonCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABInstantPopUpButtonCell alloc() {
			return new ABInstantPopUpButtonCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithInputController_andField_( NObjective.RuntimeObject controller, NObjective.RuntimeObject andField ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithInputController_andField_( Handle, CachedSelectors.initWithInputController_andField_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), controller, andField );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithInputController_andField_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller, NObjective.RuntimeObject andField );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithInputController_andField_ = "initWithInputController:andField:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSTextFieldCell ) )]
	public struct ABKeyValueCell : IEquatable<ABKeyValueCell> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABKeyValueCell;
		public static implicit operator NSTextFieldCell( ABKeyValueCell value ) {
			return new NSTextFieldCell( value.Handle );
		}
		public static implicit operator NSActionCell( ABKeyValueCell value ) {
			return new NSActionCell( value.Handle );
		}
		public static implicit operator NSCell( ABKeyValueCell value ) {
			return new NSCell( value.Handle );
		}
		public static implicit operator NSObject( ABKeyValueCell value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABKeyValueCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABKeyValueCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABKeyValueCell?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABKeyValueCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABKeyValueCell value1, ABKeyValueCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABKeyValueCell value1, ABKeyValueCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABKeyValueCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABKeyValueCell alloc() {
			return new ABKeyValueCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void setSubrowSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSubrowSelection_( Handle, CachedSelectors.setSubrowSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSubrowSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
		}
		static internal class CachedSelectors {
			public static readonly Selector setSubrowSelection_ = "setSubrowSelection:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABPopUpButtonCell ) )]
	public struct ABLabelPopUpButtonCell : IEquatable<ABLabelPopUpButtonCell> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABLabelPopUpButtonCell;
		public static implicit operator ABPopUpButtonCell( ABLabelPopUpButtonCell value ) {
			return new ABPopUpButtonCell( value.Handle );
		}
		public static implicit operator NSPopUpButtonCell( ABLabelPopUpButtonCell value ) {
			return new NSPopUpButtonCell( value.Handle );
		}
		public static implicit operator NSMenuItemCell( ABLabelPopUpButtonCell value ) {
			return new NSMenuItemCell( value.Handle );
		}
		public static implicit operator NSButtonCell( ABLabelPopUpButtonCell value ) {
			return new NSButtonCell( value.Handle );
		}
		public static implicit operator NSActionCell( ABLabelPopUpButtonCell value ) {
			return new NSActionCell( value.Handle );
		}
		public static implicit operator NSCell( ABLabelPopUpButtonCell value ) {
			return new NSCell( value.Handle );
		}
		public static implicit operator NSObject( ABLabelPopUpButtonCell value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABLabelPopUpButtonCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABLabelPopUpButtonCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABLabelPopUpButtonCell?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABLabelPopUpButtonCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABLabelPopUpButtonCell value1, ABLabelPopUpButtonCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABLabelPopUpButtonCell value1, ABLabelPopUpButtonCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABLabelPopUpButtonCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABLabelPopUpButtonCell alloc() {
			return new ABLabelPopUpButtonCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithInputController_andField_( NObjective.RuntimeObject controller, NObjective.RuntimeObject andField ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithInputController_andField_( Handle, CachedSelectors.initWithInputController_andField_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), controller, andField );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void insertCustomLabel_( NObjective.RuntimeObject label ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertCustomLabel_( Handle, CachedSelectors.insertCustomLabel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), label );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject labels() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.labels( Handle, CachedSelectors.labels, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject property() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.property( Handle, CachedSelectors.property, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void replaceCustomLabel_( NObjective.RuntimeObject label ) {
			RuntimeObject ___occuredException;
			NativeMethods.replaceCustomLabel_( Handle, CachedSelectors.replaceCustomLabel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), label );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			NativeMethods.setProperty_( Handle, CachedSelectors.setProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTitleWithRepresentedObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTitleWithRepresentedObject_( Handle, CachedSelectors.setTitleWithRepresentedObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithInputController_andField_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller, NObjective.RuntimeObject andField );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertCustomLabel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject label );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr labels( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr property( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceCustomLabel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject label );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTitleWithRepresentedObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithInputController_andField_ = "initWithInputController:andField:";
			public static readonly Selector insertCustomLabel_ = "insertCustomLabel:";
			public static readonly Selector labels = "labels";
			public static readonly Selector property = "property";
			public static readonly Selector replaceCustomLabel_ = "replaceCustomLabel:";
			public static readonly Selector setProperty_ = "setProperty:";
			public static readonly Selector setTitleWithRepresentedObject_ = "setTitleWithRepresentedObject:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABGroup ) )]
	public struct ABLastImportGroup : IEquatable<ABLastImportGroup> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABLastImportGroup;
		public static implicit operator ABGroup( ABLastImportGroup value ) {
			return new ABGroup( value.Handle );
		}
		public static implicit operator ABRecord( ABLastImportGroup value ) {
			return new ABRecord( value.Handle );
		}
		public static implicit operator NSObject( ABLastImportGroup value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABLastImportGroup value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABLastImportGroup value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABLastImportGroup?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABLastImportGroup value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABLastImportGroup value1, ABLastImportGroup value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABLastImportGroup value1, ABLastImportGroup value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABLastImportGroup( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABLastImportGroup alloc() {
			return new ABLastImportGroup( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject lastImportGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lastImportGroup( ClassHandle, CachedSelectors.lastImportGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void saveLastImportContent() {
			RuntimeObject ___occuredException;
			NativeMethods.saveLastImportContent( ClassHandle, CachedSelectors.saveLastImportContent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addMembers_( NObjective.RuntimeObject members ) {
			RuntimeObject ___occuredException;
			NativeMethods.addMembers_( Handle, CachedSelectors.addMembers_, out ___occuredException, sizeof( NObjective.RuntimeObject ), members );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clear() {
			RuntimeObject ___occuredException;
			NativeMethods.clear( Handle, CachedSelectors.clear, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void dataBaseChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.dataBaseChanged_( Handle, CachedSelectors.dataBaseChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char hasChanged() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasChanged( Handle, CachedSelectors.hasChanged, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void loadContent() {
			RuntimeObject ___occuredException;
			NativeMethods.loadContent( Handle, CachedSelectors.loadContent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addMembers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clear( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void dataBaseChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasChanged( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lastImportGroup( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void loadContent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void saveLastImportContent( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addMembers_ = "addMembers:";
			public static readonly Selector clear = "clear";
			public static readonly Selector dataBaseChanged_ = "dataBaseChanged:";
			public static readonly Selector hasChanged = "hasChanged";
			public static readonly Selector lastImportGroup = "lastImportGroup";
			public static readonly Selector loadContent = "loadContent";
			public static readonly Selector saveLastImportContent = "saveLastImportContent";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSLayoutManager ) )]
	public struct ABLayoutManager : IEquatable<ABLayoutManager> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABLayoutManager;
		public static implicit operator NSLayoutManager( ABLayoutManager value ) {
			return new NSLayoutManager( value.Handle );
		}
		public static implicit operator NSObject( ABLayoutManager value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABLayoutManager value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABLayoutManager value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABLayoutManager?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABLayoutManager value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABLayoutManager value1, ABLayoutManager value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABLayoutManager value1, ABLayoutManager value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABLayoutManager( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABLayoutManager alloc() {
			return new ABLayoutManager( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABLDAP_ConfigController : IEquatable<ABLDAP_ConfigController> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABLDAP_ConfigController;
		public static implicit operator NSObject( ABLDAP_ConfigController value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABLDAP_ConfigController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABLDAP_ConfigController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABLDAP_ConfigController?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABLDAP_ConfigController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABLDAP_ConfigController value1, ABLDAP_ConfigController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABLDAP_ConfigController value1, ABLDAP_ConfigController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABLDAP_ConfigController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABLDAP_ConfigController alloc() {
			return new ABLDAP_ConfigController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void startWatchingLDAPCards() {
			RuntimeObject ___occuredException;
			NativeMethods.startWatchingLDAPCards( ClassHandle, CachedSelectors.startWatchingLDAPCards, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void acceptChanges_( NObjective.RuntimeObject changes ) {
			RuntimeObject ___occuredException;
			NativeMethods.acceptChanges_( Handle, CachedSelectors.acceptChanges_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addAction_( NObjective.RuntimeObject action ) {
			RuntimeObject ___occuredException;
			NativeMethods.addAction_( Handle, CachedSelectors.addAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void cancelChanges_( NObjective.RuntimeObject changes ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancelChanges_( Handle, CachedSelectors.cancelChanges_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void controlTextDidChange_( NObjective.RuntimeObject change ) {
			RuntimeObject ___occuredException;
			NativeMethods.controlTextDidChange_( Handle, CachedSelectors.controlTextDidChange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), change );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteAction_( NObjective.RuntimeObject action ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteAction_( Handle, CachedSelectors.deleteAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void editorDidEnd_returnCode_contextInfo_( NObjective.RuntimeObject end, int returnCode, System.IntPtr contextInfo ) {
			RuntimeObject ___occuredException;
			NativeMethods.editorDidEnd_returnCode_contextInfo_( Handle, CachedSelectors.editorDidEnd_returnCode_contextInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( System.IntPtr ), end, returnCode, contextInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void editServerAction_( NObjective.RuntimeObject action ) {
			RuntimeObject ___occuredException;
			NativeMethods.editServerAction_( Handle, CachedSelectors.editServerAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void help_( NObjective.RuntimeObject help ) {
			RuntimeObject ___occuredException;
			NativeMethods.help_( Handle, CachedSelectors.help_, out ___occuredException, sizeof( NObjective.RuntimeObject ), help );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject LDAPConfigView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.LDAPConfigView( Handle, CachedSelectors.LDAPConfigView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int numberOfRowsInTableView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberOfRowsInTableView_( Handle, CachedSelectors.numberOfRowsInTableView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject serverFieldValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.serverFieldValue( Handle, CachedSelectors.serverFieldValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setupAuthType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setupAuthType_( Handle, CachedSelectors.setupAuthType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject tableView_objectValueForTableColumn_row_( NObjective.RuntimeObject view, NObjective.RuntimeObject objectValueForTableColumn, int row ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tableView_objectValueForTableColumn_row_( Handle, CachedSelectors.tableView_objectValueForTableColumn_row_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), view, objectValueForTableColumn, row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void tableView_setObjectValue_forTableColumn_row_( NObjective.RuntimeObject view, NObjective.RuntimeObject setObjectValue, NObjective.RuntimeObject forTableColumn, int row ) {
			RuntimeObject ___occuredException;
			NativeMethods.tableView_setObjectValue_forTableColumn_row_( Handle, CachedSelectors.tableView_setObjectValue_forTableColumn_row_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), view, setObjectValue, forTableColumn, row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void tableViewSelectionDidChange_( NObjective.RuntimeObject change ) {
			RuntimeObject ___occuredException;
			NativeMethods.tableViewSelectionDidChange_( Handle, CachedSelectors.tableViewSelectionDidChange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), change );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void toggleAutoUpdate_( NObjective.RuntimeObject update ) {
			RuntimeObject ___occuredException;
			NativeMethods.toggleAutoUpdate_( Handle, CachedSelectors.toggleAutoUpdate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), update );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void useSSL_( NObjective.RuntimeObject ssl ) {
			RuntimeObject ___occuredException;
			NativeMethods.useSSL_( Handle, CachedSelectors.useSSL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ssl );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void acceptChanges_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject action );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancelChanges_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void controlTextDidChange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject change );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject action );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void editorDidEnd_returnCode_contextInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject end, int returnCode, System.IntPtr contextInfo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void editServerAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject action );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void help_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject help );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr LDAPConfigView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int numberOfRowsInTableView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr serverFieldValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setupAuthType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void startWatchingLDAPCards( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr tableView_objectValueForTableColumn_row_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject objectValueForTableColumn, int row );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void tableView_setObjectValue_forTableColumn_row_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject setObjectValue, NObjective.RuntimeObject forTableColumn, int row );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void tableViewSelectionDidChange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject change );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void toggleAutoUpdate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject update );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void useSSL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ssl );
		}
		static internal class CachedSelectors {
			public static readonly Selector acceptChanges_ = "acceptChanges:";
			public static readonly Selector addAction_ = "addAction:";
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector cancelChanges_ = "cancelChanges:";
			public static readonly Selector controlTextDidChange_ = "controlTextDidChange:";
			public static readonly Selector deleteAction_ = "deleteAction:";
			public static readonly Selector editorDidEnd_returnCode_contextInfo_ = "editorDidEnd:returnCode:contextInfo:";
			public static readonly Selector editServerAction_ = "editServerAction:";
			public static readonly Selector help_ = "help:";
			public static readonly Selector LDAPConfigView = "LDAPConfigView";
			public static readonly Selector numberOfRowsInTableView_ = "numberOfRowsInTableView:";
			public static readonly Selector serverFieldValue = "serverFieldValue";
			public static readonly Selector setupAuthType_ = "setupAuthType:";
			public static readonly Selector startWatchingLDAPCards = "startWatchingLDAPCards";
			public static readonly Selector tableView_objectValueForTableColumn_row_ = "tableView:objectValueForTableColumn:row:";
			public static readonly Selector tableView_setObjectValue_forTableColumn_row_ = "tableView:setObjectValue:forTableColumn:row:";
			public static readonly Selector tableViewSelectionDidChange_ = "tableViewSelectionDidChange:";
			public static readonly Selector toggleAutoUpdate_ = "toggleAutoUpdate:";
			public static readonly Selector useSSL_ = "useSSL:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABLDAP_Manager : IEquatable<ABLDAP_Manager> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABLDAP_Manager;
		public static implicit operator NSObject( ABLDAP_Manager value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABLDAP_Manager value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABLDAP_Manager value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABLDAP_Manager?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABLDAP_Manager value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABLDAP_Manager value1, ABLDAP_Manager value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABLDAP_Manager value1, ABLDAP_Manager value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABLDAP_Manager( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABLDAP_Manager alloc() {
			return new ABLDAP_Manager( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void cancelAllQueries() {
			RuntimeObject ___occuredException;
			NativeMethods.cancelAllQueries( ClassHandle, CachedSelectors.cancelAllQueries, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject sharedLDAPManagerInstance() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedLDAPManagerInstance( ClassHandle, CachedSelectors.sharedLDAPManagerInstance, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addEntries_fromSession_( NObjective.RuntimeObject entries, NObjective.RuntimeObject fromSession ) {
			RuntimeObject ___occuredException;
			NativeMethods.addEntries_fromSession_( Handle, CachedSelectors.addEntries_fromSession_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), entries, fromSession );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addServer_( NObjective.RuntimeObject server ) {
			RuntimeObject ___occuredException;
			NativeMethods.addServer_( Handle, CachedSelectors.addServer_, out ___occuredException, sizeof( NObjective.RuntimeObject ), server );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject allowedFields() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowedFields( Handle, CachedSelectors.allowedFields, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject availableUserServers() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.availableUserServers( Handle, CachedSelectors.availableUserServers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char backgrounQueriesRunning() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backgrounQueriesRunning( Handle, CachedSelectors.backgrounQueriesRunning, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject binaryAttributes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.binaryAttributes( Handle, CachedSelectors.binaryAttributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void cancelQueries_( char queries ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancelQueries_( Handle, CachedSelectors.cancelQueries_, out ___occuredException, sizeof( char ), queries );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject capitalizedAttributes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.capitalizedAttributes( Handle, CachedSelectors.capitalizedAttributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void decrementNumberOfThreadsAlive_withSessionUID_( NObjective.RuntimeObject alive, NObjective.RuntimeObject withSessionUID ) {
			RuntimeObject ___occuredException;
			NativeMethods.decrementNumberOfThreadsAlive_withSessionUID_( Handle, CachedSelectors.decrementNumberOfThreadsAlive_withSessionUID_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), alive, withSessionUID );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject defaultAddressBookPreferencesFile() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultAddressBookPreferencesFile( Handle, CachedSelectors.defaultAddressBookPreferencesFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject deserializeServers_( NObjective.RuntimeObject servers ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.deserializeServers_( Handle, CachedSelectors.deserializeServers_, out ___occuredException, sizeof( NObjective.RuntimeObject ), servers );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject directoryServicesNodes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryServicesNodes( Handle, CachedSelectors.directoryServicesNodes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject directoryServicesServer() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryServicesServer( Handle, CachedSelectors.directoryServicesServer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject DSQueryComponents() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.DSQueryComponents( Handle, CachedSelectors.DSQueryComponents, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject DSQueryString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.DSQueryString( Handle, CachedSelectors.DSQueryString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void freeAttributes() {
			RuntimeObject ___occuredException;
			NativeMethods.freeAttributes( Handle, CachedSelectors.freeAttributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject LDAPQueryString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.LDAPQueryString( Handle, CachedSelectors.LDAPQueryString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject loadServersFromDefaultsFile() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.loadServersFromDefaultsFile( Handle, CachedSelectors.loadServersFromDefaultsFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject lowercasedAttributes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lowercasedAttributes( Handle, CachedSelectors.lowercasedAttributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void makeQueries_( NObjective.RuntimeObject queries ) {
			RuntimeObject ___occuredException;
			NativeMethods.makeQueries_( Handle, CachedSelectors.makeQueries_, out ___occuredException, sizeof( NObjective.RuntimeObject ), queries );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject makeUID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.makeUID( Handle, CachedSelectors.makeUID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int maxResults() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.maxResults( Handle, CachedSelectors.maxResults, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void notifyDataIsReady() {
			RuntimeObject ___occuredException;
			NativeMethods.notifyDataIsReady( Handle, CachedSelectors.notifyDataIsReady, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int numberOfThreadsAlive() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberOfThreadsAlive( Handle, CachedSelectors.numberOfThreadsAlive, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void postQueryHasBeenCanceledNotification() {
			RuntimeObject ___occuredException;
			NativeMethods.postQueryHasBeenCanceledNotification( Handle, CachedSelectors.postQueryHasBeenCanceledNotification, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void postQueryHasFinishedNotification() {
			RuntimeObject ___occuredException;
			NativeMethods.postQueryHasFinishedNotification( Handle, CachedSelectors.postQueryHasFinishedNotification, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void postResultsAreInNotificationNotification_( NObjective.RuntimeObject notification ) {
			RuntimeObject ___occuredException;
			NativeMethods.postResultsAreInNotificationNotification_( Handle, CachedSelectors.postResultsAreInNotificationNotification_, out ___occuredException, sizeof( NObjective.RuntimeObject ), notification );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public System.IntPtr queryAttributes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.queryAttributes( Handle, CachedSelectors.queryAttributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int queryOperator() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.queryOperator( Handle, CachedSelectors.queryOperator, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject recognizableAttributes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.recognizableAttributes( Handle, CachedSelectors.recognizableAttributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void removeServer_( NObjective.RuntimeObject server ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeServer_( Handle, CachedSelectors.removeServer_, out ___occuredException, sizeof( NObjective.RuntimeObject ), server );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void resetLDAPManager() {
			RuntimeObject ___occuredException;
			NativeMethods.resetLDAPManager( Handle, CachedSelectors.resetLDAPManager, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject serializeServers_( NObjective.RuntimeObject servers ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.serializeServers_( Handle, CachedSelectors.serializeServers_, out ___occuredException, sizeof( NObjective.RuntimeObject ), servers );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char serverExists_inServerList_( NObjective.RuntimeObject exists, NObjective.RuntimeObject inServerList ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.serverExists_inServerList_( Handle, CachedSelectors.serverExists_inServerList_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), exists, inServerList );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject sessionUID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sessionUID( Handle, CachedSelectors.sessionUID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setBinaryAttributes_( NObjective.RuntimeObject attributes ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBinaryAttributes_( Handle, CachedSelectors.setBinaryAttributes_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attributes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCapitalizedAttributes_( NObjective.RuntimeObject attributes ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCapitalizedAttributes_( Handle, CachedSelectors.setCapitalizedAttributes_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attributes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLowercasedAttributes_( NObjective.RuntimeObject attributes ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLowercasedAttributes_( Handle, CachedSelectors.setLowercasedAttributes_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attributes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMaxResults_( int results ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMaxResults_( Handle, CachedSelectors.setMaxResults_, out ___occuredException, sizeof( int ), results );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setQueryAttributes_( NObjective.RuntimeObject attributes ) {
			RuntimeObject ___occuredException;
			NativeMethods.setQueryAttributes_( Handle, CachedSelectors.setQueryAttributes_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attributes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setServer_( NObjective.RuntimeObject server ) {
			RuntimeObject ___occuredException;
			NativeMethods.setServer_( Handle, CachedSelectors.setServer_, out ___occuredException, sizeof( NObjective.RuntimeObject ), server );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setServersInDefaultsFile_( NObjective.RuntimeObject file ) {
			RuntimeObject ___occuredException;
			NativeMethods.setServersInDefaultsFile_( Handle, CachedSelectors.setServersInDefaultsFile_, out ___occuredException, sizeof( NObjective.RuntimeObject ), file );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSessionUID_( NObjective.RuntimeObject uid ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSessionUID_( Handle, CachedSelectors.setSessionUID_, out ___occuredException, sizeof( NObjective.RuntimeObject ), uid );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setThread_withObject_withSessionUID_( NObjective.RuntimeObject thread, NObjective.RuntimeObject withObject, NObjective.RuntimeObject withSessionUID ) {
			RuntimeObject ___occuredException;
			NativeMethods.setThread_withObject_withSessionUID_( Handle, CachedSelectors.setThread_withObject_withSessionUID_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), thread, withObject, withSessionUID );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTimeLimit_( int limit ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTimeLimit_( Handle, CachedSelectors.setTimeLimit_, out ___occuredException, sizeof( int ), limit );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char startQueryForString_withServers_( NObjective.RuntimeObject @string, NObjective.RuntimeObject withServers ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.startQueryForString_withServers_( Handle, CachedSelectors.startQueryForString_withServers_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @string, withServers );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char startQueryForString_withServers_userInfo_exactString_( NObjective.RuntimeObject @string, NObjective.RuntimeObject withServers, NObjective.RuntimeObject userInfo, char exactString ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.startQueryForString_withServers_userInfo_exactString_( Handle, CachedSelectors.startQueryForString_withServers_userInfo_exactString_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), @string, withServers, userInfo, exactString );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int timeLimit() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.timeLimit( Handle, CachedSelectors.timeLimit, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addEntries_fromSession_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject entries, NObjective.RuntimeObject fromSession );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addServer_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject server );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allowedFields( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr availableUserServers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char backgrounQueriesRunning( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr binaryAttributes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancelAllQueries( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancelQueries_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char queries );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr capitalizedAttributes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void decrementNumberOfThreadsAlive_withSessionUID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject alive, NObjective.RuntimeObject withSessionUID );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultAddressBookPreferencesFile( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr deserializeServers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject servers );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr directoryServicesNodes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr directoryServicesServer( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr DSQueryComponents( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr DSQueryString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void freeAttributes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr LDAPQueryString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr loadServersFromDefaultsFile( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lowercasedAttributes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void makeQueries_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject queries );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr makeUID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int maxResults( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void notifyDataIsReady( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int numberOfThreadsAlive( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void postQueryHasBeenCanceledNotification( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void postQueryHasFinishedNotification( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void postResultsAreInNotificationNotification_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject notification );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern System.IntPtr queryAttributes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int queryOperator( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr recognizableAttributes( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeServer_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject server );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resetLDAPManager( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr serializeServers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject servers );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char serverExists_inServerList_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject exists, NObjective.RuntimeObject inServerList );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sessionUID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBinaryAttributes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attributes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCapitalizedAttributes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attributes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLowercasedAttributes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attributes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMaxResults_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int results );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setQueryAttributes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attributes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setServer_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject server );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setServersInDefaultsFile_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject file );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSessionUID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject uid );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setThread_withObject_withSessionUID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject thread, NObjective.RuntimeObject withObject, NObjective.RuntimeObject withSessionUID );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTimeLimit_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int limit );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedLDAPManagerInstance( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char startQueryForString_withServers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, NObjective.RuntimeObject withServers );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char startQueryForString_withServers_userInfo_exactString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, NObjective.RuntimeObject withServers, NObjective.RuntimeObject userInfo, char exactString );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int timeLimit( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addEntries_fromSession_ = "addEntries:fromSession:";
			public static readonly Selector addServer_ = "addServer:";
			public static readonly Selector allowedFields = "allowedFields";
			public static readonly Selector availableUserServers = "availableUserServers";
			public static readonly Selector backgrounQueriesRunning = "backgrounQueriesRunning";
			public static readonly Selector binaryAttributes = "binaryAttributes";
			public static readonly Selector cancelAllQueries = "cancelAllQueries";
			public static readonly Selector cancelQueries_ = "cancelQueries:";
			public static readonly Selector capitalizedAttributes = "capitalizedAttributes";
			public static readonly Selector decrementNumberOfThreadsAlive_withSessionUID_ = "decrementNumberOfThreadsAlive:withSessionUID:";
			public static readonly Selector defaultAddressBookPreferencesFile = "defaultAddressBookPreferencesFile";
			public static readonly Selector deserializeServers_ = "deserializeServers:";
			public static readonly Selector directoryServicesNodes = "directoryServicesNodes";
			public static readonly Selector directoryServicesServer = "directoryServicesServer";
			public static readonly Selector DSQueryComponents = "DSQueryComponents";
			public static readonly Selector DSQueryString = "DSQueryString";
			public static readonly Selector freeAttributes = "freeAttributes";
			public static readonly Selector LDAPQueryString = "LDAPQueryString";
			public static readonly Selector loadServersFromDefaultsFile = "loadServersFromDefaultsFile";
			public static readonly Selector lowercasedAttributes = "lowercasedAttributes";
			public static readonly Selector makeQueries_ = "makeQueries:";
			public static readonly Selector makeUID = "makeUID";
			public static readonly Selector maxResults = "maxResults";
			public static readonly Selector notifyDataIsReady = "notifyDataIsReady";
			public static readonly Selector numberOfThreadsAlive = "numberOfThreadsAlive";
			public static readonly Selector postQueryHasBeenCanceledNotification = "postQueryHasBeenCanceledNotification";
			public static readonly Selector postQueryHasFinishedNotification = "postQueryHasFinishedNotification";
			public static readonly Selector postResultsAreInNotificationNotification_ = "postResultsAreInNotificationNotification:";
			public static readonly Selector queryAttributes = "queryAttributes";
			public static readonly Selector queryOperator = "queryOperator";
			public static readonly Selector recognizableAttributes = "recognizableAttributes";
			public static readonly Selector removeServer_ = "removeServer:";
			public static readonly Selector resetLDAPManager = "resetLDAPManager";
			public static readonly Selector serializeServers_ = "serializeServers:";
			public static readonly Selector serverExists_inServerList_ = "serverExists:inServerList:";
			public static readonly Selector sessionUID = "sessionUID";
			public static readonly Selector setBinaryAttributes_ = "setBinaryAttributes:";
			public static readonly Selector setCapitalizedAttributes_ = "setCapitalizedAttributes:";
			public static readonly Selector setLowercasedAttributes_ = "setLowercasedAttributes:";
			public static readonly Selector setMaxResults_ = "setMaxResults:";
			public static readonly Selector setQueryAttributes_ = "setQueryAttributes:";
			public static readonly Selector setServer_ = "setServer:";
			public static readonly Selector setServersInDefaultsFile_ = "setServersInDefaultsFile:";
			public static readonly Selector setSessionUID_ = "setSessionUID:";
			public static readonly Selector setThread_withObject_withSessionUID_ = "setThread:withObject:withSessionUID:";
			public static readonly Selector setTimeLimit_ = "setTimeLimit:";
			public static readonly Selector sharedLDAPManagerInstance = "sharedLDAPManagerInstance";
			public static readonly Selector startQueryForString_withServers_ = "startQueryForString:withServers:";
			public static readonly Selector startQueryForString_withServers_userInfo_exactString_ = "startQueryForString:withServers:userInfo:exactString:";
			public static readonly Selector timeLimit = "timeLimit";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABLDAP_Query : IEquatable<ABLDAP_Query> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABLDAP_Query;
		public static implicit operator NSObject( ABLDAP_Query value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABLDAP_Query value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABLDAP_Query value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABLDAP_Query?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABLDAP_Query value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABLDAP_Query value1, ABLDAP_Query value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABLDAP_Query value1, ABLDAP_Query value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABLDAP_Query( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABLDAP_Query alloc() {
			return new ABLDAP_Query( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static System.IntPtr createAttributesListForApple_( char apple ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createAttributesListForApple_( ClassHandle, CachedSelectors.createAttributesListForApple_, out ___occuredException, sizeof( char ), apple );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char attemptToBind() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attemptToBind( Handle, CachedSelectors.attemptToBind, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void cancelQuery() {
			RuntimeObject ___occuredException;
			NativeMethods.cancelQuery( Handle, CachedSelectors.cancelQuery, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connectToLDAPServer_( NObjective.RuntimeObject server ) {
			RuntimeObject ___occuredException;
			NativeMethods.connectToLDAPServer_( Handle, CachedSelectors.connectToLDAPServer_, out ___occuredException, sizeof( NObjective.RuntimeObject ), server );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithLDAPManager_forServer_queryString_sessionUID_( NObjective.RuntimeObject manager, NObjective.RuntimeObject forServer, NObjective.RuntimeObject queryString, NObjective.RuntimeObject sessionUID ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithLDAPManager_forServer_queryString_sessionUID_( Handle, CachedSelectors.initWithLDAPManager_forServer_queryString_sessionUID_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), manager, forServer, queryString, sessionUID );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char queryLDAPServer() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.queryLDAPServer( Handle, CachedSelectors.queryLDAPServer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject server() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.server( Handle, CachedSelectors.server, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject sessionUID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sessionUID( Handle, CachedSelectors.sessionUID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setUserInfo_( NObjective.RuntimeObject info ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUserInfo_( Handle, CachedSelectors.setUserInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), info );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char attemptToBind( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancelQuery( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connectToLDAPServer_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject server );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern System.IntPtr createAttributesListForApple_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char apple );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithLDAPManager_forServer_queryString_sessionUID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject manager, NObjective.RuntimeObject forServer, NObjective.RuntimeObject queryString, NObjective.RuntimeObject sessionUID );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char queryLDAPServer( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr server( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sessionUID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUserInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject info );
		}
		static internal class CachedSelectors {
			public static readonly Selector attemptToBind = "attemptToBind";
			public static readonly Selector cancelQuery = "cancelQuery";
			public static readonly Selector connectToLDAPServer_ = "connectToLDAPServer:";
			public static readonly Selector createAttributesListForApple_ = "createAttributesListForApple:";
			public static readonly Selector initWithLDAPManager_forServer_queryString_sessionUID_ = "initWithLDAPManager:forServer:queryString:sessionUID:";
			public static readonly Selector queryLDAPServer = "queryLDAPServer";
			public static readonly Selector server = "server";
			public static readonly Selector sessionUID = "sessionUID";
			public static readonly Selector setUserInfo_ = "setUserInfo:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABLDAP_Query_DS : IEquatable<ABLDAP_Query_DS> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABLDAP_Query_DS;
		public static implicit operator NSObject( ABLDAP_Query_DS value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABLDAP_Query_DS value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABLDAP_Query_DS value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABLDAP_Query_DS?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABLDAP_Query_DS value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABLDAP_Query_DS value1, ABLDAP_Query_DS value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABLDAP_Query_DS value1, ABLDAP_Query_DS value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABLDAP_Query_DS( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABLDAP_Query_DS alloc() {
			return new ABLDAP_Query_DS( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void cancelQuery() {
			RuntimeObject ___occuredException;
			NativeMethods.cancelQuery( Handle, CachedSelectors.cancelQuery, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void connectToLDAPServer_( NObjective.RuntimeObject server ) {
			RuntimeObject ___occuredException;
			NativeMethods.connectToLDAPServer_( Handle, CachedSelectors.connectToLDAPServer_, out ___occuredException, sizeof( NObjective.RuntimeObject ), server );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject findRecordsInServer_withNode_withServer_withCounter_( uint server, NObjective.RuntimeObject withNode, NObjective.RuntimeObject withServer, int withCounter ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.findRecordsInServer_withNode_withServer_withCounter_( Handle, CachedSelectors.findRecordsInServer_withNode_withServer_withCounter_, out ___occuredException, sizeof( uint ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), server, withNode, withServer, withCounter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithLDAPManager_forServer_sessionUID_( NObjective.RuntimeObject manager, NObjective.RuntimeObject forServer, NObjective.RuntimeObject sessionUID ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithLDAPManager_forServer_sessionUID_( Handle, CachedSelectors.initWithLDAPManager_forServer_sessionUID_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), manager, forServer, sessionUID );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject server() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.server( Handle, CachedSelectors.server, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject sessionUID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sessionUID( Handle, CachedSelectors.sessionUID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancelQuery( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connectToLDAPServer_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject server );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr findRecordsInServer_withNode_withServer_withCounter_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint server, NObjective.RuntimeObject withNode, NObjective.RuntimeObject withServer, int withCounter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithLDAPManager_forServer_sessionUID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject manager, NObjective.RuntimeObject forServer, NObjective.RuntimeObject sessionUID );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr server( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sessionUID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector cancelQuery = "cancelQuery";
			public static readonly Selector connectToLDAPServer_ = "connectToLDAPServer:";
			public static readonly Selector findRecordsInServer_withNode_withServer_withCounter_ = "findRecordsInServer:withNode:withServer:withCounter:";
			public static readonly Selector initWithLDAPManager_forServer_sessionUID_ = "initWithLDAPManager:forServer:sessionUID:";
			public static readonly Selector server = "server";
			public static readonly Selector sessionUID = "sessionUID";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABLDAP_ResultElement : IEquatable<ABLDAP_ResultElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABLDAP_ResultElement;
		public static implicit operator NSObject( ABLDAP_ResultElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABLDAP_ResultElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABLDAP_ResultElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABLDAP_ResultElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABLDAP_ResultElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABLDAP_ResultElement value1, ABLDAP_ResultElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABLDAP_ResultElement value1, ABLDAP_ResultElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABLDAP_ResultElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABLDAP_ResultElement alloc() {
			return new ABLDAP_ResultElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addIMValue_toPerson_( NObjective.RuntimeObject value, NObjective.RuntimeObject toPerson ) {
			RuntimeObject ___occuredException;
			NativeMethods.addIMValue_toPerson_( Handle, CachedSelectors.addIMValue_toPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, toPerson );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject allLabelsForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allLabelsForProperty_( Handle, CachedSelectors.allLabelsForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject displayName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.displayName( Handle, CachedSelectors.displayName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject email() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.email( Handle, CachedSelectors.email, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject firstName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.firstName( Handle, CachedSelectors.firstName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject info() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.info( Handle, CachedSelectors.info, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject lastName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lastName( Handle, CachedSelectors.lastName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void markRemoteLocationWithServer_( NObjective.RuntimeObject server ) {
			RuntimeObject ___occuredException;
			NativeMethods.markRemoteLocationWithServer_( Handle, CachedSelectors.markRemoteLocationWithServer_, out ___occuredException, sizeof( NObjective.RuntimeObject ), server );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject personValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.personValue( Handle, CachedSelectors.personValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject server() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.server( Handle, CachedSelectors.server, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setObject_forKey_( NObjective.RuntimeObject @object, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.setObject_forKey_( Handle, CachedSelectors.setObject_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @object, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject valuesForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valuesForKey_( Handle, CachedSelectors.valuesForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addIMValue_toPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject toPerson );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allLabelsForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr displayName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr email( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr firstName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr info( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lastName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void markRemoteLocationWithServer_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject server );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr personValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr server( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setObject_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, NObjective.RuntimeObject forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valuesForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
		}
		static internal class CachedSelectors {
			public static readonly Selector addIMValue_toPerson_ = "addIMValue:toPerson:";
			public static readonly Selector allLabelsForProperty_ = "allLabelsForProperty:";
			public static readonly Selector displayName = "displayName";
			public static readonly Selector email = "email";
			public static readonly Selector firstName = "firstName";
			public static readonly Selector info = "info";
			public static readonly Selector lastName = "lastName";
			public static readonly Selector markRemoteLocationWithServer_ = "markRemoteLocationWithServer:";
			public static readonly Selector personValue = "personValue";
			public static readonly Selector server = "server";
			public static readonly Selector setObject_forKey_ = "setObject:forKey:";
			public static readonly Selector valuesForKey_ = "valuesForKey:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABLDAP_Server : IEquatable<ABLDAP_Server> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABLDAP_Server;
		public static implicit operator NSObject( ABLDAP_Server value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABLDAP_Server value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABLDAP_Server value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABLDAP_Server?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABLDAP_Server value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABLDAP_Server value1, ABLDAP_Server value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABLDAP_Server value1, ABLDAP_Server value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABLDAP_Server( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABLDAP_Server alloc() {
			return new ABLDAP_Server( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject directoryServicesServer() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryServicesServer( ClassHandle, CachedSelectors.directoryServicesServer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject directoryServicesServer_( char server ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryServicesServer_( ClassHandle, CachedSelectors.directoryServicesServer_, out ___occuredException, sizeof( char ), server );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject userServer() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.userServer( ClassHandle, CachedSelectors.userServer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject userServer_( char server ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.userServer_( ClassHandle, CachedSelectors.userServer_, out ___occuredException, sizeof( char ), server );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int authenticationType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.authenticationType( Handle, CachedSelectors.authenticationType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void delete() {
			RuntimeObject ___occuredException;
			NativeMethods.delete( Handle, CachedSelectors.delete, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deserialize() {
			RuntimeObject ___occuredException;
			NativeMethods.deserialize( Handle, CachedSelectors.deserialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject hostname() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hostname( Handle, CachedSelectors.hostname, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject hostName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hostName( Handle, CachedSelectors.hostName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject info() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.info( Handle, CachedSelectors.info, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithType_( int type ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithType_( Handle, CachedSelectors.initWithType_, out ___occuredException, sizeof( int ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithUID_( int uid ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUID_( Handle, CachedSelectors.initWithUID_, out ___occuredException, sizeof( int ), uid );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject isEnabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEnabled( Handle, CachedSelectors.isEnabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isReachable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isReachable( Handle, CachedSelectors.isReachable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject password() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.password( Handle, CachedSelectors.password, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int port() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.port( Handle, CachedSelectors.port, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int scope() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scope( Handle, CachedSelectors.scope, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject searchBase() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchBase( Handle, CachedSelectors.searchBase, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject serialize() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.serialize( Handle, CachedSelectors.serialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int serverType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.serverType( Handle, CachedSelectors.serverType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setAuthenticationType_( int type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAuthenticationType_( Handle, CachedSelectors.setAuthenticationType_, out ___occuredException, sizeof( int ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHostName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHostName_( Handle, CachedSelectors.setHostName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setInfo_( NObjective.RuntimeObject info ) {
			RuntimeObject ___occuredException;
			NativeMethods.setInfo_( Handle, CachedSelectors.setInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), info );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setIsEnabled_( char enabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIsEnabled_( Handle, CachedSelectors.setIsEnabled_, out ___occuredException, sizeof( char ), enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPassword_( NObjective.RuntimeObject password ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPassword_( Handle, CachedSelectors.setPassword_, out ___occuredException, sizeof( NObjective.RuntimeObject ), password );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPort_( int port ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPort_( Handle, CachedSelectors.setPort_, out ___occuredException, sizeof( int ), port );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setScope_( int scope ) {
			RuntimeObject ___occuredException;
			NativeMethods.setScope_( Handle, CachedSelectors.setScope_, out ___occuredException, sizeof( int ), scope );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSearchBase_( NObjective.RuntimeObject @base ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSearchBase_( Handle, CachedSelectors.setSearchBase_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @base );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTitle_( NObjective.RuntimeObject title ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTitle_( Handle, CachedSelectors.setTitle_, out ___occuredException, sizeof( NObjective.RuntimeObject ), title );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUID_( NObjective.RuntimeObject uid ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUID_( Handle, CachedSelectors.setUID_, out ___occuredException, sizeof( NObjective.RuntimeObject ), uid );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUsername_( NObjective.RuntimeObject username ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUsername_( Handle, CachedSelectors.setUsername_, out ___occuredException, sizeof( NObjective.RuntimeObject ), username );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUseSSL_( char ssl ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUseSSL_( Handle, CachedSelectors.setUseSSL_, out ___occuredException, sizeof( char ), ssl );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject title() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.title( Handle, CachedSelectors.title, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject UID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.UID( Handle, CachedSelectors.UID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject username() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.username( Handle, CachedSelectors.username, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char useSSL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.useSSL( Handle, CachedSelectors.useSSL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int authenticationType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void delete( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deserialize( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr directoryServicesServer( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr directoryServicesServer_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char server );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr hostname( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr hostName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr info( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithUID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int uid );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr isEnabled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isReachable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr password( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int port( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int scope( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr searchBase( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr serialize( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int serverType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAuthenticationType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHostName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject info );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setIsEnabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char enabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPassword_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject password );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPort_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int port );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setScope_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int scope );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSearchBase_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @base );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTitle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject title );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject uid );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUsername_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject username );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUseSSL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char ssl );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr title( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr UID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr username( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr userServer( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr userServer_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char server );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char useSSL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector authenticationType = "authenticationType";
			public static readonly Selector delete = "delete";
			public static readonly Selector deserialize = "deserialize";
			public static readonly Selector directoryServicesServer = "directoryServicesServer";
			public static readonly Selector directoryServicesServer_ = "directoryServicesServer:";
			public static readonly Selector hostname = "hostname";
			public static readonly Selector hostName = "hostName";
			public static readonly Selector info = "info";
			public static readonly Selector initWithType_ = "initWithType:";
			public static readonly Selector initWithUID_ = "initWithUID:";
			public static readonly Selector isEnabled = "isEnabled";
			public static readonly Selector isReachable = "isReachable";
			public static readonly Selector password = "password";
			public static readonly Selector port = "port";
			public static readonly Selector scope = "scope";
			public static readonly Selector searchBase = "searchBase";
			public static readonly Selector serialize = "serialize";
			public static readonly Selector serverType = "serverType";
			public static readonly Selector setAuthenticationType_ = "setAuthenticationType:";
			public static readonly Selector setHostName_ = "setHostName:";
			public static readonly Selector setInfo_ = "setInfo:";
			public static readonly Selector setIsEnabled_ = "setIsEnabled:";
			public static readonly Selector setPassword_ = "setPassword:";
			public static readonly Selector setPort_ = "setPort:";
			public static readonly Selector setScope_ = "setScope:";
			public static readonly Selector setSearchBase_ = "setSearchBase:";
			public static readonly Selector setTitle_ = "setTitle:";
			public static readonly Selector setUID_ = "setUID:";
			public static readonly Selector setUsername_ = "setUsername:";
			public static readonly Selector setUseSSL_ = "setUseSSL:";
			public static readonly Selector title = "title";
			public static readonly Selector UID = "UID";
			public static readonly Selector username = "username";
			public static readonly Selector userServer = "userServer";
			public static readonly Selector userServer_ = "userServer:";
			public static readonly Selector useSSL = "useSSL";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABLocalImageDataCache : IEquatable<ABLocalImageDataCache> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABLocalImageDataCache;
		public static implicit operator NSObject( ABLocalImageDataCache value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABLocalImageDataCache value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABLocalImageDataCache value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABLocalImageDataCache?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABLocalImageDataCache value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABLocalImageDataCache value1, ABLocalImageDataCache value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABLocalImageDataCache value1, ABLocalImageDataCache value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABLocalImageDataCache( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABLocalImageDataCache alloc() {
			return new ABLocalImageDataCache( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject imageDataForPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.imageDataForPerson_( Handle, CachedSelectors.imageDataForPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr imageDataForPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
		}
		static internal class CachedSelectors {
			public static readonly Selector imageDataForPerson_ = "imageDataForPerson:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABRecord ) )]
	public struct ABLog : IEquatable<ABLog> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABLog;
		public static implicit operator ABRecord( ABLog value ) {
			return new ABRecord( value.Handle );
		}
		public static implicit operator NSObject( ABLog value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABLog value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABLog value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABLog?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABLog value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABLog value1, ABLog value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABLog value1, ABLog value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABLog( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABLog alloc() {
			return new ABLog( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject nts_Logs() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_Logs( ClassHandle, CachedSelectors.nts_Logs, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_DeletedUID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_DeletedUID( Handle, CachedSelectors.nts_DeletedUID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_InitWithDeletedUID_( NObjective.RuntimeObject uid ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_InitWithDeletedUID_( Handle, CachedSelectors.nts_InitWithDeletedUID_, out ___occuredException, sizeof( NObjective.RuntimeObject ), uid );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_DeletedUID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_InitWithDeletedUID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject uid );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_Logs( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector nts_DeletedUID = "nts_DeletedUID";
			public static readonly Selector nts_InitWithDeletedUID_ = "nts_InitWithDeletedUID:";
			public static readonly Selector nts_Logs = "nts_Logs";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABRecord ) )]
	public struct ABMailRecent : IEquatable<ABMailRecent> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMailRecent;
		public static implicit operator ABRecord( ABMailRecent value ) {
			return new ABRecord( value.Handle );
		}
		public static implicit operator NSObject( ABMailRecent value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABMailRecent value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMailRecent value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABMailRecent?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABMailRecent value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMailRecent value1, ABMailRecent value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMailRecent value1, ABMailRecent value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMailRecent( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMailRecent alloc() {
			return new ABMailRecent( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject nts_MailRecents() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_MailRecents( ClassHandle, CachedSelectors.nts_MailRecents, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_MailRecents( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector nts_MailRecents = "nts_MailRecents";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSMatrix ) )]
	public struct ABMatrix : IEquatable<ABMatrix> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMatrix;
		public static implicit operator NSMatrix( ABMatrix value ) {
			return new NSMatrix( value.Handle );
		}
		public static implicit operator NSControl( ABMatrix value ) {
			return new NSControl( value.Handle );
		}
		public static implicit operator NSView( ABMatrix value ) {
			return new NSView( value.Handle );
		}
		public static implicit operator NSResponder( ABMatrix value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABMatrix value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABMatrix value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMatrix value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABMatrix?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABMatrix value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMatrix value1, ABMatrix value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMatrix value1, ABMatrix value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMatrix( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMatrix alloc() {
			return new ABMatrix( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABCommand ) )]
	public struct ABMeCommand : IEquatable<ABMeCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMeCommand;
		public static implicit operator ABCommand( ABMeCommand value ) {
			return new ABCommand( value.Handle );
		}
		public static implicit operator NSObject( ABMeCommand value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABMeCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMeCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABMeCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABMeCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMeCommand value1, ABMeCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMeCommand value1, ABMeCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMeCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMeCommand alloc() {
			return new ABMeCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithGroup_newMe_( NObjective.RuntimeObject @group, NObjective.RuntimeObject newMe ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithGroup_newMe_( Handle, CachedSelectors.initWithGroup_newMe_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @group, newMe );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithGroup_newMe_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject newMe );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithGroup_newMe_ = "initWithGroup:newMe:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABPeopleController ) )]
	public struct ABMembersController : IEquatable<ABMembersController> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMembersController;
		public static implicit operator ABPeopleController( ABMembersController value ) {
			return new ABPeopleController( value.Handle );
		}
		public static implicit operator ABTableController( ABMembersController value ) {
			return new ABTableController( value.Handle );
		}
		public static implicit operator NSResponder( ABMembersController value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABMembersController value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABMembersController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMembersController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABMembersController?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABMembersController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMembersController value1, ABMembersController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMembersController value1, ABMembersController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMembersController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMembersController alloc() {
			return new ABMembersController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void copy_( NObjective.RuntimeObject copy ) {
			RuntimeObject ___occuredException;
			NativeMethods.copy_( Handle, CachedSelectors.copy_, out ___occuredException, sizeof( NObjective.RuntimeObject ), copy );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void cut_( NObjective.RuntimeObject cut ) {
			RuntimeObject ___occuredException;
			NativeMethods.cut_( Handle, CachedSelectors.cut_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cut );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteConfirmSheetDidEnd_returnCode_contextInfo_( NObjective.RuntimeObject end, int returnCode, System.IntPtr contextInfo ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteConfirmSheetDidEnd_returnCode_contextInfo_( Handle, CachedSelectors.deleteConfirmSheetDidEnd_returnCode_contextInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( System.IntPtr ), end, returnCode, contextInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteKey_( Handle, CachedSelectors.deleteKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void doDelete_( NObjective.RuntimeObject delete ) {
			RuntimeObject ___occuredException;
			NativeMethods.doDelete_( Handle, CachedSelectors.doDelete_, out ___occuredException, sizeof( NObjective.RuntimeObject ), delete );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void doSelectAll_( NObjective.RuntimeObject all ) {
			RuntimeObject ___occuredException;
			NativeMethods.doSelectAll_( Handle, CachedSelectors.doSelectAll_, out ___occuredException, sizeof( NObjective.RuntimeObject ), all );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void doubleAction_( NObjective.RuntimeObject action ) {
			RuntimeObject ___occuredException;
			NativeMethods.doubleAction_( Handle, CachedSelectors.doubleAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void escapeKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.escapeKey_( Handle, CachedSelectors.escapeKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void exportVCard_( NObjective.RuntimeObject card ) {
			RuntimeObject ___occuredException;
			NativeMethods.exportVCard_( Handle, CachedSelectors.exportVCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void membersSelectionChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.membersSelectionChanged_( Handle, CachedSelectors.membersSelectionChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void newGroupFromSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.newGroupFromSelection_( Handle, CachedSelectors.newGroupFromSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void paste_( NObjective.RuntimeObject paste ) {
			RuntimeObject ___occuredException;
			NativeMethods.paste_( Handle, CachedSelectors.paste_, out ___occuredException, sizeof( NObjective.RuntimeObject ), paste );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void personChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.personChanged_( Handle, CachedSelectors.personChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void refreshRow_( int row ) {
			RuntimeObject ___occuredException;
			NativeMethods.refreshRow_( Handle, CachedSelectors.refreshRow_, out ___occuredException, sizeof( int ), row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeConfirmSheetDidEnd_returnCode_contextInfo_( NObjective.RuntimeObject end, int returnCode, System.IntPtr contextInfo ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeConfirmSheetDidEnd_returnCode_contextInfo_( Handle, CachedSelectors.removeConfirmSheetDidEnd_returnCode_contextInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( System.IntPtr ), end, returnCode, contextInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int selectedRow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedRow( Handle, CachedSelectors.selectedRow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void tableContentChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.tableContentChanged_( Handle, CachedSelectors.tableContentChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char tableView_acceptDrop_row_dropOperation_( NObjective.RuntimeObject view, NObjective.RuntimeObject acceptDrop, int row, int dropOperation ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tableView_acceptDrop_row_dropOperation_( Handle, CachedSelectors.tableView_acceptDrop_row_dropOperation_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( int ), view, acceptDrop, row, dropOperation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint tableView_validateDrop_proposedRow_proposedDropOperation_( NObjective.RuntimeObject view, NObjective.RuntimeObject validateDrop, int proposedRow, int proposedDropOperation ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tableView_validateDrop_proposedRow_proposedDropOperation_( Handle, CachedSelectors.tableView_validateDrop_proposedRow_proposedDropOperation_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( int ), view, validateDrop, proposedRow, proposedDropOperation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public void typeAhead_( NObjective.RuntimeObject ahead ) {
			RuntimeObject ___occuredException;
			NativeMethods.typeAhead_( Handle, CachedSelectors.typeAhead_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ahead );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char validateMenuItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validateMenuItem_( Handle, CachedSelectors.validateMenuItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void copy_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject copy );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cut_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cut );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteConfirmSheetDidEnd_returnCode_contextInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject end, int returnCode, System.IntPtr contextInfo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void doDelete_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject delete );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void doSelectAll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject all );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void doubleAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject action );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void escapeKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void exportVCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void membersSelectionChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void newGroupFromSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void paste_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject paste );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void personChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void refreshRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeConfirmSheetDidEnd_returnCode_contextInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject end, int returnCode, System.IntPtr contextInfo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int selectedRow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void tableContentChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char tableView_acceptDrop_row_dropOperation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject acceptDrop, int row, int dropOperation );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint tableView_validateDrop_proposedRow_proposedDropOperation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject validateDrop, int proposedRow, int proposedDropOperation );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void typeAhead_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ahead );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char validateMenuItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
		}
		static internal class CachedSelectors {
			public static readonly Selector copy_ = "copy:";
			public static readonly Selector cut_ = "cut:";
			public static readonly Selector deleteConfirmSheetDidEnd_returnCode_contextInfo_ = "deleteConfirmSheetDidEnd:returnCode:contextInfo:";
			public static readonly Selector deleteKey_ = "deleteKey:";
			public static readonly Selector doDelete_ = "doDelete:";
			public static readonly Selector doSelectAll_ = "doSelectAll:";
			public static readonly Selector doubleAction_ = "doubleAction:";
			public static readonly Selector escapeKey_ = "escapeKey:";
			public static readonly Selector exportVCard_ = "exportVCard:";
			public static readonly Selector membersSelectionChanged_ = "membersSelectionChanged:";
			public static readonly Selector newGroupFromSelection_ = "newGroupFromSelection:";
			public static readonly Selector paste_ = "paste:";
			public static readonly Selector personChanged_ = "personChanged:";
			public static readonly Selector refreshRow_ = "refreshRow:";
			public static readonly Selector removeConfirmSheetDidEnd_returnCode_contextInfo_ = "removeConfirmSheetDidEnd:returnCode:contextInfo:";
			public static readonly Selector selectedRow = "selectedRow";
			public static readonly Selector tableContentChanged_ = "tableContentChanged:";
			public static readonly Selector tableView_acceptDrop_row_dropOperation_ = "tableView:acceptDrop:row:dropOperation:";
			public static readonly Selector tableView_validateDrop_proposedRow_proposedDropOperation_ = "tableView:validateDrop:proposedRow:proposedDropOperation:";
			public static readonly Selector typeAhead_ = "typeAhead:";
			public static readonly Selector validateMenuItem_ = "validateMenuItem:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABCommand ) )]
	public struct ABMergePeopleCommand : IEquatable<ABMergePeopleCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMergePeopleCommand;
		public static implicit operator ABCommand( ABMergePeopleCommand value ) {
			return new ABCommand( value.Handle );
		}
		public static implicit operator NSObject( ABMergePeopleCommand value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABMergePeopleCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMergePeopleCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABMergePeopleCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABMergePeopleCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMergePeopleCommand value1, ABMergePeopleCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMergePeopleCommand value1, ABMergePeopleCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMergePeopleCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMergePeopleCommand alloc() {
			return new ABMergePeopleCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithGroup_originalPeople_( NObjective.RuntimeObject @group, NObjective.RuntimeObject originalPeople ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithGroup_originalPeople_( Handle, CachedSelectors.initWithGroup_originalPeople_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @group, originalPeople );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithGroup_originalPeople_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject originalPeople );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithGroup_originalPeople_ = "initWithGroup:originalPeople:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABMerger : IEquatable<ABMerger> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMerger;
		public static implicit operator NSObject( ABMerger value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABMerger value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMerger value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABMerger?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABMerger value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMerger value1, ABMerger value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMerger value1, ABMerger value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMerger( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMerger alloc() {
			return new ABMerger( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject addedPeople() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addedPeople( Handle, CachedSelectors.addedPeople, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject addedToGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addedToGroup( Handle, CachedSelectors.addedToGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addMember_toGroup_( NObjective.RuntimeObject member, NObjective.RuntimeObject toGroup ) {
			RuntimeObject ___occuredException;
			NativeMethods.addMember_toGroup_( Handle, CachedSelectors.addMember_toGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), member, toGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			NativeMethods.addPerson_( Handle, CachedSelectors.addPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject allPeople() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allPeople( Handle, CachedSelectors.allPeople, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject allPersonProperties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allPersonProperties( Handle, CachedSelectors.allPersonProperties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject deletedPeople() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.deletedPeople( Handle, CachedSelectors.deletedPeople, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void deletePerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			NativeMethods.deletePerson_( Handle, CachedSelectors.deletePerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject duplicatesForPeople_( NObjective.RuntimeObject people ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.duplicatesForPeople_( Handle, CachedSelectors.duplicatesForPeople_, out ___occuredException, sizeof( NObjective.RuntimeObject ), people );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject emulateUpdateCard_withImportedCard_changes_( NObjective.RuntimeObject card, NObjective.RuntimeObject withImportedCard, NObjective.RuntimeObject changes ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.emulateUpdateCard_withImportedCard_changes_( Handle, CachedSelectors.emulateUpdateCard_withImportedCard_changes_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), card, withImportedCard, changes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char findSimilarMultiValuesForPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.findSimilarMultiValuesForPerson_( Handle, CachedSelectors.findSimilarMultiValuesForPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject initWithUIController_group_( NObjective.RuntimeObject controller, NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUIController_group_( Handle, CachedSelectors.initWithUIController_group_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), controller, @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char issueCommand() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.issueCommand( Handle, CachedSelectors.issueCommand, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char issueCommandWithActionName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.issueCommandWithActionName_( Handle, CachedSelectors.issueCommandWithActionName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void mergeSimilarMultiValuesForPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			NativeMethods.mergeSimilarMultiValuesForPerson_( Handle, CachedSelectors.mergeSimilarMultiValuesForPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject updateCard_withImportedCard_( NObjective.RuntimeObject card, NObjective.RuntimeObject withImportedCard ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.updateCard_withImportedCard_( Handle, CachedSelectors.updateCard_withImportedCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), card, withImportedCard );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject updatedPeople() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.updatedPeople( Handle, CachedSelectors.updatedPeople, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr addedPeople( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr addedToGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addMember_toGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject member, NObjective.RuntimeObject toGroup );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allPeople( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allPersonProperties( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr deletedPeople( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deletePerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr duplicatesForPeople_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject people );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr emulateUpdateCard_withImportedCard_changes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card, NObjective.RuntimeObject withImportedCard, NObjective.RuntimeObject changes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char findSimilarMultiValuesForPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithUIController_group_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller, NObjective.RuntimeObject @group );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char issueCommand( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char issueCommandWithActionName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void mergeSimilarMultiValuesForPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr updateCard_withImportedCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card, NObjective.RuntimeObject withImportedCard );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr updatedPeople( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addedPeople = "addedPeople";
			public static readonly Selector addedToGroup = "addedToGroup";
			public static readonly Selector addMember_toGroup_ = "addMember:toGroup:";
			public static readonly Selector addPerson_ = "addPerson:";
			public static readonly Selector allPeople = "allPeople";
			public static readonly Selector allPersonProperties = "allPersonProperties";
			public static readonly Selector deletedPeople = "deletedPeople";
			public static readonly Selector deletePerson_ = "deletePerson:";
			public static readonly Selector duplicatesForPeople_ = "duplicatesForPeople:";
			public static readonly Selector emulateUpdateCard_withImportedCard_changes_ = "emulateUpdateCard:withImportedCard:changes:";
			public static readonly Selector findSimilarMultiValuesForPerson_ = "findSimilarMultiValuesForPerson:";
			public static readonly Selector initWithUIController_group_ = "initWithUIController:group:";
			public static readonly Selector issueCommand = "issueCommand";
			public static readonly Selector issueCommandWithActionName_ = "issueCommandWithActionName:";
			public static readonly Selector mergeSimilarMultiValuesForPerson_ = "mergeSimilarMultiValuesForPerson:";
			public static readonly Selector updateCard_withImportedCard_ = "updateCard:withImportedCard:";
			public static readonly Selector updatedPeople = "updatedPeople";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABMessage : IEquatable<ABMessage> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMessage;
		public static implicit operator NSObject( ABMessage value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABMessage value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMessage value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABMessage?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABMessage value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMessage value1, ABMessage value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMessage value1, ABMessage value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMessage( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMessage alloc() {
			return new ABMessage( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public int messageType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.messageType( Handle, CachedSelectors.messageType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setMessageType_( int type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMessageType_( Handle, CachedSelectors.setMessageType_, out ___occuredException, sizeof( int ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int messageType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMessageType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type );
		}
		static internal class CachedSelectors {
			public static readonly Selector messageType = "messageType";
			public static readonly Selector setMessageType_ = "setMessageType:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSView ) )]
	public struct ABMessageView : IEquatable<ABMessageView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMessageView;
		public static implicit operator NSView( ABMessageView value ) {
			return new NSView( value.Handle );
		}
		public static implicit operator NSResponder( ABMessageView value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABMessageView value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABMessageView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMessageView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABMessageView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABMessageView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMessageView value1, ABMessageView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMessageView value1, ABMessageView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMessageView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMessageView alloc() {
			return new ABMessageView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public int messageType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.messageType( Handle, CachedSelectors.messageType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setMessageType_( int type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMessageType_( Handle, CachedSelectors.setMessageType_, out ___occuredException, sizeof( int ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int messageType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMessageType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type );
		}
		static internal class CachedSelectors {
			public static readonly Selector messageType = "messageType";
			public static readonly Selector setMessageType_ = "setMessageType:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABMetaDataController : IEquatable<ABMetaDataController> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMetaDataController;
		public static implicit operator NSObject( ABMetaDataController value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABMetaDataController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMetaDataController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABMetaDataController?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABMetaDataController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMetaDataController value1, ABMetaDataController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMetaDataController value1, ABMetaDataController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMetaDataController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMetaDataController alloc() {
			return new ABMetaDataController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject metaDataCacheDirectory() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.metaDataCacheDirectory( ClassHandle, CachedSelectors.metaDataCacheDirectory, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject metaDataCachePathForUID_( NObjective.RuntimeObject uid ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.metaDataCachePathForUID_( ClassHandle, CachedSelectors.metaDataCachePathForUID_, out ___occuredException, sizeof( NObjective.RuntimeObject ), uid );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject metaDataLockFile() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.metaDataLockFile( ClassHandle, CachedSelectors.metaDataLockFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject sharedInstance() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedInstance( ClassHandle, CachedSelectors.sharedInstance, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addOrUpdateRecords_( NObjective.RuntimeObject records ) {
			RuntimeObject ___occuredException;
			NativeMethods.addOrUpdateRecords_( Handle, CachedSelectors.addOrUpdateRecords_, out ___occuredException, sizeof( NObjective.RuntimeObject ), records );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void completed_forType_( NObjective.RuntimeObject completed, int forType ) {
			RuntimeObject ___occuredException;
			NativeMethods.completed_forType_( Handle, CachedSelectors.completed_forType_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), completed, forType );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteRecords_( NObjective.RuntimeObject records ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteRecords_( Handle, CachedSelectors.deleteRecords_, out ___occuredException, sizeof( NObjective.RuntimeObject ), records );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char hasRecordsInMetaDataCache() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasRecordsInMetaDataCache( Handle, CachedSelectors.hasRecordsInMetaDataCache, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject infoForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.infoForKey_( Handle, CachedSelectors.infoForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isRunning() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isRunning( Handle, CachedSelectors.isRunning, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject keyForType_( int type ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.keyForType_( Handle, CachedSelectors.keyForType_, out ___occuredException, sizeof( int ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int lastChangeCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lastChangeCount( Handle, CachedSelectors.lastChangeCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char lockInfo() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lockInfo( Handle, CachedSelectors.lockInfo, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void markPersonAsViewed_( NObjective.RuntimeObject viewed ) {
			RuntimeObject ___occuredException;
			NativeMethods.markPersonAsViewed_( Handle, CachedSelectors.markPersonAsViewed_, out ___occuredException, sizeof( NObjective.RuntimeObject ), viewed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_RestoreFromMetaData() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_RestoreFromMetaData( Handle, CachedSelectors.nts_RestoreFromMetaData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void planToComplete_forType_( NObjective.RuntimeObject complete, int forType ) {
			RuntimeObject ___occuredException;
			NativeMethods.planToComplete_forType_( Handle, CachedSelectors.planToComplete_forType_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), complete, forType );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void postpone() {
			RuntimeObject ___occuredException;
			NativeMethods.postpone( Handle, CachedSelectors.postpone, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeInfoForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeInfoForKey_( Handle, CachedSelectors.removeInfoForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void resetMetaData() {
			RuntimeObject ___occuredException;
			NativeMethods.resetMetaData( Handle, CachedSelectors.resetMetaData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void restoreFromMetaData() {
			RuntimeObject ___occuredException;
			NativeMethods.restoreFromMetaData( Handle, CachedSelectors.restoreFromMetaData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setInfo_forKey_( NObjective.RuntimeObject info, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.setInfo_forKey_( Handle, CachedSelectors.setInfo_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), info, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLastChangeCount_( int count ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLastChangeCount_( Handle, CachedSelectors.setLastChangeCount_, out ___occuredException, sizeof( int ), count );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool shouldPostpone() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shouldPostpone( Handle, CachedSelectors.shouldPostpone, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void stamp() {
			RuntimeObject ___occuredException;
			NativeMethods.stamp( Handle, CachedSelectors.stamp, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void unlockInfo() {
			RuntimeObject ___occuredException;
			NativeMethods.unlockInfo( Handle, CachedSelectors.unlockInfo, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void validateAllMetaDataForceRebuild_( char rebuild ) {
			RuntimeObject ___occuredException;
			NativeMethods.validateAllMetaDataForceRebuild_( Handle, CachedSelectors.validateAllMetaDataForceRebuild_, out ___occuredException, sizeof( char ), rebuild );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void validateMetaDataIfNeeded() {
			RuntimeObject ___occuredException;
			NativeMethods.validateMetaDataIfNeeded( Handle, CachedSelectors.validateMetaDataIfNeeded, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject viewedDateForPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.viewedDateForPerson_( Handle, CachedSelectors.viewedDateForPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void waitForThreadsToFinish() {
			RuntimeObject ___occuredException;
			NativeMethods.waitForThreadsToFinish( Handle, CachedSelectors.waitForThreadsToFinish, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void wipeMetaDataDirectory() {
			RuntimeObject ___occuredException;
			NativeMethods.wipeMetaDataDirectory( Handle, CachedSelectors.wipeMetaDataDirectory, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void workLoop() {
			RuntimeObject ___occuredException;
			NativeMethods.workLoop( Handle, CachedSelectors.workLoop, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void writeOutInfo() {
			RuntimeObject ___occuredException;
			NativeMethods.writeOutInfo( Handle, CachedSelectors.writeOutInfo, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addOrUpdateRecords_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject records );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void completed_forType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject completed, int forType );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteRecords_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject records );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasRecordsInMetaDataCache( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr infoForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isRunning( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr keyForType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int lastChangeCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char lockInfo( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void markPersonAsViewed_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject viewed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr metaDataCacheDirectory( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr metaDataCachePathForUID_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject uid );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr metaDataLockFile( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_RestoreFromMetaData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void planToComplete_forType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject complete, int forType );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void postpone( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeInfoForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resetMetaData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void restoreFromMetaData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setInfo_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject info, NObjective.RuntimeObject forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLastChangeCount_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int count );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedInstance( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool shouldPostpone( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void stamp( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unlockInfo( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void validateAllMetaDataForceRebuild_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char rebuild );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void validateMetaDataIfNeeded( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr viewedDateForPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void waitForThreadsToFinish( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void wipeMetaDataDirectory( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void workLoop( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void writeOutInfo( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addOrUpdateRecords_ = "addOrUpdateRecords:";
			public static readonly Selector completed_forType_ = "completed:forType:";
			public static readonly Selector deleteRecords_ = "deleteRecords:";
			public static readonly Selector hasRecordsInMetaDataCache = "hasRecordsInMetaDataCache";
			public static readonly Selector infoForKey_ = "infoForKey:";
			public static readonly Selector isRunning = "isRunning";
			public static readonly Selector keyForType_ = "keyForType:";
			public static readonly Selector lastChangeCount = "lastChangeCount";
			public static readonly Selector lockInfo = "lockInfo";
			public static readonly Selector markPersonAsViewed_ = "markPersonAsViewed:";
			public static readonly Selector metaDataCacheDirectory = "metaDataCacheDirectory";
			public static readonly Selector metaDataCachePathForUID_ = "metaDataCachePathForUID:";
			public static readonly Selector metaDataLockFile = "metaDataLockFile";
			public static readonly Selector nts_RestoreFromMetaData = "nts_RestoreFromMetaData";
			public static readonly Selector planToComplete_forType_ = "planToComplete:forType:";
			public static readonly Selector postpone = "postpone";
			public static readonly Selector removeInfoForKey_ = "removeInfoForKey:";
			public static readonly Selector resetMetaData = "resetMetaData";
			public static readonly Selector restoreFromMetaData = "restoreFromMetaData";
			public static readonly Selector setInfo_forKey_ = "setInfo:forKey:";
			public static readonly Selector setLastChangeCount_ = "setLastChangeCount:";
			public static readonly Selector sharedInstance = "sharedInstance";
			public static readonly Selector shouldPostpone = "shouldPostpone";
			public static readonly Selector stamp = "stamp";
			public static readonly Selector unlockInfo = "unlockInfo";
			public static readonly Selector validateAllMetaDataForceRebuild_ = "validateAllMetaDataForceRebuild:";
			public static readonly Selector validateMetaDataIfNeeded = "validateMetaDataIfNeeded";
			public static readonly Selector viewedDateForPerson_ = "viewedDateForPerson:";
			public static readonly Selector waitForThreadsToFinish = "waitForThreadsToFinish";
			public static readonly Selector wipeMetaDataDirectory = "wipeMetaDataDirectory";
			public static readonly Selector workLoop = "workLoop";
			public static readonly Selector writeOutInfo = "writeOutInfo";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABModel : IEquatable<ABModel> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABModel;
		public static implicit operator NSObject( ABModel value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABModel value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABModel value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABModel?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABModel value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABModel value1, ABModel value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABModel value1, ABModel value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABModel( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABModel alloc() {
			return new ABModel( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addedGroups_( NObjective.RuntimeObject groups ) {
			RuntimeObject ___occuredException;
			NativeMethods.addedGroups_( Handle, CachedSelectors.addedGroups_, out ___occuredException, sizeof( NObjective.RuntimeObject ), groups );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addedMembers_( NObjective.RuntimeObject members ) {
			RuntimeObject ___occuredException;
			NativeMethods.addedMembers_( Handle, CachedSelectors.addedMembers_, out ___occuredException, sizeof( NObjective.RuntimeObject ), members );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addedMembers_toGroup_( NObjective.RuntimeObject members, NObjective.RuntimeObject toGroup ) {
			RuntimeObject ___occuredException;
			NativeMethods.addedMembers_toGroup_( Handle, CachedSelectors.addedMembers_toGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), members, toGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addToDirectoryResults_( NObjective.RuntimeObject results ) {
			RuntimeObject ___occuredException;
			NativeMethods.addToDirectoryResults_( Handle, CachedSelectors.addToDirectoryResults_, out ___occuredException, sizeof( NObjective.RuntimeObject ), results );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject allUniqueRecordsIn_( NObjective.RuntimeObject @in ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allUniqueRecordsIn_( Handle, CachedSelectors.allUniqueRecordsIn_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @in );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void changedGroups_( NObjective.RuntimeObject groups ) {
			RuntimeObject ___occuredException;
			NativeMethods.changedGroups_( Handle, CachedSelectors.changedGroups_, out ___occuredException, sizeof( NObjective.RuntimeObject ), groups );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changedMembers_( NObjective.RuntimeObject members ) {
			RuntimeObject ___occuredException;
			NativeMethods.changedMembers_( Handle, CachedSelectors.changedMembers_, out ___occuredException, sizeof( NObjective.RuntimeObject ), members );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearDirectoriesSelection() {
			RuntimeObject ___occuredException;
			NativeMethods.clearDirectoriesSelection( Handle, CachedSelectors.clearDirectoriesSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearDirectoryResults() {
			RuntimeObject ___occuredException;
			NativeMethods.clearDirectoryResults( Handle, CachedSelectors.clearDirectoryResults, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearDirectoryResultsSelection() {
			RuntimeObject ___occuredException;
			NativeMethods.clearDirectoryResultsSelection( Handle, CachedSelectors.clearDirectoryResultsSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearGroupsSelection() {
			RuntimeObject ___occuredException;
			NativeMethods.clearGroupsSelection( Handle, CachedSelectors.clearGroupsSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearMembersSelection() {
			RuntimeObject ___occuredException;
			NativeMethods.clearMembersSelection( Handle, CachedSelectors.clearMembersSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void databaseChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.databaseChanged_( Handle, CachedSelectors.databaseChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deletedGroups_( NObjective.RuntimeObject groups ) {
			RuntimeObject ___occuredException;
			NativeMethods.deletedGroups_( Handle, CachedSelectors.deletedGroups_, out ___occuredException, sizeof( NObjective.RuntimeObject ), groups );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deletedMembers_( NObjective.RuntimeObject members ) {
			RuntimeObject ___occuredException;
			NativeMethods.deletedMembers_( Handle, CachedSelectors.deletedMembers_, out ___occuredException, sizeof( NObjective.RuntimeObject ), members );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deselectDirectoryResultRow_subrow_( int row, int subrow ) {
			RuntimeObject ___occuredException;
			NativeMethods.deselectDirectoryResultRow_subrow_( Handle, CachedSelectors.deselectDirectoryResultRow_subrow_, out ___occuredException, sizeof( int ) + sizeof( int ), row, subrow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deselectMemberRow_subrow_( int row, int subrow ) {
			RuntimeObject ___occuredException;
			NativeMethods.deselectMemberRow_subrow_( Handle, CachedSelectors.deselectMemberRow_subrow_, out ___occuredException, sizeof( int ) + sizeof( int ), row, subrow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject directories() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directories( Handle, CachedSelectors.directories, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject directoryAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryAtIndex_( Handle, CachedSelectors.directoryAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject directoryResultAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryResultAtIndex_( Handle, CachedSelectors.directoryResultAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject directoryResults() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryResults( Handle, CachedSelectors.directoryResults, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject directoryResultsSubrows() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryResultsSubrows( Handle, CachedSelectors.directoryResultsSubrows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject displayedGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.displayedGroups( Handle, CachedSelectors.displayedGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject displayedMembers() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.displayedMembers( Handle, CachedSelectors.displayedMembers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject displayedMembersSubrows() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.displayedMembersSubrows( Handle, CachedSelectors.displayedMembersSubrows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void fillSubrowList_forDisplayedRecords_withDelegate_( NObjective.RuntimeObject list, NObjective.RuntimeObject forDisplayedRecords, NObjective.RuntimeObject withDelegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.fillSubrowList_forDisplayedRecords_withDelegate_( Handle, CachedSelectors.fillSubrowList_forDisplayedRecords_withDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), list, forDisplayedRecords, withDelegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject groupList_includeSpecial_all_subscriptions_readOnly_smart_( NObjective.RuntimeObject list, char includeSpecial, char all, char subscriptions, char readOnly, char smart ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupList_includeSpecial_all_subscriptions_readOnly_smart_( Handle, CachedSelectors.groupList_includeSpecial_all_subscriptions_readOnly_smart_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ) + sizeof( char ) + sizeof( char ) + sizeof( char ), list, includeSpecial, all, subscriptions, readOnly, smart
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject groupListIncludeSpecial_all_subscriptions_readOnly_smart_( char special, char all, char subscriptions, char readOnly, char smart ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupListIncludeSpecial_all_subscriptions_readOnly_smart_( Handle, CachedSelectors.groupListIncludeSpecial_all_subscriptions_readOnly_smart_, out ___occuredException, sizeof( char ) + sizeof( char ) + sizeof( char ) + sizeof( char ) + sizeof( char ), special, all, subscriptions, readOnly, smart );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void hideShowLastImportGroup_( char @group ) {
			RuntimeObject ___occuredException;
			NativeMethods.hideShowLastImportGroup_( Handle, CachedSelectors.hideShowLastImportGroup_, out ___occuredException, sizeof( char ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint indexOfAllGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfAllGroup( Handle, CachedSelectors.indexOfAllGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint indexOfDirectoriesGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfDirectoriesGroup( Handle, CachedSelectors.indexOfDirectoriesGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint indexOfDirectory_( NObjective.RuntimeObject directory ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfDirectory_( Handle, CachedSelectors.indexOfDirectory_, out ___occuredException, sizeof( NObjective.RuntimeObject ), directory );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint indexOfDirectoryResult_( NObjective.RuntimeObject result ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfDirectoryResult_( Handle, CachedSelectors.indexOfDirectoryResult_, out ___occuredException, sizeof( NObjective.RuntimeObject ), result );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint indexOfGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfGroup_( Handle, CachedSelectors.indexOfGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint indexOfLastImportGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfLastImportGroup( Handle, CachedSelectors.indexOfLastImportGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint indexOfLastSpecialGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfLastSpecialGroup( Handle, CachedSelectors.indexOfLastSpecialGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public uint indexOfMember_( NObjective.RuntimeObject member ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfMember_( Handle, CachedSelectors.indexOfMember_, out ___occuredException, sizeof( NObjective.RuntimeObject ), member );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject initWithUIController_( NObjective.RuntimeObject controller ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUIController_( Handle, CachedSelectors.initWithUIController_, out ___occuredException, sizeof( NObjective.RuntimeObject ), controller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public uint insertionIndexForGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.insertionIndexForGroup_( Handle, CachedSelectors.insertionIndexForGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject intersectGroupMembers_withSearchResult_( NObjective.RuntimeObject members, NObjective.RuntimeObject withSearchResult ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.intersectGroupMembers_withSearchResult_( Handle, CachedSelectors.intersectGroupMembers_withSearchResult_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), members, withSearchResult );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void invalidateDisplayedMembersList() {
			RuntimeObject ___occuredException;
			NativeMethods.invalidateDisplayedMembersList( Handle, CachedSelectors.invalidateDisplayedMembersList, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool isDirectoryGroupSelected() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isDirectoryGroupSelected( Handle, CachedSelectors.isDirectoryGroupSelected, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isInFrontWindow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isInFrontWindow( Handle, CachedSelectors.isInFrontWindow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isLastImportGroupVisible() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isLastImportGroupVisible( Handle, CachedSelectors.isLastImportGroupVisible, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isSpecialGroupSelected() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isSpecialGroupSelected( Handle, CachedSelectors.isSpecialGroupSelected, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject lastDirectoriesSearchString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lastDirectoriesSearchString( Handle, CachedSelectors.lastDirectoriesSearchString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void LDAPConfigChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.LDAPConfigChanged_( Handle, CachedSelectors.LDAPConfigChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject memberAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.memberAtIndex_( Handle, CachedSelectors.memberAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void noteDirectoriesListChanged() {
			RuntimeObject ___occuredException;
			NativeMethods.noteDirectoriesListChanged( Handle, CachedSelectors.noteDirectoriesListChanged, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void noteDirectoriesSelectionChanged() {
			RuntimeObject ___occuredException;
			NativeMethods.noteDirectoriesSelectionChanged( Handle, CachedSelectors.noteDirectoriesSelectionChanged, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void noteDirectoryResultsChanged() {
			RuntimeObject ___occuredException;
			NativeMethods.noteDirectoryResultsChanged( Handle, CachedSelectors.noteDirectoryResultsChanged, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void noteDirectoryResultsSelectionChanged() {
			RuntimeObject ___occuredException;
			NativeMethods.noteDirectoryResultsSelectionChanged( Handle, CachedSelectors.noteDirectoryResultsSelectionChanged, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void noteGroupsListChanged() {
			RuntimeObject ___occuredException;
			NativeMethods.noteGroupsListChanged( Handle, CachedSelectors.noteGroupsListChanged, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void noteGroupsSelectionChanged() {
			RuntimeObject ___occuredException;
			NativeMethods.noteGroupsSelectionChanged( Handle, CachedSelectors.noteGroupsSelectionChanged, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void noteMembersListChanged() {
			RuntimeObject ___occuredException;
			NativeMethods.noteMembersListChanged( Handle, CachedSelectors.noteMembersListChanged, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void noteMembersSelectionChanged_( char changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.noteMembersSelectionChanged_( Handle, CachedSelectors.noteMembersSelectionChanged_, out ___occuredException, sizeof( char ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int peopleOrCompaniesSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.peopleOrCompaniesSelection( Handle, CachedSelectors.peopleOrCompaniesSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void reloadAll_( NObjective.RuntimeObject all ) {
			RuntimeObject ___occuredException;
			NativeMethods.reloadAll_( Handle, CachedSelectors.reloadAll_, out ___occuredException, sizeof( NObjective.RuntimeObject ), all );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void reloadGroups() {
			RuntimeObject ___occuredException;
			NativeMethods.reloadGroups( Handle, CachedSelectors.reloadGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void reloadGroupsMaintainingSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.reloadGroupsMaintainingSelection_( Handle, CachedSelectors.reloadGroupsMaintainingSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void reloadMembers() {
			RuntimeObject ___occuredException;
			NativeMethods.reloadMembers( Handle, CachedSelectors.reloadMembers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removedMembers_fromGroup_( NObjective.RuntimeObject members, NObjective.RuntimeObject fromGroup ) {
			RuntimeObject ___occuredException;
			NativeMethods.removedMembers_fromGroup_( Handle, CachedSelectors.removedMembers_fromGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), members, fromGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void resetDirectoryResultsSubrows() {
			RuntimeObject ___occuredException;
			NativeMethods.resetDirectoryResultsSubrows( Handle, CachedSelectors.resetDirectoryResultsSubrows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void resetDisplayedMemberSubrows() {
			RuntimeObject ___occuredException;
			NativeMethods.resetDisplayedMemberSubrows( Handle, CachedSelectors.resetDisplayedMemberSubrows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void searchIndexRebuilt_( NObjective.RuntimeObject rebuilt ) {
			RuntimeObject ___occuredException;
			NativeMethods.searchIndexRebuilt_( Handle, CachedSelectors.searchIndexRebuilt_, out ___occuredException, sizeof( NObjective.RuntimeObject ), rebuilt );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectDirectoryResultRow_subrow_byExtendingSelection_( int row, int subrow, char byExtendingSelection ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectDirectoryResultRow_subrow_byExtendingSelection_( Handle, CachedSelectors.selectDirectoryResultRow_subrow_byExtendingSelection_, out ___occuredException, sizeof( int ) + sizeof( int ) + sizeof( char ), row, subrow, byExtendingSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject selectedDirectories() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedDirectories( Handle, CachedSelectors.selectedDirectories, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedDirectoryResult() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedDirectoryResult( Handle, CachedSelectors.selectedDirectoryResult, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedDirectoryResults() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedDirectoryResults( Handle, CachedSelectors.selectedDirectoryResults, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedDirectoryResultsSubrows() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedDirectoryResultsSubrows( Handle, CachedSelectors.selectedDirectoryResultsSubrows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedGroup( Handle, CachedSelectors.selectedGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedGroups( Handle, CachedSelectors.selectedGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedMember() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedMember( Handle, CachedSelectors.selectedMember, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedMembers() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedMembers( Handle, CachedSelectors.selectedMembers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedMembersSubrows() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedMembersSubrows( Handle, CachedSelectors.selectedMembersSubrows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void selectMemberRow_subrow_byExtendingSelection_( int row, int subrow, char byExtendingSelection ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectMemberRow_subrow_byExtendingSelection_( Handle, CachedSelectors.selectMemberRow_subrow_byExtendingSelection_, out ___occuredException, sizeof( int ) + sizeof( int ) + sizeof( char ), row, subrow, byExtendingSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDirectoriesSubrowDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDirectoriesSubrowDelegate_( Handle, CachedSelectors.setDirectoriesSubrowDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMembersSubrowDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMembersSubrowDelegate_( Handle, CachedSelectors.setMembersSubrowDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedDirectories_( NObjective.RuntimeObject directories ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedDirectories_( Handle, CachedSelectors.setSelectedDirectories_, out ___occuredException, sizeof( NObjective.RuntimeObject ), directories );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedDirectoryResult_( NObjective.RuntimeObject result ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedDirectoryResult_( Handle, CachedSelectors.setSelectedDirectoryResult_, out ___occuredException, sizeof( NObjective.RuntimeObject ), result );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedDirectoryResults_( NObjective.RuntimeObject results ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedDirectoryResults_( Handle, CachedSelectors.setSelectedDirectoryResults_, out ___occuredException, sizeof( NObjective.RuntimeObject ), results );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedGroup_( Handle, CachedSelectors.setSelectedGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedGroups_( NObjective.RuntimeObject groups ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedGroups_( Handle, CachedSelectors.setSelectedGroups_, out ___occuredException, sizeof( NObjective.RuntimeObject ), groups );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedGroups2_( NObjective.RuntimeObject groups2 ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedGroups2_( Handle, CachedSelectors.setSelectedGroups2_, out ___occuredException, sizeof( NObjective.RuntimeObject ), groups2 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedMember_( NObjective.RuntimeObject member ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedMember_( Handle, CachedSelectors.setSelectedMember_, out ___occuredException, sizeof( NObjective.RuntimeObject ), member );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedMembers_( NObjective.RuntimeObject members ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedMembers_( Handle, CachedSelectors.setSelectedMembers_, out ___occuredException, sizeof( NObjective.RuntimeObject ), members );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject uniqueMembersInGroups_( NObjective.RuntimeObject groups ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.uniqueMembersInGroups_( Handle, CachedSelectors.uniqueMembersInGroups_, out ___occuredException, sizeof( NObjective.RuntimeObject ), groups );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject uniqueMembersInSelectedGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.uniqueMembersInSelectedGroups( Handle, CachedSelectors.uniqueMembersInSelectedGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void updateEditButton() {
			RuntimeObject ___occuredException;
			NativeMethods.updateEditButton( Handle, CachedSelectors.updateEditButton, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addedGroups_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject groups );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addedMembers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addedMembers_toGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members, NObjective.RuntimeObject toGroup );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addToDirectoryResults_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject results );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allUniqueRecordsIn_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @in );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void changedGroups_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject groups );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void changedMembers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clearDirectoriesSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clearDirectoryResults( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clearDirectoryResultsSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clearGroupsSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clearMembersSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void databaseChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deletedGroups_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject groups );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deletedMembers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deselectDirectoryResultRow_subrow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row, int subrow );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deselectMemberRow_subrow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row, int subrow );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr directories( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr directoryAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr directoryResultAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr directoryResults( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr directoryResultsSubrows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr displayedGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr displayedMembers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr displayedMembersSubrows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void fillSubrowList_forDisplayedRecords_withDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject list, NObjective.RuntimeObject forDisplayedRecords, NObjective.RuntimeObject withDelegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr groupList_includeSpecial_all_subscriptions_readOnly_smart_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject list, char includeSpecial, char all, char subscriptions, char readOnly, char smart
			 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr groupListIncludeSpecial_all_subscriptions_readOnly_smart_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char special, char all, char subscriptions, char readOnly, char smart );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void hideShowLastImportGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @group );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint indexOfAllGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint indexOfDirectoriesGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint indexOfDirectory_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject directory );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint indexOfDirectoryResult_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject result );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint indexOfGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint indexOfLastImportGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint indexOfLastSpecialGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint indexOfMember_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject member );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithUIController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint insertionIndexForGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr intersectGroupMembers_withSearchResult_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members, NObjective.RuntimeObject withSearchResult );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void invalidateDisplayedMembersList( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isDirectoryGroupSelected( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isInFrontWindow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isLastImportGroupVisible( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isSpecialGroupSelected( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lastDirectoriesSearchString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void LDAPConfigChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr memberAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void noteDirectoriesListChanged( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void noteDirectoriesSelectionChanged( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void noteDirectoryResultsChanged( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void noteDirectoryResultsSelectionChanged( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void noteGroupsListChanged( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void noteGroupsSelectionChanged( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void noteMembersListChanged( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void noteMembersSelectionChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int peopleOrCompaniesSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void reloadAll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject all );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void reloadGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void reloadGroupsMaintainingSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void reloadMembers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removedMembers_fromGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members, NObjective.RuntimeObject fromGroup );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resetDirectoryResultsSubrows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resetDisplayedMemberSubrows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void searchIndexRebuilt_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject rebuilt );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectDirectoryResultRow_subrow_byExtendingSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row, int subrow, char byExtendingSelection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedDirectories( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedDirectoryResult( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedDirectoryResults( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedDirectoryResultsSubrows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedMember( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedMembers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedMembersSubrows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectMemberRow_subrow_byExtendingSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row, int subrow, char byExtendingSelection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDirectoriesSubrowDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMembersSubrowDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSelectedDirectories_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject directories );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSelectedDirectoryResult_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject result );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSelectedDirectoryResults_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject results );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSelectedGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSelectedGroups_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject groups );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSelectedGroups2_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject groups2 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSelectedMember_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject member );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSelectedMembers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject members );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr uniqueMembersInGroups_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject groups );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr uniqueMembersInSelectedGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateEditButton( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addedGroups_ = "addedGroups:";
			public static readonly Selector addedMembers_ = "addedMembers:";
			public static readonly Selector addedMembers_toGroup_ = "addedMembers:toGroup:";
			public static readonly Selector addToDirectoryResults_ = "addToDirectoryResults:";
			public static readonly Selector allUniqueRecordsIn_ = "allUniqueRecordsIn:";
			public static readonly Selector changedGroups_ = "changedGroups:";
			public static readonly Selector changedMembers_ = "changedMembers:";
			public static readonly Selector clearDirectoriesSelection = "clearDirectoriesSelection";
			public static readonly Selector clearDirectoryResults = "clearDirectoryResults";
			public static readonly Selector clearDirectoryResultsSelection = "clearDirectoryResultsSelection";
			public static readonly Selector clearGroupsSelection = "clearGroupsSelection";
			public static readonly Selector clearMembersSelection = "clearMembersSelection";
			public static readonly Selector databaseChanged_ = "databaseChanged:";
			public static readonly Selector deletedGroups_ = "deletedGroups:";
			public static readonly Selector deletedMembers_ = "deletedMembers:";
			public static readonly Selector deselectDirectoryResultRow_subrow_ = "deselectDirectoryResultRow:subrow:";
			public static readonly Selector deselectMemberRow_subrow_ = "deselectMemberRow:subrow:";
			public static readonly Selector directories = "directories";
			public static readonly Selector directoryAtIndex_ = "directoryAtIndex:";
			public static readonly Selector directoryResultAtIndex_ = "directoryResultAtIndex:";
			public static readonly Selector directoryResults = "directoryResults";
			public static readonly Selector directoryResultsSubrows = "directoryResultsSubrows";
			public static readonly Selector displayedGroups = "displayedGroups";
			public static readonly Selector displayedMembers = "displayedMembers";
			public static readonly Selector displayedMembersSubrows = "displayedMembersSubrows";
			public static readonly Selector fillSubrowList_forDisplayedRecords_withDelegate_ = "fillSubrowList:forDisplayedRecords:withDelegate:";
			public static readonly Selector groupList_includeSpecial_all_subscriptions_readOnly_smart_ = "groupList:includeSpecial:all:subscriptions:readOnly:smart:";
			public static readonly Selector groupListIncludeSpecial_all_subscriptions_readOnly_smart_ = "groupListIncludeSpecial:all:subscriptions:readOnly:smart:";
			public static readonly Selector hideShowLastImportGroup_ = "hideShowLastImportGroup:";
			public static readonly Selector indexOfAllGroup = "indexOfAllGroup";
			public static readonly Selector indexOfDirectoriesGroup = "indexOfDirectoriesGroup";
			public static readonly Selector indexOfDirectory_ = "indexOfDirectory:";
			public static readonly Selector indexOfDirectoryResult_ = "indexOfDirectoryResult:";
			public static readonly Selector indexOfGroup_ = "indexOfGroup:";
			public static readonly Selector indexOfLastImportGroup = "indexOfLastImportGroup";
			public static readonly Selector indexOfLastSpecialGroup = "indexOfLastSpecialGroup";
			public static readonly Selector indexOfMember_ = "indexOfMember:";
			public static readonly Selector initWithUIController_ = "initWithUIController:";
			public static readonly Selector insertionIndexForGroup_ = "insertionIndexForGroup:";
			public static readonly Selector intersectGroupMembers_withSearchResult_ = "intersectGroupMembers:withSearchResult:";
			public static readonly Selector invalidateDisplayedMembersList = "invalidateDisplayedMembersList";
			public static readonly Selector isDirectoryGroupSelected = "isDirectoryGroupSelected";
			public static readonly Selector isInFrontWindow = "isInFrontWindow";
			public static readonly Selector isLastImportGroupVisible = "isLastImportGroupVisible";
			public static readonly Selector isSpecialGroupSelected = "isSpecialGroupSelected";
			public static readonly Selector lastDirectoriesSearchString = "lastDirectoriesSearchString";
			public static readonly Selector LDAPConfigChanged_ = "LDAPConfigChanged:";
			public static readonly Selector memberAtIndex_ = "memberAtIndex:";
			public static readonly Selector noteDirectoriesListChanged = "noteDirectoriesListChanged";
			public static readonly Selector noteDirectoriesSelectionChanged = "noteDirectoriesSelectionChanged";
			public static readonly Selector noteDirectoryResultsChanged = "noteDirectoryResultsChanged";
			public static readonly Selector noteDirectoryResultsSelectionChanged = "noteDirectoryResultsSelectionChanged";
			public static readonly Selector noteGroupsListChanged = "noteGroupsListChanged";
			public static readonly Selector noteGroupsSelectionChanged = "noteGroupsSelectionChanged";
			public static readonly Selector noteMembersListChanged = "noteMembersListChanged";
			public static readonly Selector noteMembersSelectionChanged_ = "noteMembersSelectionChanged:";
			public static readonly Selector peopleOrCompaniesSelection = "peopleOrCompaniesSelection";
			public static readonly Selector reloadAll_ = "reloadAll:";
			public static readonly Selector reloadGroups = "reloadGroups";
			public static readonly Selector reloadGroupsMaintainingSelection_ = "reloadGroupsMaintainingSelection:";
			public static readonly Selector reloadMembers = "reloadMembers";
			public static readonly Selector removedMembers_fromGroup_ = "removedMembers:fromGroup:";
			public static readonly Selector resetDirectoryResultsSubrows = "resetDirectoryResultsSubrows";
			public static readonly Selector resetDisplayedMemberSubrows = "resetDisplayedMemberSubrows";
			public static readonly Selector searchIndexRebuilt_ = "searchIndexRebuilt:";
			public static readonly Selector selectDirectoryResultRow_subrow_byExtendingSelection_ = "selectDirectoryResultRow:subrow:byExtendingSelection:";
			public static readonly Selector selectedDirectories = "selectedDirectories";
			public static readonly Selector selectedDirectoryResult = "selectedDirectoryResult";
			public static readonly Selector selectedDirectoryResults = "selectedDirectoryResults";
			public static readonly Selector selectedDirectoryResultsSubrows = "selectedDirectoryResultsSubrows";
			public static readonly Selector selectedGroup = "selectedGroup";
			public static readonly Selector selectedGroups = "selectedGroups";
			public static readonly Selector selectedMember = "selectedMember";
			public static readonly Selector selectedMembers = "selectedMembers";
			public static readonly Selector selectedMembersSubrows = "selectedMembersSubrows";
			public static readonly Selector selectMemberRow_subrow_byExtendingSelection_ = "selectMemberRow:subrow:byExtendingSelection:";
			public static readonly Selector setDirectoriesSubrowDelegate_ = "setDirectoriesSubrowDelegate:";
			public static readonly Selector setMembersSubrowDelegate_ = "setMembersSubrowDelegate:";
			public static readonly Selector setSelectedDirectories_ = "setSelectedDirectories:";
			public static readonly Selector setSelectedDirectoryResult_ = "setSelectedDirectoryResult:";
			public static readonly Selector setSelectedDirectoryResults_ = "setSelectedDirectoryResults:";
			public static readonly Selector setSelectedGroup_ = "setSelectedGroup:";
			public static readonly Selector setSelectedGroups_ = "setSelectedGroups:";
			public static readonly Selector setSelectedGroups2_ = "setSelectedGroups2:";
			public static readonly Selector setSelectedMember_ = "setSelectedMember:";
			public static readonly Selector setSelectedMembers_ = "setSelectedMembers:";
			public static readonly Selector uniqueMembersInGroups_ = "uniqueMembersInGroups:";
			public static readonly Selector uniqueMembersInSelectedGroups = "uniqueMembersInSelectedGroups";
			public static readonly Selector updateEditButton = "updateEditButton";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABMultiValue : IEquatable<ABMultiValue> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMultiValue;
		public static implicit operator NSObject( ABMultiValue value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABMultiValue value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMultiValue value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABMultiValue?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABMultiValue value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMultiValue value1, ABMultiValue value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMultiValue value1, ABMultiValue value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMultiValue( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMultiValue alloc() {
			return new ABMultiValue( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public uint count() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.count( Handle, CachedSelectors.count, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public string identifierAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.identifierAtIndex_( Handle, CachedSelectors.identifierAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public uint indexForIdentifier_( string identifier ) {
			RuntimeObject ___occuredException;
			var ___wrappedidentifier = Runtime.CreateStringProxy( identifier );
			var ___result = NativeMethods.indexForIdentifier_( Handle, CachedSelectors.indexForIdentifier_, out ___occuredException, sizeof( IntPtr ), ___wrappedidentifier );
			Runtime.ReleaseNativeObject( ___wrappedidentifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public bool isEqual_compareIdentifiers_( NObjective.RuntimeObject equal, char compareIdentifiers ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEqual_compareIdentifiers_( Handle, CachedSelectors.isEqual_compareIdentifiers_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), equal, compareIdentifiers );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string labelAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.labelAtIndex_( Handle, CachedSelectors.labelAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string primaryIdentifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.primaryIdentifier( Handle, CachedSelectors.primaryIdentifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public ABPropertyType propertyType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyType( Handle, CachedSelectors.propertyType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( ABPropertyType ) ___result;
		}
		unsafe public NObjective.RuntimeObject valueAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueAtIndex_( Handle, CachedSelectors.valueAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint count( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr identifierAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint indexForIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr identifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isEqual_compareIdentifiers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject equal, char compareIdentifiers );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr labelAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr primaryIdentifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int propertyType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
		}
		static internal class CachedSelectors {
			public static readonly Selector count = "count";
			public static readonly Selector identifierAtIndex_ = "identifierAtIndex:";
			public static readonly Selector indexForIdentifier_ = "indexForIdentifier:";
			public static readonly Selector isEqual_compareIdentifiers_ = "isEqual:compareIdentifiers:";
			public static readonly Selector labelAtIndex_ = "labelAtIndex:";
			public static readonly Selector primaryIdentifier = "primaryIdentifier";
			public static readonly Selector propertyType = "propertyType";
			public static readonly Selector valueAtIndex_ = "valueAtIndex:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABMultiValue ) )]
	public struct ABMutableMultiValue : IEquatable<ABMutableMultiValue> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMutableMultiValue;
		public static implicit operator ABMultiValue( ABMutableMultiValue value ) {
			return new ABMultiValue( value.Handle );
		}
		public static implicit operator NSObject( ABMutableMultiValue value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABMutableMultiValue value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMutableMultiValue value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABMutableMultiValue?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABMutableMultiValue value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMutableMultiValue value1, ABMutableMultiValue value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMutableMultiValue value1, ABMutableMultiValue value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMutableMultiValue( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMutableMultiValue alloc() {
			return new ABMutableMultiValue( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public string addValue_withLabel_( NObjective.RuntimeObject value, string withLabel ) {
			RuntimeObject ___occuredException;
			var ___wrappedwithLabel = Runtime.CreateStringProxy( withLabel );
			var ___result = NativeMethods.addValue_withLabel_( Handle, CachedSelectors.addValue_withLabel_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( IntPtr ), value, ___wrappedwithLabel );
			Runtime.ReleaseNativeObject( ___wrappedwithLabel );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string insertValue_withLabel_atIndex_( NObjective.RuntimeObject value, string withLabel, uint atIndex ) {
			RuntimeObject ___occuredException;
			var ___wrappedwithLabel = Runtime.CreateStringProxy( withLabel );
			var ___result = NativeMethods.insertValue_withLabel_atIndex_( Handle, CachedSelectors.insertValue_withLabel_atIndex_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( IntPtr ) + sizeof( uint ), value, ___wrappedwithLabel, atIndex );
			Runtime.ReleaseNativeObject( ___wrappedwithLabel );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public bool removeValueAndLabelAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeValueAndLabelAtIndex_( Handle, CachedSelectors.removeValueAndLabelAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool replaceLabelAtIndex_withLabel_( uint index, string withLabel ) {
			RuntimeObject ___occuredException;
			var ___wrappedwithLabel = Runtime.CreateStringProxy( withLabel );
			var ___result = NativeMethods.replaceLabelAtIndex_withLabel_( Handle, CachedSelectors.replaceLabelAtIndex_withLabel_, out ___occuredException, sizeof( uint ) + sizeof( IntPtr ), index, ___wrappedwithLabel );
			Runtime.ReleaseNativeObject( ___wrappedwithLabel );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool replaceValueAtIndex_withValue_( uint index, NObjective.RuntimeObject withValue ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.replaceValueAtIndex_withValue_( Handle, CachedSelectors.replaceValueAtIndex_withValue_, out ___occuredException, sizeof( uint ) + sizeof( NObjective.RuntimeObject ), index, withValue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool setPrimaryIdentifier_( string identifier ) {
			RuntimeObject ___occuredException;
			var ___wrappedidentifier = Runtime.CreateStringProxy( identifier );
			var ___result = NativeMethods.setPrimaryIdentifier_( Handle, CachedSelectors.setPrimaryIdentifier_, out ___occuredException, sizeof( IntPtr ), ___wrappedidentifier );
			Runtime.ReleaseNativeObject( ___wrappedidentifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr addValue_withLabel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, IntPtr withLabel );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr insertValue_withLabel_atIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, IntPtr withLabel, uint atIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool removeValueAndLabelAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool replaceLabelAtIndex_withLabel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index, IntPtr withLabel );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool replaceValueAtIndex_withValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index, NObjective.RuntimeObject withValue );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool setPrimaryIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr identifier );
		}
		static internal class CachedSelectors {
			public static readonly Selector addValue_withLabel_ = "addValue:withLabel:";
			public static readonly Selector insertValue_withLabel_atIndex_ = "insertValue:withLabel:atIndex:";
			public static readonly Selector removeValueAndLabelAtIndex_ = "removeValueAndLabelAtIndex:";
			public static readonly Selector replaceLabelAtIndex_withLabel_ = "replaceLabelAtIndex:withLabel:";
			public static readonly Selector replaceValueAtIndex_withValue_ = "replaceValueAtIndex:withValue:";
			public static readonly Selector setPrimaryIdentifier_ = "setPrimaryIdentifier:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABPackedImage ) )]
	public struct ABMutablePackedImage : IEquatable<ABMutablePackedImage> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABMutablePackedImage;
		public static implicit operator ABPackedImage( ABMutablePackedImage value ) {
			return new ABPackedImage( value.Handle );
		}
		public static implicit operator NSImage( ABMutablePackedImage value ) {
			return new NSImage( value.Handle );
		}
		public static implicit operator NSObject( ABMutablePackedImage value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABMutablePackedImage value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABMutablePackedImage value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABMutablePackedImage?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABMutablePackedImage value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABMutablePackedImage value1, ABMutablePackedImage value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABMutablePackedImage value1, ABMutablePackedImage value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABMutablePackedImage( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABMutablePackedImage alloc() {
			return new ABMutablePackedImage( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addImage_withName_( NObjective.RuntimeObject image, NObjective.RuntimeObject withName ) {
			RuntimeObject ___occuredException;
			NativeMethods.addImage_withName_( Handle, CachedSelectors.addImage_withName_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), image, withName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPath_( Handle, CachedSelectors.setPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addImage_withName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image, NObjective.RuntimeObject withName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
		}
		static internal class CachedSelectors {
			public static readonly Selector addImage_withName_ = "addImage:withName:";
			public static readonly Selector setPath_ = "setPath:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABNetworkController : IEquatable<ABNetworkController> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABNetworkController;
		public static implicit operator NSObject( ABNetworkController value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABNetworkController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABNetworkController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABNetworkController?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABNetworkController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABNetworkController value1, ABNetworkController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABNetworkController value1, ABNetworkController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABNetworkController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABNetworkController alloc() {
			return new ABNetworkController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject sharedNetworkController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedNetworkController( ClassHandle, CachedSelectors.sharedNetworkController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char canReachAddress_( NObjective.RuntimeObject address ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canReachAddress_( Handle, CachedSelectors.canReachAddress_, out ___occuredException, sizeof( NObjective.RuntimeObject ), address );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject domainName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.domainName( Handle, CachedSelectors.domainName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isNetworkUp() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isNetworkUp( Handle, CachedSelectors.isNetworkUp, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char canReachAddress_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject address );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr domainName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isNetworkUp( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedNetworkController( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector canReachAddress_ = "canReachAddress:";
			public static readonly Selector domainName = "domainName";
			public static readonly Selector isNetworkUp = "isNetworkUp";
			public static readonly Selector sharedNetworkController = "sharedNetworkController";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABCommand ) )]
	public struct ABNewGroupCommand : IEquatable<ABNewGroupCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABNewGroupCommand;
		public static implicit operator ABCommand( ABNewGroupCommand value ) {
			return new ABCommand( value.Handle );
		}
		public static implicit operator NSObject( ABNewGroupCommand value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABNewGroupCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABNewGroupCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABNewGroupCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABNewGroupCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABNewGroupCommand value1, ABNewGroupCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABNewGroupCommand value1, ABNewGroupCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABNewGroupCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABNewGroupCommand alloc() {
			return new ABNewGroupCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithPeople_parentGroup_( NObjective.RuntimeObject people, NObjective.RuntimeObject parentGroup ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithPeople_parentGroup_( Handle, CachedSelectors.initWithPeople_parentGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), people, parentGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject newGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.newGroup( Handle, CachedSelectors.newGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithPeople_parentGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject people, NObjective.RuntimeObject parentGroup );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr newGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithPeople_parentGroup_ = "initWithPeople:parentGroup:";
			public static readonly Selector newGroup = "newGroup";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABCommand ) )]
	public struct ABNewPersonCommand : IEquatable<ABNewPersonCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABNewPersonCommand;
		public static implicit operator ABCommand( ABNewPersonCommand value ) {
			return new ABCommand( value.Handle );
		}
		public static implicit operator NSObject( ABNewPersonCommand value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABNewPersonCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABNewPersonCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABNewPersonCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABNewPersonCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABNewPersonCommand value1, ABNewPersonCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABNewPersonCommand value1, ABNewPersonCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABNewPersonCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABNewPersonCommand alloc() {
			return new ABNewPersonCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithNewPerson_selectedGroup_( NObjective.RuntimeObject person, NObjective.RuntimeObject selectedGroup ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithNewPerson_selectedGroup_( Handle, CachedSelectors.initWithNewPerson_selectedGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), person, selectedGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithNewPerson_selectedGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person, NObjective.RuntimeObject selectedGroup );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithNewPerson_selectedGroup_ = "initWithNewPerson:selectedGroup:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABCommand ) )]
	public struct ABNewSmartGroupCommand : IEquatable<ABNewSmartGroupCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABNewSmartGroupCommand;
		public static implicit operator ABCommand( ABNewSmartGroupCommand value ) {
			return new ABCommand( value.Handle );
		}
		public static implicit operator NSObject( ABNewSmartGroupCommand value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABNewSmartGroupCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABNewSmartGroupCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABNewSmartGroupCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABNewSmartGroupCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABNewSmartGroupCommand value1, ABNewSmartGroupCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABNewSmartGroupCommand value1, ABNewSmartGroupCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABNewSmartGroupCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABNewSmartGroupCommand alloc() {
			return new ABNewSmartGroupCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithSearchElement_andName_hilight_( NObjective.RuntimeObject element, NObjective.RuntimeObject andName, char hilight ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithSearchElement_andName_hilight_( Handle, CachedSelectors.initWithSearchElement_andName_hilight_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), element, andName, hilight );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject newGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.newGroup( Handle, CachedSelectors.newGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithSearchElement_andName_hilight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element, NObjective.RuntimeObject andName, char hilight );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr newGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithSearchElement_andName_hilight_ = "initWithSearchElement:andName:hilight:";
			public static readonly Selector newGroup = "newGroup";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABGroup ) )]
	public struct ABOnMyMacGroup : IEquatable<ABOnMyMacGroup> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABOnMyMacGroup;
		public static implicit operator ABGroup( ABOnMyMacGroup value ) {
			return new ABGroup( value.Handle );
		}
		public static implicit operator ABRecord( ABOnMyMacGroup value ) {
			return new ABRecord( value.Handle );
		}
		public static implicit operator NSObject( ABOnMyMacGroup value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABOnMyMacGroup value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABOnMyMacGroup value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABOnMyMacGroup?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABOnMyMacGroup value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABOnMyMacGroup value1, ABOnMyMacGroup value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABOnMyMacGroup value1, ABOnMyMacGroup value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABOnMyMacGroup( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABOnMyMacGroup alloc() {
			return new ABOnMyMacGroup( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject onMyMacGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.onMyMacGroup( ClassHandle, CachedSelectors.onMyMacGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createUsersDictionaryFromNames_inNode_( NObjective.RuntimeObject names, NObjective.RuntimeObject inNode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createUsersDictionaryFromNames_inNode_( Handle, CachedSelectors.createUsersDictionaryFromNames_inNode_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), names, inNode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void resetLocalAccounts() {
			RuntimeObject ___occuredException;
			NativeMethods.resetLocalAccounts( Handle, CachedSelectors.resetLocalAccounts, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createUsersDictionaryFromNames_inNode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject names, NObjective.RuntimeObject inNode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr onMyMacGroup( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resetLocalAccounts( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector createUsersDictionaryFromNames_inNode_ = "createUsersDictionaryFromNames:inNode:";
			public static readonly Selector onMyMacGroup = "onMyMacGroup";
			public static readonly Selector resetLocalAccounts = "resetLocalAccounts";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSOutlineView ) )]
	public struct ABOutlineView : IEquatable<ABOutlineView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABOutlineView;
		public static implicit operator NSOutlineView( ABOutlineView value ) {
			return new NSOutlineView( value.Handle );
		}
		public static implicit operator NSTableView( ABOutlineView value ) {
			return new NSTableView( value.Handle );
		}
		public static implicit operator NSControl( ABOutlineView value ) {
			return new NSControl( value.Handle );
		}
		public static implicit operator NSView( ABOutlineView value ) {
			return new NSView( value.Handle );
		}
		public static implicit operator NSResponder( ABOutlineView value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABOutlineView value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABOutlineView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABOutlineView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABOutlineView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABOutlineView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABOutlineView value1, ABOutlineView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABOutlineView value1, ABOutlineView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABOutlineView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABOutlineView alloc() {
			return new ABOutlineView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int dividerRow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dividerRow( Handle, CachedSelectors.dividerRow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void drawDropHighlightOnRowFirst_( int first ) {
			RuntimeObject ___occuredException;
			NativeMethods.drawDropHighlightOnRowFirst_( Handle, CachedSelectors.drawDropHighlightOnRowFirst_, out ___occuredException, sizeof( int ), first );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int firstRowAfterDivider() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.firstRowAfterDivider( Handle, CachedSelectors.firstRowAfterDivider, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setIgnoreReloadData_( char data ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIgnoreReloadData_( Handle, CachedSelectors.setIgnoreReloadData_, out ___occuredException, sizeof( char ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool shouldEditOnSingleClick_inRow_tableColumn_( NObjective.RuntimeObject click, int inRow, NObjective.RuntimeObject tableColumn ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shouldEditOnSingleClick_inRow_tableColumn_( Handle, CachedSelectors.shouldEditOnSingleClick_inRow_tableColumn_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), click, inRow, tableColumn );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void updateDragRectWithProgress_( float progress ) {
			RuntimeObject ___occuredException;
			NativeMethods.updateDragRectWithProgress_( Handle, CachedSelectors.updateDragRectWithProgress_, out ___occuredException, sizeof( float ), progress );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int dividerRow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void drawDropHighlightOnRowFirst_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int first );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int firstRowAfterDivider( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setIgnoreReloadData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool shouldEditOnSingleClick_inRow_tableColumn_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject click, int inRow, NObjective.RuntimeObject tableColumn );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateDragRectWithProgress_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float progress );
		}
		static internal class CachedSelectors {
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector dividerRow = "dividerRow";
			public static readonly Selector drawDropHighlightOnRowFirst_ = "drawDropHighlightOnRowFirst:";
			public static readonly Selector firstRowAfterDivider = "firstRowAfterDivider";
			public static readonly Selector setIgnoreReloadData_ = "setIgnoreReloadData:";
			public static readonly Selector shouldEditOnSingleClick_inRow_tableColumn_ = "shouldEditOnSingleClick:inRow:tableColumn:";
			public static readonly Selector updateDragRectWithProgress_ = "updateDragRectWithProgress:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSImage ) )]
	public struct ABPackedImage : IEquatable<ABPackedImage> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPackedImage;
		public static implicit operator NSImage( ABPackedImage value ) {
			return new NSImage( value.Handle );
		}
		public static implicit operator NSObject( ABPackedImage value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABPackedImage value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPackedImage value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABPackedImage?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABPackedImage value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPackedImage value1, ABPackedImage value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPackedImage value1, ABPackedImage value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPackedImage( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPackedImage alloc() {
			return new ABPackedImage( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject packedImageNamed_inBundle_( NObjective.RuntimeObject named, NObjective.RuntimeObject inBundle ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.packedImageNamed_inBundle_( ClassHandle, CachedSelectors.packedImageNamed_inBundle_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), named, inBundle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject startupImages() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.startupImages( ClassHandle, CachedSelectors.startupImages, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject imageWithName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.imageWithName_( Handle, CachedSelectors.imageWithName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject packedDataRepresentation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.packedDataRepresentation( Handle, CachedSelectors.packedDataRepresentation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject path() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.path( Handle, CachedSelectors.path, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr imageWithName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr packedDataRepresentation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr packedImageNamed_inBundle_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject named, NObjective.RuntimeObject inBundle );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr path( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr startupImages( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector imageWithName_ = "imageWithName:";
			public static readonly Selector packedDataRepresentation = "packedDataRepresentation";
			public static readonly Selector packedImageNamed_inBundle_ = "packedImageNamed:inBundle:";
			public static readonly Selector path = "path";
			public static readonly Selector startupImages = "startupImages";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABCommand ) )]
	public struct ABPasteGroupsCommand : IEquatable<ABPasteGroupsCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPasteGroupsCommand;
		public static implicit operator ABCommand( ABPasteGroupsCommand value ) {
			return new ABCommand( value.Handle );
		}
		public static implicit operator NSObject( ABPasteGroupsCommand value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABPasteGroupsCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPasteGroupsCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABPasteGroupsCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABPasteGroupsCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPasteGroupsCommand value1, ABPasteGroupsCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPasteGroupsCommand value1, ABPasteGroupsCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPasteGroupsCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPasteGroupsCommand alloc() {
			return new ABPasteGroupsCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char containsGroupName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.containsGroupName_( Handle, CachedSelectors.containsGroupName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char containsGroupName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
		}
		static internal class CachedSelectors {
			public static readonly Selector containsGroupName_ = "containsGroupName:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABCommand ) )]
	public struct ABPastePeopleCommand : IEquatable<ABPastePeopleCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPastePeopleCommand;
		public static implicit operator ABCommand( ABPastePeopleCommand value ) {
			return new ABCommand( value.Handle );
		}
		public static implicit operator NSObject( ABPastePeopleCommand value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABPastePeopleCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPastePeopleCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABPastePeopleCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABPastePeopleCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPastePeopleCommand value1, ABPastePeopleCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPastePeopleCommand value1, ABPastePeopleCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPastePeopleCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPastePeopleCommand alloc() {
			return new ABPastePeopleCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithGroup_( Handle, CachedSelectors.initWithGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithGroup_ = "initWithGroup:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABTableController ) )]
	public struct ABPeopleController : IEquatable<ABPeopleController> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPeopleController;
		public static implicit operator ABTableController( ABPeopleController value ) {
			return new ABTableController( value.Handle );
		}
		public static implicit operator NSResponder( ABPeopleController value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABPeopleController value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABPeopleController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPeopleController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABPeopleController?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABPeopleController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPeopleController value1, ABPeopleController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPeopleController value1, ABPeopleController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPeopleController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPeopleController alloc() {
			return new ABPeopleController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject activeColumnFilter() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.activeColumnFilter( Handle, CachedSelectors.activeColumnFilter, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject activeColumnIdentifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.activeColumnIdentifier( Handle, CachedSelectors.activeColumnIdentifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addColumnFilter_forColumnTitle_andIdentifier_( NObjective.RuntimeObject filter, NObjective.RuntimeObject forColumnTitle, NObjective.RuntimeObject andIdentifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.addColumnFilter_forColumnTitle_andIdentifier_( Handle, CachedSelectors.addColumnFilter_forColumnTitle_andIdentifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), filter, forColumnTitle, andIdentifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject columnFilters() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.columnFilters( Handle, CachedSelectors.columnFilters, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject columnTitleForIdentifier_( NObjective.RuntimeObject identifier ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.columnTitleForIdentifier_( Handle, CachedSelectors.columnTitleForIdentifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ), identifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject displayedColumns() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.displayedColumns( Handle, CachedSelectors.displayedColumns, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject displayedProperties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.displayedProperties( Handle, CachedSelectors.displayedProperties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void localEditInAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			NativeMethods.localEditInAddressBook_( Handle, CachedSelectors.localEditInAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject menuForEvent_( NObjective.RuntimeObject @event ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.menuForEvent_( Handle, CachedSelectors.menuForEvent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @event );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int numberOfRowsInTableView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberOfRowsInTableView_( Handle, CachedSelectors.numberOfRowsInTableView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int numberOfSubrowsInTableView_forRow_( NObjective.RuntimeObject view, int forRow ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberOfSubrowsInTableView_forRow_( Handle, CachedSelectors.numberOfSubrowsInTableView_forRow_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), view, forRow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void pasteboard_provideDataForType_( NObjective.RuntimeObject pasteboard, NObjective.RuntimeObject provideDataForType ) {
			RuntimeObject ___occuredException;
			NativeMethods.pasteboard_provideDataForType_( Handle, CachedSelectors.pasteboard_provideDataForType_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), pasteboard, provideDataForType );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject recordsForUIDs_( NObjective.RuntimeObject ds ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.recordsForUIDs_( Handle, CachedSelectors.recordsForUIDs_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ds );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void removeAllColumnFilters() {
			RuntimeObject ___occuredException;
			NativeMethods.removeAllColumnFilters( Handle, CachedSelectors.removeAllColumnFilters, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeColumnFilter_( NObjective.RuntimeObject filter ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeColumnFilter_( Handle, CachedSelectors.removeColumnFilter_, out ___occuredException, sizeof( NObjective.RuntimeObject ), filter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void restoreNameColumnWidth() {
			RuntimeObject ___occuredException;
			NativeMethods.restoreNameColumnWidth( Handle, CachedSelectors.restoreNameColumnWidth, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void saveNameColumnWidth() {
			RuntimeObject ___occuredException;
			NativeMethods.saveNameColumnWidth( Handle, CachedSelectors.saveNameColumnWidth, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectColumnIdentifier_( NObjective.RuntimeObject identifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectColumnIdentifier_( Handle, CachedSelectors.selectColumnIdentifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ), identifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowGroupSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowGroupSelection_( Handle, CachedSelectors.setAllowGroupSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsColumnResizing_( char resizing ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsColumnResizing_( Handle, CachedSelectors.setAllowsColumnResizing_, out ___occuredException, sizeof( char ), resizing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowSubrowSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowSubrowSelection_( Handle, CachedSelectors.setAllowSubrowSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setColumnTitle_forIdentifier_( NObjective.RuntimeObject title, NObjective.RuntimeObject forIdentifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.setColumnTitle_forIdentifier_( Handle, CachedSelectors.setColumnTitle_forIdentifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), title, forIdentifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject stringsFromRows_expanding_( NObjective.RuntimeObject rows, char expanding ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringsFromRows_expanding_( Handle, CachedSelectors.stringsFromRows_expanding_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), rows, expanding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject stringsFromSelectionExpanding_( char expanding ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringsFromSelectionExpanding_( Handle, CachedSelectors.stringsFromSelectionExpanding_, out ___occuredException, sizeof( char ), expanding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject subrowObjectsForPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subrowObjectsForPerson_( Handle, CachedSelectors.subrowObjectsForPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int tableView_defaultSubRowForRow_( NObjective.RuntimeObject view, int defaultSubRowForRow ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tableView_defaultSubRowForRow_( Handle, CachedSelectors.tableView_defaultSubRowForRow_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), view, defaultSubRowForRow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float tableView_heightForRow_( NObjective.RuntimeObject view, int heightForRow ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tableView_heightForRow_( Handle, CachedSelectors.tableView_heightForRow_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), view, heightForRow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject tableView_objectValueForTableColumn_row_( NObjective.RuntimeObject view, NObjective.RuntimeObject objectValueForTableColumn, int row ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tableView_objectValueForTableColumn_row_( Handle, CachedSelectors.tableView_objectValueForTableColumn_row_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), view, objectValueForTableColumn, row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char tableView_shouldEditTableColumn_row_( NObjective.RuntimeObject view, NObjective.RuntimeObject shouldEditTableColumn, int row ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tableView_shouldEditTableColumn_row_( Handle, CachedSelectors.tableView_shouldEditTableColumn_row_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), view, shouldEditTableColumn, row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char tableView_shouldSelectRow_( NObjective.RuntimeObject view, int shouldSelectRow ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tableView_shouldSelectRow_( Handle, CachedSelectors.tableView_shouldSelectRow_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), view, shouldSelectRow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char tableView_writeRows_toPasteboard_( NObjective.RuntimeObject view, NObjective.RuntimeObject writeRows, NObjective.RuntimeObject toPasteboard ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tableView_writeRows_toPasteboard_( Handle, CachedSelectors.tableView_writeRows_toPasteboard_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, writeRows, toPasteboard );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void tableViewSelectionDidChange_( NObjective.RuntimeObject change ) {
			RuntimeObject ___occuredException;
			NativeMethods.tableViewSelectionDidChange_( Handle, CachedSelectors.tableViewSelectionDidChange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), change );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateColumns() {
			RuntimeObject ___occuredException;
			NativeMethods.updateColumns( Handle, CachedSelectors.updateColumns, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr activeColumnFilter( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr activeColumnIdentifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addColumnFilter_forColumnTitle_andIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject filter, NObjective.RuntimeObject forColumnTitle, NObjective.RuntimeObject andIdentifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr columnFilters( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr columnTitleForIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr displayedColumns( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr displayedProperties( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void localEditInAddressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr menuForEvent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @event );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int numberOfRowsInTableView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int numberOfSubrowsInTableView_forRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, int forRow );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pasteboard_provideDataForType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject pasteboard, NObjective.RuntimeObject provideDataForType );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr recordsForUIDs_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ds );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeAllColumnFilters( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeColumnFilter_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject filter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void restoreNameColumnWidth( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void saveNameColumnWidth( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectColumnIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowGroupSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowsColumnResizing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char resizing );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowSubrowSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setColumnTitle_forIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject title, NObjective.RuntimeObject forIdentifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringsFromRows_expanding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject rows, char expanding );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringsFromSelectionExpanding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char expanding );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr subrowObjectsForPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int tableView_defaultSubRowForRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, int defaultSubRowForRow );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float tableView_heightForRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, int heightForRow );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr tableView_objectValueForTableColumn_row_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject objectValueForTableColumn, int row );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char tableView_shouldEditTableColumn_row_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject shouldEditTableColumn, int row );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char tableView_shouldSelectRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, int shouldSelectRow );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char tableView_writeRows_toPasteboard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject writeRows, NObjective.RuntimeObject toPasteboard );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void tableViewSelectionDidChange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject change );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateColumns( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector activeColumnFilter = "activeColumnFilter";
			public static readonly Selector activeColumnIdentifier = "activeColumnIdentifier";
			public static readonly Selector addColumnFilter_forColumnTitle_andIdentifier_ = "addColumnFilter:forColumnTitle:andIdentifier:";
			public static readonly Selector columnFilters = "columnFilters";
			public static readonly Selector columnTitleForIdentifier_ = "columnTitleForIdentifier:";
			public static readonly Selector displayedColumns = "displayedColumns";
			public static readonly Selector displayedProperties = "displayedProperties";
			public static readonly Selector localEditInAddressBook_ = "localEditInAddressBook:";
			public static readonly Selector menuForEvent_ = "menuForEvent:";
			public static readonly Selector numberOfRowsInTableView_ = "numberOfRowsInTableView:";
			public static readonly Selector numberOfSubrowsInTableView_forRow_ = "numberOfSubrowsInTableView:forRow:";
			public static readonly Selector pasteboard_provideDataForType_ = "pasteboard:provideDataForType:";
			public static readonly Selector recordsForUIDs_ = "recordsForUIDs:";
			public static readonly Selector removeAllColumnFilters = "removeAllColumnFilters";
			public static readonly Selector removeColumnFilter_ = "removeColumnFilter:";
			public static readonly Selector restoreNameColumnWidth = "restoreNameColumnWidth";
			public static readonly Selector saveNameColumnWidth = "saveNameColumnWidth";
			public static readonly Selector selectColumnIdentifier_ = "selectColumnIdentifier:";
			public static readonly Selector setAllowGroupSelection_ = "setAllowGroupSelection:";
			public static readonly Selector setAllowsColumnResizing_ = "setAllowsColumnResizing:";
			public static readonly Selector setAllowSubrowSelection_ = "setAllowSubrowSelection:";
			public static readonly Selector setColumnTitle_forIdentifier_ = "setColumnTitle:forIdentifier:";
			public static readonly Selector stringsFromRows_expanding_ = "stringsFromRows:expanding:";
			public static readonly Selector stringsFromSelectionExpanding_ = "stringsFromSelectionExpanding:";
			public static readonly Selector subrowObjectsForPerson_ = "subrowObjectsForPerson:";
			public static readonly Selector tableView_defaultSubRowForRow_ = "tableView:defaultSubRowForRow:";
			public static readonly Selector tableView_heightForRow_ = "tableView:heightForRow:";
			public static readonly Selector tableView_objectValueForTableColumn_row_ = "tableView:objectValueForTableColumn:row:";
			public static readonly Selector tableView_shouldEditTableColumn_row_ = "tableView:shouldEditTableColumn:row:";
			public static readonly Selector tableView_shouldSelectRow_ = "tableView:shouldSelectRow:";
			public static readonly Selector tableView_writeRows_toPasteboard_ = "tableView:writeRows:toPasteboard:";
			public static readonly Selector tableViewSelectionDidChange_ = "tableViewSelectionDidChange:";
			public static readonly Selector updateColumns = "updateColumns";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABPeoplePickerController : IEquatable<ABPeoplePickerController> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPeoplePickerController;
		public static implicit operator NSObject( ABPeoplePickerController value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABPeoplePickerController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPeoplePickerController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABPeoplePickerController?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABPeoplePickerController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPeoplePickerController value1, ABPeoplePickerController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPeoplePickerController value1, ABPeoplePickerController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPeoplePickerController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPeoplePickerController alloc() {
			return new ABPeoplePickerController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addColumnFilter_forColumnTitle_( NObjective.RuntimeObject filter, NObjective.RuntimeObject forColumnTitle ) {
			RuntimeObject ___occuredException;
			NativeMethods.addColumnFilter_forColumnTitle_( Handle, CachedSelectors.addColumnFilter_forColumnTitle_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), filter, forColumnTitle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char allowsDirectoriesSearches() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsDirectoriesSearches( Handle, CachedSelectors.allowsDirectoriesSearches, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char allowsMultipleSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsMultipleSelection( Handle, CachedSelectors.allowsMultipleSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject displayedColumns() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.displayedColumns( Handle, CachedSelectors.displayedColumns, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void editInAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			NativeMethods.editInAddressBook_( Handle, CachedSelectors.editInAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithWindow_( NObjective.RuntimeObject window ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithWindow_( Handle, CachedSelectors.initWithWindow_, out ___occuredException, sizeof( NObjective.RuntimeObject ), window );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject peoplePickerView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.peoplePickerView( Handle, CachedSelectors.peoplePickerView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void removeAllColumnFilters() {
			RuntimeObject ___occuredException;
			NativeMethods.removeAllColumnFilters( Handle, CachedSelectors.removeAllColumnFilters, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeColumnFilter_( NObjective.RuntimeObject filter ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeColumnFilter_( Handle, CachedSelectors.removeColumnFilter_, out ___occuredException, sizeof( NObjective.RuntimeObject ), filter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectColumnTitle_( NObjective.RuntimeObject title ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectColumnTitle_( Handle, CachedSelectors.selectColumnTitle_, out ___occuredException, sizeof( NObjective.RuntimeObject ), title );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject selectedGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedGroups( Handle, CachedSelectors.selectedGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedRecords() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedRecords( Handle, CachedSelectors.selectedRecords, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAllowGroupSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowGroupSelection_( Handle, CachedSelectors.setAllowGroupSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsDirectoriesSearches_( char searches ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsDirectoriesSearches_( Handle, CachedSelectors.setAllowsDirectoriesSearches_, out ___occuredException, sizeof( char ), searches );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsMultipleSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsMultipleSelection_( Handle, CachedSelectors.setAllowsMultipleSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowSubrowSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowSubrowSelection_( Handle, CachedSelectors.setAllowSubrowSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setGroupDoubleClickTarget_andAction_( NObjective.RuntimeObject target, NObjective.Selector andAction ) {
			RuntimeObject ___occuredException;
			NativeMethods.setGroupDoubleClickTarget_andAction_( Handle, CachedSelectors.setGroupDoubleClickTarget_andAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ), target, andAction );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPeopleDoubleClickTarget_andAction_( NObjective.RuntimeObject target, NObjective.Selector andAction ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPeopleDoubleClickTarget_andAction_( Handle, CachedSelectors.setPeopleDoubleClickTarget_andAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ), target, andAction );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShouldHideMeCard_( char card ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShouldHideMeCard_( Handle, CachedSelectors.setShouldHideMeCard_, out ___occuredException, sizeof( char ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject stringsFromSelectionExpanding_( char expanding ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringsFromSelectionExpanding_( Handle, CachedSelectors.stringsFromSelectionExpanding_, out ___occuredException, sizeof( char ), expanding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addColumnFilter_forColumnTitle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject filter, NObjective.RuntimeObject forColumnTitle );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char allowsDirectoriesSearches( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char allowsMultipleSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr displayedColumns( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void editInAddressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithWindow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject window );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr peoplePickerView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeAllColumnFilters( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeColumnFilter_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject filter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectColumnTitle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject title );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedRecords( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowGroupSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowsDirectoriesSearches_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char searches );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowsMultipleSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowSubrowSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setGroupDoubleClickTarget_andAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target, NObjective.Selector andAction );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPeopleDoubleClickTarget_andAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target, NObjective.Selector andAction );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setShouldHideMeCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char card );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringsFromSelectionExpanding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char expanding );
		}
		static internal class CachedSelectors {
			public static readonly Selector addColumnFilter_forColumnTitle_ = "addColumnFilter:forColumnTitle:";
			public static readonly Selector allowsDirectoriesSearches = "allowsDirectoriesSearches";
			public static readonly Selector allowsMultipleSelection = "allowsMultipleSelection";
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector displayedColumns = "displayedColumns";
			public static readonly Selector editInAddressBook_ = "editInAddressBook:";
			public static readonly Selector initWithWindow_ = "initWithWindow:";
			public static readonly Selector peoplePickerView = "peoplePickerView";
			public static readonly Selector removeAllColumnFilters = "removeAllColumnFilters";
			public static readonly Selector removeColumnFilter_ = "removeColumnFilter:";
			public static readonly Selector selectColumnTitle_ = "selectColumnTitle:";
			public static readonly Selector selectedGroups = "selectedGroups";
			public static readonly Selector selectedRecords = "selectedRecords";
			public static readonly Selector setAllowGroupSelection_ = "setAllowGroupSelection:";
			public static readonly Selector setAllowsDirectoriesSearches_ = "setAllowsDirectoriesSearches:";
			public static readonly Selector setAllowsMultipleSelection_ = "setAllowsMultipleSelection:";
			public static readonly Selector setAllowSubrowSelection_ = "setAllowSubrowSelection:";
			public static readonly Selector setGroupDoubleClickTarget_andAction_ = "setGroupDoubleClickTarget:andAction:";
			public static readonly Selector setPeopleDoubleClickTarget_andAction_ = "setPeopleDoubleClickTarget:andAction:";
			public static readonly Selector setShouldHideMeCard_ = "setShouldHideMeCard:";
			public static readonly Selector stringsFromSelectionExpanding_ = "stringsFromSelectionExpanding:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABPeoplePickerNibLoader : IEquatable<ABPeoplePickerNibLoader> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPeoplePickerNibLoader;
		public static implicit operator NSObject( ABPeoplePickerNibLoader value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABPeoplePickerNibLoader value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPeoplePickerNibLoader value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABPeoplePickerNibLoader?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABPeoplePickerNibLoader value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPeoplePickerNibLoader value1, ABPeoplePickerNibLoader value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPeoplePickerNibLoader value1, ABPeoplePickerNibLoader value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPeoplePickerNibLoader( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPeoplePickerNibLoader alloc() {
			return new ABPeoplePickerNibLoader( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject addGroupView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addGroupView( Handle, CachedSelectors.addGroupView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject carbonPickerWindow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.carbonPickerWindow( Handle, CachedSelectors.carbonPickerWindow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject mainSplit() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mainSplit( Handle, CachedSelectors.mainSplit, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject pickerView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pickerView( Handle, CachedSelectors.pickerView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject populatePicker_( NObjective.RuntimeObject picker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.populatePicker_( Handle, CachedSelectors.populatePicker_, out ___occuredException, sizeof( NObjective.RuntimeObject ), picker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject searchLabel() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchLabel( Handle, CachedSelectors.searchLabel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr addGroupView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr carbonPickerWindow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mainSplit( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pickerView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr populatePicker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject picker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr searchLabel( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addGroupView = "addGroupView";
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector carbonPickerWindow = "carbonPickerWindow";
			public static readonly Selector mainSplit = "mainSplit";
			public static readonly Selector pickerView = "pickerView";
			public static readonly Selector populatePicker_ = "populatePicker:";
			public static readonly Selector searchLabel = "searchLabel";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSView ) )]
	public struct ABPeoplePickerView : IEquatable<ABPeoplePickerView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPeoplePickerView;
		public static implicit operator NSView( ABPeoplePickerView value ) {
			return new NSView( value.Handle );
		}
		public static implicit operator NSResponder( ABPeoplePickerView value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABPeoplePickerView value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABPeoplePickerView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPeoplePickerView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABPeoplePickerView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABPeoplePickerView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPeoplePickerView value1, ABPeoplePickerView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPeoplePickerView value1, ABPeoplePickerView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPeoplePickerView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPeoplePickerView alloc() {
			return new ABPeoplePickerView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject accessoryView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessoryView( Handle, CachedSelectors.accessoryView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addFilter_title_identifier_( NObjective.RuntimeObject filter, NObjective.RuntimeObject title, NObjective.RuntimeObject identifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.addFilter_title_identifier_( Handle, CachedSelectors.addFilter_title_identifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), filter, title, identifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			NativeMethods.addProperty_( Handle, CachedSelectors.addProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char allowsDirectoriesSearches() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsDirectoriesSearches( Handle, CachedSelectors.allowsDirectoriesSearches, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char allowsGroupEditing() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsGroupEditing( Handle, CachedSelectors.allowsGroupEditing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char allowsGroupSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsGroupSelection( Handle, CachedSelectors.allowsGroupSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char allowsIndividualValueSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsIndividualValueSelection( Handle, CachedSelectors.allowsIndividualValueSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char allowsMultipleSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsMultipleSelection( Handle, CachedSelectors.allowsMultipleSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject autosaveName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.autosaveName( Handle, CachedSelectors.autosaveName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearSearchField_( NObjective.RuntimeObject field ) {
			RuntimeObject ___occuredException;
			NativeMethods.clearSearchField_( Handle, CachedSelectors.clearSearchField_, out ___occuredException, sizeof( NObjective.RuntimeObject ), field );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject collaborationIdentityForGUID_( NObjective.RuntimeObject guid ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.collaborationIdentityForGUID_( Handle, CachedSelectors.collaborationIdentityForGUID_, out ___occuredException, sizeof( NObjective.RuntimeObject ), guid );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject collaborationIdentityForPerson_create_( NObjective.RuntimeObject person, char create ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.collaborationIdentityForPerson_create_( Handle, CachedSelectors.collaborationIdentityForPerson_create_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), person, create );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject columnTitleForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.columnTitleForProperty_( Handle, CachedSelectors.columnTitleForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void decodeColumns_( NObjective.RuntimeObject columns ) {
			RuntimeObject ___occuredException;
			NativeMethods.decodeColumns_( Handle, CachedSelectors.decodeColumns_, out ___occuredException, sizeof( NObjective.RuntimeObject ), columns );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deselectAll_( NObjective.RuntimeObject all ) {
			RuntimeObject ___occuredException;
			NativeMethods.deselectAll_( Handle, CachedSelectors.deselectAll_, out ___occuredException, sizeof( NObjective.RuntimeObject ), all );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deselectGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			NativeMethods.deselectGroup_( Handle, CachedSelectors.deselectGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deselectIdentifier_forPerson_( NObjective.RuntimeObject identifier, NObjective.RuntimeObject forPerson ) {
			RuntimeObject ___occuredException;
			NativeMethods.deselectIdentifier_forPerson_( Handle, CachedSelectors.deselectIdentifier_forPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), identifier, forPerson );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deselectRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			NativeMethods.deselectRecord_( Handle, CachedSelectors.deselectRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void dispatchGroupDoubleClick_( NObjective.RuntimeObject click ) {
			RuntimeObject ___occuredException;
			NativeMethods.dispatchGroupDoubleClick_( Handle, CachedSelectors.dispatchGroupDoubleClick_, out ___occuredException, sizeof( NObjective.RuntimeObject ), click );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void dispatchGroupSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.dispatchGroupSelection_( Handle, CachedSelectors.dispatchGroupSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void dispatchNameDoubleClick_( NObjective.RuntimeObject click ) {
			RuntimeObject ___occuredException;
			NativeMethods.dispatchNameDoubleClick_( Handle, CachedSelectors.dispatchNameDoubleClick_, out ___occuredException, sizeof( NObjective.RuntimeObject ), click );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void dispatchNameSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.dispatchNameSelection_( Handle, CachedSelectors.dispatchNameSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void dispatchPropertyChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.dispatchPropertyChanged_( Handle, CachedSelectors.dispatchPropertyChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void dispatchValueSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.dispatchValueSelection_( Handle, CachedSelectors.dispatchValueSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject displayedProperty() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.displayedProperty( Handle, CachedSelectors.displayedProperty, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject displayedRecords() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.displayedRecords( Handle, CachedSelectors.displayedRecords, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void editInAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			NativeMethods.editInAddressBook_( Handle, CachedSelectors.editInAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject encodeColumns() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.encodeColumns( Handle, CachedSelectors.encodeColumns, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.Selector groupDoubleAction() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupDoubleAction( Handle, CachedSelectors.groupDoubleAction, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.Selector nameDoubleAction() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nameDoubleAction( Handle, CachedSelectors.nameDoubleAction, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void newGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			NativeMethods.newGroup_( Handle, CachedSelectors.newGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject properties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.properties( Handle, CachedSelectors.properties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void removeAllProperties() {
			RuntimeObject ___occuredException;
			NativeMethods.removeAllProperties( Handle, CachedSelectors.removeAllProperties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeProperty_( Handle, CachedSelectors.removeProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject selectedGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedGroups( Handle, CachedSelectors.selectedGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedIdentifiersForPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedIdentifiersForPerson_( Handle, CachedSelectors.selectedIdentifiersForPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedRecords() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedRecords( Handle, CachedSelectors.selectedRecords, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedValues() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedValues( Handle, CachedSelectors.selectedValues, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void selectGroup_byExtendingSelection_( NObjective.RuntimeObject @group, char byExtendingSelection ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectGroup_byExtendingSelection_( Handle, CachedSelectors.selectGroup_byExtendingSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), @group, byExtendingSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectIdentifier_forPerson_byExtendingSelection_( NObjective.RuntimeObject identifier, NObjective.RuntimeObject forPerson, char byExtendingSelection ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectIdentifier_forPerson_byExtendingSelection_( Handle, CachedSelectors.selectIdentifier_forPerson_byExtendingSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), identifier, forPerson, byExtendingSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectInAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectInAddressBook_( Handle, CachedSelectors.selectInAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectRecord_byExtendingSelection_( NObjective.RuntimeObject record, char byExtendingSelection ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectRecord_byExtendingSelection_( Handle, CachedSelectors.selectRecord_byExtendingSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), record, byExtendingSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAccessoryView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAccessoryView_( Handle, CachedSelectors.setAccessoryView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsDirectoriesSearches_( char searches ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsDirectoriesSearches_( Handle, CachedSelectors.setAllowsDirectoriesSearches_, out ___occuredException, sizeof( char ), searches );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsGroupEditing_( char editing ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsGroupEditing_( Handle, CachedSelectors.setAllowsGroupEditing_, out ___occuredException, sizeof( char ), editing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsGroupSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsGroupSelection_( Handle, CachedSelectors.setAllowsGroupSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsIndividualValueSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsIndividualValueSelection_( Handle, CachedSelectors.setAllowsIndividualValueSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsMultipleSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsMultipleSelection_( Handle, CachedSelectors.setAllowsMultipleSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAutosaveName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAutosaveName_( Handle, CachedSelectors.setAutosaveName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setColumnTitle_forProperty_( NObjective.RuntimeObject title, NObjective.RuntimeObject forProperty ) {
			RuntimeObject ___occuredException;
			NativeMethods.setColumnTitle_forProperty_( Handle, CachedSelectors.setColumnTitle_forProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), title, forProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDisplayedProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDisplayedProperty_( Handle, CachedSelectors.setDisplayedProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setGroupDoubleAction_( NObjective.Selector action ) {
			RuntimeObject ___occuredException;
			NativeMethods.setGroupDoubleAction_( Handle, CachedSelectors.setGroupDoubleAction_, out ___occuredException, sizeof( NObjective.Selector ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNameDoubleAction_( NObjective.Selector action ) {
			RuntimeObject ___occuredException;
			NativeMethods.setNameDoubleAction_( Handle, CachedSelectors.setNameDoubleAction_, out ___occuredException, sizeof( NObjective.Selector ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTarget_( NObjective.RuntimeObject target ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTarget_( Handle, CachedSelectors.setTarget_, out ___occuredException, sizeof( NObjective.RuntimeObject ), target );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValueSelectionBehavior_( int behavior ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValueSelectionBehavior_( Handle, CachedSelectors.setValueSelectionBehavior_, out ___occuredException, sizeof( int ), behavior );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void sharedInit() {
			RuntimeObject ___occuredException;
			NativeMethods.sharedInit( Handle, CachedSelectors.sharedInit, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject target() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.target( Handle, CachedSelectors.target, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int valueSelectionBehavior() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueSelectionBehavior( Handle, CachedSelectors.valueSelectionBehavior, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char worksWhenModal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.worksWhenModal( Handle, CachedSelectors.worksWhenModal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessoryView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addFilter_title_identifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject filter, NObjective.RuntimeObject title, NObjective.RuntimeObject identifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char allowsDirectoriesSearches( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char allowsGroupEditing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char allowsGroupSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char allowsIndividualValueSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char allowsMultipleSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr autosaveName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clearSearchField_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject field );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr collaborationIdentityForGUID_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject guid );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr collaborationIdentityForPerson_create_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person, char create );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr columnTitleForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void decodeColumns_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject columns );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deselectAll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject all );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deselectGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deselectIdentifier_forPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier, NObjective.RuntimeObject forPerson );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deselectRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void dispatchGroupDoubleClick_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject click );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void dispatchGroupSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void dispatchNameDoubleClick_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject click );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void dispatchNameSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void dispatchPropertyChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void dispatchValueSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr displayedProperty( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr displayedRecords( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void editInAddressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr encodeColumns( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.Selector groupDoubleAction( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.Selector nameDoubleAction( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void newGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr properties( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeAllProperties( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedIdentifiersForPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedRecords( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedValues( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectGroup_byExtendingSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, char byExtendingSelection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectIdentifier_forPerson_byExtendingSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier, NObjective.RuntimeObject forPerson, char byExtendingSelection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectInAddressBook_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectRecord_byExtendingSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record, char byExtendingSelection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAccessoryView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowsDirectoriesSearches_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char searches );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowsGroupEditing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char editing );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowsGroupSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowsIndividualValueSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowsMultipleSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAutosaveName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setColumnTitle_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject title, NObjective.RuntimeObject forProperty );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDisplayedProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setGroupDoubleAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector action );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNameDoubleAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector action );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTarget_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValueSelectionBehavior_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int behavior );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void sharedInit( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr target( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int valueSelectionBehavior( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char worksWhenModal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector accessoryView = "accessoryView";
			public static readonly Selector addFilter_title_identifier_ = "addFilter:title:identifier:";
			public static readonly Selector addProperty_ = "addProperty:";
			public static readonly Selector allowsDirectoriesSearches = "allowsDirectoriesSearches";
			public static readonly Selector allowsGroupEditing = "allowsGroupEditing";
			public static readonly Selector allowsGroupSelection = "allowsGroupSelection";
			public static readonly Selector allowsIndividualValueSelection = "allowsIndividualValueSelection";
			public static readonly Selector allowsMultipleSelection = "allowsMultipleSelection";
			public static readonly Selector autosaveName = "autosaveName";
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector clearSearchField_ = "clearSearchField:";
			public static readonly Selector collaborationIdentityForGUID_ = "collaborationIdentityForGUID:";
			public static readonly Selector collaborationIdentityForPerson_create_ = "collaborationIdentityForPerson:create:";
			public static readonly Selector columnTitleForProperty_ = "columnTitleForProperty:";
			public static readonly Selector decodeColumns_ = "decodeColumns:";
			public static readonly Selector deselectAll_ = "deselectAll:";
			public static readonly Selector deselectGroup_ = "deselectGroup:";
			public static readonly Selector deselectIdentifier_forPerson_ = "deselectIdentifier:forPerson:";
			public static readonly Selector deselectRecord_ = "deselectRecord:";
			public static readonly Selector dispatchGroupDoubleClick_ = "dispatchGroupDoubleClick:";
			public static readonly Selector dispatchGroupSelection_ = "dispatchGroupSelection:";
			public static readonly Selector dispatchNameDoubleClick_ = "dispatchNameDoubleClick:";
			public static readonly Selector dispatchNameSelection_ = "dispatchNameSelection:";
			public static readonly Selector dispatchPropertyChanged_ = "dispatchPropertyChanged:";
			public static readonly Selector dispatchValueSelection_ = "dispatchValueSelection:";
			public static readonly Selector displayedProperty = "displayedProperty";
			public static readonly Selector displayedRecords = "displayedRecords";
			public static readonly Selector editInAddressBook_ = "editInAddressBook:";
			public static readonly Selector encodeColumns = "encodeColumns";
			public static readonly Selector groupDoubleAction = "groupDoubleAction";
			public static readonly Selector nameDoubleAction = "nameDoubleAction";
			public static readonly Selector newGroup_ = "newGroup:";
			public static readonly Selector properties = "properties";
			public static readonly Selector removeAllProperties = "removeAllProperties";
			public static readonly Selector removeProperty_ = "removeProperty:";
			public static readonly Selector selectedGroups = "selectedGroups";
			public static readonly Selector selectedIdentifiersForPerson_ = "selectedIdentifiersForPerson:";
			public static readonly Selector selectedRecords = "selectedRecords";
			public static readonly Selector selectedValues = "selectedValues";
			public static readonly Selector selectGroup_byExtendingSelection_ = "selectGroup:byExtendingSelection:";
			public static readonly Selector selectIdentifier_forPerson_byExtendingSelection_ = "selectIdentifier:forPerson:byExtendingSelection:";
			public static readonly Selector selectInAddressBook_ = "selectInAddressBook:";
			public static readonly Selector selectRecord_byExtendingSelection_ = "selectRecord:byExtendingSelection:";
			public static readonly Selector setAccessoryView_ = "setAccessoryView:";
			public static readonly Selector setAllowsDirectoriesSearches_ = "setAllowsDirectoriesSearches:";
			public static readonly Selector setAllowsGroupEditing_ = "setAllowsGroupEditing:";
			public static readonly Selector setAllowsGroupSelection_ = "setAllowsGroupSelection:";
			public static readonly Selector setAllowsIndividualValueSelection_ = "setAllowsIndividualValueSelection:";
			public static readonly Selector setAllowsMultipleSelection_ = "setAllowsMultipleSelection:";
			public static readonly Selector setAutosaveName_ = "setAutosaveName:";
			public static readonly Selector setColumnTitle_forProperty_ = "setColumnTitle:forProperty:";
			public static readonly Selector setDisplayedProperty_ = "setDisplayedProperty:";
			public static readonly Selector setGroupDoubleAction_ = "setGroupDoubleAction:";
			public static readonly Selector setNameDoubleAction_ = "setNameDoubleAction:";
			public static readonly Selector setTarget_ = "setTarget:";
			public static readonly Selector setValueSelectionBehavior_ = "setValueSelectionBehavior:";
			public static readonly Selector sharedInit = "sharedInit";
			public static readonly Selector target = "target";
			public static readonly Selector valueSelectionBehavior = "valueSelectionBehavior";
			public static readonly Selector worksWhenModal = "worksWhenModal";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSTextFieldCell ) )]
	public struct ABPeopleTableTextFieldCell : IEquatable<ABPeopleTableTextFieldCell> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPeopleTableTextFieldCell;
		public static implicit operator NSTextFieldCell( ABPeopleTableTextFieldCell value ) {
			return new NSTextFieldCell( value.Handle );
		}
		public static implicit operator NSActionCell( ABPeopleTableTextFieldCell value ) {
			return new NSActionCell( value.Handle );
		}
		public static implicit operator NSCell( ABPeopleTableTextFieldCell value ) {
			return new NSCell( value.Handle );
		}
		public static implicit operator NSObject( ABPeopleTableTextFieldCell value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABPeopleTableTextFieldCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPeopleTableTextFieldCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABPeopleTableTextFieldCell?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABPeopleTableTextFieldCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPeopleTableTextFieldCell value1, ABPeopleTableTextFieldCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPeopleTableTextFieldCell value1, ABPeopleTableTextFieldCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPeopleTableTextFieldCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPeopleTableTextFieldCell alloc() {
			return new ABPeopleTableTextFieldCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void setDisableHighlight_( char highlight ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDisableHighlight_( Handle, CachedSelectors.setDisableHighlight_, out ___occuredException, sizeof( char ), highlight );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setModifiedSmartGroup_( char @group ) {
			RuntimeObject ___occuredException;
			NativeMethods.setModifiedSmartGroup_( Handle, CachedSelectors.setModifiedSmartGroup_, out ___occuredException, sizeof( char ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRoundedEdges_( int edges ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRoundedEdges_( Handle, CachedSelectors.setRoundedEdges_, out ___occuredException, sizeof( int ), edges );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDisableHighlight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char highlight );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setModifiedSmartGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @group );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRoundedEdges_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int edges );
		}
		static internal class CachedSelectors {
			public static readonly Selector setDisableHighlight_ = "setDisableHighlight:";
			public static readonly Selector setModifiedSmartGroup_ = "setModifiedSmartGroup:";
			public static readonly Selector setRoundedEdges_ = "setRoundedEdges:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABRecord ) )]
	public struct ABPerson : IEquatable<ABPerson> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPerson;
		public static implicit operator ABRecord( ABPerson value ) {
			return new ABRecord( value.Handle );
		}
		public static implicit operator NSObject( ABPerson value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABPerson value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPerson value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABPerson?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABPerson value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPerson value1, ABPerson value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPerson value1, ABPerson value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPerson( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPerson alloc() {
			return new ABPerson( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static int addPropertiesAndTypes_( NSDictionary types ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addPropertiesAndTypes_( ClassHandle, CachedSelectors.addPropertiesAndTypes_, out ___occuredException, sizeof( NSDictionary ), types );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject allPeopleWithRowNumbers() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allPeopleWithRowNumbers( ClassHandle, CachedSelectors.allPeopleWithRowNumbers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject builtInLabelsForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.builtInLabelsForProperty_( ClassHandle, CachedSelectors.builtInLabelsForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void cancelLoadingImageDataForTag_( int tag ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancelLoadingImageDataForTag_( ClassHandle, CachedSelectors.cancelLoadingImageDataForTag_, out ___occuredException, sizeof( int ), tag );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void clearPrivateFields() {
			RuntimeObject ___occuredException;
			NativeMethods.clearPrivateFields( ClassHandle, CachedSelectors.clearPrivateFields, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static char includeNotesInVCards() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.includeNotesInVCards( ClassHandle, CachedSelectors.includeNotesInVCards, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject initialFieldsForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initialFieldsForProperty_( ClassHandle, CachedSelectors.initialFieldsForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject nts_People() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_People( ClassHandle, CachedSelectors.nts_People, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject peopleFromVCardData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.peopleFromVCardData_( ClassHandle, CachedSelectors.peopleFromVCardData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject personFromDictionary_( NObjective.RuntimeObject dictionary ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.personFromDictionary_( ClassHandle, CachedSelectors.personFromDictionary_, out ___occuredException, sizeof( NObjective.RuntimeObject ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject personFromDictionary_skipUnknownProperties_generateMultiValueIDs_( NObjective.RuntimeObject dictionary, char skipUnknownProperties, char generateMultiValueIDs ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.personFromDictionary_skipUnknownProperties_generateMultiValueIDs_( ClassHandle, CachedSelectors.personFromDictionary_skipUnknownProperties_generateMultiValueIDs_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ), dictionary, skipUnknownProperties, generateMultiValueIDs );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static char privateVCardEnabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.privateVCardEnabled( ClassHandle, CachedSelectors.privateVCardEnabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NSArray properties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.properties( ClassHandle, CachedSelectors.properties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public static NObjective.RuntimeObject relatedMatchesForName_label_givenLastName_( NObjective.RuntimeObject name, NObjective.RuntimeObject label, NObjective.RuntimeObject givenLastName ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.relatedMatchesForName_label_givenLastName_( ClassHandle, CachedSelectors.relatedMatchesForName_label_givenLastName_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), name, label, givenLastName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static int removeProperties_( NSArray properties ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeProperties_( ClassHandle, CachedSelectors.removeProperties_, out ___occuredException, sizeof( NSArray ), properties );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static ABSearchElement searchElementForProperty_label_key_value_comparison_( string property, string label, string key, NObjective.RuntimeObject value, ABSearchComparison comparison ) {
			RuntimeObject ___occuredException;
			var ___wrappedproperty = Runtime.CreateStringProxy( property );
			var ___wrappedlabel = Runtime.CreateStringProxy( label );
			var ___wrappedkey = Runtime.CreateStringProxy( key );
			var ___result = NativeMethods.searchElementForProperty_label_key_value_comparison_( ClassHandle, CachedSelectors.searchElementForProperty_label_key_value_comparison_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( NObjective.RuntimeObject ) + sizeof( ABSearchComparison ), ___wrappedproperty, ___wrappedlabel, ___wrappedkey, value, comparison );
			Runtime.ReleaseNativeObject( ___wrappedproperty );
			Runtime.ReleaseNativeObject( ___wrappedlabel );
			Runtime.ReleaseNativeObject( ___wrappedkey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new ABSearchElement( ___result );
		}
		unsafe public static void setIncludeNotesInVCards_( char cards ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIncludeNotesInVCards_( ClassHandle, CachedSelectors.setIncludeNotesInVCards_, out ___occuredException, sizeof( char ), cards );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void setPrivateVCardEnabled_( char enabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPrivateVCardEnabled_( ClassHandle, CachedSelectors.setPrivateVCardEnabled_, out ___occuredException, sizeof( char ), enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void setVCardField_isPrivate_( NObjective.RuntimeObject field, char isPrivate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setVCardField_isPrivate_( ClassHandle, CachedSelectors.setVCardField_isPrivate_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), field, isPrivate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static ABPropertyType typeOfProperty_( string property ) {
			RuntimeObject ___occuredException;
			var ___wrappedproperty = Runtime.CreateStringProxy( property );
			var ___result = NativeMethods.typeOfProperty_( ClassHandle, CachedSelectors.typeOfProperty_, out ___occuredException, sizeof( IntPtr ), ___wrappedproperty );
			Runtime.ReleaseNativeObject( ___wrappedproperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( ABPropertyType ) ___result;
		}
		unsafe public static char vcardFieldisPrivate_( NObjective.RuntimeObject @private ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.vcardFieldisPrivate_( ClassHandle, CachedSelectors.vcardFieldisPrivate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @private );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char abHasSimilarAddress_( NObjective.RuntimeObject address ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abHasSimilarAddress_( Handle, CachedSelectors.abHasSimilarAddress_, out ___occuredException, sizeof( NObjective.RuntimeObject ), address );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject abUsedProperties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abUsedProperties( Handle, CachedSelectors.abUsedProperties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject alternateName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.alternateName( Handle, CachedSelectors.alternateName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void appendLabel_toVCardRep_inGroup_( NObjective.RuntimeObject label, NObjective.RuntimeObject toVCardRep, NObjective.RuntimeObject inGroup ) {
			RuntimeObject ___occuredException;
			NativeMethods.appendLabel_toVCardRep_inGroup_( Handle, CachedSelectors.appendLabel_toVCardRep_inGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), label, toVCardRep, inGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int beginLoadingImageDataForClient_( NObjective.RuntimeObject client ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.beginLoadingImageDataForClient_( Handle, CachedSelectors.beginLoadingImageDataForClient_, out ___occuredException, sizeof( NObjective.RuntimeObject ), client );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject categories() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.categories( Handle, CachedSelectors.categories, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject compositeName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compositeName( Handle, CachedSelectors.compositeName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject dotMacNames() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dotMacNames( Handle, CachedSelectors.dotMacNames, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject encodedDataForValue_charsetName_( NObjective.RuntimeObject value, System.IntPtr charsetName ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.encodedDataForValue_charsetName_( Handle, CachedSelectors.encodedDataForValue_charsetName_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), value, charsetName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject encodedLineForValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.encodedLineForValue_( Handle, CachedSelectors.encodedLineForValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasCustomImage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasCustomImage( Handle, CachedSelectors.hasCustomImage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSData imageData() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.imageData( Handle, CachedSelectors.imageData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithVCardRepresentation_( NSData representation ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithVCardRepresentation_( Handle, CachedSelectors.initWithVCardRepresentation_, out ___occuredException, sizeof( NSData ), representation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isEmptyPerson() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEmptyPerson( Handle, CachedSelectors.isEmptyPerson, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject ISO8061StringFromDate_( NObjective.RuntimeObject date ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ISO8061StringFromDate_( Handle, CachedSelectors.ISO8061StringFromDate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), date );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject mergedSimilarMultiValuesIn_forProperty_changes_( NObjective.RuntimeObject @in, NObjective.RuntimeObject forProperty, NObjective.RuntimeObject changes ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mergedSimilarMultiValuesIn_forProperty_changes_( Handle, CachedSelectors.mergedSimilarMultiValuesIn_forProperty_changes_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @in, forProperty, changes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void mergeMultiValue_forProperty_( NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty ) {
			RuntimeObject ___occuredException;
			NativeMethods.mergeMultiValue_forProperty_( Handle, CachedSelectors.mergeMultiValue_forProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void mergeNote_( NObjective.RuntimeObject note ) {
			RuntimeObject ___occuredException;
			NativeMethods.mergeNote_( Handle, CachedSelectors.mergeNote_, out ___occuredException, sizeof( NObjective.RuntimeObject ), note );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void mergeSingleValue_forProperty_( NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty ) {
			RuntimeObject ___occuredException;
			NativeMethods.mergeSingleValue_forProperty_( Handle, CachedSelectors.mergeSingleValue_forProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nts__fullName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts__fullName( Handle, CachedSelectors.nts__fullName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts__fullPhoneticName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts__fullPhoneticName( Handle, CachedSelectors.nts__fullPhoneticName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts__isLastNameFirst() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts__isLastNameFirst( Handle, CachedSelectors.nts__isLastNameFirst, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nts_AlternateName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_AlternateName( Handle, CachedSelectors.nts_AlternateName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_ConcatenateMultiDictionaryProperty_toString_( NObjective.RuntimeObject property, NObjective.RuntimeObject toString ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_ConcatenateMultiDictionaryProperty_toString_( Handle, CachedSelectors.nts_ConcatenateMultiDictionaryProperty_toString_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, toString );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_ConcatenateMultiStringProperty_toString_( NObjective.RuntimeObject property, NObjective.RuntimeObject toString ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_ConcatenateMultiStringProperty_toString_( Handle, CachedSelectors.nts_ConcatenateMultiStringProperty_toString_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, toString );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_ConcatenatePhoneProperty_toString_( NObjective.RuntimeObject property, NObjective.RuntimeObject toString ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_ConcatenatePhoneProperty_toString_( Handle, CachedSelectors.nts_ConcatenatePhoneProperty_toString_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, toString );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_ConcatenateRelatedProperty_toString_( NObjective.RuntimeObject property, NObjective.RuntimeObject toString ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_ConcatenateRelatedProperty_toString_( Handle, CachedSelectors.nts_ConcatenateRelatedProperty_toString_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, toString );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_ConcatenateStringProperty_toString_( NObjective.RuntimeObject property, NObjective.RuntimeObject toString ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_ConcatenateStringProperty_toString_( Handle, CachedSelectors.nts_ConcatenateStringProperty_toString_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, toString );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nts_PathForUIDTaggedImage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_PathForUIDTaggedImage( Handle, CachedSelectors.nts_PathForUIDTaggedImage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts_SetImageData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SetImageData_( Handle, CachedSelectors.nts_SetImageData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject pathForUIDTaggedImage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pathForUIDTaggedImage( Handle, CachedSelectors.pathForUIDTaggedImage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void populateWithDictionary_skipUnknownProperties_generateMultiValueIDs_recordIsNew_( NObjective.RuntimeObject dictionary, char skipUnknownProperties, char generateMultiValueIDs, char recordIsNew ) {
			RuntimeObject ___occuredException;
			NativeMethods.populateWithDictionary_skipUnknownProperties_generateMultiValueIDs_recordIsNew_( Handle, CachedSelectors.populateWithDictionary_skipUnknownProperties_generateMultiValueIDs_recordIsNew_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ) + sizeof( char ), dictionary, skipUnknownProperties, generateMultiValueIDs, recordIsNew );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject propertyLineForGenericABProperty_vCardProperty_is21_groupCount_( NObjective.RuntimeObject property, NObjective.RuntimeObject vCardProperty, char is21, System.IntPtr groupCount ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyLineForGenericABProperty_vCardProperty_is21_groupCount_( Handle, CachedSelectors.propertyLineForGenericABProperty_vCardProperty_is21_groupCount_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( System.IntPtr ), property, vCardProperty, is21, groupCount );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject propertyLineForGenericABProperty21_vCardProperty_( NObjective.RuntimeObject property21, NObjective.RuntimeObject vCardProperty ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyLineForGenericABProperty21_vCardProperty_( Handle, CachedSelectors.propertyLineForGenericABProperty21_vCardProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property21, vCardProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject relatedMatchesForIdentifier_( NObjective.RuntimeObject identifier ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.relatedMatchesForIdentifier_( Handle, CachedSelectors.relatedMatchesForIdentifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ), identifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void resetWithDictionary_skipUnknownProperties_generateMultiValueIDs_( NObjective.RuntimeObject dictionary, char skipUnknownProperties, char generateMultiValueIDs ) {
			RuntimeObject ___occuredException;
			NativeMethods.resetWithDictionary_skipUnknownProperties_generateMultiValueIDs_( Handle, CachedSelectors.resetWithDictionary_skipUnknownProperties_generateMultiValueIDs_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ), dictionary, skipUnknownProperties, generateMultiValueIDs );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCategories_( NObjective.RuntimeObject categories ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCategories_( Handle, CachedSelectors.setCategories_, out ___occuredException, sizeof( NObjective.RuntimeObject ), categories );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool setImageData_( NSData data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setImageData_( Handle, CachedSelectors.setImageData_, out ___occuredException, sizeof( NSData ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject similarNameForHashing() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.similarNameForHashing( Handle, CachedSelectors.similarNameForHashing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject slowFirstLastSorting_part1_( char sorting, char part1 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.slowFirstLastSorting_part1_( Handle, CachedSelectors.slowFirstLastSorting_part1_, out ___occuredException, sizeof( char ) + sizeof( char ), sorting, part1 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void updateMultiValue_forProperty_changes_( NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty, NObjective.RuntimeObject changes ) {
			RuntimeObject ___occuredException;
			NativeMethods.updateMultiValue_forProperty_changes_( Handle, CachedSelectors.updateMultiValue_forProperty_changes_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forProperty, changes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateNote_changes_( NObjective.RuntimeObject note, NObjective.RuntimeObject changes ) {
			RuntimeObject ___occuredException;
			NativeMethods.updateNote_changes_( Handle, CachedSelectors.updateNote_changes_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), note, changes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateSingleValue_forProperty_changes_( NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty, NObjective.RuntimeObject changes ) {
			RuntimeObject ___occuredException;
			NativeMethods.updateSingleValue_forProperty_changes_( Handle, CachedSelectors.updateSingleValue_forProperty_changes_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forProperty, changes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSData vCardRepresentation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.vCardRepresentation( Handle, CachedSelectors.vCardRepresentation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char abHasSimilarAddress_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject address );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abUsedProperties( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int addPropertiesAndTypes_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary types );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allPeopleWithRowNumbers( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr alternateName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void appendLabel_toVCardRep_inGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject label, NObjective.RuntimeObject toVCardRep, NObjective.RuntimeObject inGroup );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int beginLoadingImageDataForClient_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject client );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr builtInLabelsForProperty_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancelLoadingImageDataForTag_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int tag );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr categories( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clearPrivateFields( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr compositeName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dotMacNames( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr encodedDataForValue_charsetName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, System.IntPtr charsetName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr encodedLineForValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasCustomImage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr imageData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char includeNotesInVCards( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initialFieldsForProperty_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithVCardRepresentation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData representation );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isEmptyPerson( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr ISO8061StringFromDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject date );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mergedSimilarMultiValuesIn_forProperty_changes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @in, NObjective.RuntimeObject forProperty, NObjective.RuntimeObject changes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void mergeMultiValue_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void mergeNote_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject note );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void mergeSingleValue_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts__fullName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts__fullPhoneticName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts__isLastNameFirst( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_AlternateName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_ConcatenateMultiDictionaryProperty_toString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject toString );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_ConcatenateMultiStringProperty_toString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject toString );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_ConcatenatePhoneProperty_toString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject toString );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_ConcatenateRelatedProperty_toString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject toString );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_ConcatenateStringProperty_toString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject toString );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_PathForUIDTaggedImage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_People( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_SetImageData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pathForUIDTaggedImage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr peopleFromVCardData_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr personFromDictionary_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr personFromDictionary_skipUnknownProperties_generateMultiValueIDs_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary, char skipUnknownProperties, char generateMultiValueIDs );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void populateWithDictionary_skipUnknownProperties_generateMultiValueIDs_recordIsNew_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary, char skipUnknownProperties, char generateMultiValueIDs, char recordIsNew );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char privateVCardEnabled( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr properties( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr propertyLineForGenericABProperty_vCardProperty_is21_groupCount_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject vCardProperty, char is21, System.IntPtr groupCount );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr propertyLineForGenericABProperty21_vCardProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property21, NObjective.RuntimeObject vCardProperty );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr relatedMatchesForIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr relatedMatchesForName_label_givenLastName_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, NObjective.RuntimeObject label, NObjective.RuntimeObject givenLastName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int removeProperties_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray properties );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resetWithDictionary_skipUnknownProperties_generateMultiValueIDs_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary, char skipUnknownProperties, char generateMultiValueIDs );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr searchElementForProperty_label_key_value_comparison_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr property, IntPtr label, IntPtr key, NObjective.RuntimeObject value, ABSearchComparison comparison );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCategories_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject categories );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool setImageData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setIncludeNotesInVCards_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char cards );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPrivateVCardEnabled_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char enabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setVCardField_isPrivate_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject field, char isPrivate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr similarNameForHashing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr slowFirstLastSorting_part1_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char sorting, char part1 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int typeOfProperty_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateMultiValue_forProperty_changes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty, NObjective.RuntimeObject changes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateNote_changes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject note, NObjective.RuntimeObject changes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateSingleValue_forProperty_changes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty, NObjective.RuntimeObject changes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char vcardFieldisPrivate_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @private );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr vCardRepresentation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector abHasSimilarAddress_ = "abHasSimilarAddress:";
			public static readonly Selector abUsedProperties = "abUsedProperties";
			public static readonly Selector addPropertiesAndTypes_ = "addPropertiesAndTypes:";
			public static readonly Selector allPeopleWithRowNumbers = "allPeopleWithRowNumbers";
			public static readonly Selector alternateName = "alternateName";
			public static readonly Selector appendLabel_toVCardRep_inGroup_ = "appendLabel:toVCardRep:inGroup:";
			public static readonly Selector beginLoadingImageDataForClient_ = "beginLoadingImageDataForClient:";
			public static readonly Selector builtInLabelsForProperty_ = "builtInLabelsForProperty:";
			public static readonly Selector cancelLoadingImageDataForTag_ = "cancelLoadingImageDataForTag:";
			public static readonly Selector categories = "categories";
			public static readonly Selector clearPrivateFields = "clearPrivateFields";
			public static readonly Selector compositeName = "compositeName";
			public static readonly Selector dotMacNames = "dotMacNames";
			public static readonly Selector encodedDataForValue_charsetName_ = "encodedDataForValue:charsetName:";
			public static readonly Selector encodedLineForValue_ = "encodedLineForValue:";
			public static readonly Selector hasCustomImage = "hasCustomImage";
			public static readonly Selector imageData = "imageData";
			public static readonly Selector includeNotesInVCards = "includeNotesInVCards";
			public static readonly Selector initialFieldsForProperty_ = "initialFieldsForProperty:";
			public static readonly Selector initWithVCardRepresentation_ = "initWithVCardRepresentation:";
			public static readonly Selector isEmptyPerson = "isEmptyPerson";
			public static readonly Selector ISO8061StringFromDate_ = "ISO8061StringFromDate:";
			public static readonly Selector mergedSimilarMultiValuesIn_forProperty_changes_ = "mergedSimilarMultiValuesIn:forProperty:changes:";
			public static readonly Selector mergeMultiValue_forProperty_ = "mergeMultiValue:forProperty:";
			public static readonly Selector mergeNote_ = "mergeNote:";
			public static readonly Selector mergeSingleValue_forProperty_ = "mergeSingleValue:forProperty:";
			public static readonly Selector nts__fullName = "nts__fullName";
			public static readonly Selector nts__fullPhoneticName = "nts__fullPhoneticName";
			public static readonly Selector nts__isLastNameFirst = "nts__isLastNameFirst";
			public static readonly Selector nts_AlternateName = "nts_AlternateName";
			public static readonly Selector nts_ConcatenateMultiDictionaryProperty_toString_ = "nts_ConcatenateMultiDictionaryProperty:toString:";
			public static readonly Selector nts_ConcatenateMultiStringProperty_toString_ = "nts_ConcatenateMultiStringProperty:toString:";
			public static readonly Selector nts_ConcatenatePhoneProperty_toString_ = "nts_ConcatenatePhoneProperty:toString:";
			public static readonly Selector nts_ConcatenateRelatedProperty_toString_ = "nts_ConcatenateRelatedProperty:toString:";
			public static readonly Selector nts_ConcatenateStringProperty_toString_ = "nts_ConcatenateStringProperty:toString:";
			public static readonly Selector nts_PathForUIDTaggedImage = "nts_PathForUIDTaggedImage";
			public static readonly Selector nts_People = "nts_People";
			public static readonly Selector nts_SetImageData_ = "nts_SetImageData:";
			public static readonly Selector pathForUIDTaggedImage = "pathForUIDTaggedImage";
			public static readonly Selector peopleFromVCardData_ = "peopleFromVCardData:";
			public static readonly Selector personFromDictionary_ = "personFromDictionary:";
			public static readonly Selector personFromDictionary_skipUnknownProperties_generateMultiValueIDs_ = "personFromDictionary:skipUnknownProperties:generateMultiValueIDs:";
			public static readonly Selector populateWithDictionary_skipUnknownProperties_generateMultiValueIDs_recordIsNew_ = "populateWithDictionary:skipUnknownProperties:generateMultiValueIDs:recordIsNew:";
			public static readonly Selector privateVCardEnabled = "privateVCardEnabled";
			public static readonly Selector properties = "properties";
			public static readonly Selector propertyLineForGenericABProperty_vCardProperty_is21_groupCount_ = "propertyLineForGenericABProperty:vCardProperty:is21:groupCount:";
			public static readonly Selector propertyLineForGenericABProperty21_vCardProperty_ = "propertyLineForGenericABProperty21:vCardProperty:";
			public static readonly Selector relatedMatchesForIdentifier_ = "relatedMatchesForIdentifier:";
			public static readonly Selector relatedMatchesForName_label_givenLastName_ = "relatedMatchesForName:label:givenLastName:";
			public static readonly Selector removeProperties_ = "removeProperties:";
			public static readonly Selector resetWithDictionary_skipUnknownProperties_generateMultiValueIDs_ = "resetWithDictionary:skipUnknownProperties:generateMultiValueIDs:";
			public static readonly Selector searchElementForProperty_label_key_value_comparison_ = "searchElementForProperty:label:key:value:comparison:";
			public static readonly Selector setCategories_ = "setCategories:";
			public static readonly Selector setImageData_ = "setImageData:";
			public static readonly Selector setIncludeNotesInVCards_ = "setIncludeNotesInVCards:";
			public static readonly Selector setPrivateVCardEnabled_ = "setPrivateVCardEnabled:";
			public static readonly Selector setVCardField_isPrivate_ = "setVCardField:isPrivate:";
			public static readonly Selector similarNameForHashing = "similarNameForHashing";
			public static readonly Selector slowFirstLastSorting_part1_ = "slowFirstLastSorting:part1:";
			public static readonly Selector typeOfProperty_ = "typeOfProperty:";
			public static readonly Selector updateMultiValue_forProperty_changes_ = "updateMultiValue:forProperty:changes:";
			public static readonly Selector updateNote_changes_ = "updateNote:changes:";
			public static readonly Selector updateSingleValue_forProperty_changes_ = "updateSingleValue:forProperty:changes:";
			public static readonly Selector vcardFieldisPrivate_ = "vcardFieldisPrivate:";
			public static readonly Selector vCardRepresentation = "vCardRepresentation";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSImageView ) )]
	public struct ABPersonImageView : IEquatable<ABPersonImageView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPersonImageView;
		public static implicit operator NSImageView( ABPersonImageView value ) {
			return new NSImageView( value.Handle );
		}
		public static implicit operator NSControl( ABPersonImageView value ) {
			return new NSControl( value.Handle );
		}
		public static implicit operator NSView( ABPersonImageView value ) {
			return new NSView( value.Handle );
		}
		public static implicit operator NSResponder( ABPersonImageView value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABPersonImageView value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABPersonImageView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPersonImageView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABPersonImageView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABPersonImageView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPersonImageView value1, ABPersonImageView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPersonImageView value1, ABPersonImageView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPersonImageView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPersonImageView alloc() {
			return new ABPersonImageView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject accessibleChildren() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibleChildren( Handle, CachedSelectors.accessibleChildren, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void databaseChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.databaseChanged_( Handle, CachedSelectors.databaseChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject displayImageInPicker_( NObjective.RuntimeObject picker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.displayImageInPicker_( Handle, CachedSelectors.displayImageInPicker_, out ___occuredException, sizeof( NObjective.RuntimeObject ), picker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject displayTitleInPicker_( NObjective.RuntimeObject picker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.displayTitleInPicker_( Handle, CachedSelectors.displayTitleInPicker_, out ___occuredException, sizeof( NObjective.RuntimeObject ), picker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void doDelete_( NObjective.RuntimeObject delete ) {
			RuntimeObject ___occuredException;
			NativeMethods.doDelete_( Handle, CachedSelectors.doDelete_, out ___occuredException, sizeof( NObjective.RuntimeObject ), delete );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char empty() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.empty( Handle, CachedSelectors.empty, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void errorInSetImageFromPath() {
			RuntimeObject ___occuredException;
			NativeMethods.errorInSetImageFromPath( Handle, CachedSelectors.errorInSetImageFromPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void imagePicker_selectedImage_( NObjective.RuntimeObject picker, NObjective.RuntimeObject selectedImage ) {
			RuntimeObject ___occuredException;
			NativeMethods.imagePicker_selectedImage_( Handle, CachedSelectors.imagePicker_selectedImage_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), picker, selectedImage );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void imagePickerCanceled_( NObjective.RuntimeObject canceled ) {
			RuntimeObject ___occuredException;
			NativeMethods.imagePickerCanceled_( Handle, CachedSelectors.imagePickerCanceled_, out ___occuredException, sizeof( NObjective.RuntimeObject ), canceled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void issueSetImageCommandWithData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			NativeMethods.issueSetImageCommandWithData_( Handle, CachedSelectors.issueSetImageCommandWithData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject pathNameForImage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pathNameForImage( Handle, CachedSelectors.pathNameForImage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void savePanelDidEnd_returnCode_contextInfo_( NObjective.RuntimeObject end, int returnCode, System.IntPtr contextInfo ) {
			RuntimeObject ___occuredException;
			NativeMethods.savePanelDidEnd_returnCode_contextInfo_( Handle, CachedSelectors.savePanelDidEnd_returnCode_contextInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( System.IntPtr ), end, returnCode, contextInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEmpty_( char empty ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEmpty_( Handle, CachedSelectors.setEmpty_, out ___occuredException, sizeof( char ), empty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setImageFromPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			NativeMethods.setImageFromPath_( Handle, CachedSelectors.setImageFromPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setIsMe_( char me ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIsMe_( Handle, CachedSelectors.setIsMe_, out ___occuredException, sizeof( char ), me );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNoImage_( char image ) {
			RuntimeObject ___occuredException;
			NativeMethods.setNoImage_( Handle, CachedSelectors.setNoImage_, out ___occuredException, sizeof( char ), image );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showPicker() {
			RuntimeObject ___occuredException;
			NativeMethods.showPicker( Handle, CachedSelectors.showPicker, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibleChildren( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void databaseChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr displayImageInPicker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject picker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr displayTitleInPicker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject picker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void doDelete_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject delete );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char empty( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void errorInSetImageFromPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void imagePicker_selectedImage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject picker, NObjective.RuntimeObject selectedImage );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void imagePickerCanceled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject canceled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void issueSetImageCommandWithData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pathNameForImage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void savePanelDidEnd_returnCode_contextInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject end, int returnCode, System.IntPtr contextInfo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEmpty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char empty );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setImageFromPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setIsMe_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char me );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNoImage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char image );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void showPicker( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector accessibleChildren = "accessibleChildren";
			public static readonly Selector databaseChanged_ = "databaseChanged:";
			public static readonly Selector displayImageInPicker_ = "displayImageInPicker:";
			public static readonly Selector displayTitleInPicker_ = "displayTitleInPicker:";
			public static readonly Selector doDelete_ = "doDelete:";
			public static readonly Selector empty = "empty";
			public static readonly Selector errorInSetImageFromPath = "errorInSetImageFromPath";
			public static readonly Selector imagePicker_selectedImage_ = "imagePicker:selectedImage:";
			public static readonly Selector imagePickerCanceled_ = "imagePickerCanceled:";
			public static readonly Selector issueSetImageCommandWithData_ = "issueSetImageCommandWithData:";
			public static readonly Selector pathNameForImage = "pathNameForImage";
			public static readonly Selector savePanelDidEnd_returnCode_contextInfo_ = "savePanelDidEnd:returnCode:contextInfo:";
			public static readonly Selector setEmpty_ = "setEmpty:";
			public static readonly Selector setImageFromPath_ = "setImageFromPath:";
			public static readonly Selector setIsMe_ = "setIsMe:";
			public static readonly Selector setNoImage_ = "setNoImage:";
			public static readonly Selector showPicker = "showPicker";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSFormatter ) )]
	public struct ABPhoneFormatter : IEquatable<ABPhoneFormatter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPhoneFormatter;
		public static implicit operator NSFormatter( ABPhoneFormatter value ) {
			return new NSFormatter( value.Handle );
		}
		public static implicit operator NSObject( ABPhoneFormatter value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABPhoneFormatter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPhoneFormatter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABPhoneFormatter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABPhoneFormatter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPhoneFormatter value1, ABPhoneFormatter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPhoneFormatter value1, ABPhoneFormatter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPhoneFormatter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPhoneFormatter alloc() {
			return new ABPhoneFormatter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject allowableCharacters() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowableCharacters( ClassHandle, CachedSelectors.allowableCharacters, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject nonAllowableCharacters() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nonAllowableCharacters( ClassHandle, CachedSelectors.nonAllowableCharacters, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject phoneFormatsDictionary() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.phoneFormatsDictionary( ClassHandle, CachedSelectors.phoneFormatsDictionary, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addFormat_( NObjective.RuntimeObject format ) {
			RuntimeObject ___occuredException;
			NativeMethods.addFormat_( Handle, CachedSelectors.addFormat_, out ___occuredException, sizeof( NObjective.RuntimeObject ), format );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char edited() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.edited( Handle, CachedSelectors.edited, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char enabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.enabled( Handle, CachedSelectors.enabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject formatAutosaveName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.formatAutosaveName( Handle, CachedSelectors.formatAutosaveName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject formats() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.formats( Handle, CachedSelectors.formats, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void insertFormat_atIndex_( NObjective.RuntimeObject format, uint atIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertFormat_atIndex_( Handle, CachedSelectors.insertFormat_atIndex_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), format, atIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveFormatAtIndex_toIndex_( uint index, uint toIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveFormatAtIndex_toIndex_( Handle, CachedSelectors.moveFormatAtIndex_toIndex_, out ___occuredException, sizeof( uint ) + sizeof( uint ), index, toIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeAllFormats() {
			RuntimeObject ___occuredException;
			NativeMethods.removeAllFormats( Handle, CachedSelectors.removeAllFormats, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeFormatAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeFormatAtIndex_( Handle, CachedSelectors.removeFormatAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void replaceFormatAtIndex_withFormat_( uint index, NObjective.RuntimeObject withFormat ) {
			RuntimeObject ___occuredException;
			NativeMethods.replaceFormatAtIndex_withFormat_( Handle, CachedSelectors.replaceFormatAtIndex_withFormat_, out ___occuredException, sizeof( uint ) + sizeof( NObjective.RuntimeObject ), index, withFormat );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEdited_( char edited ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEdited_( Handle, CachedSelectors.setEdited_, out ___occuredException, sizeof( char ), edited );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEnabled_( char enabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEnabled_( Handle, CachedSelectors.setEnabled_, out ___occuredException, sizeof( char ), enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFormatAutosaveName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFormatAutosaveName_( Handle, CachedSelectors.setFormatAutosaveName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addFormat_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject format );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allowableCharacters( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char edited( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char enabled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr formatAutosaveName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr formats( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertFormat_atIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject format, uint atIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveFormatAtIndex_toIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index, uint toIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nonAllowableCharacters( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr phoneFormatsDictionary( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeAllFormats( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeFormatAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceFormatAtIndex_withFormat_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index, NObjective.RuntimeObject withFormat );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEdited_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char edited );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEnabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char enabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFormatAutosaveName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
		}
		static internal class CachedSelectors {
			public static readonly Selector addFormat_ = "addFormat:";
			public static readonly Selector allowableCharacters = "allowableCharacters";
			public static readonly Selector edited = "edited";
			public static readonly Selector enabled = "enabled";
			public static readonly Selector formatAutosaveName = "formatAutosaveName";
			public static readonly Selector formats = "formats";
			public static readonly Selector insertFormat_atIndex_ = "insertFormat:atIndex:";
			public static readonly Selector moveFormatAtIndex_toIndex_ = "moveFormatAtIndex:toIndex:";
			public static readonly Selector nonAllowableCharacters = "nonAllowableCharacters";
			public static readonly Selector phoneFormatsDictionary = "phoneFormatsDictionary";
			public static readonly Selector removeAllFormats = "removeAllFormats";
			public static readonly Selector removeFormatAtIndex_ = "removeFormatAtIndex:";
			public static readonly Selector replaceFormatAtIndex_withFormat_ = "replaceFormatAtIndex:withFormat:";
			public static readonly Selector setEdited_ = "setEdited:";
			public static readonly Selector setEnabled_ = "setEnabled:";
			public static readonly Selector setFormatAutosaveName_ = "setFormatAutosaveName:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSPopUpButtonCell ) )]
	public struct ABPopUpButtonCell : IEquatable<ABPopUpButtonCell> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPopUpButtonCell;
		public static implicit operator NSPopUpButtonCell( ABPopUpButtonCell value ) {
			return new NSPopUpButtonCell( value.Handle );
		}
		public static implicit operator NSMenuItemCell( ABPopUpButtonCell value ) {
			return new NSMenuItemCell( value.Handle );
		}
		public static implicit operator NSButtonCell( ABPopUpButtonCell value ) {
			return new NSButtonCell( value.Handle );
		}
		public static implicit operator NSActionCell( ABPopUpButtonCell value ) {
			return new NSActionCell( value.Handle );
		}
		public static implicit operator NSCell( ABPopUpButtonCell value ) {
			return new NSCell( value.Handle );
		}
		public static implicit operator NSObject( ABPopUpButtonCell value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABPopUpButtonCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPopUpButtonCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABPopUpButtonCell?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABPopUpButtonCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPopUpButtonCell value1, ABPopUpButtonCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPopUpButtonCell value1, ABPopUpButtonCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPopUpButtonCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPopUpButtonCell alloc() {
			return new ABPopUpButtonCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject attachment() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attachment( Handle, CachedSelectors.attachment, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithTitle_inputController_( NObjective.RuntimeObject title, NObjective.RuntimeObject inputController ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithTitle_inputController_( Handle, CachedSelectors.initWithTitle_inputController_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), title, inputController );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject inputController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.inputController( Handle, CachedSelectors.inputController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void redisplayPopup() {
			RuntimeObject ___occuredException;
			NativeMethods.redisplayPopup( Handle, CachedSelectors.redisplayPopup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAttachment_( NObjective.RuntimeObject attachment ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAttachment_( Handle, CachedSelectors.setAttachment_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attachment );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateWidth() {
			RuntimeObject ___occuredException;
			NativeMethods.updateWidth( Handle, CachedSelectors.updateWidth, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char wantsToTrackMouse() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.wantsToTrackMouse( Handle, CachedSelectors.wantsToTrackMouse, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attachment( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithTitle_inputController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject title, NObjective.RuntimeObject inputController );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr inputController( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void redisplayPopup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAttachment_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attachment );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateWidth( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char wantsToTrackMouse( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector attachment = "attachment";
			public static readonly Selector initWithTitle_inputController_ = "initWithTitle:inputController:";
			public static readonly Selector inputController = "inputController";
			public static readonly Selector redisplayPopup = "redisplayPopup";
			public static readonly Selector setAttachment_ = "setAttachment:";
			public static readonly Selector updateWidth = "updateWidth";
			public static readonly Selector wantsToTrackMouse = "wantsToTrackMouse";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSCell ) )]
	public struct ABProgressWedgeCell : IEquatable<ABProgressWedgeCell> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABProgressWedgeCell;
		public static implicit operator NSCell( ABProgressWedgeCell value ) {
			return new NSCell( value.Handle );
		}
		public static implicit operator NSObject( ABProgressWedgeCell value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABProgressWedgeCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABProgressWedgeCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABProgressWedgeCell?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABProgressWedgeCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABProgressWedgeCell value1, ABProgressWedgeCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABProgressWedgeCell value1, ABProgressWedgeCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABProgressWedgeCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABProgressWedgeCell alloc() {
			return new ABProgressWedgeCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void animateIndeterminateProgressToStop() {
			RuntimeObject ___occuredException;
			NativeMethods.animateIndeterminateProgressToStop( ClassHandle, CachedSelectors.animateIndeterminateProgressToStop, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static char indeterminateAnimationIsParked() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indeterminateAnimationIsParked( ClassHandle, CachedSelectors.indeterminateAnimationIsParked, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static void restartIndeterminateCycle() {
			RuntimeObject ___occuredException;
			NativeMethods.restartIndeterminateCycle( ClassHandle, CachedSelectors.restartIndeterminateCycle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject alternateColor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.alternateColor( Handle, CachedSelectors.alternateColor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject color() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.color( Handle, CachedSelectors.color, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isAButtonWhenNotProgressing() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isAButtonWhenNotProgressing( Handle, CachedSelectors.isAButtonWhenNotProgressing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isIndeterminate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isIndeterminate( Handle, CachedSelectors.isIndeterminate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float progress() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.progress( Handle, CachedSelectors.progress, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setAlternateColor_( NObjective.RuntimeObject color ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlternateColor_( Handle, CachedSelectors.setAlternateColor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), color );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setColor_( NObjective.RuntimeObject color ) {
			RuntimeObject ___occuredException;
			NativeMethods.setColor_( Handle, CachedSelectors.setColor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), color );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setIndeterminate_( char indeterminate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIndeterminate_( Handle, CachedSelectors.setIndeterminate_, out ___occuredException, sizeof( char ), indeterminate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setIsAButtonWhenNotProgressing_( char progressing ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIsAButtonWhenNotProgressing_( Handle, CachedSelectors.setIsAButtonWhenNotProgressing_, out ___occuredException, sizeof( char ), progressing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setProgress_( float progress ) {
			RuntimeObject ___occuredException;
			NativeMethods.setProgress_( Handle, CachedSelectors.setProgress_, out ___occuredException, sizeof( float ), progress );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUsesArrowStyle_( char style ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUsesArrowStyle_( Handle, CachedSelectors.setUsesArrowStyle_, out ___occuredException, sizeof( char ), style );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char usesArrowStyle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.usesArrowStyle( Handle, CachedSelectors.usesArrowStyle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr alternateColor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void animateIndeterminateProgressToStop( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr color( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char indeterminateAnimationIsParked( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isAButtonWhenNotProgressing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isIndeterminate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float progress( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void restartIndeterminateCycle( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlternateColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject color );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject color );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setIndeterminate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char indeterminate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setIsAButtonWhenNotProgressing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char progressing );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setProgress_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float progress );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUsesArrowStyle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char style );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char usesArrowStyle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector alternateColor = "alternateColor";
			public static readonly Selector animateIndeterminateProgressToStop = "animateIndeterminateProgressToStop";
			public static readonly Selector color = "color";
			public static readonly Selector indeterminateAnimationIsParked = "indeterminateAnimationIsParked";
			public static readonly Selector isAButtonWhenNotProgressing = "isAButtonWhenNotProgressing";
			public static readonly Selector isIndeterminate = "isIndeterminate";
			public static readonly Selector progress = "progress";
			public static readonly Selector restartIndeterminateCycle = "restartIndeterminateCycle";
			public static readonly Selector setAlternateColor_ = "setAlternateColor:";
			public static readonly Selector setColor_ = "setColor:";
			public static readonly Selector setIndeterminate_ = "setIndeterminate:";
			public static readonly Selector setIsAButtonWhenNotProgressing_ = "setIsAButtonWhenNotProgressing:";
			public static readonly Selector setProgress_ = "setProgress:";
			public static readonly Selector setUsesArrowStyle_ = "setUsesArrowStyle:";
			public static readonly Selector usesArrowStyle = "usesArrowStyle";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSTableHeaderCell ) )]
	public struct ABPropertyHeaderCell : IEquatable<ABPropertyHeaderCell> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPropertyHeaderCell;
		public static implicit operator NSTableHeaderCell( ABPropertyHeaderCell value ) {
			return new NSTableHeaderCell( value.Handle );
		}
		public static implicit operator NSTextFieldCell( ABPropertyHeaderCell value ) {
			return new NSTextFieldCell( value.Handle );
		}
		public static implicit operator NSActionCell( ABPropertyHeaderCell value ) {
			return new NSActionCell( value.Handle );
		}
		public static implicit operator NSCell( ABPropertyHeaderCell value ) {
			return new NSCell( value.Handle );
		}
		public static implicit operator NSObject( ABPropertyHeaderCell value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABPropertyHeaderCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPropertyHeaderCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABPropertyHeaderCell?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABPropertyHeaderCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPropertyHeaderCell value1, ABPropertyHeaderCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPropertyHeaderCell value1, ABPropertyHeaderCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPropertyHeaderCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPropertyHeaderCell alloc() {
			return new ABPropertyHeaderCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addItemWithTitle_andIdentifier_( NObjective.RuntimeObject title, NObjective.RuntimeObject andIdentifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.addItemWithTitle_andIdentifier_( Handle, CachedSelectors.addItemWithTitle_andIdentifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), title, andIdentifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int indexOfIdentifier_( NObjective.RuntimeObject identifier ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfIdentifier_( Handle, CachedSelectors.indexOfIdentifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ), identifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject popup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.popup( Handle, CachedSelectors.popup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void removeAllItems() {
			RuntimeObject ___occuredException;
			NativeMethods.removeAllItems( Handle, CachedSelectors.removeAllItems, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeItemWithIdentifier_( NObjective.RuntimeObject identifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeItemWithIdentifier_( Handle, CachedSelectors.removeItemWithIdentifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ), identifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectItemWithIdentifier_( NObjective.RuntimeObject identifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectItemWithIdentifier_( Handle, CachedSelectors.selectItemWithIdentifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ), identifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTitle_ofItemWithIdentifier_( NObjective.RuntimeObject title, NObjective.RuntimeObject ofItemWithIdentifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTitle_ofItemWithIdentifier_( Handle, CachedSelectors.setTitle_ofItemWithIdentifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), title, ofItemWithIdentifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addItemWithTitle_andIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject title, NObjective.RuntimeObject andIdentifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int indexOfIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr popup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeAllItems( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeItemWithIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectItemWithIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTitle_ofItemWithIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject title, NObjective.RuntimeObject ofItemWithIdentifier );
		}
		static internal class CachedSelectors {
			public static readonly Selector addItemWithTitle_andIdentifier_ = "addItemWithTitle:andIdentifier:";
			public static readonly Selector indexOfIdentifier_ = "indexOfIdentifier:";
			public static readonly Selector popup = "popup";
			public static readonly Selector removeAllItems = "removeAllItems";
			public static readonly Selector removeItemWithIdentifier_ = "removeItemWithIdentifier:";
			public static readonly Selector selectItemWithIdentifier_ = "selectItemWithIdentifier:";
			public static readonly Selector setTitle_ofItemWithIdentifier_ = "setTitle:ofItemWithIdentifier:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSTableHeaderView ) )]
	public struct ABPropertyHeaderView : IEquatable<ABPropertyHeaderView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPropertyHeaderView;
		public static implicit operator NSTableHeaderView( ABPropertyHeaderView value ) {
			return new NSTableHeaderView( value.Handle );
		}
		public static implicit operator NSView( ABPropertyHeaderView value ) {
			return new NSView( value.Handle );
		}
		public static implicit operator NSResponder( ABPropertyHeaderView value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABPropertyHeaderView value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABPropertyHeaderView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPropertyHeaderView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABPropertyHeaderView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABPropertyHeaderView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPropertyHeaderView value1, ABPropertyHeaderView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPropertyHeaderView value1, ABPropertyHeaderView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPropertyHeaderView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPropertyHeaderView alloc() {
			return new ABPropertyHeaderView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSTableColumn ) )]
	public struct ABPropertyTableColumn : IEquatable<ABPropertyTableColumn> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABPropertyTableColumn;
		public static implicit operator NSTableColumn( ABPropertyTableColumn value ) {
			return new NSTableColumn( value.Handle );
		}
		public static implicit operator NSObject( ABPropertyTableColumn value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABPropertyTableColumn value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABPropertyTableColumn value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABPropertyTableColumn?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABPropertyTableColumn value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABPropertyTableColumn value1, ABPropertyTableColumn value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABPropertyTableColumn value1, ABPropertyTableColumn value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABPropertyTableColumn( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABPropertyTableColumn alloc() {
			return new ABPropertyTableColumn( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSButtonCell ) )]
	public struct ABRadioButtonCell : IEquatable<ABRadioButtonCell> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABRadioButtonCell;
		public static implicit operator NSButtonCell( ABRadioButtonCell value ) {
			return new NSButtonCell( value.Handle );
		}
		public static implicit operator NSActionCell( ABRadioButtonCell value ) {
			return new NSActionCell( value.Handle );
		}
		public static implicit operator NSCell( ABRadioButtonCell value ) {
			return new NSCell( value.Handle );
		}
		public static implicit operator NSObject( ABRadioButtonCell value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABRadioButtonCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABRadioButtonCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABRadioButtonCell?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABRadioButtonCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABRadioButtonCell value1, ABRadioButtonCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABRadioButtonCell value1, ABRadioButtonCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABRadioButtonCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABRadioButtonCell alloc() {
			return new ABRadioButtonCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject disabledSelectedImageForControlTint_( int tint ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.disabledSelectedImageForControlTint_( Handle, CachedSelectors.disabledSelectedImageForControlTint_, out ___occuredException, sizeof( int ), tint );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject disabledUnselectedImage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.disabledUnselectedImage( Handle, CachedSelectors.disabledUnselectedImage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject pressedImage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pressedImage( Handle, CachedSelectors.pressedImage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedImageForControlTint_( int tint ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedImageForControlTint_( Handle, CachedSelectors.selectedImageForControlTint_, out ___occuredException, sizeof( int ), tint );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setDisabledSelectedImage_forControlTint_( NObjective.RuntimeObject image, int forControlTint ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDisabledSelectedImage_forControlTint_( Handle, CachedSelectors.setDisabledSelectedImage_forControlTint_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), image, forControlTint );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDisabledUnselectedImage_( NObjective.RuntimeObject image ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDisabledUnselectedImage_( Handle, CachedSelectors.setDisabledUnselectedImage_, out ___occuredException, sizeof( NObjective.RuntimeObject ), image );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPressedImage_( NObjective.RuntimeObject image ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPressedImage_( Handle, CachedSelectors.setPressedImage_, out ___occuredException, sizeof( NObjective.RuntimeObject ), image );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedImage_forControlTint_( NObjective.RuntimeObject image, int forControlTint ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedImage_forControlTint_( Handle, CachedSelectors.setSelectedImage_forControlTint_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), image, forControlTint );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUnselectedImage_( NObjective.RuntimeObject image ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUnselectedImage_( Handle, CachedSelectors.setUnselectedImage_, out ___occuredException, sizeof( NObjective.RuntimeObject ), image );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject unselectedImage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.unselectedImage( Handle, CachedSelectors.unselectedImage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr disabledSelectedImageForControlTint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int tint );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr disabledUnselectedImage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pressedImage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedImageForControlTint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int tint );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDisabledSelectedImage_forControlTint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image, int forControlTint );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDisabledUnselectedImage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPressedImage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSelectedImage_forControlTint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image, int forControlTint );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUnselectedImage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr unselectedImage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector disabledSelectedImageForControlTint_ = "disabledSelectedImageForControlTint:";
			public static readonly Selector disabledUnselectedImage = "disabledUnselectedImage";
			public static readonly Selector pressedImage = "pressedImage";
			public static readonly Selector selectedImageForControlTint_ = "selectedImageForControlTint:";
			public static readonly Selector setDisabledSelectedImage_forControlTint_ = "setDisabledSelectedImage:forControlTint:";
			public static readonly Selector setDisabledUnselectedImage_ = "setDisabledUnselectedImage:";
			public static readonly Selector setPressedImage_ = "setPressedImage:";
			public static readonly Selector setSelectedImage_forControlTint_ = "setSelectedImage:forControlTint:";
			public static readonly Selector setUnselectedImage_ = "setUnselectedImage:";
			public static readonly Selector unselectedImage = "unselectedImage";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABRecord : IEquatable<ABRecord> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABRecord;
		public static implicit operator NSObject( ABRecord value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABRecord value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABRecord value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABRecord?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABRecord value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABRecord value1, ABRecord value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABRecord value1, ABRecord value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABRecord( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABRecord alloc() {
			return new ABRecord( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject builtInProperties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.builtInProperties( ClassHandle, CachedSelectors.builtInProperties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void nts_ClearCaches() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_ClearCaches( ClassHandle, CachedSelectors.nts_ClearCaches, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject nts_RecordFromDictionaryRepresentation_withRecordMapping_generateIds_( NObjective.RuntimeObject representation, NObjective.RuntimeObject withRecordMapping, char generateIds ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_RecordFromDictionaryRepresentation_withRecordMapping_generateIds_( ClassHandle, CachedSelectors.nts_RecordFromDictionaryRepresentation_withRecordMapping_generateIds_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), representation, withRecordMapping, generateIds );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void nts_SetupWithSharedAddressBook_( NObjective.RuntimeObject book ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_SetupWithSharedAddressBook_( ClassHandle, CachedSelectors.nts_SetupWithSharedAddressBook_, out ___occuredException, sizeof( NObjective.RuntimeObject ), book );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void nts_SetupWithSharedAddressBook_neededRegistering_( NObjective.RuntimeObject book, System.IntPtr neededRegistering ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_SetupWithSharedAddressBook_neededRegistering_( ClassHandle, CachedSelectors.nts_SetupWithSharedAddressBook_neededRegistering_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), book, neededRegistering );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject recordFromDictionaryRepresentation_withRecordMapping_generateIds_( NObjective.RuntimeObject representation, NObjective.RuntimeObject withRecordMapping, char generateIds ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.recordFromDictionaryRepresentation_withRecordMapping_generateIds_( ClassHandle, CachedSelectors.recordFromDictionaryRepresentation_withRecordMapping_generateIds_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), representation, withRecordMapping, generateIds );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject abAssimilatedRecordFor_( NObjective.RuntimeObject @for ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abAssimilatedRecordFor_( Handle, CachedSelectors.abAssimilatedRecordFor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @for );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char abIsCompatibleWithRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abIsCompatibleWithRecord_( Handle, CachedSelectors.abIsCompatibleWithRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject allProperties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allProperties( Handle, CachedSelectors.allProperties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void clearTemporaryCache() {
			RuntimeObject ___occuredException;
			NativeMethods.clearTemporaryCache( Handle, CachedSelectors.clearTemporaryCache, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int compareAscending_( NObjective.RuntimeObject @ascending ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareAscending_( Handle, CachedSelectors.compareAscending_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @ascending );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int compareCaseInsensitiveAscending_( NObjective.RuntimeObject @ascending ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareCaseInsensitiveAscending_( Handle, CachedSelectors.compareCaseInsensitiveAscending_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @ascending );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int compareCaseInsensitiveDescending_( NObjective.RuntimeObject @descending ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareCaseInsensitiveDescending_( Handle, CachedSelectors.compareCaseInsensitiveDescending_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @descending );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char compareContainsSubString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareContainsSubString_( Handle, CachedSelectors.compareContainsSubString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char compareContainsSubStringCaseInsensitive_( NObjective.RuntimeObject insensitive ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareContainsSubStringCaseInsensitive_( Handle, CachedSelectors.compareContainsSubStringCaseInsensitive_, out ___occuredException, sizeof( NObjective.RuntimeObject ), insensitive );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int compareDescending_( NObjective.RuntimeObject @descending ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareDescending_( Handle, CachedSelectors.compareDescending_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @descending );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char comparePrefixMatch_( NObjective.RuntimeObject match ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.comparePrefixMatch_( Handle, CachedSelectors.comparePrefixMatch_, out ___occuredException, sizeof( NObjective.RuntimeObject ), match );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char comparePrefixMatchCaseInsensitive_( NObjective.RuntimeObject insensitive ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.comparePrefixMatchCaseInsensitive_( Handle, CachedSelectors.comparePrefixMatchCaseInsensitive_, out ___occuredException, sizeof( NObjective.RuntimeObject ), insensitive );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject createAlternateName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createAlternateName( Handle, CachedSelectors.createAlternateName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject createFirstLastSorting_part1_( char sorting, char part1 ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.createFirstLastSorting_part1_( Handle, CachedSelectors.createFirstLastSorting_part1_, out ___occuredException, sizeof( char ) + sizeof( char ), sorting, part1 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject dictionaryRepresentation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dictionaryRepresentation( Handle, CachedSelectors.dictionaryRepresentation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject duplicate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.duplicate( Handle, CachedSelectors.duplicate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject duplicateWithClass_( NObjective.RuntimeClass @class ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.duplicateWithClass_( Handle, CachedSelectors.duplicateWithClass_, out ___occuredException, sizeof( NObjective.RuntimeClass ), @class );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithUniqueId_( NObjective.RuntimeObject id ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUniqueId_( Handle, CachedSelectors.initWithUniqueId_, out ___occuredException, sizeof( NObjective.RuntimeObject ), id );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isPublished() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isPublished( Handle, CachedSelectors.isPublished, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isReadOnly() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isReadOnly( Handle, CachedSelectors.isReadOnly, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isSubscribed() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isSubscribed( Handle, CachedSelectors.isSubscribed, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void nts_AddToCache() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_AddToCache( Handle, CachedSelectors.nts_AddToCache, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nts_AffectsSmartGroupsIsNew_( char @new ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_AffectsSmartGroupsIsNew_( Handle, CachedSelectors.nts_AffectsSmartGroupsIsNew_, out ___occuredException, sizeof( char ), @new );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_CascadeRemove() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_CascadeRemove( Handle, CachedSelectors.nts_CascadeRemove, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nts_ChangedProperties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_ChangedProperties( Handle, CachedSelectors.nts_ChangedProperties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_ClearTemporaryCache() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_ClearTemporaryCache( Handle, CachedSelectors.nts_ClearTemporaryCache, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nts_Description() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_Description( Handle, CachedSelectors.nts_Description, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts_HasChangedProperties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_HasChangedProperties( Handle, CachedSelectors.nts_HasChangedProperties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_IsPublished() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_IsPublished( Handle, CachedSelectors.nts_IsPublished, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_IsSubscribed() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_IsSubscribed( Handle, CachedSelectors.nts_IsSubscribed, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nts_ParentGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_ParentGroups( Handle, CachedSelectors.nts_ParentGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_recordDidSave() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_recordDidSave( Handle, CachedSelectors.nts_recordDidSave, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nts_RemoteLocation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_RemoteLocation( Handle, CachedSelectors.nts_RemoteLocation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_RemoveFromCache() {
			RuntimeObject ___occuredException;
			NativeMethods.nts_RemoveFromCache( Handle, CachedSelectors.nts_RemoveFromCache, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char nts_RemoveValueForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_RemoveValueForProperty_( Handle, CachedSelectors.nts_RemoveValueForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void nts_RemoveValueInTemporaryCacheForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_RemoveValueInTemporaryCacheForProperty_( Handle, CachedSelectors.nts_RemoveValueInTemporaryCacheForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char nts_SetValue_forProperty_( NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SetValue_forProperty_( Handle, CachedSelectors.nts_SetValue_forProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_SetValue_forProperty_recordCouldBeInDatabase_( NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty, char recordCouldBeInDatabase ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SetValue_forProperty_recordCouldBeInDatabase_( Handle, CachedSelectors.nts_SetValue_forProperty_recordCouldBeInDatabase_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), value, forProperty, recordCouldBeInDatabase );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void nts_SetValueInChangedProperties_forProperty_( NObjective.RuntimeObject properties, NObjective.RuntimeObject forProperty ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_SetValueInChangedProperties_forProperty_( Handle, CachedSelectors.nts_SetValueInChangedProperties_forProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), properties, forProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_SetValueInTemporaryCache_forProperty_( NObjective.RuntimeObject cache, NObjective.RuntimeObject forProperty ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_SetValueInTemporaryCache_forProperty_( Handle, CachedSelectors.nts_SetValueInTemporaryCache_forProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), cache, forProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nts_StringForIndexing() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_StringForIndexing( Handle, CachedSelectors.nts_StringForIndexing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts_Touch() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_Touch( Handle, CachedSelectors.nts_Touch, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nts_ValueForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_ValueForProperty_( Handle, CachedSelectors.nts_ValueForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_ValueForProperty_row_( NObjective.RuntimeObject property, int row ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_ValueForProperty_row_( Handle, CachedSelectors.nts_ValueForProperty_row_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), property, row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_ValueInTemporaryCacheForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_ValueInTemporaryCacheForProperty_( Handle, CachedSelectors.nts_ValueInTemporaryCacheForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts_WriteAtRow_( int row ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_WriteAtRow_( Handle, CachedSelectors.nts_WriteAtRow_, out ___occuredException, sizeof( int ), row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject parentGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parentGroups( Handle, CachedSelectors.parentGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parentGroupsIncludingSubscriptions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parentGroupsIncludingSubscriptions( Handle, CachedSelectors.parentGroupsIncludingSubscriptions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject remoteLocation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.remoteLocation( Handle, CachedSelectors.remoteLocation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool removeValueForProperty_( string property ) {
			RuntimeObject ___occuredException;
			var ___wrappedproperty = Runtime.CreateStringProxy( property );
			var ___result = NativeMethods.removeValueForProperty_( Handle, CachedSelectors.removeValueForProperty_, out ___occuredException, sizeof( IntPtr ), ___wrappedproperty );
			Runtime.ReleaseNativeObject( ___wrappedproperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setAllProperties_( NObjective.RuntimeObject properties ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllProperties_( Handle, CachedSelectors.setAllProperties_, out ___occuredException, sizeof( NObjective.RuntimeObject ), properties );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool setValue_forProperty_( NObjective.RuntimeObject value, string forProperty ) {
			RuntimeObject ___occuredException;
			var ___wrappedforProperty = Runtime.CreateStringProxy( forProperty );
			var ___result = NativeMethods.setValue_forProperty_( Handle, CachedSelectors.setValue_forProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( IntPtr ), value, ___wrappedforProperty );
			Runtime.ReleaseNativeObject( ___wrappedforProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char setValue_forProperty_recordCouldBeInDatabase_( NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty, char recordCouldBeInDatabase ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setValue_forProperty_recordCouldBeInDatabase_( Handle, CachedSelectors.setValue_forProperty_recordCouldBeInDatabase_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), value, forProperty, recordCouldBeInDatabase );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setValueInTemporaryCache_forProperty_( NObjective.RuntimeObject cache, NObjective.RuntimeObject forProperty ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValueInTemporaryCache_forProperty_( Handle, CachedSelectors.setValueInTemporaryCache_forProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), cache, forProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject sharingUniqueId() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharingUniqueId( Handle, CachedSelectors.sharingUniqueId, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject stringForIndexing() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringForIndexing( Handle, CachedSelectors.stringForIndexing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string uniqueId() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.uniqueId( Handle, CachedSelectors.uniqueId, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject valueForProperty_( string property ) {
			RuntimeObject ___occuredException;
			var ___wrappedproperty = Runtime.CreateStringProxy( property );
			var ___result = NativeMethods.valueForProperty_( Handle, CachedSelectors.valueForProperty_, out ___occuredException, sizeof( IntPtr ), ___wrappedproperty );
			Runtime.ReleaseNativeObject( ___wrappedproperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject valueInTemporaryCacheForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueInTemporaryCacheForProperty_( Handle, CachedSelectors.valueInTemporaryCacheForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abAssimilatedRecordFor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @for );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char abIsCompatibleWithRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allProperties( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr builtInProperties( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clearTemporaryCache( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int compareAscending_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @ascending );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int compareCaseInsensitiveAscending_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @ascending );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int compareCaseInsensitiveDescending_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @descending );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareContainsSubString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareContainsSubStringCaseInsensitive_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject insensitive );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int compareDescending_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @descending );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char comparePrefixMatch_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject match );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char comparePrefixMatchCaseInsensitive_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject insensitive );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createAlternateName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr createFirstLastSorting_part1_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char sorting, char part1 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dictionaryRepresentation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr duplicate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr duplicateWithClass_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithUniqueId_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject id );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isPublished( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isReadOnly( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isSubscribed( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_AddToCache( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_AffectsSmartGroupsIsNew_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @new );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_CascadeRemove( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_ChangedProperties( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_ClearCaches( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_ClearTemporaryCache( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_Description( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_HasChangedProperties( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_IsPublished( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_IsSubscribed( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_ParentGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_recordDidSave( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_RecordFromDictionaryRepresentation_withRecordMapping_generateIds_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject representation, NObjective.RuntimeObject withRecordMapping, char generateIds );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_RemoteLocation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_RemoveFromCache( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_RemoveValueForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_RemoveValueInTemporaryCacheForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_SetupWithSharedAddressBook_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_SetupWithSharedAddressBook_neededRegistering_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject book, System.IntPtr neededRegistering );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_SetValue_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_SetValue_forProperty_recordCouldBeInDatabase_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty, char recordCouldBeInDatabase );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_SetValueInChangedProperties_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject properties, NObjective.RuntimeObject forProperty );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_SetValueInTemporaryCache_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cache, NObjective.RuntimeObject forProperty );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_StringForIndexing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_Touch( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_ValueForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_ValueForProperty_row_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, int row );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_ValueInTemporaryCacheForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_WriteAtRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parentGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parentGroupsIncludingSubscriptions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr recordFromDictionaryRepresentation_withRecordMapping_generateIds_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject representation, NObjective.RuntimeObject withRecordMapping, char generateIds );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr remoteLocation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool removeValueForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllProperties_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject properties );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool setValue_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, IntPtr forProperty );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char setValue_forProperty_recordCouldBeInDatabase_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty, char recordCouldBeInDatabase );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValueInTemporaryCache_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cache, NObjective.RuntimeObject forProperty );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharingUniqueId( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringForIndexing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr uniqueId( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueInTemporaryCacheForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
		}
		static internal class CachedSelectors {
			public static readonly Selector abAssimilatedRecordFor_ = "abAssimilatedRecordFor:";
			public static readonly Selector abIsCompatibleWithRecord_ = "abIsCompatibleWithRecord:";
			public static readonly Selector allProperties = "allProperties";
			public static readonly Selector builtInProperties = "builtInProperties";
			public static readonly Selector clearTemporaryCache = "clearTemporaryCache";
			public static readonly Selector compareAscending_ = "compareAscending:";
			public static readonly Selector compareCaseInsensitiveAscending_ = "compareCaseInsensitiveAscending:";
			public static readonly Selector compareCaseInsensitiveDescending_ = "compareCaseInsensitiveDescending:";
			public static readonly Selector compareContainsSubString_ = "compareContainsSubString:";
			public static readonly Selector compareContainsSubStringCaseInsensitive_ = "compareContainsSubStringCaseInsensitive:";
			public static readonly Selector compareDescending_ = "compareDescending:";
			public static readonly Selector comparePrefixMatch_ = "comparePrefixMatch:";
			public static readonly Selector comparePrefixMatchCaseInsensitive_ = "comparePrefixMatchCaseInsensitive:";
			public static readonly Selector createAlternateName = "createAlternateName";
			public static readonly Selector createFirstLastSorting_part1_ = "createFirstLastSorting:part1:";
			public static readonly Selector dictionaryRepresentation = "dictionaryRepresentation";
			public static readonly Selector duplicate = "duplicate";
			public static readonly Selector duplicateWithClass_ = "duplicateWithClass:";
			public static readonly Selector initWithUniqueId_ = "initWithUniqueId:";
			public static readonly Selector isPublished = "isPublished";
			public static readonly Selector isReadOnly = "isReadOnly";
			public static readonly Selector isSubscribed = "isSubscribed";
			public static readonly Selector nts_AddToCache = "nts_AddToCache";
			public static readonly Selector nts_AffectsSmartGroupsIsNew_ = "nts_AffectsSmartGroupsIsNew:";
			public static readonly Selector nts_CascadeRemove = "nts_CascadeRemove";
			public static readonly Selector nts_ChangedProperties = "nts_ChangedProperties";
			public static readonly Selector nts_ClearCaches = "nts_ClearCaches";
			public static readonly Selector nts_ClearTemporaryCache = "nts_ClearTemporaryCache";
			public static readonly Selector nts_Description = "nts_Description";
			public static readonly Selector nts_HasChangedProperties = "nts_HasChangedProperties";
			public static readonly Selector nts_IsPublished = "nts_IsPublished";
			public static readonly Selector nts_IsSubscribed = "nts_IsSubscribed";
			public static readonly Selector nts_ParentGroups = "nts_ParentGroups";
			public static readonly Selector nts_recordDidSave = "nts_recordDidSave";
			public static readonly Selector nts_RecordFromDictionaryRepresentation_withRecordMapping_generateIds_ = "nts_RecordFromDictionaryRepresentation:withRecordMapping:generateIds:";
			public static readonly Selector nts_RemoteLocation = "nts_RemoteLocation";
			public static readonly Selector nts_RemoveFromCache = "nts_RemoveFromCache";
			public static readonly Selector nts_RemoveValueForProperty_ = "nts_RemoveValueForProperty:";
			public static readonly Selector nts_RemoveValueInTemporaryCacheForProperty_ = "nts_RemoveValueInTemporaryCacheForProperty:";
			public static readonly Selector nts_SetupWithSharedAddressBook_ = "nts_SetupWithSharedAddressBook:";
			public static readonly Selector nts_SetupWithSharedAddressBook_neededRegistering_ = "nts_SetupWithSharedAddressBook:neededRegistering:";
			public static readonly Selector nts_SetValue_forProperty_ = "nts_SetValue:forProperty:";
			public static readonly Selector nts_SetValue_forProperty_recordCouldBeInDatabase_ = "nts_SetValue:forProperty:recordCouldBeInDatabase:";
			public static readonly Selector nts_SetValueInChangedProperties_forProperty_ = "nts_SetValueInChangedProperties:forProperty:";
			public static readonly Selector nts_SetValueInTemporaryCache_forProperty_ = "nts_SetValueInTemporaryCache:forProperty:";
			public static readonly Selector nts_StringForIndexing = "nts_StringForIndexing";
			public static readonly Selector nts_Touch = "nts_Touch";
			public static readonly Selector nts_ValueForProperty_ = "nts_ValueForProperty:";
			public static readonly Selector nts_ValueForProperty_row_ = "nts_ValueForProperty:row:";
			public static readonly Selector nts_ValueInTemporaryCacheForProperty_ = "nts_ValueInTemporaryCacheForProperty:";
			public static readonly Selector nts_WriteAtRow_ = "nts_WriteAtRow:";
			public static readonly Selector parentGroups = "parentGroups";
			public static readonly Selector parentGroupsIncludingSubscriptions = "parentGroupsIncludingSubscriptions";
			public static readonly Selector recordFromDictionaryRepresentation_withRecordMapping_generateIds_ = "recordFromDictionaryRepresentation:withRecordMapping:generateIds:";
			public static readonly Selector remoteLocation = "remoteLocation";
			public static readonly Selector removeValueForProperty_ = "removeValueForProperty:";
			public static readonly Selector setAllProperties_ = "setAllProperties:";
			public static readonly Selector setValue_forProperty_ = "setValue:forProperty:";
			public static readonly Selector setValue_forProperty_recordCouldBeInDatabase_ = "setValue:forProperty:recordCouldBeInDatabase:";
			public static readonly Selector setValueInTemporaryCache_forProperty_ = "setValueInTemporaryCache:forProperty:";
			public static readonly Selector sharingUniqueId = "sharingUniqueId";
			public static readonly Selector stringForIndexing = "stringForIndexing";
			public static readonly Selector uniqueId = "uniqueId";
			public static readonly Selector valueForProperty_ = "valueForProperty:";
			public static readonly Selector valueInTemporaryCacheForProperty_ = "valueInTemporaryCacheForProperty:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABRectObject : IEquatable<ABRectObject> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABRectObject;
		public static implicit operator NSObject( ABRectObject value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABRectObject value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABRectObject value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABRectObject?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABRectObject value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABRectObject value1, ABRectObject value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABRectObject value1, ABRectObject value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABRectObject( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABRectObject alloc() {
			return new ABRectObject( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
		}
		static internal class CachedSelectors {
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABRemoteImageLoader : IEquatable<ABRemoteImageLoader> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABRemoteImageLoader;
		public static implicit operator NSObject( ABRemoteImageLoader value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABRemoteImageLoader value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABRemoteImageLoader value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABRemoteImageLoader?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABRemoteImageLoader value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABRemoteImageLoader value1, ABRemoteImageLoader value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABRemoteImageLoader value1, ABRemoteImageLoader value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABRemoteImageLoader( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABRemoteImageLoader alloc() {
			return new ABRemoteImageLoader( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject cachedDateForEmail_( NObjective.RuntimeObject email ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cachedDateForEmail_( ClassHandle, CachedSelectors.cachedDateForEmail_, out ___occuredException, sizeof( NObjective.RuntimeObject ), email );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject cachedImageForEmail_( NObjective.RuntimeObject email ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cachedImageForEmail_( ClassHandle, CachedSelectors.cachedImageForEmail_, out ___occuredException, sizeof( NObjective.RuntimeObject ), email );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject cachedImagePathForEmail_( NObjective.RuntimeObject email ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cachedImagePathForEmail_( ClassHandle, CachedSelectors.cachedImagePathForEmail_, out ___occuredException, sizeof( NObjective.RuntimeObject ), email );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject photoCacheDirectoryPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.photoCacheDirectoryPath( ClassHandle, CachedSelectors.photoCacheDirectoryPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static char saveImageInCache_forEmail_( NObjective.RuntimeObject cache, NObjective.RuntimeObject forEmail ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.saveImageInCache_forEmail_( ClassHandle, CachedSelectors.saveImageInCache_forEmail_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), cache, forEmail );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject sharedRemoteImageLoader() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedRemoteImageLoader( ClassHandle, CachedSelectors.sharedRemoteImageLoader, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void touchCachedImageForEmail_( NObjective.RuntimeObject email ) {
			RuntimeObject ___occuredException;
			NativeMethods.touchCachedImageForEmail_( ClassHandle, CachedSelectors.touchCachedImageForEmail_, out ___occuredException, sizeof( NObjective.RuntimeObject ), email );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject urlForEmail_( NObjective.RuntimeObject email ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.urlForEmail_( ClassHandle, CachedSelectors.urlForEmail_, out ___occuredException, sizeof( NObjective.RuntimeObject ), email );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int beginLoadingImageForEmails_forClient_( NObjective.RuntimeObject emails, NObjective.RuntimeObject forClient ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.beginLoadingImageForEmails_forClient_( Handle, CachedSelectors.beginLoadingImageForEmails_forClient_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), emails, forClient );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void cancelLoadingImageDataForTag_( int tag ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancelLoadingImageDataForTag_( Handle, CachedSelectors.cancelLoadingImageDataForTag_, out ___occuredException, sizeof( int ), tag );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void consumeJobEntry_( NObjective.RuntimeObject entry ) {
			RuntimeObject ___occuredException;
			NativeMethods.consumeJobEntry_( Handle, CachedSelectors.consumeJobEntry_, out ___occuredException, sizeof( NObjective.RuntimeObject ), entry );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool shouldFetchImageForEmail_withCacheDate_( NObjective.RuntimeObject email, NObjective.RuntimeObject withCacheDate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shouldFetchImageForEmail_withCacheDate_( Handle, CachedSelectors.shouldFetchImageForEmail_withCacheDate_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), email, withCacheDate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject upToDateImageForEmail_( NObjective.RuntimeObject email ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.upToDateImageForEmail_( Handle, CachedSelectors.upToDateImageForEmail_, out ___occuredException, sizeof( NObjective.RuntimeObject ), email );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void workLoop() {
			RuntimeObject ___occuredException;
			NativeMethods.workLoop( Handle, CachedSelectors.workLoop, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int beginLoadingImageForEmails_forClient_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject emails, NObjective.RuntimeObject forClient );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cachedDateForEmail_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject email );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cachedImageForEmail_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject email );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cachedImagePathForEmail_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject email );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancelLoadingImageDataForTag_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int tag );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void consumeJobEntry_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject entry );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr photoCacheDirectoryPath( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char saveImageInCache_forEmail_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cache, NObjective.RuntimeObject forEmail );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedRemoteImageLoader( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool shouldFetchImageForEmail_withCacheDate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject email, NObjective.RuntimeObject withCacheDate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void touchCachedImageForEmail_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject email );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr upToDateImageForEmail_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject email );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr urlForEmail_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject email );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void workLoop( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector beginLoadingImageForEmails_forClient_ = "beginLoadingImageForEmails:forClient:";
			public static readonly Selector cachedDateForEmail_ = "cachedDateForEmail:";
			public static readonly Selector cachedImageForEmail_ = "cachedImageForEmail:";
			public static readonly Selector cachedImagePathForEmail_ = "cachedImagePathForEmail:";
			public static readonly Selector cancelLoadingImageDataForTag_ = "cancelLoadingImageDataForTag:";
			public static readonly Selector consumeJobEntry_ = "consumeJobEntry:";
			public static readonly Selector photoCacheDirectoryPath = "photoCacheDirectoryPath";
			public static readonly Selector saveImageInCache_forEmail_ = "saveImageInCache:forEmail:";
			public static readonly Selector sharedRemoteImageLoader = "sharedRemoteImageLoader";
			public static readonly Selector shouldFetchImageForEmail_withCacheDate_ = "shouldFetchImageForEmail:withCacheDate:";
			public static readonly Selector touchCachedImageForEmail_ = "touchCachedImageForEmail:";
			public static readonly Selector upToDateImageForEmail_ = "upToDateImageForEmail:";
			public static readonly Selector urlForEmail_ = "urlForEmail:";
			public static readonly Selector workLoop = "workLoop";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABGroupCommand ) )]
	public struct ABRemoveFromGroupCommand : IEquatable<ABRemoveFromGroupCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABRemoveFromGroupCommand;
		public static implicit operator ABGroupCommand( ABRemoveFromGroupCommand value ) {
			return new ABGroupCommand( value.Handle );
		}
		public static implicit operator ABCommand( ABRemoveFromGroupCommand value ) {
			return new ABCommand( value.Handle );
		}
		public static implicit operator NSObject( ABRemoveFromGroupCommand value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABRemoveFromGroupCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABRemoveFromGroupCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABRemoveFromGroupCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABRemoveFromGroupCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABRemoveFromGroupCommand value1, ABRemoveFromGroupCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABRemoveFromGroupCommand value1, ABRemoveFromGroupCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABRemoveFromGroupCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABRemoveFromGroupCommand alloc() {
			return new ABRemoveFromGroupCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABCommand ) )]
	public struct ABRenameGroupCommand : IEquatable<ABRenameGroupCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABRenameGroupCommand;
		public static implicit operator ABCommand( ABRenameGroupCommand value ) {
			return new ABCommand( value.Handle );
		}
		public static implicit operator NSObject( ABRenameGroupCommand value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABRenameGroupCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABRenameGroupCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABRenameGroupCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABRenameGroupCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABRenameGroupCommand value1, ABRenameGroupCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABRenameGroupCommand value1, ABRenameGroupCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABRenameGroupCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABRenameGroupCommand alloc() {
			return new ABRenameGroupCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithGroup_newName_( NObjective.RuntimeObject @group, NObjective.RuntimeObject newName ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithGroup_newName_( Handle, CachedSelectors.initWithGroup_newName_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @group, newName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithGroup_newName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject newName );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithGroup_newName_ = "initWithGroup:newName:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABRollOver : IEquatable<ABRollOver> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABRollOver;
		public static implicit operator NSObject( ABRollOver value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABRollOver value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABRollOver value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABRollOver?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABRollOver value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABRollOver value1, ABRollOver value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABRollOver value1, ABRollOver value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABRollOver( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABRollOver alloc() {
			return new ABRollOver( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char callbackBased() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.callbackBased( Handle, CachedSelectors.callbackBased, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject @delegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@delegate( Handle, CachedSelectors.@delegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char delegateBased() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.delegateBased( Handle, CachedSelectors.delegateBased, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject identifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.identifier( Handle, CachedSelectors.identifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithDelegate_( Handle, CachedSelectors.initWithDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isEnabledWithSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEnabledWithSelection_( Handle, CachedSelectors.isEnabledWithSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject property() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.property( Handle, CachedSelectors.property, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject representedObject() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.representedObject( Handle, CachedSelectors.representedObject, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectionDictionary() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectionDictionary( Handle, CachedSelectors.selectionDictionary, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setIdentifier_( NObjective.RuntimeObject identifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIdentifier_( Handle, CachedSelectors.setIdentifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ), identifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRepresentedObject_( NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRepresentedObject_( Handle, CachedSelectors.setRepresentedObject_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectionDictionary_( NObjective.RuntimeObject dictionary ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectionDictionary_( Handle, CachedSelectors.setSelectionDictionary_, out ___occuredException, sizeof( NObjective.RuntimeObject ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject titleWithSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.titleWithSelection_( Handle, CachedSelectors.titleWithSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char callbackBased( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @delegate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char delegateBased( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr identifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isEnabledWithSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr property( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr representedObject( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectionDictionary( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRepresentedObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSelectionDictionary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr titleWithSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
		}
		static internal class CachedSelectors {
			public static readonly Selector callbackBased = "callbackBased";
			public static readonly Selector @delegate = "delegate";
			public static readonly Selector delegateBased = "delegateBased";
			public static readonly Selector identifier = "identifier";
			public static readonly Selector initWithDelegate_ = "initWithDelegate:";
			public static readonly Selector isEnabledWithSelection_ = "isEnabledWithSelection:";
			public static readonly Selector property = "property";
			public static readonly Selector representedObject = "representedObject";
			public static readonly Selector selectionDictionary = "selectionDictionary";
			public static readonly Selector setIdentifier_ = "setIdentifier:";
			public static readonly Selector setRepresentedObject_ = "setRepresentedObject:";
			public static readonly Selector setSelectionDictionary_ = "setSelectionDictionary:";
			public static readonly Selector titleWithSelection_ = "titleWithSelection:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScrollView ) )]
	public struct ABScrollView : IEquatable<ABScrollView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABScrollView;
		public static implicit operator NSScrollView( ABScrollView value ) {
			return new NSScrollView( value.Handle );
		}
		public static implicit operator NSView( ABScrollView value ) {
			return new NSView( value.Handle );
		}
		public static implicit operator NSResponder( ABScrollView value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABScrollView value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABScrollView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABScrollView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABScrollView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABScrollView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABScrollView value1, ABScrollView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABScrollView value1, ABScrollView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABScrollView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABScrollView alloc() {
			return new ABScrollView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char dynamicVerticalScroller() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dynamicVerticalScroller( Handle, CachedSelectors.dynamicVerticalScroller, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char scrollBarVisible() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scrollBarVisible( Handle, CachedSelectors.scrollBarVisible, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setDynamicVerticalScroller_( char scroller ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDynamicVerticalScroller_( Handle, CachedSelectors.setDynamicVerticalScroller_, out ___occuredException, sizeof( char ), scroller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char dynamicVerticalScroller( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char scrollBarVisible( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDynamicVerticalScroller_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char scroller );
		}
		static internal class CachedSelectors {
			public static readonly Selector dynamicVerticalScroller = "dynamicVerticalScroller";
			public static readonly Selector scrollBarVisible = "scrollBarVisible";
			public static readonly Selector setDynamicVerticalScroller_ = "setDynamicVerticalScroller:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABSearchController : IEquatable<ABSearchController> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSearchController;
		public static implicit operator NSObject( ABSearchController value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABSearchController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSearchController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABSearchController?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABSearchController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSearchController value1, ABSearchController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSearchController value1, ABSearchController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSearchController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSearchController alloc() {
			return new ABSearchController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject bestRecordMatching_inPeople_( NObjective.RuntimeObject matching, NObjective.RuntimeObject inPeople ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bestRecordMatching_inPeople_( ClassHandle, CachedSelectors.bestRecordMatching_inPeople_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), matching, inPeople );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static uint matchIndexForPerson_withPieces_( NObjective.RuntimeObject person, NObjective.RuntimeObject withPieces ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.matchIndexForPerson_withPieces_( ClassHandle, CachedSelectors.matchIndexForPerson_withPieces_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), person, withPieces );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public static char property_matchesPieces_forPerson_( NObjective.RuntimeObject property, NObjective.RuntimeObject matchesPieces, NObjective.RuntimeObject forPerson ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.property_matchesPieces_forPerson_( ClassHandle, CachedSelectors.property_matchesPieces_forPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, matchesPieces, forPerson );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void clearSearchField() {
			RuntimeObject ___occuredException;
			NativeMethods.clearSearchField( Handle, CachedSelectors.clearSearchField, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char control_textView_doCommandBySelector_( NObjective.RuntimeObject control, NObjective.RuntimeObject textView, NObjective.Selector doCommandBySelector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.control_textView_doCommandBySelector_( Handle, CachedSelectors.control_textView_doCommandBySelector_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ), control, textView, doCommandBySelector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void directoryDataHasArrived_( NObjective.RuntimeObject arrived ) {
			RuntimeObject ___occuredException;
			NativeMethods.directoryDataHasArrived_( Handle, CachedSelectors.directoryDataHasArrived_, out ___occuredException, sizeof( NObjective.RuntimeObject ), arrived );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void directoryQueryStatusChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.directoryQueryStatusChanged_( Handle, CachedSelectors.directoryQueryStatusChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject displayedMemberMatching_inPeople_( NObjective.RuntimeObject matching, NObjective.RuntimeObject inPeople ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.displayedMemberMatching_inPeople_( Handle, CachedSelectors.displayedMemberMatching_inPeople_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), matching, inPeople );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void indexFoundMatches_done_( NObjective.RuntimeObject matches, char done ) {
			RuntimeObject ___occuredException;
			NativeMethods.indexFoundMatches_done_( Handle, CachedSelectors.indexFoundMatches_done_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), matches, done );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithUIController_( NObjective.RuntimeObject controller ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUIController_( Handle, CachedSelectors.initWithUIController_, out ___occuredException, sizeof( NObjective.RuntimeObject ), controller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void membersChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.membersChanged_( Handle, CachedSelectors.membersChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void saveSearch_( NObjective.RuntimeObject search ) {
			RuntimeObject ___occuredException;
			NativeMethods.saveSearch_( Handle, CachedSelectors.saveSearch_, out ___occuredException, sizeof( NObjective.RuntimeObject ), search );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scheduleSearch_( NObjective.RuntimeObject search ) {
			RuntimeObject ___occuredException;
			NativeMethods.scheduleSearch_( Handle, CachedSelectors.scheduleSearch_, out ___occuredException, sizeof( NObjective.RuntimeObject ), search );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject searchResult() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchResult( Handle, CachedSelectors.searchResult, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int searchState() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchState( Handle, CachedSelectors.searchState, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void selectSearchFieldContentIfFocused() {
			RuntimeObject ___occuredException;
			NativeMethods.selectSearchFieldContentIfFocused( Handle, CachedSelectors.selectSearchFieldContentIfFocused, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSearchState_( int state ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSearchState_( Handle, CachedSelectors.setSearchState_, out ___occuredException, sizeof( int ), state );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUIController_( NObjective.RuntimeObject controller ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUIController_( Handle, CachedSelectors.setUIController_, out ___occuredException, sizeof( NObjective.RuntimeObject ), controller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool shouldSaveCurrentSearch() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shouldSaveCurrentSearch( Handle, CachedSelectors.shouldSaveCurrentSearch, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void startDirectorySearch() {
			RuntimeObject ___occuredException;
			NativeMethods.startDirectorySearch( Handle, CachedSelectors.startDirectorySearch, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void startSpinning() {
			RuntimeObject ___occuredException;
			NativeMethods.startSpinning( Handle, CachedSelectors.startSpinning, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void stopSearching() {
			RuntimeObject ___occuredException;
			NativeMethods.stopSearching( Handle, CachedSelectors.stopSearching, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void stopSpinning() {
			RuntimeObject ___occuredException;
			NativeMethods.stopSpinning( Handle, CachedSelectors.stopSpinning, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char textView_doCommandBySelector_( NObjective.RuntimeObject view, NObjective.Selector doCommandBySelector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textView_doCommandBySelector_( Handle, CachedSelectors.textView_doCommandBySelector_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ), view, doCommandBySelector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void triggerSearch() {
			RuntimeObject ___occuredException;
			NativeMethods.triggerSearch( Handle, CachedSelectors.triggerSearch, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void triggerSearchAndSelectBestMatch_( char match ) {
			RuntimeObject ___occuredException;
			NativeMethods.triggerSearchAndSelectBestMatch_( Handle, CachedSelectors.triggerSearchAndSelectBestMatch_, out ___occuredException, sizeof( char ), match );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr bestRecordMatching_inPeople_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject matching, NObjective.RuntimeObject inPeople );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clearSearchField( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char control_textView_doCommandBySelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject control, NObjective.RuntimeObject textView, NObjective.Selector doCommandBySelector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void directoryDataHasArrived_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject arrived );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void directoryQueryStatusChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr displayedMemberMatching_inPeople_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject matching, NObjective.RuntimeObject inPeople );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void indexFoundMatches_done_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject matches, char done );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithUIController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint matchIndexForPerson_withPieces_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person, NObjective.RuntimeObject withPieces );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void membersChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char property_matchesPieces_forPerson_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject matchesPieces, NObjective.RuntimeObject forPerson );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void saveSearch_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject search );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scheduleSearch_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject search );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr searchResult( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int searchState( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectSearchFieldContentIfFocused( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSearchState_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int state );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUIController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool shouldSaveCurrentSearch( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void startDirectorySearch( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void startSpinning( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void stopSearching( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void stopSpinning( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char textView_doCommandBySelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.Selector doCommandBySelector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void triggerSearch( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void triggerSearchAndSelectBestMatch_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char match );
		}
		static internal class CachedSelectors {
			public static readonly Selector bestRecordMatching_inPeople_ = "bestRecordMatching:inPeople:";
			public static readonly Selector clearSearchField = "clearSearchField";
			public static readonly Selector control_textView_doCommandBySelector_ = "control:textView:doCommandBySelector:";
			public static readonly Selector directoryDataHasArrived_ = "directoryDataHasArrived:";
			public static readonly Selector directoryQueryStatusChanged_ = "directoryQueryStatusChanged:";
			public static readonly Selector displayedMemberMatching_inPeople_ = "displayedMemberMatching:inPeople:";
			public static readonly Selector indexFoundMatches_done_ = "indexFoundMatches:done:";
			public static readonly Selector initWithUIController_ = "initWithUIController:";
			public static readonly Selector matchIndexForPerson_withPieces_ = "matchIndexForPerson:withPieces:";
			public static readonly Selector membersChanged_ = "membersChanged:";
			public static readonly Selector property_matchesPieces_forPerson_ = "property:matchesPieces:forPerson:";
			public static readonly Selector saveSearch_ = "saveSearch:";
			public static readonly Selector scheduleSearch_ = "scheduleSearch:";
			public static readonly Selector searchResult = "searchResult";
			public static readonly Selector searchState = "searchState";
			public static readonly Selector selectSearchFieldContentIfFocused = "selectSearchFieldContentIfFocused";
			public static readonly Selector setSearchState_ = "setSearchState:";
			public static readonly Selector setUIController_ = "setUIController:";
			public static readonly Selector shouldSaveCurrentSearch = "shouldSaveCurrentSearch";
			public static readonly Selector startDirectorySearch = "startDirectorySearch";
			public static readonly Selector startSpinning = "startSpinning";
			public static readonly Selector stopSearching = "stopSearching";
			public static readonly Selector stopSpinning = "stopSpinning";
			public static readonly Selector textView_doCommandBySelector_ = "textView:doCommandBySelector:";
			public static readonly Selector triggerSearch = "triggerSearch";
			public static readonly Selector triggerSearchAndSelectBestMatch_ = "triggerSearchAndSelectBestMatch:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABSearchElement : IEquatable<ABSearchElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSearchElement;
		public static implicit operator NSObject( ABSearchElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABSearchElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSearchElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABSearchElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABSearchElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSearchElement value1, ABSearchElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSearchElement value1, ABSearchElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSearchElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSearchElement alloc() {
			return new ABSearchElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void checkCurrentVersionCompatibleWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.checkCurrentVersionCompatibleWithCoder_( ClassHandle, CachedSelectors.checkCurrentVersionCompatibleWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void encodeVersionWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeVersionWithCoder_( ClassHandle, CachedSelectors.encodeVersionWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static int encodingVersion() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.encodingVersion( ClassHandle, CachedSelectors.encodingVersion, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static ABSearchElement searchElementForConjunction_children_( ABSearchConjunction conjunction, NSArray children ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchElementForConjunction_children_( ClassHandle, CachedSelectors.searchElementForConjunction_children_, out ___occuredException, sizeof( ABSearchConjunction ) + sizeof( NSArray ), conjunction, children );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new ABSearchElement( ___result );
		}
		unsafe public static void setEncodingVersion_( int version ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEncodingVersion_( ClassHandle, CachedSelectors.setEncodingVersion_, out ___occuredException, sizeof( int ), version );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool isSimpleSearch() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isSimpleSearch( Handle, CachedSelectors.isSimpleSearch, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool matchesRecord_( ABRecord record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.matchesRecord_( Handle, CachedSelectors.matchesRecord_, out ___occuredException, sizeof( ABRecord ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_MatchesRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_MatchesRecord_( Handle, CachedSelectors.nts_MatchesRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char searchGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchGroups( Handle, CachedSelectors.searchGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char searchPeople() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchPeople( Handle, CachedSelectors.searchPeople, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char searchSubscribed() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchSubscribed( Handle, CachedSelectors.searchSubscribed, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setSearchValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSearchValue_( Handle, CachedSelectors.setSearchValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void checkCurrentVersionCompatibleWithCoder_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeVersionWithCoder_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int encodingVersion( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isSimpleSearch( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool matchesRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ABRecord record );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_MatchesRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr searchElementForConjunction_children_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ABSearchConjunction conjunction, NSArray children );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char searchGroups( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char searchPeople( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char searchSubscribed( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEncodingVersion_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int version );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSearchValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
		}
		static internal class CachedSelectors {
			public static readonly Selector checkCurrentVersionCompatibleWithCoder_ = "checkCurrentVersionCompatibleWithCoder:";
			public static readonly Selector encodeVersionWithCoder_ = "encodeVersionWithCoder:";
			public static readonly Selector encodingVersion = "encodingVersion";
			public static readonly Selector isSimpleSearch = "isSimpleSearch";
			public static readonly Selector matchesRecord_ = "matchesRecord:";
			public static readonly Selector nts_MatchesRecord_ = "nts_MatchesRecord:";
			public static readonly Selector searchElementForConjunction_children_ = "searchElementForConjunction:children:";
			public static readonly Selector searchGroups = "searchGroups";
			public static readonly Selector searchPeople = "searchPeople";
			public static readonly Selector searchSubscribed = "searchSubscribed";
			public static readonly Selector setEncodingVersion_ = "setEncodingVersion:";
			public static readonly Selector setSearchValue_ = "setSearchValue:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABSearchElement ) )]
	public struct ABSearchElementConjunction : IEquatable<ABSearchElementConjunction> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSearchElementConjunction;
		public static implicit operator ABSearchElement( ABSearchElementConjunction value ) {
			return new ABSearchElement( value.Handle );
		}
		public static implicit operator NSObject( ABSearchElementConjunction value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABSearchElementConjunction value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSearchElementConjunction value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABSearchElementConjunction?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABSearchElementConjunction value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSearchElementConjunction value1, ABSearchElementConjunction value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSearchElementConjunction value1, ABSearchElementConjunction value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSearchElementConjunction( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSearchElementConjunction alloc() {
			return new ABSearchElementConjunction( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public int conjuntion() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.conjuntion( Handle, CachedSelectors.conjuntion, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithConjunctionOperator_children_( int @operator, NObjective.RuntimeObject children ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithConjunctionOperator_children_( Handle, CachedSelectors.initWithConjunctionOperator_children_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ), @operator, children );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isRuleGrouping() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isRuleGrouping( Handle, CachedSelectors.isRuleGrouping, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_MatchesRecord_row_( NObjective.RuntimeObject record, int row ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_MatchesRecord_row_( Handle, CachedSelectors.nts_MatchesRecord_row_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), record, row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setIsRuleGrouping_( char grouping ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIsRuleGrouping_( Handle, CachedSelectors.setIsRuleGrouping_, out ___occuredException, sizeof( char ), grouping );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int conjuntion( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithConjunctionOperator_children_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int @operator, NObjective.RuntimeObject children );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isRuleGrouping( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_MatchesRecord_row_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record, int row );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setIsRuleGrouping_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char grouping );
		}
		static internal class CachedSelectors {
			public static readonly Selector conjuntion = "conjuntion";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithConjunctionOperator_children_ = "initWithConjunctionOperator:children:";
			public static readonly Selector isRuleGrouping = "isRuleGrouping";
			public static readonly Selector nts_MatchesRecord_row_ = "nts_MatchesRecord:row:";
			public static readonly Selector setIsRuleGrouping_ = "setIsRuleGrouping:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABSearchElementHelper : IEquatable<ABSearchElementHelper> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSearchElementHelper;
		public static implicit operator NSObject( ABSearchElementHelper value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABSearchElementHelper value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSearchElementHelper value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABSearchElementHelper?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABSearchElementHelper value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSearchElementHelper value1, ABSearchElementHelper value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSearchElementHelper value1, ABSearchElementHelper value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSearchElementHelper( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSearchElementHelper alloc() {
			return new ABSearchElementHelper( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject AddressKeys() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.AddressKeys( ClassHandle, CachedSelectors.AddressKeys, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void buildRepresentationFromSearchElement_builder_order_( NObjective.RuntimeObject element, NObjective.RuntimeObject builder, NObjective.RuntimeObject order ) {
			RuntimeObject ___occuredException;
			NativeMethods.buildRepresentationFromSearchElement_builder_order_( ClassHandle, CachedSelectors.buildRepresentationFromSearchElement_builder_order_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), element, builder, order );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void buildRepresentationFromSearchElement_builder_order_level_( NObjective.RuntimeObject element, NObjective.RuntimeObject builder, NObjective.RuntimeObject order, int level ) {
			RuntimeObject ___occuredException;
			NativeMethods.buildRepresentationFromSearchElement_builder_order_level_( ClassHandle, CachedSelectors.buildRepresentationFromSearchElement_builder_order_level_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), element, builder, order, level );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void calculateBestDateType_andBestValue_forTimeInterval_( System.IntPtr type, System.IntPtr andBestValue, double forTimeInterval ) {
			RuntimeObject ___occuredException;
			NativeMethods.calculateBestDateType_andBestValue_forTimeInterval_( ClassHandle, CachedSelectors.calculateBestDateType_andBestValue_forTimeInterval_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( System.IntPtr ) + sizeof( double ), type, andBestValue, forTimeInterval );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject IMProperties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.IMProperties( ClassHandle, CachedSelectors.IMProperties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static bool isSingleSearchElement_property_value_comparison_level_( NObjective.RuntimeObject element, System.IntPtr property, System.IntPtr value, System.IntPtr comparison, int level ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isSingleSearchElement_property_value_comparison_level_( ClassHandle, CachedSelectors.isSingleSearchElement_property_value_comparison_level_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ) + sizeof( int ), element, property, value, comparison, level );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject nameProperties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nameProperties( ClassHandle, CachedSelectors.nameProperties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject nameValueForConjoinedSearchElement_comparison_( NObjective.RuntimeObject element, System.IntPtr comparison ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nameValueForConjoinedSearchElement_comparison_( ClassHandle, CachedSelectors.nameValueForConjoinedSearchElement_comparison_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), element, comparison );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject propertiesOfSearchElements_( NObjective.RuntimeObject elements ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertiesOfSearchElements_( ClassHandle, CachedSelectors.propertiesOfSearchElements_, out ___occuredException, sizeof( NObjective.RuntimeObject ), elements );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr AddressKeys( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void buildRepresentationFromSearchElement_builder_order_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element, NObjective.RuntimeObject builder, NObjective.RuntimeObject order );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void buildRepresentationFromSearchElement_builder_order_level_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element, NObjective.RuntimeObject builder, NObjective.RuntimeObject order, int level );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void calculateBestDateType_andBestValue_forTimeInterval_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr type, System.IntPtr andBestValue, double forTimeInterval );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr IMProperties( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isSingleSearchElement_property_value_comparison_level_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element, System.IntPtr property, System.IntPtr value, System.IntPtr comparison, int level );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nameProperties( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nameValueForConjoinedSearchElement_comparison_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element, System.IntPtr comparison );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr propertiesOfSearchElements_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject elements );
		}
		static internal class CachedSelectors {
			public static readonly Selector AddressKeys = "AddressKeys";
			public static readonly Selector buildRepresentationFromSearchElement_builder_order_ = "buildRepresentationFromSearchElement:builder:order:";
			public static readonly Selector buildRepresentationFromSearchElement_builder_order_level_ = "buildRepresentationFromSearchElement:builder:order:level:";
			public static readonly Selector calculateBestDateType_andBestValue_forTimeInterval_ = "calculateBestDateType:andBestValue:forTimeInterval:";
			public static readonly Selector IMProperties = "IMProperties";
			public static readonly Selector isSingleSearchElement_property_value_comparison_level_ = "isSingleSearchElement:property:value:comparison:level:";
			public static readonly Selector nameProperties = "nameProperties";
			public static readonly Selector nameValueForConjoinedSearchElement_comparison_ = "nameValueForConjoinedSearchElement:comparison:";
			public static readonly Selector propertiesOfSearchElements_ = "propertiesOfSearchElements:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABSearchElement ) )]
	public struct ABSearchElementMatch : IEquatable<ABSearchElementMatch> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSearchElementMatch;
		public static implicit operator ABSearchElement( ABSearchElementMatch value ) {
			return new ABSearchElement( value.Handle );
		}
		public static implicit operator NSObject( ABSearchElementMatch value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABSearchElementMatch value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSearchElementMatch value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABSearchElementMatch?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABSearchElementMatch value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSearchElementMatch value1, ABSearchElementMatch value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSearchElementMatch value1, ABSearchElementMatch value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSearchElementMatch( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSearchElementMatch alloc() {
			return new ABSearchElementMatch( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char compareWithRecordValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareWithRecordValue_( Handle, CachedSelectors.compareWithRecordValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithProperty_label_key_value_searchPeople_comparison_( NObjective.RuntimeObject property, NObjective.RuntimeObject label, NObjective.RuntimeObject key, NObjective.RuntimeObject value, char searchPeople, int comparison ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithProperty_label_key_value_searchPeople_comparison_( Handle, CachedSelectors.initWithProperty_label_key_value_searchPeople_comparison_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( int ), property, label, key, value, searchPeople, comparison
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithProperty_label_key_value_searchPeople_searchSubscribed_comparison_( NObjective.RuntimeObject property, NObjective.RuntimeObject label, NObjective.RuntimeObject key, NObjective.RuntimeObject value, char searchPeople, char searchSubscribed, int comparison ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithProperty_label_key_value_searchPeople_searchSubscribed_comparison_( Handle, CachedSelectors.initWithProperty_label_key_value_searchPeople_searchSubscribed_comparison_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ) + sizeof( int ), property, label, key, value, searchPeople, searchSubscribed, 
			comparison );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts_MatchesRecord_row_( NObjective.RuntimeObject record, int row ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_MatchesRecord_row_( Handle, CachedSelectors.nts_MatchesRecord_row_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), record, row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareWithRecordValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithProperty_label_key_value_searchPeople_comparison_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject label, NObjective.RuntimeObject key, NObjective.RuntimeObject value, char searchPeople, int comparison
			 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithProperty_label_key_value_searchPeople_searchSubscribed_comparison_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject label, NObjective.RuntimeObject key, NObjective.RuntimeObject value, char searchPeople, char searchSubscribed, 
			int comparison );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_MatchesRecord_row_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record, int row );
		}
		static internal class CachedSelectors {
			public static readonly Selector compareWithRecordValue_ = "compareWithRecordValue:";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithProperty_label_key_value_searchPeople_comparison_ = "initWithProperty:label:key:value:searchPeople:comparison:";
			public static readonly Selector initWithProperty_label_key_value_searchPeople_searchSubscribed_comparison_ = "initWithProperty:label:key:value:searchPeople:searchSubscribed:comparison:";
			public static readonly Selector nts_MatchesRecord_row_ = "nts_MatchesRecord:row:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABSearchElementOrderManager : IEquatable<ABSearchElementOrderManager> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSearchElementOrderManager;
		public static implicit operator NSObject( ABSearchElementOrderManager value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABSearchElementOrderManager value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSearchElementOrderManager value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABSearchElementOrderManager?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABSearchElementOrderManager value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSearchElementOrderManager value1, ABSearchElementOrderManager value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSearchElementOrderManager value1, ABSearchElementOrderManager value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSearchElementOrderManager( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSearchElementOrderManager alloc() {
			return new ABSearchElementOrderManager( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject orderManager() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.orderManager( ClassHandle, CachedSelectors.orderManager, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject comparisonsForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.comparisonsForProperty_( Handle, CachedSelectors.comparisonsForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject definitionForComparison_withPropertyDefinition_( int comparison, NObjective.RuntimeObject withPropertyDefinition ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.definitionForComparison_withPropertyDefinition_( Handle, CachedSelectors.definitionForComparison_withPropertyDefinition_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ), comparison, withPropertyDefinition );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject definitionForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.definitionForProperty_( Handle, CachedSelectors.definitionForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject entryForProperty_withComparison_( NObjective.RuntimeObject property, int withComparison ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.entryForProperty_withComparison_( Handle, CachedSelectors.entryForProperty_withComparison_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), property, withComparison );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isDateComparison_forProperty_( int comparison, NObjective.RuntimeObject forProperty ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isDateComparison_forProperty_( Handle, CachedSelectors.isDateComparison_forProperty_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ), comparison, forProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isWithinTimePeriodComparison_forProperty_( int comparison, NObjective.RuntimeObject forProperty ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isWithinTimePeriodComparison_forProperty_( Handle, CachedSelectors.isWithinTimePeriodComparison_forProperty_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ), comparison, forProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isYearLessComparison_forProperty_( int comparison, NObjective.RuntimeObject forProperty ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isYearLessComparison_forProperty_( Handle, CachedSelectors.isYearLessComparison_forProperty_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ), comparison, forProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject localizedStringForComparison_withProperty_( int comparison, NObjective.RuntimeObject withProperty ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.localizedStringForComparison_withProperty_( Handle, CachedSelectors.localizedStringForComparison_withProperty_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ), comparison, withProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject localizedStringForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.localizedStringForProperty_( Handle, CachedSelectors.localizedStringForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject orderForProperty_comparison_( NObjective.RuntimeObject property, int comparison ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.orderForProperty_comparison_( Handle, CachedSelectors.orderForProperty_comparison_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), property, comparison );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject properties() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.properties( Handle, CachedSelectors.properties, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject propertyDefinitions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyDefinitions( Handle, CachedSelectors.propertyDefinitions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char propertyIsComposite_( NObjective.RuntimeObject composite ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyIsComposite_( Handle, CachedSelectors.propertyIsComposite_, out ___occuredException, sizeof( NObjective.RuntimeObject ), composite );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char putPropertyInOtherMenu_( NObjective.RuntimeObject menu ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.putPropertyInOtherMenu_( Handle, CachedSelectors.putPropertyInOtherMenu_, out ___occuredException, sizeof( NObjective.RuntimeObject ), menu );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject typeForProperty_withComparison_( NObjective.RuntimeObject property, int withComparison ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.typeForProperty_withComparison_( Handle, CachedSelectors.typeForProperty_withComparison_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), property, withComparison );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void updatePropertyWidth_andComparisonWidth_( System.IntPtr width, System.IntPtr andComparisonWidth ) {
			RuntimeObject ___occuredException;
			NativeMethods.updatePropertyWidth_andComparisonWidth_( Handle, CachedSelectors.updatePropertyWidth_andComparisonWidth_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( System.IntPtr ), width, andComparisonWidth );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr comparisonsForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr definitionForComparison_withPropertyDefinition_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int comparison, NObjective.RuntimeObject withPropertyDefinition );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr definitionForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr entryForProperty_withComparison_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, int withComparison );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isDateComparison_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int comparison, NObjective.RuntimeObject forProperty );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isWithinTimePeriodComparison_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int comparison, NObjective.RuntimeObject forProperty );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isYearLessComparison_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int comparison, NObjective.RuntimeObject forProperty );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr localizedStringForComparison_withProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int comparison, NObjective.RuntimeObject withProperty );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr localizedStringForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr orderForProperty_comparison_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, int comparison );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr orderManager( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr properties( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr propertyDefinitions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char propertyIsComposite_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject composite );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char putPropertyInOtherMenu_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject menu );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr typeForProperty_withComparison_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, int withComparison );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updatePropertyWidth_andComparisonWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr width, System.IntPtr andComparisonWidth );
		}
		static internal class CachedSelectors {
			public static readonly Selector comparisonsForProperty_ = "comparisonsForProperty:";
			public static readonly Selector definitionForComparison_withPropertyDefinition_ = "definitionForComparison:withPropertyDefinition:";
			public static readonly Selector definitionForProperty_ = "definitionForProperty:";
			public static readonly Selector entryForProperty_withComparison_ = "entryForProperty:withComparison:";
			public static readonly Selector isDateComparison_forProperty_ = "isDateComparison:forProperty:";
			public static readonly Selector isWithinTimePeriodComparison_forProperty_ = "isWithinTimePeriodComparison:forProperty:";
			public static readonly Selector isYearLessComparison_forProperty_ = "isYearLessComparison:forProperty:";
			public static readonly Selector localizedStringForComparison_withProperty_ = "localizedStringForComparison:withProperty:";
			public static readonly Selector localizedStringForProperty_ = "localizedStringForProperty:";
			public static readonly Selector orderForProperty_comparison_ = "orderForProperty:comparison:";
			public static readonly Selector orderManager = "orderManager";
			public static readonly Selector properties = "properties";
			public static readonly Selector propertyDefinitions = "propertyDefinitions";
			public static readonly Selector propertyIsComposite_ = "propertyIsComposite:";
			public static readonly Selector putPropertyInOtherMenu_ = "putPropertyInOtherMenu:";
			public static readonly Selector typeForProperty_withComparison_ = "typeForProperty:withComparison:";
			public static readonly Selector updatePropertyWidth_andComparisonWidth_ = "updatePropertyWidth:andComparisonWidth:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSView ) )]
	public struct ABSearchElementSetView : IEquatable<ABSearchElementSetView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSearchElementSetView;
		public static implicit operator NSView( ABSearchElementSetView value ) {
			return new NSView( value.Handle );
		}
		public static implicit operator NSResponder( ABSearchElementSetView value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABSearchElementSetView value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABSearchElementSetView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSearchElementSetView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABSearchElementSetView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABSearchElementSetView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSearchElementSetView value1, ABSearchElementSetView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSearchElementSetView value1, ABSearchElementSetView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSearchElementSetView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSearchElementSetView alloc() {
			return new ABSearchElementSetView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABSearchElementUIController : IEquatable<ABSearchElementUIController> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSearchElementUIController;
		public static implicit operator NSObject( ABSearchElementUIController value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABSearchElementUIController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSearchElementUIController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABSearchElementUIController?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABSearchElementUIController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSearchElementUIController value1, ABSearchElementUIController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSearchElementUIController value1, ABSearchElementUIController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSearchElementUIController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSearchElementUIController alloc() {
			return new ABSearchElementUIController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addElementView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			NativeMethods.addElementView_( Handle, CachedSelectors.addElementView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addRepresentationForElementWithProperty_value_comparison_order_( NObjective.RuntimeObject property, NObjective.RuntimeObject value, int comparison, NObjective.RuntimeObject order ) {
			RuntimeObject ___occuredException;
			NativeMethods.addRepresentationForElementWithProperty_value_comparison_order_( Handle, CachedSelectors.addRepresentationForElementWithProperty_value_comparison_order_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), property, value, comparison, order );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void animateToEncloseElements() {
			RuntimeObject ___occuredException;
			NativeMethods.animateToEncloseElements( Handle, CachedSelectors.animateToEncloseElements, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void beginSheetWithName_modalForWindow_modalDelegate_didEndSelector_contextInfo_( NObjective.RuntimeObject name, NObjective.RuntimeObject modalForWindow, NObjective.RuntimeObject modalDelegate, NObjective.Selector didEndSelector, System.IntPtr contextInfo ) {
			RuntimeObject ___occuredException;
			NativeMethods.beginSheetWithName_modalForWindow_modalDelegate_didEndSelector_contextInfo_( Handle, CachedSelectors.beginSheetWithName_modalForWindow_modalDelegate_didEndSelector_contextInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ) + sizeof( System.IntPtr ), name, modalForWindow, modalDelegate, didEndSelector, contextInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void beginSheetWithSmartGroup_modalForWindow_modalDelegate_didEndSelector_contextInfo_( NObjective.RuntimeObject @group, NObjective.RuntimeObject modalForWindow, NObjective.RuntimeObject modalDelegate, NObjective.Selector didEndSelector, System.IntPtr contextInfo ) {
			RuntimeObject ___occuredException;
			NativeMethods.beginSheetWithSmartGroup_modalForWindow_modalDelegate_didEndSelector_contextInfo_( Handle, CachedSelectors.beginSheetWithSmartGroup_modalForWindow_modalDelegate_didEndSelector_contextInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ) + sizeof( System.IntPtr ), @group, modalForWindow, modalDelegate, didEndSelector, contextInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void buildElementsFromSmartGroup_( NObjective.RuntimeObject @group ) {
			RuntimeObject ___occuredException;
			NativeMethods.buildElementsFromSmartGroup_( Handle, CachedSelectors.buildElementsFromSmartGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @group );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void fixKeyViews() {
			RuntimeObject ___occuredException;
			NativeMethods.fixKeyViews( Handle, CachedSelectors.fixKeyViews, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void handleCancel_( NObjective.RuntimeObject cancel ) {
			RuntimeObject ___occuredException;
			NativeMethods.handleCancel_( Handle, CachedSelectors.handleCancel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cancel );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void handleOK_( NObjective.RuntimeObject ok ) {
			RuntimeObject ___occuredException;
			NativeMethods.handleOK_( Handle, CachedSelectors.handleOK_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ok );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void help_( NObjective.RuntimeObject help ) {
			RuntimeObject ___occuredException;
			NativeMethods.help_( Handle, CachedSelectors.help_, out ___occuredException, sizeof( NObjective.RuntimeObject ), help );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nameValueForConjoinedSearchElement_comparison_( NObjective.RuntimeObject element, System.IntPtr comparison ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nameValueForConjoinedSearchElement_comparison_( Handle, CachedSelectors.nameValueForConjoinedSearchElement_comparison_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), element, comparison );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject newButtonAsPlus_atIndex_( char plus, int atIndex ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.newButtonAsPlus_atIndex_( Handle, CachedSelectors.newButtonAsPlus_atIndex_, out ___occuredException, sizeof( char ) + sizeof( int ), plus, atIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nextKeyViewForElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextKeyViewForElement_( Handle, CachedSelectors.nextKeyViewForElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject propertiesOfSearchElements_( NObjective.RuntimeObject elements ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertiesOfSearchElements_( Handle, CachedSelectors.propertiesOfSearchElements_, out ___occuredException, sizeof( NObjective.RuntimeObject ), elements );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void removeElementView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeElementView_( Handle, CachedSelectors.removeElementView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject searchElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchElement( Handle, CachedSelectors.searchElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setConjunction_( int conjunction ) {
			RuntimeObject ___occuredException;
			NativeMethods.setConjunction_( Handle, CachedSelectors.setConjunction_, out ___occuredException, sizeof( int ), conjunction );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDelegate_( Handle, CachedSelectors.setDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDocWindow_( NObjective.RuntimeObject window ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDocWindow_( Handle, CachedSelectors.setDocWindow_, out ___occuredException, sizeof( NObjective.RuntimeObject ), window );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setName_( Handle, CachedSelectors.setName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject smartGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.smartGroup( Handle, CachedSelectors.smartGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void textDidChange_( NObjective.RuntimeObject change ) {
			RuntimeObject ___occuredException;
			NativeMethods.textDidChange_( Handle, CachedSelectors.textDidChange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), change );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char tracksModification() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tracksModification( Handle, CachedSelectors.tracksModification, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void updateAndOrUI() {
			RuntimeObject ___occuredException;
			NativeMethods.updateAndOrUI( Handle, CachedSelectors.updateAndOrUI, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateOKButton() {
			RuntimeObject ___occuredException;
			NativeMethods.updateOKButton( Handle, CachedSelectors.updateOKButton, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addElementView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addRepresentationForElementWithProperty_value_comparison_order_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject value, int comparison, NObjective.RuntimeObject order );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void animateToEncloseElements( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void beginSheetWithName_modalForWindow_modalDelegate_didEndSelector_contextInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, NObjective.RuntimeObject modalForWindow, NObjective.RuntimeObject modalDelegate, NObjective.Selector didEndSelector, System.IntPtr contextInfo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void beginSheetWithSmartGroup_modalForWindow_modalDelegate_didEndSelector_contextInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject modalForWindow, NObjective.RuntimeObject modalDelegate, NObjective.Selector didEndSelector, System.IntPtr contextInfo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void buildElementsFromSmartGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void fixKeyViews( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void handleCancel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cancel );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void handleOK_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ok );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void help_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject help );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nameValueForConjoinedSearchElement_comparison_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element, System.IntPtr comparison );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr newButtonAsPlus_atIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char plus, int atIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nextKeyViewForElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr propertiesOfSearchElements_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject elements );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeElementView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr searchElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setConjunction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int conjunction );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDocWindow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject window );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr smartGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void textDidChange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject change );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char tracksModification( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateAndOrUI( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateOKButton( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addElementView_ = "addElementView:";
			public static readonly Selector addRepresentationForElementWithProperty_value_comparison_order_ = "addRepresentationForElementWithProperty:value:comparison:order:";
			public static readonly Selector animateToEncloseElements = "animateToEncloseElements";
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector beginSheetWithName_modalForWindow_modalDelegate_didEndSelector_contextInfo_ = "beginSheetWithName:modalForWindow:modalDelegate:didEndSelector:contextInfo:";
			public static readonly Selector beginSheetWithSmartGroup_modalForWindow_modalDelegate_didEndSelector_contextInfo_ = "beginSheetWithSmartGroup:modalForWindow:modalDelegate:didEndSelector:contextInfo:";
			public static readonly Selector buildElementsFromSmartGroup_ = "buildElementsFromSmartGroup:";
			public static readonly Selector fixKeyViews = "fixKeyViews";
			public static readonly Selector handleCancel_ = "handleCancel:";
			public static readonly Selector handleOK_ = "handleOK:";
			public static readonly Selector help_ = "help:";
			public static readonly Selector name = "name";
			public static readonly Selector nameValueForConjoinedSearchElement_comparison_ = "nameValueForConjoinedSearchElement:comparison:";
			public static readonly Selector newButtonAsPlus_atIndex_ = "newButtonAsPlus:atIndex:";
			public static readonly Selector nextKeyViewForElement_ = "nextKeyViewForElement:";
			public static readonly Selector propertiesOfSearchElements_ = "propertiesOfSearchElements:";
			public static readonly Selector removeElementView_ = "removeElementView:";
			public static readonly Selector searchElement = "searchElement";
			public static readonly Selector setConjunction_ = "setConjunction:";
			public static readonly Selector setDelegate_ = "setDelegate:";
			public static readonly Selector setDocWindow_ = "setDocWindow:";
			public static readonly Selector setName_ = "setName:";
			public static readonly Selector smartGroup = "smartGroup";
			public static readonly Selector textDidChange_ = "textDidChange:";
			public static readonly Selector tracksModification = "tracksModification";
			public static readonly Selector updateAndOrUI = "updateAndOrUI";
			public static readonly Selector updateOKButton = "updateOKButton";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSView ) )]
	public struct ABSearchElementView : IEquatable<ABSearchElementView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSearchElementView;
		public static implicit operator NSView( ABSearchElementView value ) {
			return new NSView( value.Handle );
		}
		public static implicit operator NSResponder( ABSearchElementView value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABSearchElementView value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABSearchElementView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSearchElementView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABSearchElementView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABSearchElementView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSearchElementView value1, ABSearchElementView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSearchElementView value1, ABSearchElementView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSearchElementView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSearchElementView alloc() {
			return new ABSearchElementView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static int defaultComparisonForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultComparisonForProperty_( ClassHandle, CachedSelectors.defaultComparisonForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject orderManager() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.orderManager( ClassHandle, CachedSelectors.orderManager, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addProperty_withLocalization_toMenu_( NObjective.RuntimeObject property, NObjective.RuntimeObject withLocalization, NObjective.RuntimeObject toMenu ) {
			RuntimeObject ___occuredException;
			NativeMethods.addProperty_withLocalization_toMenu_( Handle, CachedSelectors.addProperty_withLocalization_toMenu_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), property, withLocalization, toMenu );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int comparison() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.comparison( Handle, CachedSelectors.comparison, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void comparisonChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.comparisonChanged_( Handle, CachedSelectors.comparisonChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int comparisonForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.comparisonForProperty_( Handle, CachedSelectors.comparisonForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject comparisonPopUpForProperty_withSelection_( NObjective.RuntimeObject property, int withSelection ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.comparisonPopUpForProperty_withSelection_( Handle, CachedSelectors.comparisonPopUpForProperty_withSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), property, withSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject conjoinedElementForProperties_value_withComparison_( NObjective.RuntimeObject properties, NObjective.RuntimeObject value, int withComparison ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.conjoinedElementForProperties_value_withComparison_( Handle, CachedSelectors.conjoinedElementForProperties_value_withComparison_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), properties, value, withComparison );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject conjoinedElementForProperty_keys_value_withComparison_( NObjective.RuntimeObject property, NObjective.RuntimeObject keys, NObjective.RuntimeObject value, int withComparison ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.conjoinedElementForProperty_keys_value_withComparison_( Handle, CachedSelectors.conjoinedElementForProperty_keys_value_withComparison_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), property, keys, value, withComparison );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void dateMatchingTypeChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.dateMatchingTypeChanged_( Handle, CachedSelectors.dateMatchingTypeChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject entryViewForEntry_( NObjective.RuntimeObject entry ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.entryViewForEntry_( Handle, CachedSelectors.entryViewForEntry_, out ___occuredException, sizeof( NObjective.RuntimeObject ), entry );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int junctionForComparison_value_( int comparison, NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.junctionForComparison_value_( Handle, CachedSelectors.junctionForComparison_value_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ), comparison, value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject property() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.property( Handle, CachedSelectors.property, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void propertyChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.propertyChanged_( Handle, CachedSelectors.propertyChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char requiresValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requiresValue( Handle, CachedSelectors.requiresValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject searchElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchElement( Handle, CachedSelectors.searchElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setComparison_( int comparison ) {
			RuntimeObject ___occuredException;
			NativeMethods.setComparison_( Handle, CachedSelectors.setComparison_, out ___occuredException, sizeof( int ), comparison );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setProperty_comparison_value_( NObjective.RuntimeObject property, int comparison, NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.setProperty_comparison_value_( Handle, CachedSelectors.setProperty_comparison_value_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), property, comparison, value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValue_withProperty_comparison_entryView_( NObjective.RuntimeObject value, NObjective.RuntimeObject withProperty, int comparison, NObjective.RuntimeObject entryView ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValue_withProperty_comparison_entryView_( Handle, CachedSelectors.setValue_withProperty_comparison_entryView_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), value, withProperty, comparison, entryView );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setWidgets_( NObjective.RuntimeObject widgets ) {
			RuntimeObject ___occuredException;
			NativeMethods.setWidgets_( Handle, CachedSelectors.setWidgets_, out ___occuredException, sizeof( NObjective.RuntimeObject ), widgets );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject subvalue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subvalue( Handle, CachedSelectors.subvalue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void textFieldChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.textFieldChanged_( Handle, CachedSelectors.textFieldChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void textMatchingChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.textMatchingChanged_( Handle, CachedSelectors.textMatchingChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateWithinDateTense() {
			RuntimeObject ___occuredException;
			NativeMethods.updateWithinDateTense( Handle, CachedSelectors.updateWithinDateTense, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateWithinDateWidgetsWithInterval_( double interval ) {
			RuntimeObject ___occuredException;
			NativeMethods.updateWithinDateWidgetsWithInterval_( Handle, CachedSelectors.updateWithinDateWidgetsWithInterval_, out ___occuredException, sizeof( double ), interval );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject value() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.value( Handle, CachedSelectors.value, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addProperty_withLocalization_toMenu_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject withLocalization, NObjective.RuntimeObject toMenu );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int comparison( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void comparisonChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int comparisonForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr comparisonPopUpForProperty_withSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, int withSelection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr conjoinedElementForProperties_value_withComparison_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject properties, NObjective.RuntimeObject value, int withComparison );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr conjoinedElementForProperty_keys_value_withComparison_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, NObjective.RuntimeObject keys, NObjective.RuntimeObject value, int withComparison );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void dateMatchingTypeChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int defaultComparisonForProperty_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr entryViewForEntry_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject entry );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int junctionForComparison_value_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int comparison, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr orderManager( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr property( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void propertyChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char requiresValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr searchElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setComparison_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int comparison );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setProperty_comparison_value_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property, int comparison, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValue_withProperty_comparison_entryView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject withProperty, int comparison, NObjective.RuntimeObject entryView );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWidgets_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject widgets );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr subvalue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void textFieldChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void textMatchingChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateWithinDateTense( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateWithinDateWidgetsWithInterval_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double interval );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr value( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addProperty_withLocalization_toMenu_ = "addProperty:withLocalization:toMenu:";
			public static readonly Selector comparison = "comparison";
			public static readonly Selector comparisonChanged_ = "comparisonChanged:";
			public static readonly Selector comparisonForProperty_ = "comparisonForProperty:";
			public static readonly Selector comparisonPopUpForProperty_withSelection_ = "comparisonPopUpForProperty:withSelection:";
			public static readonly Selector conjoinedElementForProperties_value_withComparison_ = "conjoinedElementForProperties:value:withComparison:";
			public static readonly Selector conjoinedElementForProperty_keys_value_withComparison_ = "conjoinedElementForProperty:keys:value:withComparison:";
			public static readonly Selector dateMatchingTypeChanged_ = "dateMatchingTypeChanged:";
			public static readonly Selector defaultComparisonForProperty_ = "defaultComparisonForProperty:";
			public static readonly Selector entryViewForEntry_ = "entryViewForEntry:";
			public static readonly Selector junctionForComparison_value_ = "junctionForComparison:value:";
			public static readonly Selector orderManager = "orderManager";
			public static readonly Selector property = "property";
			public static readonly Selector propertyChanged_ = "propertyChanged:";
			public static readonly Selector requiresValue = "requiresValue";
			public static readonly Selector searchElement = "searchElement";
			public static readonly Selector setComparison_ = "setComparison:";
			public static readonly Selector setProperty_comparison_value_ = "setProperty:comparison:value:";
			public static readonly Selector setValue_withProperty_comparison_entryView_ = "setValue:withProperty:comparison:entryView:";
			public static readonly Selector setWidgets_ = "setWidgets:";
			public static readonly Selector subvalue = "subvalue";
			public static readonly Selector textFieldChanged_ = "textFieldChanged:";
			public static readonly Selector textMatchingChanged_ = "textMatchingChanged:";
			public static readonly Selector updateWithinDateTense = "updateWithinDateTense";
			public static readonly Selector updateWithinDateWidgetsWithInterval_ = "updateWithinDateWidgetsWithInterval:";
			public static readonly Selector value = "value";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSSearchField ) )]
	public struct ABSearchField : IEquatable<ABSearchField> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSearchField;
		public static implicit operator NSSearchField( ABSearchField value ) {
			return new NSSearchField( value.Handle );
		}
		public static implicit operator NSTextField( ABSearchField value ) {
			return new NSTextField( value.Handle );
		}
		public static implicit operator NSControl( ABSearchField value ) {
			return new NSControl( value.Handle );
		}
		public static implicit operator NSView( ABSearchField value ) {
			return new NSView( value.Handle );
		}
		public static implicit operator NSResponder( ABSearchField value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABSearchField value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABSearchField value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSearchField value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABSearchField?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABSearchField value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSearchField value1, ABSearchField value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSearchField value1, ABSearchField value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSearchField( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSearchField alloc() {
			return new ABSearchField( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void doDelete_( NObjective.RuntimeObject delete ) {
			RuntimeObject ___occuredException;
			NativeMethods.doDelete_( Handle, CachedSelectors.doDelete_, out ___occuredException, sizeof( NObjective.RuntimeObject ), delete );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void doSelectAll_( NObjective.RuntimeObject all ) {
			RuntimeObject ___occuredException;
			NativeMethods.doSelectAll_( Handle, CachedSelectors.doSelectAll_, out ___occuredException, sizeof( NObjective.RuntimeObject ), all );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUIController_( NObjective.RuntimeObject controller ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUIController_( Handle, CachedSelectors.setUIController_, out ___occuredException, sizeof( NObjective.RuntimeObject ), controller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setupSearchMenu() {
			RuntimeObject ___occuredException;
			NativeMethods.setupSearchMenu( Handle, CachedSelectors.setupSearchMenu, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void doDelete_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject delete );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void doSelectAll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject all );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUIController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setupSearchMenu( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector doDelete_ = "doDelete:";
			public static readonly Selector doSelectAll_ = "doSelectAll:";
			public static readonly Selector setUIController_ = "setUIController:";
			public static readonly Selector setupSearchMenu = "setupSearchMenu";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSSearchFieldCell ) )]
	public struct ABSearchFieldCell : IEquatable<ABSearchFieldCell> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSearchFieldCell;
		public static implicit operator NSSearchFieldCell( ABSearchFieldCell value ) {
			return new NSSearchFieldCell( value.Handle );
		}
		public static implicit operator NSTextFieldCell( ABSearchFieldCell value ) {
			return new NSTextFieldCell( value.Handle );
		}
		public static implicit operator NSActionCell( ABSearchFieldCell value ) {
			return new NSActionCell( value.Handle );
		}
		public static implicit operator NSCell( ABSearchFieldCell value ) {
			return new NSCell( value.Handle );
		}
		public static implicit operator NSObject( ABSearchFieldCell value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABSearchFieldCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSearchFieldCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABSearchFieldCell?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABSearchFieldCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSearchFieldCell value1, ABSearchFieldCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSearchFieldCell value1, ABSearchFieldCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSearchFieldCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSearchFieldCell alloc() {
			return new ABSearchFieldCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSButton ) )]
	public struct ABSeparatedButtons : IEquatable<ABSeparatedButtons> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSeparatedButtons;
		public static implicit operator NSButton( ABSeparatedButtons value ) {
			return new NSButton( value.Handle );
		}
		public static implicit operator NSControl( ABSeparatedButtons value ) {
			return new NSControl( value.Handle );
		}
		public static implicit operator NSView( ABSeparatedButtons value ) {
			return new NSView( value.Handle );
		}
		public static implicit operator NSResponder( ABSeparatedButtons value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABSeparatedButtons value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABSeparatedButtons value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSeparatedButtons value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABSeparatedButtons?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABSeparatedButtons value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSeparatedButtons value1, ABSeparatedButtons value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSeparatedButtons value1, ABSeparatedButtons value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSeparatedButtons( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSeparatedButtons alloc() {
			return new ABSeparatedButtons( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject accessibleChildren() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibleChildren( Handle, CachedSelectors.accessibleChildren, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char cellEnabled_( int enabled ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cellEnabled_( Handle, CachedSelectors.cellEnabled_, out ___occuredException, sizeof( int ), enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void performClickOnCell_( int cell ) {
			RuntimeObject ___occuredException;
			NativeMethods.performClickOnCell_( Handle, CachedSelectors.performClickOnCell_, out ___occuredException, sizeof( int ), cell );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int selectedCellIndex() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedCellIndex( Handle, CachedSelectors.selectedCellIndex, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setCell_enabled_( int cell, char enabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCell_enabled_( Handle, CachedSelectors.setCell_enabled_, out ___occuredException, sizeof( int ) + sizeof( char ), cell, enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int trackedCell() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.trackedCell( Handle, CachedSelectors.trackedCell, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibleChildren( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char cellEnabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int enabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void performClickOnCell_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int cell );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int selectedCellIndex( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCell_enabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int cell, char enabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int trackedCell( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector accessibleChildren = "accessibleChildren";
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector cellEnabled_ = "cellEnabled:";
			public static readonly Selector performClickOnCell_ = "performClickOnCell:";
			public static readonly Selector selectedCellIndex = "selectedCellIndex";
			public static readonly Selector setCell_enabled_ = "setCell:enabled:";
			public static readonly Selector trackedCell = "trackedCell";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABAccessibilityMockUIElement ) )]
	public struct ABSeparatedButtonsAccessibilityElement : IEquatable<ABSeparatedButtonsAccessibilityElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSeparatedButtonsAccessibilityElement;
		public static implicit operator ABAccessibilityMockUIElement( ABSeparatedButtonsAccessibilityElement value ) {
			return new ABAccessibilityMockUIElement( value.Handle );
		}
		public static implicit operator NSObject( ABSeparatedButtonsAccessibilityElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABSeparatedButtonsAccessibilityElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSeparatedButtonsAccessibilityElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABSeparatedButtonsAccessibilityElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABSeparatedButtonsAccessibilityElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSeparatedButtonsAccessibilityElement value1, ABSeparatedButtonsAccessibilityElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSeparatedButtonsAccessibilityElement value1, ABSeparatedButtonsAccessibilityElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSeparatedButtonsAccessibilityElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSeparatedButtonsAccessibilityElement alloc() {
			return new ABSeparatedButtonsAccessibilityElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject accessibilityEnabledAttribute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityEnabledAttribute( Handle, CachedSelectors.accessibilityEnabledAttribute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityTitleAttribute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityTitleAttribute( Handle, CachedSelectors.accessibilityTitleAttribute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char goesNext() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.goesNext( Handle, CachedSelectors.goesNext, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject initWithRole_parent_goesNext_( NObjective.RuntimeObject role, NObjective.RuntimeObject parent, char goesNext ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithRole_parent_goesNext_( Handle, CachedSelectors.initWithRole_parent_goesNext_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), role, parent, goesNext );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityEnabledAttribute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityTitleAttribute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char goesNext( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithRole_parent_goesNext_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject role, NObjective.RuntimeObject parent, char goesNext );
		}
		static internal class CachedSelectors {
			public static readonly Selector accessibilityEnabledAttribute = "accessibilityEnabledAttribute";
			public static readonly Selector accessibilityTitleAttribute = "accessibilityTitleAttribute";
			public static readonly Selector goesNext = "goesNext";
			public static readonly Selector initWithRole_parent_goesNext_ = "initWithRole:parent:goesNext:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSButtonCell ) )]
	public struct ABSeparatedButtonsCell : IEquatable<ABSeparatedButtonsCell> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSeparatedButtonsCell;
		public static implicit operator NSButtonCell( ABSeparatedButtonsCell value ) {
			return new NSButtonCell( value.Handle );
		}
		public static implicit operator NSActionCell( ABSeparatedButtonsCell value ) {
			return new NSActionCell( value.Handle );
		}
		public static implicit operator NSCell( ABSeparatedButtonsCell value ) {
			return new NSCell( value.Handle );
		}
		public static implicit operator NSObject( ABSeparatedButtonsCell value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABSeparatedButtonsCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSeparatedButtonsCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABSeparatedButtonsCell?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABSeparatedButtonsCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSeparatedButtonsCell value1, ABSeparatedButtonsCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSeparatedButtonsCell value1, ABSeparatedButtonsCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSeparatedButtonsCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSeparatedButtonsCell alloc() {
			return new ABSeparatedButtonsCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char acceptsFirstResponderForView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.acceptsFirstResponderForView_( Handle, CachedSelectors.acceptsFirstResponderForView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char cellEnabled_( int enabled ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cellEnabled_( Handle, CachedSelectors.cellEnabled_, out ___occuredException, sizeof( int ), enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void controlViewWillBecomeFirstResponder_( NObjective.RuntimeObject responder ) {
			RuntimeObject ___occuredException;
			NativeMethods.controlViewWillBecomeFirstResponder_( Handle, CachedSelectors.controlViewWillBecomeFirstResponder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), responder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void controlViewWillResignFirstResponder_( NObjective.RuntimeObject responder ) {
			RuntimeObject ___occuredException;
			NativeMethods.controlViewWillResignFirstResponder_( Handle, CachedSelectors.controlViewWillResignFirstResponder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), responder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithButton_( NObjective.RuntimeObject button ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithButton_( Handle, CachedSelectors.initWithButton_, out ___occuredException, sizeof( NObjective.RuntimeObject ), button );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char moveSelectionLeft() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.moveSelectionLeft( Handle, CachedSelectors.moveSelectionLeft, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char moveSelectionRight() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.moveSelectionRight( Handle, CachedSelectors.moveSelectionRight, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int selectedCellIndex() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedCellIndex( Handle, CachedSelectors.selectedCellIndex, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setCell_enabled_( int cell, char enabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCell_enabled_( Handle, CachedSelectors.setCell_enabled_, out ___occuredException, sizeof( int ) + sizeof( char ), cell, enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCell_selected_( int cell, char selected ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCell_selected_( Handle, CachedSelectors.setCell_selected_, out ___occuredException, sizeof( int ) + sizeof( char ), cell, selected );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char acceptsFirstResponderForView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char cellEnabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int enabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void controlViewWillBecomeFirstResponder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject responder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void controlViewWillResignFirstResponder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject responder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithButton_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject button );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char moveSelectionLeft( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char moveSelectionRight( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int selectedCellIndex( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCell_enabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int cell, char enabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCell_selected_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int cell, char selected );
		}
		static internal class CachedSelectors {
			public static readonly Selector acceptsFirstResponderForView_ = "acceptsFirstResponderForView:";
			public static readonly Selector cellEnabled_ = "cellEnabled:";
			public static readonly Selector controlViewWillBecomeFirstResponder_ = "controlViewWillBecomeFirstResponder:";
			public static readonly Selector controlViewWillResignFirstResponder_ = "controlViewWillResignFirstResponder:";
			public static readonly Selector initWithButton_ = "initWithButton:";
			public static readonly Selector moveSelectionLeft = "moveSelectionLeft";
			public static readonly Selector moveSelectionRight = "moveSelectionRight";
			public static readonly Selector selectedCellIndex = "selectedCellIndex";
			public static readonly Selector setCell_enabled_ = "setCell:enabled:";
			public static readonly Selector setCell_selected_ = "setCell:selected:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSTextAttachmentCell ) )]
	public struct ABSeparatorLineCell : IEquatable<ABSeparatorLineCell> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSeparatorLineCell;
		public static implicit operator NSTextAttachmentCell( ABSeparatorLineCell value ) {
			return new NSTextAttachmentCell( value.Handle );
		}
		public static implicit operator NSCell( ABSeparatorLineCell value ) {
			return new NSCell( value.Handle );
		}
		public static implicit operator NSObject( ABSeparatorLineCell value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABSeparatorLineCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSeparatorLineCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABSeparatorLineCell?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABSeparatorLineCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSeparatorLineCell value1, ABSeparatorLineCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSeparatorLineCell value1, ABSeparatorLineCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSeparatorLineCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSeparatorLineCell alloc() {
			return new ABSeparatorLineCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABCommand ) )]
	public struct ABSetImageCommand : IEquatable<ABSetImageCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSetImageCommand;
		public static implicit operator ABCommand( ABSetImageCommand value ) {
			return new ABCommand( value.Handle );
		}
		public static implicit operator NSObject( ABSetImageCommand value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABSetImageCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSetImageCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABSetImageCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABSetImageCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSetImageCommand value1, ABSetImageCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSetImageCommand value1, ABSetImageCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSetImageCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSetImageCommand alloc() {
			return new ABSetImageCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithPerson_imageData_( NObjective.RuntimeObject person, NObjective.RuntimeObject imageData ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithPerson_imageData_( Handle, CachedSelectors.initWithPerson_imageData_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), person, imageData );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithPerson_imageData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person, NObjective.RuntimeObject imageData );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithPerson_imageData_ = "initWithPerson:imageData:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABCommand ) )]
	public struct ABShowAsCommand : IEquatable<ABShowAsCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABShowAsCommand;
		public static implicit operator ABCommand( ABShowAsCommand value ) {
			return new ABCommand( value.Handle );
		}
		public static implicit operator NSObject( ABShowAsCommand value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABShowAsCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABShowAsCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABShowAsCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABShowAsCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABShowAsCommand value1, ABShowAsCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABShowAsCommand value1, ABShowAsCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABShowAsCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABShowAsCommand alloc() {
			return new ABShowAsCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithGroup_members_showAs_( NObjective.RuntimeObject @group, NObjective.RuntimeObject members, int showAs ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithGroup_members_showAs_( Handle, CachedSelectors.initWithGroup_members_showAs_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), @group, members, showAs );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithGroup_members_showAs_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject members, int showAs );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithGroup_members_showAs_ = "initWithGroup:members:showAs:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABImportPanelController ) )]
	public struct ABSimpleImportController : IEquatable<ABSimpleImportController> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSimpleImportController;
		public static implicit operator ABImportPanelController( ABSimpleImportController value ) {
			return new ABImportPanelController( value.Handle );
		}
		public static implicit operator NSObject( ABSimpleImportController value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABSimpleImportController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSimpleImportController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABSimpleImportController?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABSimpleImportController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSimpleImportController value1, ABSimpleImportController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSimpleImportController value1, ABSimpleImportController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSimpleImportController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSimpleImportController alloc() {
			return new ABSimpleImportController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject simpleControllerWithUIController_( NObjective.RuntimeObject controller ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.simpleControllerWithUIController_( ClassHandle, CachedSelectors.simpleControllerWithUIController_, out ___occuredException, sizeof( NObjective.RuntimeObject ), controller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void importPeople_intoGroup_( NObjective.RuntimeObject people, NObjective.RuntimeObject intoGroup ) {
			RuntimeObject ___occuredException;
			NativeMethods.importPeople_intoGroup_( Handle, CachedSelectors.importPeople_intoGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), people, intoGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void importPeople_intoGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject people, NObjective.RuntimeObject intoGroup );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr simpleControllerWithUIController_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller );
		}
		static internal class CachedSelectors {
			public static readonly Selector importPeople_intoGroup_ = "importPeople:intoGroup:";
			public static readonly Selector simpleControllerWithUIController_ = "simpleControllerWithUIController:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSView ) )]
	public struct ABSingleColorView : IEquatable<ABSingleColorView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSingleColorView;
		public static implicit operator NSView( ABSingleColorView value ) {
			return new NSView( value.Handle );
		}
		public static implicit operator NSResponder( ABSingleColorView value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABSingleColorView value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABSingleColorView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSingleColorView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABSingleColorView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABSingleColorView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSingleColorView value1, ABSingleColorView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSingleColorView value1, ABSingleColorView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSingleColorView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSingleColorView alloc() {
			return new ABSingleColorView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABGroup ) )]
	public struct ABSmartGroup : IEquatable<ABSmartGroup> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSmartGroup;
		public static implicit operator ABGroup( ABSmartGroup value ) {
			return new ABGroup( value.Handle );
		}
		public static implicit operator ABRecord( ABSmartGroup value ) {
			return new ABRecord( value.Handle );
		}
		public static implicit operator NSObject( ABSmartGroup value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABSmartGroup value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSmartGroup value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABSmartGroup?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABSmartGroup value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSmartGroup value1, ABSmartGroup value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSmartGroup value1, ABSmartGroup value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSmartGroup( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSmartGroup alloc() {
			return new ABSmartGroup( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject nts_SmartGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SmartGroups( ClassHandle, CachedSelectors.nts_SmartGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject smartGroups() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.smartGroups( ClassHandle, CachedSelectors.smartGroups, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isModified() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isModified( Handle, CachedSelectors.isModified, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char nts_IsModified() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_IsModified( Handle, CachedSelectors.nts_IsModified, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nts_SearchElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_SearchElement( Handle, CachedSelectors.nts_SearchElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nts_SetIsModified_( char modified ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_SetIsModified_( Handle, CachedSelectors.nts_SetIsModified_, out ___occuredException, sizeof( char ), modified );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_SetSearchElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_SetSearchElement_( Handle, CachedSelectors.nts_SetSearchElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nts_SetTracksModification_( char modification ) {
			RuntimeObject ___occuredException;
			NativeMethods.nts_SetTracksModification_( Handle, CachedSelectors.nts_SetTracksModification_, out ___occuredException, sizeof( char ), modification );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char nts_TracksModification() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_TracksModification( Handle, CachedSelectors.nts_TracksModification, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject searchElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchElement( Handle, CachedSelectors.searchElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setIsModified_( char modified ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIsModified_( Handle, CachedSelectors.setIsModified_, out ___occuredException, sizeof( char ), modified );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSearchElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSearchElement_( Handle, CachedSelectors.setSearchElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTracksModification_( char modification ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTracksModification_( Handle, CachedSelectors.setTracksModification_, out ___occuredException, sizeof( char ), modification );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char tracksModification() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tracksModification( Handle, CachedSelectors.tracksModification, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isModified( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_IsModified( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_SearchElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_SetIsModified_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char modified );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_SetSearchElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nts_SetTracksModification_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char modification );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_SmartGroups( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_TracksModification( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr searchElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setIsModified_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char modified );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSearchElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTracksModification_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char modification );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr smartGroups( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char tracksModification( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector isModified = "isModified";
			public static readonly Selector nts_IsModified = "nts_IsModified";
			public static readonly Selector nts_SearchElement = "nts_SearchElement";
			public static readonly Selector nts_SetIsModified_ = "nts_SetIsModified:";
			public static readonly Selector nts_SetSearchElement_ = "nts_SetSearchElement:";
			public static readonly Selector nts_SetTracksModification_ = "nts_SetTracksModification:";
			public static readonly Selector nts_SmartGroups = "nts_SmartGroups";
			public static readonly Selector nts_TracksModification = "nts_TracksModification";
			public static readonly Selector searchElement = "searchElement";
			public static readonly Selector setIsModified_ = "setIsModified:";
			public static readonly Selector setSearchElement_ = "setSearchElement:";
			public static readonly Selector setTracksModification_ = "setTracksModification:";
			public static readonly Selector smartGroups = "smartGroups";
			public static readonly Selector tracksModification = "tracksModification";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSFormatter ) )]
	public struct ABSpaceFormatter : IEquatable<ABSpaceFormatter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSpaceFormatter;
		public static implicit operator NSFormatter( ABSpaceFormatter value ) {
			return new NSFormatter( value.Handle );
		}
		public static implicit operator NSObject( ABSpaceFormatter value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABSpaceFormatter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSpaceFormatter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABSpaceFormatter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABSpaceFormatter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSpaceFormatter value1, ABSpaceFormatter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSpaceFormatter value1, ABSpaceFormatter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSpaceFormatter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSpaceFormatter alloc() {
			return new ABSpaceFormatter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSSplitView ) )]
	public struct ABSplitView : IEquatable<ABSplitView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSplitView;
		public static implicit operator NSSplitView( ABSplitView value ) {
			return new NSSplitView( value.Handle );
		}
		public static implicit operator NSView( ABSplitView value ) {
			return new NSView( value.Handle );
		}
		public static implicit operator NSResponder( ABSplitView value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABSplitView value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABSplitView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSplitView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABSplitView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABSplitView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSplitView value1, ABSplitView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSplitView value1, ABSplitView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSplitView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSplitView alloc() {
			return new ABSplitView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void resizeColumnAtIndex_toWidth_( int index, float toWidth ) {
			RuntimeObject ___occuredException;
			NativeMethods.resizeColumnAtIndex_toWidth_( Handle, CachedSelectors.resizeColumnAtIndex_toWidth_, out ___occuredException, sizeof( int ) + sizeof( float ), index, toWidth );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void switchPanes_( NObjective.RuntimeObject panes ) {
			RuntimeObject ___occuredException;
			NativeMethods.switchPanes_( Handle, CachedSelectors.switchPanes_, out ___occuredException, sizeof( NObjective.RuntimeObject ), panes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resizeColumnAtIndex_toWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int index, float toWidth );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void switchPanes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject panes );
		}
		static internal class CachedSelectors {
			public static readonly Selector resizeColumnAtIndex_toWidth_ = "resizeColumnAtIndex:toWidth:";
			public static readonly Selector switchPanes_ = "switchPanes:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABAccessibilityMockUIElement ) )]
	public struct ABSubrowGroupElement : IEquatable<ABSubrowGroupElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSubrowGroupElement;
		public static implicit operator ABAccessibilityMockUIElement( ABSubrowGroupElement value ) {
			return new ABAccessibilityMockUIElement( value.Handle );
		}
		public static implicit operator NSObject( ABSubrowGroupElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABSubrowGroupElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSubrowGroupElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABSubrowGroupElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABSubrowGroupElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSubrowGroupElement value1, ABSubrowGroupElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSubrowGroupElement value1, ABSubrowGroupElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSubrowGroupElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSubrowGroupElement alloc() {
			return new ABSubrowGroupElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject accessibilityChildrenAttribute() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityChildrenAttribute( Handle, CachedSelectors.accessibilityChildrenAttribute, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityPositionOfChild_( NObjective.RuntimeObject child ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityPositionOfChild_( Handle, CachedSelectors.accessibilityPositionOfChild_, out ___occuredException, sizeof( NObjective.RuntimeObject ), child );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilitySelectedAttributeOfChild_( NObjective.RuntimeObject child ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilitySelectedAttributeOfChild_( Handle, CachedSelectors.accessibilitySelectedAttributeOfChild_, out ___occuredException, sizeof( NObjective.RuntimeObject ), child );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void accessibilitySetSelectedAttributeOfChild_toValue_( NObjective.RuntimeObject child, NObjective.RuntimeObject toValue ) {
			RuntimeObject ___occuredException;
			NativeMethods.accessibilitySetSelectedAttributeOfChild_toValue_( Handle, CachedSelectors.accessibilitySetSelectedAttributeOfChild_toValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), child, toValue );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject accessibilitySizeOfChild_( NObjective.RuntimeObject child ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilitySizeOfChild_( Handle, CachedSelectors.accessibilitySizeOfChild_, out ___occuredException, sizeof( NObjective.RuntimeObject ), child );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithRole_parent_tableView_row_( NObjective.RuntimeObject role, NObjective.RuntimeObject parent, NObjective.RuntimeObject tableView, int row ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithRole_parent_tableView_row_( Handle, CachedSelectors.initWithRole_parent_tableView_row_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), role, parent, tableView, row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityChildrenAttribute( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityPositionOfChild_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject child );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilitySelectedAttributeOfChild_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject child );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void accessibilitySetSelectedAttributeOfChild_toValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject child, NObjective.RuntimeObject toValue );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilitySizeOfChild_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject child );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithRole_parent_tableView_row_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject role, NObjective.RuntimeObject parent, NObjective.RuntimeObject tableView, int row );
		}
		static internal class CachedSelectors {
			public static readonly Selector accessibilityChildrenAttribute = "accessibilityChildrenAttribute";
			public static readonly Selector accessibilityPositionOfChild_ = "accessibilityPositionOfChild:";
			public static readonly Selector accessibilitySelectedAttributeOfChild_ = "accessibilitySelectedAttributeOfChild:";
			public static readonly Selector accessibilitySetSelectedAttributeOfChild_toValue_ = "accessibilitySetSelectedAttributeOfChild:toValue:";
			public static readonly Selector accessibilitySizeOfChild_ = "accessibilitySizeOfChild:";
			public static readonly Selector initWithRole_parent_tableView_row_ = "initWithRole:parent:tableView:row:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABSubrowObject : IEquatable<ABSubrowObject> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSubrowObject;
		public static implicit operator NSObject( ABSubrowObject value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABSubrowObject value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSubrowObject value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABSubrowObject?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABSubrowObject value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSubrowObject value1, ABSubrowObject value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSubrowObject value1, ABSubrowObject value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSubrowObject( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSubrowObject alloc() {
			return new ABSubrowObject( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject accessibilityActionDescription_( NObjective.RuntimeObject description ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityActionDescription_( Handle, CachedSelectors.accessibilityActionDescription_, out ___occuredException, sizeof( NObjective.RuntimeObject ), description );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityActionNames() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityActionNames( Handle, CachedSelectors.accessibilityActionNames, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityAttributeNames() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityAttributeNames( Handle, CachedSelectors.accessibilityAttributeNames, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityAttributeValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityAttributeValue_( Handle, CachedSelectors.accessibilityAttributeValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityFocusedUIElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityFocusedUIElement( Handle, CachedSelectors.accessibilityFocusedUIElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char accessibilityIsAttributeSettable_( NObjective.RuntimeObject settable ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityIsAttributeSettable_( Handle, CachedSelectors.accessibilityIsAttributeSettable_, out ___occuredException, sizeof( NObjective.RuntimeObject ), settable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char accessibilityIsIgnored() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityIsIgnored( Handle, CachedSelectors.accessibilityIsIgnored, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void accessibilityPerformAction_( NObjective.RuntimeObject action ) {
			RuntimeObject ___occuredException;
			NativeMethods.accessibilityPerformAction_( Handle, CachedSelectors.accessibilityPerformAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void accessibilitySetValue_forAttribute_( NObjective.RuntimeObject value, NObjective.RuntimeObject forAttribute ) {
			RuntimeObject ___occuredException;
			NativeMethods.accessibilitySetValue_forAttribute_( Handle, CachedSelectors.accessibilitySetValue_forAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forAttribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int column() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.column( Handle, CachedSelectors.column, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char drawsSpecialSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.drawsSpecialSelection( Handle, CachedSelectors.drawsSpecialSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char equalsContentsOf_( NObjective.RuntimeObject of ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.equalsContentsOf_( Handle, CachedSelectors.equalsContentsOf_, out ___occuredException, sizeof( NObjective.RuntimeObject ), of );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject identifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.identifier( Handle, CachedSelectors.identifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithValue_label_property_( NObjective.RuntimeObject value, NObjective.RuntimeObject label, NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithValue_label_property_( Handle, CachedSelectors.initWithValue_label_property_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, label, property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject label() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.label( Handle, CachedSelectors.label, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parent( Handle, CachedSelectors.parent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int rows() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rows( Handle, CachedSelectors.rows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setDrawsSpecialSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDrawsSpecialSelection_( Handle, CachedSelectors.setDrawsSpecialSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setIdentifier_( NObjective.RuntimeObject identifier ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIdentifier_( Handle, CachedSelectors.setIdentifier_, out ___occuredException, sizeof( NObjective.RuntimeObject ), identifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setParent_( NObjective.RuntimeObject parent ) {
			RuntimeObject ___occuredException;
			NativeMethods.setParent_( Handle, CachedSelectors.setParent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), parent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject value() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.value( Handle, CachedSelectors.value, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityActionDescription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject description );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityActionNames( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityAttributeNames( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityAttributeValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityFocusedUIElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char accessibilityIsAttributeSettable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject settable );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char accessibilityIsIgnored( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void accessibilityPerformAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject action );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void accessibilitySetValue_forAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forAttribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int column( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char drawsSpecialSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char equalsContentsOf_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject of );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr identifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithValue_label_property_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject label, NObjective.RuntimeObject property );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr label( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int rows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDrawsSpecialSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject identifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setParent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject parent );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr value( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector accessibilityActionDescription_ = "accessibilityActionDescription:";
			public static readonly Selector accessibilityActionNames = "accessibilityActionNames";
			public static readonly Selector accessibilityAttributeNames = "accessibilityAttributeNames";
			public static readonly Selector accessibilityAttributeValue_ = "accessibilityAttributeValue:";
			public static readonly Selector accessibilityFocusedUIElement = "accessibilityFocusedUIElement";
			public static readonly Selector accessibilityIsAttributeSettable_ = "accessibilityIsAttributeSettable:";
			public static readonly Selector accessibilityIsIgnored = "accessibilityIsIgnored";
			public static readonly Selector accessibilityPerformAction_ = "accessibilityPerformAction:";
			public static readonly Selector accessibilitySetValue_forAttribute_ = "accessibilitySetValue:forAttribute:";
			public static readonly Selector column = "column";
			public static readonly Selector drawsSpecialSelection = "drawsSpecialSelection";
			public static readonly Selector equalsContentsOf_ = "equalsContentsOf:";
			public static readonly Selector identifier = "identifier";
			public static readonly Selector initWithValue_label_property_ = "initWithValue:label:property:";
			public static readonly Selector label = "label";
			public static readonly Selector parent = "parent";
			public static readonly Selector rows = "rows";
			public static readonly Selector setDrawsSpecialSelection_ = "setDrawsSpecialSelection:";
			public static readonly Selector setIdentifier_ = "setIdentifier:";
			public static readonly Selector setParent_ = "setParent:";
			public static readonly Selector value = "value";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABGroup ) )]
	public struct ABSubscribedGroup : IEquatable<ABSubscribedGroup> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSubscribedGroup;
		public static implicit operator ABGroup( ABSubscribedGroup value ) {
			return new ABGroup( value.Handle );
		}
		public static implicit operator ABRecord( ABSubscribedGroup value ) {
			return new ABRecord( value.Handle );
		}
		public static implicit operator NSObject( ABSubscribedGroup value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABSubscribedGroup value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSubscribedGroup value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABSubscribedGroup?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABSubscribedGroup value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSubscribedGroup value1, ABSubscribedGroup value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSubscribedGroup value1, ABSubscribedGroup value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSubscribedGroup( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSubscribedGroup alloc() {
			return new ABSubscribedGroup( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject nts_GroupsAtRemoteLocation_( NObjective.RuntimeObject location ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_GroupsAtRemoteLocation_( ClassHandle, CachedSelectors.nts_GroupsAtRemoteLocation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), location );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void markRecordWithGroupSubscription_( NObjective.RuntimeObject subscription ) {
			RuntimeObject ___occuredException;
			NativeMethods.markRecordWithGroupSubscription_( Handle, CachedSelectors.markRecordWithGroupSubscription_, out ___occuredException, sizeof( NObjective.RuntimeObject ), subscription );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void markRecordWithGroupSubscription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject subscription );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_GroupsAtRemoteLocation_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject location );
		}
		static internal class CachedSelectors {
			public static readonly Selector markRecordWithGroupSubscription_ = "markRecordWithGroupSubscription:";
			public static readonly Selector nts_GroupsAtRemoteLocation_ = "nts_GroupsAtRemoteLocation:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABPerson ) )]
	public struct ABSubscribedPerson : IEquatable<ABSubscribedPerson> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSubscribedPerson;
		public static implicit operator ABPerson( ABSubscribedPerson value ) {
			return new ABPerson( value.Handle );
		}
		public static implicit operator ABRecord( ABSubscribedPerson value ) {
			return new ABRecord( value.Handle );
		}
		public static implicit operator NSObject( ABSubscribedPerson value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABSubscribedPerson value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSubscribedPerson value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABSubscribedPerson?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABSubscribedPerson value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSubscribedPerson value1, ABSubscribedPerson value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSubscribedPerson value1, ABSubscribedPerson value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSubscribedPerson( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSubscribedPerson alloc() {
			return new ABSubscribedPerson( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject nts_PeopleAtRemoteLocation_( NObjective.RuntimeObject location ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_PeopleAtRemoteLocation_( ClassHandle, CachedSelectors.nts_PeopleAtRemoteLocation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), location );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_PeopleAtRemoteLocation_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject location );
		}
		static internal class CachedSelectors {
			public static readonly Selector nts_PeopleAtRemoteLocation_ = "nts_PeopleAtRemoteLocation:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABRecord ) )]
	public struct ABSubscription : IEquatable<ABSubscription> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSubscription;
		public static implicit operator ABRecord( ABSubscription value ) {
			return new ABRecord( value.Handle );
		}
		public static implicit operator NSObject( ABSubscription value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABSubscription value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSubscription value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABSubscription?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABSubscription value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSubscription value1, ABSubscription value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSubscription value1, ABSubscription value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSubscription( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSubscription alloc() {
			return new ABSubscription( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject findSubscriptionWithRemoteLocation_( NObjective.RuntimeObject location ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.findSubscriptionWithRemoteLocation_( ClassHandle, CachedSelectors.findSubscriptionWithRemoteLocation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), location );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject nts_Subscriptions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_Subscriptions( ClassHandle, CachedSelectors.nts_Subscriptions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithRemoteLocation_displayName_readWriteACL_isAll_( NObjective.RuntimeObject location, NObjective.RuntimeObject displayName, NObjective.RuntimeObject readWriteACL, char isAll ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithRemoteLocation_displayName_readWriteACL_isAll_( Handle, CachedSelectors.initWithRemoteLocation_displayName_readWriteACL_isAll_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), location, displayName, readWriteACL, isAll );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_ACL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_ACL( Handle, CachedSelectors.nts_ACL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_DisplayName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_DisplayName( Handle, CachedSelectors.nts_DisplayName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nts_InitWithRemoteLocation_displayName_readWriteACL_isAll_( NObjective.RuntimeObject location, NObjective.RuntimeObject displayName, NObjective.RuntimeObject readWriteACL, char isAll ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_InitWithRemoteLocation_displayName_readWriteACL_isAll_( Handle, CachedSelectors.nts_InitWithRemoteLocation_displayName_readWriteACL_isAll_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), location, displayName, readWriteACL, isAll );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char nts_IsAll() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nts_IsAll( Handle, CachedSelectors.nts_IsAll, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr findSubscriptionWithRemoteLocation_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject location );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithRemoteLocation_displayName_readWriteACL_isAll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject location, NObjective.RuntimeObject displayName, NObjective.RuntimeObject readWriteACL, char isAll );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_ACL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_DisplayName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_InitWithRemoteLocation_displayName_readWriteACL_isAll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject location, NObjective.RuntimeObject displayName, NObjective.RuntimeObject readWriteACL, char isAll );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nts_IsAll( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nts_Subscriptions( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector findSubscriptionWithRemoteLocation_ = "findSubscriptionWithRemoteLocation:";
			public static readonly Selector initWithRemoteLocation_displayName_readWriteACL_isAll_ = "initWithRemoteLocation:displayName:readWriteACL:isAll:";
			public static readonly Selector nts_ACL = "nts_ACL";
			public static readonly Selector nts_DisplayName = "nts_DisplayName";
			public static readonly Selector nts_InitWithRemoteLocation_displayName_readWriteACL_isAll_ = "nts_InitWithRemoteLocation:displayName:readWriteACL:isAll:";
			public static readonly Selector nts_IsAll = "nts_IsAll";
			public static readonly Selector nts_Subscriptions = "nts_Subscriptions";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABCommand ) )]
	public struct ABSwapLastFirstCommand : IEquatable<ABSwapLastFirstCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSwapLastFirstCommand;
		public static implicit operator ABCommand( ABSwapLastFirstCommand value ) {
			return new ABCommand( value.Handle );
		}
		public static implicit operator NSObject( ABSwapLastFirstCommand value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABSwapLastFirstCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSwapLastFirstCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABSwapLastFirstCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABSwapLastFirstCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSwapLastFirstCommand value1, ABSwapLastFirstCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSwapLastFirstCommand value1, ABSwapLastFirstCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSwapLastFirstCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSwapLastFirstCommand alloc() {
			return new ABSwapLastFirstCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithGroup_members_( NObjective.RuntimeObject @group, NObjective.RuntimeObject members ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithGroup_members_( Handle, CachedSelectors.initWithGroup_members_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @group, members );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithGroup_members_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @group, NObjective.RuntimeObject members );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithGroup_members_ = "initWithGroup:members:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABSyncManager : IEquatable<ABSyncManager> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABSyncManager;
		public static implicit operator NSObject( ABSyncManager value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABSyncManager value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABSyncManager value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABSyncManager?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABSyncManager value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABSyncManager value1, ABSyncManager value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABSyncManager value1, ABSyncManager value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABSyncManager( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABSyncManager alloc() {
			return new ABSyncManager( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject clientID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.clientID( ClassHandle, CachedSelectors.clientID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject defaultClientID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultClientID( ClassHandle, CachedSelectors.defaultClientID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject sharedSyncManager() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedSyncManager( ClassHandle, CachedSelectors.sharedSyncManager, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject toolPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.toolPath( ClassHandle, CachedSelectors.toolPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isSyncScheduled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isSyncScheduled( Handle, CachedSelectors.isSyncScheduled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void removeExisitingSyncSchedule() {
			RuntimeObject ___occuredException;
			NativeMethods.removeExisitingSyncSchedule( Handle, CachedSelectors.removeExisitingSyncSchedule, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scheduleTrickleSync() {
			RuntimeObject ___occuredException;
			NativeMethods.scheduleTrickleSync( Handle, CachedSelectors.scheduleTrickleSync, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scheduleTrickleSyncRetry_( uint retry ) {
			RuntimeObject ___occuredException;
			NativeMethods.scheduleTrickleSyncRetry_( Handle, CachedSelectors.scheduleTrickleSyncRetry_, out ___occuredException, sizeof( uint ), retry );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr clientID( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultClientID( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isSyncScheduled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeExisitingSyncSchedule( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scheduleTrickleSync( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scheduleTrickleSyncRetry_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint retry );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedSyncManager( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr toolPath( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector clientID = "clientID";
			public static readonly Selector defaultClientID = "defaultClientID";
			public static readonly Selector isSyncScheduled = "isSyncScheduled";
			public static readonly Selector removeExisitingSyncSchedule = "removeExisitingSyncSchedule";
			public static readonly Selector scheduleTrickleSync = "scheduleTrickleSync";
			public static readonly Selector scheduleTrickleSyncRetry_ = "scheduleTrickleSyncRetry:";
			public static readonly Selector sharedSyncManager = "sharedSyncManager";
			public static readonly Selector toolPath = "toolPath";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSResponder ) )]
	public struct ABTableController : IEquatable<ABTableController> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABTableController;
		public static implicit operator NSResponder( ABTableController value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABTableController value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABTableController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABTableController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABTableController?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABTableController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABTableController value1, ABTableController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABTableController value1, ABTableController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABTableController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABTableController alloc() {
			return new ABTableController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char allowsMultipleSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsMultipleSelection( Handle, CachedSelectors.allowsMultipleSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char allowsMultipleSubrowSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsMultipleSubrowSelection( Handle, CachedSelectors.allowsMultipleSubrowSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void becameVisible() {
			RuntimeObject ___occuredException;
			NativeMethods.becameVisible( Handle, CachedSelectors.becameVisible, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject bundle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bundle( Handle, CachedSelectors.bundle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public float defaultRowHeight() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultRowHeight( Handle, CachedSelectors.defaultRowHeight, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void deselectAll() {
			RuntimeObject ___occuredException;
			NativeMethods.deselectAll( Handle, CachedSelectors.deselectAll, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deselectRow_( int row ) {
			RuntimeObject ___occuredException;
			NativeMethods.deselectRow_( Handle, CachedSelectors.deselectRow_, out ___occuredException, sizeof( int ), row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deselectRow_subrow_( int row, int subrow ) {
			RuntimeObject ___occuredException;
			NativeMethods.deselectRow_subrow_( Handle, CachedSelectors.deselectRow_subrow_, out ___occuredException, sizeof( int ) + sizeof( int ), row, subrow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void dispatchDoubleAction_( NObjective.RuntimeObject action ) {
			RuntimeObject ___occuredException;
			NativeMethods.dispatchDoubleAction_( Handle, CachedSelectors.dispatchDoubleAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void doAwakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.doAwakeFromNib( Handle, CachedSelectors.doAwakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.Selector doubleClickAction() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.doubleClickAction( Handle, CachedSelectors.doubleClickAction, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint indexOfRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfRecord_( Handle, CachedSelectors.indexOfRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject initWithUIController_( NObjective.RuntimeObject controller ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUIController_( Handle, CachedSelectors.initWithUIController_, out ___occuredException, sizeof( NObjective.RuntimeObject ), controller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isPeoplePicker() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isPeoplePicker( Handle, CachedSelectors.isPeoplePicker, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isVisible() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isVisible( Handle, CachedSelectors.isVisible, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject keyNavigationView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.keyNavigationView( Handle, CachedSelectors.keyNavigationView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void layoutChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.layoutChanged_( Handle, CachedSelectors.layoutChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject model() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.model( Handle, CachedSelectors.model, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nibName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nibName( Handle, CachedSelectors.nibName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char notifyOnSelectionChanged() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.notifyOnSelectionChanged( Handle, CachedSelectors.notifyOnSelectionChanged, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject pane() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pane( Handle, CachedSelectors.pane, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject recordAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.recordAtIndex_( Handle, CachedSelectors.recordAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject records() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.records( Handle, CachedSelectors.records, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void reloadData() {
			RuntimeObject ___occuredException;
			NativeMethods.reloadData( Handle, CachedSelectors.reloadData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void resetSubrows() {
			RuntimeObject ___occuredException;
			NativeMethods.resetSubrows( Handle, CachedSelectors.resetSubrows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scrollSelectionToView() {
			RuntimeObject ___occuredException;
			NativeMethods.scrollSelectionToView( Handle, CachedSelectors.scrollSelectionToView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject scrollView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scrollView( Handle, CachedSelectors.scrollView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedRecord() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedRecord( Handle, CachedSelectors.selectedRecord, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedRecords() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedRecords( Handle, CachedSelectors.selectedRecords, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedSubrowObjectsAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedSubrowObjectsAtIndex_( Handle, CachedSelectors.selectedSubrowObjectsAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedSubrows() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedSubrows( Handle, CachedSelectors.selectedSubrows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void selectRow_byExtendingSelection_( int row, char byExtendingSelection ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectRow_byExtendingSelection_( Handle, CachedSelectors.selectRow_byExtendingSelection_, out ___occuredException, sizeof( int ) + sizeof( char ), row, byExtendingSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectRow_subrow_byExtendingSelection_( int row, int subrow, char byExtendingSelection ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectRow_subrow_byExtendingSelection_( Handle, CachedSelectors.selectRow_subrow_byExtendingSelection_, out ___occuredException, sizeof( int ) + sizeof( int ) + sizeof( char ), row, subrow, byExtendingSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectRowIndexes_byExtendingSelection_( NObjective.RuntimeObject indexes, char byExtendingSelection ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectRowIndexes_byExtendingSelection_( Handle, CachedSelectors.selectRowIndexes_byExtendingSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), indexes, byExtendingSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowMultipleSubrowSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowMultipleSubrowSelection_( Handle, CachedSelectors.setAllowMultipleSubrowSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsMultipleSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsMultipleSelection_( Handle, CachedSelectors.setAllowsMultipleSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDefaultRowHeight_( float height ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDefaultRowHeight_( Handle, CachedSelectors.setDefaultRowHeight_, out ___occuredException, sizeof( float ), height );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDoubleClickTarget_andAction_( NObjective.RuntimeObject target, NObjective.Selector andAction ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDoubleClickTarget_andAction_( Handle, CachedSelectors.setDoubleClickTarget_andAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ), target, andAction );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNotifyOnSelectionChanged_( char changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.setNotifyOnSelectionChanged_( Handle, CachedSelectors.setNotifyOnSelectionChanged_, out ___occuredException, sizeof( char ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedRecord_( Handle, CachedSelectors.setSelectedRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedRecords_( NObjective.RuntimeObject records ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedRecords_( Handle, CachedSelectors.setSelectedRecords_, out ___occuredException, sizeof( NObjective.RuntimeObject ), records );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject subrowObjectsAtIndex_( uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subrowObjectsAtIndex_( Handle, CachedSelectors.subrowObjectsAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject subrows() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subrows( Handle, CachedSelectors.subrows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void synchSelectedRows() {
			RuntimeObject ___occuredException;
			NativeMethods.synchSelectedRows( Handle, CachedSelectors.synchSelectedRows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject tableView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tableView( Handle, CachedSelectors.tableView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void tableView_willDisplayCell_forTableColumn_row_( NObjective.RuntimeObject view, NObjective.RuntimeObject willDisplayCell, NObjective.RuntimeObject forTableColumn, int row ) {
			RuntimeObject ___occuredException;
			NativeMethods.tableView_willDisplayCell_forTableColumn_row_( Handle, CachedSelectors.tableView_willDisplayCell_forTableColumn_row_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), view, willDisplayCell, forTableColumn, row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject uiController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.uiController( Handle, CachedSelectors.uiController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject window() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.window( Handle, CachedSelectors.window, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char worksWhenModal() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.worksWhenModal( Handle, CachedSelectors.worksWhenModal, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void writePaneGeometryToDefaults() {
			RuntimeObject ___occuredException;
			NativeMethods.writePaneGeometryToDefaults( Handle, CachedSelectors.writePaneGeometryToDefaults, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char allowsMultipleSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char allowsMultipleSubrowSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void becameVisible( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr bundle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float defaultRowHeight( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deselectAll( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deselectRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deselectRow_subrow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row, int subrow );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void dispatchDoubleAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject action );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void doAwakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.Selector doubleClickAction( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint indexOfRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithUIController_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isPeoplePicker( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isVisible( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr keyNavigationView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void layoutChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr model( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nibName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char notifyOnSelectionChanged( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pane( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr recordAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr records( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void reloadData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resetSubrows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scrollSelectionToView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr scrollView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedRecord( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedRecords( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedSubrowObjectsAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedSubrows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectRow_byExtendingSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row, char byExtendingSelection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectRow_subrow_byExtendingSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row, int subrow, char byExtendingSelection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectRowIndexes_byExtendingSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject indexes, char byExtendingSelection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowMultipleSubrowSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowsMultipleSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDefaultRowHeight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float height );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDoubleClickTarget_andAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target, NObjective.Selector andAction );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNotifyOnSelectionChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSelectedRecord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSelectedRecords_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject records );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr subrowObjectsAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr subrows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void synchSelectedRows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr tableView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void tableView_willDisplayCell_forTableColumn_row_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject willDisplayCell, NObjective.RuntimeObject forTableColumn, int row );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr uiController( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr window( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char worksWhenModal( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void writePaneGeometryToDefaults( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector allowsMultipleSelection = "allowsMultipleSelection";
			public static readonly Selector allowsMultipleSubrowSelection = "allowsMultipleSubrowSelection";
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector becameVisible = "becameVisible";
			public static readonly Selector bundle = "bundle";
			public static readonly Selector defaultRowHeight = "defaultRowHeight";
			public static readonly Selector deselectAll = "deselectAll";
			public static readonly Selector deselectRow_ = "deselectRow:";
			public static readonly Selector deselectRow_subrow_ = "deselectRow:subrow:";
			public static readonly Selector dispatchDoubleAction_ = "dispatchDoubleAction:";
			public static readonly Selector doAwakeFromNib = "doAwakeFromNib";
			public static readonly Selector doubleClickAction = "doubleClickAction";
			public static readonly Selector indexOfRecord_ = "indexOfRecord:";
			public static readonly Selector initWithUIController_ = "initWithUIController:";
			public static readonly Selector isPeoplePicker = "isPeoplePicker";
			public static readonly Selector isVisible = "isVisible";
			public static readonly Selector keyNavigationView = "keyNavigationView";
			public static readonly Selector layoutChanged_ = "layoutChanged:";
			public static readonly Selector model = "model";
			public static readonly Selector nibName = "nibName";
			public static readonly Selector notifyOnSelectionChanged = "notifyOnSelectionChanged";
			public static readonly Selector pane = "pane";
			public static readonly Selector recordAtIndex_ = "recordAtIndex:";
			public static readonly Selector records = "records";
			public static readonly Selector reloadData = "reloadData";
			public static readonly Selector resetSubrows = "resetSubrows";
			public static readonly Selector scrollSelectionToView = "scrollSelectionToView";
			public static readonly Selector scrollView = "scrollView";
			public static readonly Selector selectedRecord = "selectedRecord";
			public static readonly Selector selectedRecords = "selectedRecords";
			public static readonly Selector selectedSubrowObjectsAtIndex_ = "selectedSubrowObjectsAtIndex:";
			public static readonly Selector selectedSubrows = "selectedSubrows";
			public static readonly Selector selectRow_byExtendingSelection_ = "selectRow:byExtendingSelection:";
			public static readonly Selector selectRow_subrow_byExtendingSelection_ = "selectRow:subrow:byExtendingSelection:";
			public static readonly Selector selectRowIndexes_byExtendingSelection_ = "selectRowIndexes:byExtendingSelection:";
			public static readonly Selector setAllowMultipleSubrowSelection_ = "setAllowMultipleSubrowSelection:";
			public static readonly Selector setAllowsMultipleSelection_ = "setAllowsMultipleSelection:";
			public static readonly Selector setDefaultRowHeight_ = "setDefaultRowHeight:";
			public static readonly Selector setDoubleClickTarget_andAction_ = "setDoubleClickTarget:andAction:";
			public static readonly Selector setNotifyOnSelectionChanged_ = "setNotifyOnSelectionChanged:";
			public static readonly Selector setSelectedRecord_ = "setSelectedRecord:";
			public static readonly Selector setSelectedRecords_ = "setSelectedRecords:";
			public static readonly Selector subrowObjectsAtIndex_ = "subrowObjectsAtIndex:";
			public static readonly Selector subrows = "subrows";
			public static readonly Selector synchSelectedRows = "synchSelectedRows";
			public static readonly Selector tableView = "tableView";
			public static readonly Selector tableView_willDisplayCell_forTableColumn_row_ = "tableView:willDisplayCell:forTableColumn:row:";
			public static readonly Selector uiController = "uiController";
			public static readonly Selector window = "window";
			public static readonly Selector worksWhenModal = "worksWhenModal";
			public static readonly Selector writePaneGeometryToDefaults = "writePaneGeometryToDefaults";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSTableRow ) )]
	public struct ABTableRow : IEquatable<ABTableRow> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABTableRow;
		public static implicit operator NSTableRow( ABTableRow value ) {
			return new NSTableRow( value.Handle );
		}
		public static implicit operator NSObject( ABTableRow value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABTableRow value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABTableRow value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABTableRow?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABTableRow value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABTableRow value1, ABTableRow value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABTableRow value1, ABTableRow value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABTableRow( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABTableRow alloc() {
			return new ABTableRow( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject accessibilityHelpStringForChild_( NObjective.RuntimeObject child ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityHelpStringForChild_( Handle, CachedSelectors.accessibilityHelpStringForChild_, out ___occuredException, sizeof( NObjective.RuntimeObject ), child );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilityPositionOfChild_( NObjective.RuntimeObject child ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilityPositionOfChild_( Handle, CachedSelectors.accessibilityPositionOfChild_, out ___occuredException, sizeof( NObjective.RuntimeObject ), child );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibilitySizeOfChild_( NObjective.RuntimeObject child ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibilitySizeOfChild_( Handle, CachedSelectors.accessibilitySizeOfChild_, out ___occuredException, sizeof( NObjective.RuntimeObject ), child );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject subrowGroup() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subrowGroup( Handle, CachedSelectors.subrowGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityHelpStringForChild_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject child );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilityPositionOfChild_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject child );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibilitySizeOfChild_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject child );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr subrowGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector accessibilityHelpStringForChild_ = "accessibilityHelpStringForChild:";
			public static readonly Selector accessibilityPositionOfChild_ = "accessibilityPositionOfChild:";
			public static readonly Selector accessibilitySizeOfChild_ = "accessibilitySizeOfChild:";
			public static readonly Selector subrowGroup = "subrowGroup";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSTableView ) )]
	public struct ABTableView : IEquatable<ABTableView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABTableView;
		public static implicit operator NSTableView( ABTableView value ) {
			return new NSTableView( value.Handle );
		}
		public static implicit operator NSControl( ABTableView value ) {
			return new NSControl( value.Handle );
		}
		public static implicit operator NSView( ABTableView value ) {
			return new NSView( value.Handle );
		}
		public static implicit operator NSResponder( ABTableView value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABTableView value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABTableView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABTableView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABTableView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABTableView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABTableView value1, ABTableView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABTableView value1, ABTableView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABTableView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABTableView alloc() {
			return new ABTableView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char allowsMultipleSubrowSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsMultipleSubrowSelection( Handle, CachedSelectors.allowsMultipleSubrowSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char allowsSubrowSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsSubrowSelection( Handle, CachedSelectors.allowsSubrowSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deselectRow_subrow_( int row, int subrow ) {
			RuntimeObject ___occuredException;
			NativeMethods.deselectRow_subrow_( Handle, CachedSelectors.deselectRow_subrow_, out ___occuredException, sizeof( int ) + sizeof( int ), row, subrow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void disableDeselect_( char deselect ) {
			RuntimeObject ___occuredException;
			NativeMethods.disableDeselect_( Handle, CachedSelectors.disableDeselect_, out ___occuredException, sizeof( char ), deselect );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void doSpecialSelectionStuffForRow_extendingSelection_( int row, char extendingSelection ) {
			RuntimeObject ___occuredException;
			NativeMethods.doSpecialSelectionStuffForRow_extendingSelection_( Handle, CachedSelectors.doSpecialSelectionStuffForRow_extendingSelection_, out ___occuredException, sizeof( int ) + sizeof( char ), row, extendingSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void frameChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.frameChanged_( Handle, CachedSelectors.frameChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool isRowSelected_subRow_( int selected, int subRow ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isRowSelected_subRow_( Handle, CachedSelectors.isRowSelected_subRow_, out ___occuredException, sizeof( int ) + sizeof( int ), selected, subRow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char mouseTracker_shouldContinueTrackingWithEvent_( NObjective.RuntimeObject tracker, NObjective.RuntimeObject shouldContinueTrackingWithEvent ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mouseTracker_shouldContinueTrackingWithEvent_( Handle, CachedSelectors.mouseTracker_shouldContinueTrackingWithEvent_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), tracker, shouldContinueTrackingWithEvent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void performDoubleClick_( NObjective.RuntimeObject click ) {
			RuntimeObject ___occuredException;
			NativeMethods.performDoubleClick_( Handle, CachedSelectors.performDoubleClick_, out ___occuredException, sizeof( NObjective.RuntimeObject ), click );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeTrackingRects() {
			RuntimeObject ___occuredException;
			NativeMethods.removeTrackingRects( Handle, CachedSelectors.removeTrackingRects, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char resizeableColumns() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.resizeableColumns( Handle, CachedSelectors.resizeableColumns, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float rowHeightForRow_( int row ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rowHeightForRow_( Handle, CachedSelectors.rowHeightForRow_, out ___occuredException, sizeof( int ), row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void selectRow_subrow_byExtendingSelection_( int row, int subrow, char byExtendingSelection ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectRow_subrow_byExtendingSelection_( Handle, CachedSelectors.selectRow_subrow_byExtendingSelection_, out ___occuredException, sizeof( int ) + sizeof( int ) + sizeof( char ), row, subrow, byExtendingSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowMultipleSubrowSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowMultipleSubrowSelection_( Handle, CachedSelectors.setAllowMultipleSubrowSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowSubrowSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowSubrowSelection_( Handle, CachedSelectors.setAllowSubrowSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setResizeableColumns_( char columns ) {
			RuntimeObject ___occuredException;
			NativeMethods.setResizeableColumns_( Handle, CachedSelectors.setResizeableColumns_, out ___occuredException, sizeof( char ), columns );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUpTrackingRects() {
			RuntimeObject ___occuredException;
			NativeMethods.setUpTrackingRects( Handle, CachedSelectors.setUpTrackingRects, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setVariableRows_( char rows ) {
			RuntimeObject ___occuredException;
			NativeMethods.setVariableRows_( Handle, CachedSelectors.setVariableRows_, out ___occuredException, sizeof( char ), rows );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool shouldEditOnSingleClick_inRow_tableColumn_( NObjective.RuntimeObject click, int inRow, NObjective.RuntimeObject tableColumn ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shouldEditOnSingleClick_inRow_tableColumn_( Handle, CachedSelectors.shouldEditOnSingleClick_inRow_tableColumn_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), click, inRow, tableColumn );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject uiController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.uiController( Handle, CachedSelectors.uiController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void updateDragRectWithProgress_( float progress ) {
			RuntimeObject ___occuredException;
			NativeMethods.updateDragRectWithProgress_( Handle, CachedSelectors.updateDragRectWithProgress_, out ___occuredException, sizeof( float ), progress );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char variableRows() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.variableRows( Handle, CachedSelectors.variableRows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void windowDidBecomeVisible_( NObjective.RuntimeObject visible ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowDidBecomeVisible_( Handle, CachedSelectors.windowDidBecomeVisible_, out ___occuredException, sizeof( NObjective.RuntimeObject ), visible );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char allowsMultipleSubrowSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char allowsSubrowSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deselectRow_subrow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row, int subrow );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void disableDeselect_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char deselect );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void doSpecialSelectionStuffForRow_extendingSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row, char extendingSelection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void frameChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isRowSelected_subRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int selected, int subRow );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char mouseTracker_shouldContinueTrackingWithEvent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject tracker, NObjective.RuntimeObject shouldContinueTrackingWithEvent );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void performDoubleClick_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject click );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeTrackingRects( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char resizeableColumns( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float rowHeightForRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectRow_subrow_byExtendingSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row, int subrow, char byExtendingSelection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowMultipleSubrowSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowSubrowSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setResizeableColumns_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char columns );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUpTrackingRects( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setVariableRows_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char rows );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool shouldEditOnSingleClick_inRow_tableColumn_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject click, int inRow, NObjective.RuntimeObject tableColumn );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr uiController( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateDragRectWithProgress_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float progress );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char variableRows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void windowDidBecomeVisible_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject visible );
		}
		static internal class CachedSelectors {
			public static readonly Selector allowsMultipleSubrowSelection = "allowsMultipleSubrowSelection";
			public static readonly Selector allowsSubrowSelection = "allowsSubrowSelection";
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector deselectRow_subrow_ = "deselectRow:subrow:";
			public static readonly Selector disableDeselect_ = "disableDeselect:";
			public static readonly Selector doSpecialSelectionStuffForRow_extendingSelection_ = "doSpecialSelectionStuffForRow:extendingSelection:";
			public static readonly Selector frameChanged_ = "frameChanged:";
			public static readonly Selector isRowSelected_subRow_ = "isRowSelected:subRow:";
			public static readonly Selector mouseTracker_shouldContinueTrackingWithEvent_ = "mouseTracker:shouldContinueTrackingWithEvent:";
			public static readonly Selector performDoubleClick_ = "performDoubleClick:";
			public static readonly Selector removeTrackingRects = "removeTrackingRects";
			public static readonly Selector resizeableColumns = "resizeableColumns";
			public static readonly Selector rowHeightForRow_ = "rowHeightForRow:";
			public static readonly Selector selectRow_subrow_byExtendingSelection_ = "selectRow:subrow:byExtendingSelection:";
			public static readonly Selector setAllowMultipleSubrowSelection_ = "setAllowMultipleSubrowSelection:";
			public static readonly Selector setAllowSubrowSelection_ = "setAllowSubrowSelection:";
			public static readonly Selector setResizeableColumns_ = "setResizeableColumns:";
			public static readonly Selector setUpTrackingRects = "setUpTrackingRects";
			public static readonly Selector setVariableRows_ = "setVariableRows:";
			public static readonly Selector shouldEditOnSingleClick_inRow_tableColumn_ = "shouldEditOnSingleClick:inRow:tableColumn:";
			public static readonly Selector uiController = "uiController";
			public static readonly Selector updateDragRectWithProgress_ = "updateDragRectWithProgress:";
			public static readonly Selector variableRows = "variableRows";
			public static readonly Selector windowDidBecomeVisible_ = "windowDidBecomeVisible:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSTextContainer ) )]
	public struct ABTextContainer : IEquatable<ABTextContainer> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABTextContainer;
		public static implicit operator NSTextContainer( ABTextContainer value ) {
			return new NSTextContainer( value.Handle );
		}
		public static implicit operator NSObject( ABTextContainer value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABTextContainer value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABTextContainer value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABTextContainer?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABTextContainer value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABTextContainer value1, ABTextContainer value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABTextContainer value1, ABTextContainer value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABTextContainer( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABTextContainer alloc() {
			return new ABTextContainer( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public float offset() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.offset( Handle, CachedSelectors.offset, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float offset( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector offset = "offset";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSTextFieldCell ) )]
	public struct ABTextFieldCell : IEquatable<ABTextFieldCell> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABTextFieldCell;
		public static implicit operator NSTextFieldCell( ABTextFieldCell value ) {
			return new NSTextFieldCell( value.Handle );
		}
		public static implicit operator NSActionCell( ABTextFieldCell value ) {
			return new NSActionCell( value.Handle );
		}
		public static implicit operator NSCell( ABTextFieldCell value ) {
			return new NSCell( value.Handle );
		}
		public static implicit operator NSObject( ABTextFieldCell value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABTextFieldCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABTextFieldCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABTextFieldCell?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABTextFieldCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABTextFieldCell value1, ABTextFieldCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABTextFieldCell value1, ABTextFieldCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABTextFieldCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABTextFieldCell alloc() {
			return new ABTextFieldCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char drawsContainmentIndicator() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.drawsContainmentIndicator( Handle, CachedSelectors.drawsContainmentIndicator, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setDividerMode_( char mode ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDividerMode_( Handle, CachedSelectors.setDividerMode_, out ___occuredException, sizeof( char ), mode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDrawsContainmentIndicator_( char indicator ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDrawsContainmentIndicator_( Handle, CachedSelectors.setDrawsContainmentIndicator_, out ___occuredException, sizeof( char ), indicator );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setIcon_( NObjective.RuntimeObject icon ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIcon_( Handle, CachedSelectors.setIcon_, out ___occuredException, sizeof( NObjective.RuntimeObject ), icon );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSidebarMode_( char mode ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSidebarMode_( Handle, CachedSelectors.setSidebarMode_, out ___occuredException, sizeof( char ), mode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char drawsContainmentIndicator( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDividerMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char mode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDrawsContainmentIndicator_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char indicator );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setIcon_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject icon );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSidebarMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char mode );
		}
		static internal class CachedSelectors {
			public static readonly Selector drawsContainmentIndicator = "drawsContainmentIndicator";
			public static readonly Selector setDividerMode_ = "setDividerMode:";
			public static readonly Selector setDrawsContainmentIndicator_ = "setDrawsContainmentIndicator:";
			public static readonly Selector setIcon_ = "setIcon:";
			public static readonly Selector setSidebarMode_ = "setSidebarMode:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABAccessibilityMockUIElement ) )]
	public struct ABTextLabelAccessibilityElement : IEquatable<ABTextLabelAccessibilityElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABTextLabelAccessibilityElement;
		public static implicit operator ABAccessibilityMockUIElement( ABTextLabelAccessibilityElement value ) {
			return new ABAccessibilityMockUIElement( value.Handle );
		}
		public static implicit operator NSObject( ABTextLabelAccessibilityElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABTextLabelAccessibilityElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABTextLabelAccessibilityElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABTextLabelAccessibilityElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABTextLabelAccessibilityElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABTextLabelAccessibilityElement value1, ABTextLabelAccessibilityElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABTextLabelAccessibilityElement value1, ABTextLabelAccessibilityElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABTextLabelAccessibilityElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABTextLabelAccessibilityElement alloc() {
			return new ABTextLabelAccessibilityElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject identifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.identifier( Handle, CachedSelectors.identifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject kind() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.kind( Handle, CachedSelectors.kind, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject property() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.property( Handle, CachedSelectors.property, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char propertyHasActions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyHasActions( Handle, CachedSelectors.propertyHasActions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject propertyPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.propertyPath( Handle, CachedSelectors.propertyPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr identifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr kind( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr property( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char propertyHasActions( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr propertyPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector identifier = "identifier";
			public static readonly Selector kind = "kind";
			public static readonly Selector property = "property";
			public static readonly Selector propertyHasActions = "propertyHasActions";
			public static readonly Selector propertyPath = "propertyPath";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSTextStorage ) )]
	public struct ABTextStorage : IEquatable<ABTextStorage> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABTextStorage;
		public static implicit operator NSTextStorage( ABTextStorage value ) {
			return new NSTextStorage( value.Handle );
		}
		public static implicit operator NSMutableAttributedString( ABTextStorage value ) {
			return new NSMutableAttributedString( value.Handle );
		}
		public static implicit operator NSAttributedString( ABTextStorage value ) {
			return new NSAttributedString( value.Handle );
		}
		public static implicit operator NSObject( ABTextStorage value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABTextStorage value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABTextStorage value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABTextStorage?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABTextStorage value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABTextStorage value1, ABTextStorage value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABTextStorage value1, ABTextStorage value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABTextStorage( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABTextStorage alloc() {
			return new ABTextStorage( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject firstLineParagraphStyle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.firstLineParagraphStyle( ClassHandle, CachedSelectors.firstLineParagraphStyle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void invalidateParagraphStyles() {
			RuntimeObject ___occuredException;
			NativeMethods.invalidateParagraphStyles( ClassHandle, CachedSelectors.invalidateParagraphStyles, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject noteFirstLineParagraphStyle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.noteFirstLineParagraphStyle( ClassHandle, CachedSelectors.noteFirstLineParagraphStyle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject noteSecondLineParagraphStyle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.noteSecondLineParagraphStyle( ClassHandle, CachedSelectors.noteSecondLineParagraphStyle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject secondLineParagraphStyle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.secondLineParagraphStyle( ClassHandle, CachedSelectors.secondLineParagraphStyle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char enableCustomAttributeFixing() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.enableCustomAttributeFixing( Handle, CachedSelectors.enableCustomAttributeFixing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setEnableCustomAttributeFixing_( char fixing ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEnableCustomAttributeFixing_( Handle, CachedSelectors.setEnableCustomAttributeFixing_, out ___occuredException, sizeof( char ), fixing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char enableCustomAttributeFixing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr firstLineParagraphStyle( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void invalidateParagraphStyles( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr noteFirstLineParagraphStyle( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr noteSecondLineParagraphStyle( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr secondLineParagraphStyle( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEnableCustomAttributeFixing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char fixing );
		}
		static internal class CachedSelectors {
			public static readonly Selector enableCustomAttributeFixing = "enableCustomAttributeFixing";
			public static readonly Selector firstLineParagraphStyle = "firstLineParagraphStyle";
			public static readonly Selector invalidateParagraphStyles = "invalidateParagraphStyles";
			public static readonly Selector noteFirstLineParagraphStyle = "noteFirstLineParagraphStyle";
			public static readonly Selector noteSecondLineParagraphStyle = "noteSecondLineParagraphStyle";
			public static readonly Selector secondLineParagraphStyle = "secondLineParagraphStyle";
			public static readonly Selector setEnableCustomAttributeFixing_ = "setEnableCustomAttributeFixing:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABTextLabelAccessibilityElement ) )]
	public struct ABTextValueAccessibilityElement : IEquatable<ABTextValueAccessibilityElement> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABTextValueAccessibilityElement;
		public static implicit operator ABTextLabelAccessibilityElement( ABTextValueAccessibilityElement value ) {
			return new ABTextLabelAccessibilityElement( value.Handle );
		}
		public static implicit operator ABAccessibilityMockUIElement( ABTextValueAccessibilityElement value ) {
			return new ABAccessibilityMockUIElement( value.Handle );
		}
		public static implicit operator NSObject( ABTextValueAccessibilityElement value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABTextValueAccessibilityElement value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABTextValueAccessibilityElement value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABTextValueAccessibilityElement?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABTextValueAccessibilityElement value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABTextValueAccessibilityElement value1, ABTextValueAccessibilityElement value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABTextValueAccessibilityElement value1, ABTextValueAccessibilityElement value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABTextValueAccessibilityElement( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABTextValueAccessibilityElement alloc() {
			return new ABTextValueAccessibilityElement( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSTextView ) )]
	public struct ABTextView : IEquatable<ABTextView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABTextView;
		public static implicit operator NSTextView( ABTextView value ) {
			return new NSTextView( value.Handle );
		}
		public static implicit operator NSText( ABTextView value ) {
			return new NSText( value.Handle );
		}
		public static implicit operator NSView( ABTextView value ) {
			return new NSView( value.Handle );
		}
		public static implicit operator NSResponder( ABTextView value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABTextView value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABTextView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABTextView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABTextView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABTextView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABTextView value1, ABTextView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABTextView value1, ABTextView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABTextView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABTextView alloc() {
			return new ABTextView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject updateDateAttributes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.updateDateAttributes( ClassHandle, CachedSelectors.updateDateAttributes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void abViewDoubleClicked_( NObjective.RuntimeObject clicked ) {
			RuntimeObject ___occuredException;
			NativeMethods.abViewDoubleClicked_( Handle, CachedSelectors.abViewDoubleClicked_, out ___occuredException, sizeof( NObjective.RuntimeObject ), clicked );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject accessibleAttachments() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibleAttachments( Handle, CachedSelectors.accessibleAttachments, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject accessibleLabelsAndValues() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.accessibleLabelsAndValues( Handle, CachedSelectors.accessibleLabelsAndValues, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void appendAttributedString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			NativeMethods.appendAttributedString_( Handle, CachedSelectors.appendAttributedString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void appendString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			NativeMethods.appendString_( Handle, CachedSelectors.appendString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void appendString_withFont_( NObjective.RuntimeObject @string, NObjective.RuntimeObject withFont ) {
			RuntimeObject ___occuredException;
			NativeMethods.appendString_withFont_( Handle, CachedSelectors.appendString_withFont_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @string, withFont );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void appendString_withFont_andAttribute_( NObjective.RuntimeObject @string, NObjective.RuntimeObject withFont, NObjective.RuntimeObject andAttribute ) {
			RuntimeObject ___occuredException;
			NativeMethods.appendString_withFont_andAttribute_( Handle, CachedSelectors.appendString_withFont_andAttribute_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @string, withFont, andAttribute );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void appendTemporaryField_andLabel_font_( NObjective.RuntimeObject field, NObjective.RuntimeObject andLabel, NObjective.RuntimeObject font ) {
			RuntimeObject ___occuredException;
			NativeMethods.appendTemporaryField_andLabel_font_( Handle, CachedSelectors.appendTemporaryField_andLabel_font_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), field, andLabel, font );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject attachmentStringForEmailCertificate_( NObjective.RuntimeObject certificate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attachmentStringForEmailCertificate_( Handle, CachedSelectors.attachmentStringForEmailCertificate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), certificate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void cancel_( NObjective.RuntimeObject cancel ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancel_( Handle, CachedSelectors.cancel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cancel );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearShadow() {
			RuntimeObject ___occuredException;
			NativeMethods.clearShadow( Handle, CachedSelectors.clearShadow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void disableDelegateMessages() {
			RuntimeObject ___occuredException;
			NativeMethods.disableDelegateMessages( Handle, CachedSelectors.disableDelegateMessages, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void doDelete_( NObjective.RuntimeObject delete ) {
			RuntimeObject ___occuredException;
			NativeMethods.doDelete_( Handle, CachedSelectors.doDelete_, out ___occuredException, sizeof( NObjective.RuntimeObject ), delete );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void doSelectAll_( NObjective.RuntimeObject all ) {
			RuntimeObject ___occuredException;
			NativeMethods.doSelectAll_( Handle, CachedSelectors.doSelectAll_, out ___occuredException, sizeof( NObjective.RuntimeObject ), all );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void edit_( NObjective.RuntimeObject edit ) {
			RuntimeObject ___occuredException;
			NativeMethods.edit_( Handle, CachedSelectors.edit_, out ___occuredException, sizeof( NObjective.RuntimeObject ), edit );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char editMode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.editMode( Handle, CachedSelectors.editMode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void enableDelegateMessages() {
			RuntimeObject ___occuredException;
			NativeMethods.enableDelegateMessages( Handle, CachedSelectors.enableDelegateMessages, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void exportVCard_( NObjective.RuntimeObject card ) {
			RuntimeObject ___occuredException;
			NativeMethods.exportVCard_( Handle, CachedSelectors.exportVCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void findSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.findSelection_( Handle, CachedSelectors.findSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject focusedPropertyPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.focusedPropertyPath( Handle, CachedSelectors.focusedPropertyPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void handleRollOverSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.handleRollOverSelection_( Handle, CachedSelectors.handleRollOverSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void handleShadowHilite() {
			RuntimeObject ___occuredException;
			NativeMethods.handleShadowHilite( Handle, CachedSelectors.handleShadowHilite, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char hasNameData() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasNameData( Handle, CachedSelectors.hasNameData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void itemRolledOut() {
			RuntimeObject ___occuredException;
			NativeMethods.itemRolledOut( Handle, CachedSelectors.itemRolledOut, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void itemRolledOver() {
			RuntimeObject ___occuredException;
			NativeMethods.itemRolledOver( Handle, CachedSelectors.itemRolledOver, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void layoutChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.layoutChanged_( Handle, CachedSelectors.layoutChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void layoutManager_didCompleteLayoutForTextContainer_atEnd_( NObjective.RuntimeObject manager, NObjective.RuntimeObject didCompleteLayoutForTextContainer, char atEnd ) {
			RuntimeObject ___occuredException;
			NativeMethods.layoutManager_didCompleteLayoutForTextContainer_atEnd_( Handle, CachedSelectors.layoutManager_didCompleteLayoutForTextContainer_atEnd_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), manager, didCompleteLayoutForTextContainer, atEnd );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void markShadowDirtyRect() {
			RuntimeObject ___occuredException;
			NativeMethods.markShadowDirtyRect( Handle, CachedSelectors.markShadowDirtyRect, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject noteRollOverPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.noteRollOverPath_( Handle, CachedSelectors.noteRollOverPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject onlineStatusButton() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.onlineStatusButton( Handle, CachedSelectors.onlineStatusButton, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject personImageView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.personImageView( Handle, CachedSelectors.personImageView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void prepareForDifferentCard_( NObjective.RuntimeObject card ) {
			RuntimeObject ___occuredException;
			NativeMethods.prepareForDifferentCard_( Handle, CachedSelectors.prepareForDifferentCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void redisplayUpdateDate() {
			RuntimeObject ___occuredException;
			NativeMethods.redisplayUpdateDate( Handle, CachedSelectors.redisplayUpdateDate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void redo_( NObjective.RuntimeObject redo ) {
			RuntimeObject ___occuredException;
			NativeMethods.redo_( Handle, CachedSelectors.redo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), redo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void reSetAcceptsMouseMovedEvents() {
			RuntimeObject ___occuredException;
			NativeMethods.reSetAcceptsMouseMovedEvents( Handle, CachedSelectors.reSetAcceptsMouseMovedEvents, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void resetRectCaches() {
			RuntimeObject ___occuredException;
			NativeMethods.resetRectCaches( Handle, CachedSelectors.resetRectCaches, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void rulerView_userClickedOnMarker_( NObjective.RuntimeObject view, NObjective.RuntimeObject userClickedOnMarker ) {
			RuntimeObject ___occuredException;
			NativeMethods.rulerView_userClickedOnMarker_( Handle, CachedSelectors.rulerView_userClickedOnMarker_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, userClickedOnMarker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEditMode_( char mode ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEditMode_( Handle, CachedSelectors.setEditMode_, out ___occuredException, sizeof( char ), mode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMessageType_( int type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMessageType_( Handle, CachedSelectors.setMessageType_, out ___occuredException, sizeof( int ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShowFlare_( char flare ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShowFlare_( Handle, CachedSelectors.setShowFlare_, out ___occuredException, sizeof( char ), flare );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setup() {
			RuntimeObject ___occuredException;
			NativeMethods.setup( Handle, CachedSelectors.setup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject shadowImageAroundPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shadowImageAroundPath_( Handle, CachedSelectors.shadowImageAroundPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool shouldStartEditingOnDoubleClick_key_( NObjective.RuntimeObject click, System.IntPtr key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shouldStartEditingOnDoubleClick_key_( Handle, CachedSelectors.shouldStartEditingOnDoubleClick_key_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), click, key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject uiController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.uiController( Handle, CachedSelectors.uiController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void undo_( NObjective.RuntimeObject undo ) {
			RuntimeObject ___occuredException;
			NativeMethods.undo_( Handle, CachedSelectors.undo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), undo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void windowDidBecomeKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowDidBecomeKey_( Handle, CachedSelectors.windowDidBecomeKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void windowDidResignKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowDidResignKey_( Handle, CachedSelectors.windowDidResignKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void abViewDoubleClicked_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject clicked );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibleAttachments( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr accessibleLabelsAndValues( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void appendAttributedString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void appendString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void appendString_withFont_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, NObjective.RuntimeObject withFont );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void appendString_withFont_andAttribute_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, NObjective.RuntimeObject withFont, NObjective.RuntimeObject andAttribute );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void appendTemporaryField_andLabel_font_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject field, NObjective.RuntimeObject andLabel, NObjective.RuntimeObject font );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attachmentStringForEmailCertificate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject certificate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cancel );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clearShadow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void disableDelegateMessages( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void doDelete_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject delete );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void doSelectAll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject all );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void edit_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject edit );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char editMode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void enableDelegateMessages( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void exportVCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void findSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr focusedPropertyPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void handleRollOverSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void handleShadowHilite( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasNameData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void itemRolledOut( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void itemRolledOver( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void layoutChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void layoutManager_didCompleteLayoutForTextContainer_atEnd_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject manager, NObjective.RuntimeObject didCompleteLayoutForTextContainer, char atEnd );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void markShadowDirtyRect( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr noteRollOverPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr onlineStatusButton( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr personImageView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void prepareForDifferentCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void redisplayUpdateDate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void redo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject redo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void reSetAcceptsMouseMovedEvents( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resetRectCaches( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void rulerView_userClickedOnMarker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject userClickedOnMarker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEditMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char mode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMessageType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setShowFlare_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char flare );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr shadowImageAroundPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool shouldStartEditingOnDoubleClick_key_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject click, System.IntPtr key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr uiController( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void undo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject undo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr updateDateAttributes( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void windowDidBecomeKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void windowDidResignKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
		}
		static internal class CachedSelectors {
			public static readonly Selector abViewDoubleClicked_ = "abViewDoubleClicked:";
			public static readonly Selector accessibleAttachments = "accessibleAttachments";
			public static readonly Selector accessibleLabelsAndValues = "accessibleLabelsAndValues";
			public static readonly Selector appendAttributedString_ = "appendAttributedString:";
			public static readonly Selector appendString_ = "appendString:";
			public static readonly Selector appendString_withFont_ = "appendString:withFont:";
			public static readonly Selector appendString_withFont_andAttribute_ = "appendString:withFont:andAttribute:";
			public static readonly Selector appendTemporaryField_andLabel_font_ = "appendTemporaryField:andLabel:font:";
			public static readonly Selector attachmentStringForEmailCertificate_ = "attachmentStringForEmailCertificate:";
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector cancel_ = "cancel:";
			public static readonly Selector clearShadow = "clearShadow";
			public static readonly Selector disableDelegateMessages = "disableDelegateMessages";
			public static readonly Selector doDelete_ = "doDelete:";
			public static readonly Selector doSelectAll_ = "doSelectAll:";
			public static readonly Selector edit_ = "edit:";
			public static readonly Selector editMode = "editMode";
			public static readonly Selector enableDelegateMessages = "enableDelegateMessages";
			public static readonly Selector exportVCard_ = "exportVCard:";
			public static readonly Selector findSelection_ = "findSelection:";
			public static readonly Selector focusedPropertyPath = "focusedPropertyPath";
			public static readonly Selector handleRollOverSelection_ = "handleRollOverSelection:";
			public static readonly Selector handleShadowHilite = "handleShadowHilite";
			public static readonly Selector hasNameData = "hasNameData";
			public static readonly Selector itemRolledOut = "itemRolledOut";
			public static readonly Selector itemRolledOver = "itemRolledOver";
			public static readonly Selector layoutChanged_ = "layoutChanged:";
			public static readonly Selector layoutManager_didCompleteLayoutForTextContainer_atEnd_ = "layoutManager:didCompleteLayoutForTextContainer:atEnd:";
			public static readonly Selector markShadowDirtyRect = "markShadowDirtyRect";
			public static readonly Selector noteRollOverPath_ = "noteRollOverPath:";
			public static readonly Selector onlineStatusButton = "onlineStatusButton";
			public static readonly Selector personImageView = "personImageView";
			public static readonly Selector prepareForDifferentCard_ = "prepareForDifferentCard:";
			public static readonly Selector redisplayUpdateDate = "redisplayUpdateDate";
			public static readonly Selector redo_ = "redo:";
			public static readonly Selector reSetAcceptsMouseMovedEvents = "reSetAcceptsMouseMovedEvents";
			public static readonly Selector resetRectCaches = "resetRectCaches";
			public static readonly Selector rulerView_userClickedOnMarker_ = "rulerView:userClickedOnMarker:";
			public static readonly Selector setEditMode_ = "setEditMode:";
			public static readonly Selector setMessageType_ = "setMessageType:";
			public static readonly Selector setShowFlare_ = "setShowFlare:";
			public static readonly Selector setup = "setup";
			public static readonly Selector shadowImageAroundPath_ = "shadowImageAroundPath:";
			public static readonly Selector shouldStartEditingOnDoubleClick_key_ = "shouldStartEditingOnDoubleClick:key:";
			public static readonly Selector uiController = "uiController";
			public static readonly Selector undo_ = "undo:";
			public static readonly Selector updateDateAttributes = "updateDateAttributes";
			public static readonly Selector windowDidBecomeKey_ = "windowDidBecomeKey:";
			public static readonly Selector windowDidResignKey_ = "windowDidResignKey:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSATSTypesetter ) )]
	public struct ABTypesetter : IEquatable<ABTypesetter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABTypesetter;
		public static implicit operator NSATSTypesetter( ABTypesetter value ) {
			return new NSATSTypesetter( value.Handle );
		}
		public static implicit operator NSTypesetter( ABTypesetter value ) {
			return new NSTypesetter( value.Handle );
		}
		public static implicit operator NSObject( ABTypesetter value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABTypesetter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABTypesetter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABTypesetter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABTypesetter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABTypesetter value1, ABTypesetter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABTypesetter value1, ABTypesetter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABTypesetter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABTypesetter alloc() {
			return new ABTypesetter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABUIController : IEquatable<ABUIController> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABUIController;
		public static implicit operator NSObject( ABUIController value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABUIController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABUIController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABUIController?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABUIController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABUIController value1, ABUIController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABUIController value1, ABUIController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABUIController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABUIController alloc() {
			return new ABUIController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addFieldWithNoPopup_( NObjective.RuntimeObject popup ) {
			RuntimeObject ___occuredException;
			NativeMethods.addFieldWithNoPopup_( Handle, CachedSelectors.addFieldWithNoPopup_, out ___occuredException, sizeof( NObjective.RuntimeObject ), popup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char allowGroupSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowGroupSelection( Handle, CachedSelectors.allowGroupSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char allowsDirectoriesSearches() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsDirectoriesSearches( Handle, CachedSelectors.allowsDirectoriesSearches, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char allowsGroupEditing() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsGroupEditing( Handle, CachedSelectors.allowsGroupEditing, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject autosaveName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.autosaveName( Handle, CachedSelectors.autosaveName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject bluetoothButton() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bluetoothButton( Handle, CachedSelectors.bluetoothButton, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char boolForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.boolForKey_( Handle, CachedSelectors.boolForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject cardPane() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cardPane( Handle, CachedSelectors.cardPane, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject cardScrollView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cardScrollView( Handle, CachedSelectors.cardScrollView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void clearCustomImage_( NObjective.RuntimeObject image ) {
			RuntimeObject ___occuredException;
			NativeMethods.clearCustomImage_( Handle, CachedSelectors.clearCustomImage_, out ___occuredException, sizeof( NObjective.RuntimeObject ), image );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void commitPendingChangesAndSave_( char save ) {
			RuntimeObject ___occuredException;
			NativeMethods.commitPendingChangesAndSave_( Handle, CachedSelectors.commitPendingChangesAndSave_, out ___occuredException, sizeof( char ), save );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void didEndShouldCloseSheet_returnCode_contextInfo_( NObjective.RuntimeObject sheet, int returnCode, System.IntPtr contextInfo ) {
			RuntimeObject ___occuredException;
			NativeMethods.didEndShouldCloseSheet_returnCode_contextInfo_( Handle, CachedSelectors.didEndShouldCloseSheet_returnCode_contextInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( System.IntPtr ), sheet, returnCode, contextInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject directoriesController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoriesController( Handle, CachedSelectors.directoriesController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject directoriesPane() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoriesPane( Handle, CachedSelectors.directoriesPane, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject directoryResultsController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryResultsController( Handle, CachedSelectors.directoryResultsController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject directoryResultsPane() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.directoryResultsPane( Handle, CachedSelectors.directoryResultsPane, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void doRemoveFromGroup() {
			RuntimeObject ___occuredException;
			NativeMethods.doRemoveFromGroup( Handle, CachedSelectors.doRemoveFromGroup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void dummyAction_( NObjective.RuntimeObject action ) {
			RuntimeObject ___occuredException;
			NativeMethods.dummyAction_( Handle, CachedSelectors.dummyAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject editButton() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.editButton( Handle, CachedSelectors.editButton, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void editInput_( NObjective.RuntimeObject input ) {
			RuntimeObject ___occuredException;
			NativeMethods.editInput_( Handle, CachedSelectors.editInput_, out ___occuredException, sizeof( NObjective.RuntimeObject ), input );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void find_( NObjective.RuntimeObject find ) {
			RuntimeObject ___occuredException;
			NativeMethods.find_( Handle, CachedSelectors.find_, out ___occuredException, sizeof( NObjective.RuntimeObject ), find );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void findString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			NativeMethods.findString_( Handle, CachedSelectors.findString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float floatForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.floatForKey_( Handle, CachedSelectors.floatForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject groupsController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupsController( Handle, CachedSelectors.groupsController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject groupsPane() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupsPane( Handle, CachedSelectors.groupsPane, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char groupsPaneHasFocus() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupsPaneHasFocus( Handle, CachedSelectors.groupsPaneHasFocus, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void groupsSelectionChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.groupsSelectionChanged_( Handle, CachedSelectors.groupsSelectionChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void handleSwitchToCardAndColumnsFrom_animate_( int @from, char animate ) {
			RuntimeObject ___occuredException;
			NativeMethods.handleSwitchToCardAndColumnsFrom_animate_( Handle, CachedSelectors.handleSwitchToCardAndColumnsFrom_animate_, out ___occuredException, sizeof( int ) + sizeof( char ), @from, animate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void handleSwitchToCardOnlyFrom_animate_( int @from, char animate ) {
			RuntimeObject ___occuredException;
			NativeMethods.handleSwitchToCardOnlyFrom_animate_( Handle, CachedSelectors.handleSwitchToCardOnlyFrom_animate_, out ___occuredException, sizeof( int ) + sizeof( char ), @from, animate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void handleSwitchToColumnsOnlyFrom_animate_( int @from, char animate ) {
			RuntimeObject ___occuredException;
			NativeMethods.handleSwitchToColumnsOnlyFrom_animate_( Handle, CachedSelectors.handleSwitchToColumnsOnlyFrom_animate_, out ___occuredException, sizeof( int ) + sizeof( char ), @from, animate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void handleSwitchToDirectoriesFrom_animate_( int @from, char animate ) {
			RuntimeObject ___occuredException;
			NativeMethods.handleSwitchToDirectoriesFrom_animate_( Handle, CachedSelectors.handleSwitchToDirectoriesFrom_animate_, out ___occuredException, sizeof( int ) + sizeof( char ), @from, animate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void hideAddPeopleButton() {
			RuntimeObject ___occuredException;
			NativeMethods.hideAddPeopleButton( Handle, CachedSelectors.hideAddPeopleButton, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void hideShowLastImport_( char import ) {
			RuntimeObject ___occuredException;
			NativeMethods.hideShowLastImport_( Handle, CachedSelectors.hideShowLastImport_, out ___occuredException, sizeof( char ), import );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initAsPeoplePicker_mainSplit_searchLabel_searchField_( NObjective.RuntimeObject picker, NObjective.RuntimeObject mainSplit, NObjective.RuntimeObject searchLabel, NObjective.RuntimeObject searchField ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initAsPeoplePicker_mainSplit_searchLabel_searchField_( Handle, CachedSelectors.initAsPeoplePicker_mainSplit_searchLabel_searchField_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), picker, mainSplit, searchLabel, searchField );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject inputController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.inputController( Handle, CachedSelectors.inputController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void insertSpinningArrows() {
			RuntimeObject ___occuredException;
			NativeMethods.insertSpinningArrows( Handle, CachedSelectors.insertSpinningArrows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int integerForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.integerForKey_( Handle, CachedSelectors.integerForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isAddressBook() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isAddressBook( Handle, CachedSelectors.isAddressBook, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isAnimating() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isAnimating( Handle, CachedSelectors.isAnimating, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isCardDisplayed() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isCardDisplayed( Handle, CachedSelectors.isCardDisplayed, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isCardPaneVisible() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isCardPaneVisible( Handle, CachedSelectors.isCardPaneVisible, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isDirectoriesPaneVisible() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isDirectoriesPaneVisible( Handle, CachedSelectors.isDirectoriesPaneVisible, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isDirectoryResultsPaneVisible() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isDirectoryResultsPaneVisible( Handle, CachedSelectors.isDirectoryResultsPaneVisible, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isDistributionList() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isDistributionList( Handle, CachedSelectors.isDistributionList, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isEditingGroupName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEditingGroupName( Handle, CachedSelectors.isEditingGroupName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isFrontWindow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isFrontWindow( Handle, CachedSelectors.isFrontWindow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isGroupsPaneVisible() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isGroupsPaneVisible( Handle, CachedSelectors.isGroupsPaneVisible, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isLoaded() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isLoaded( Handle, CachedSelectors.isLoaded, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isMembersPaneVisible() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isMembersPaneVisible( Handle, CachedSelectors.isMembersPaneVisible, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isPeoplePicker() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isPeoplePicker( Handle, CachedSelectors.isPeoplePicker, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void layoutSanityCheck() {
			RuntimeObject ___occuredException;
			NativeMethods.layoutSanityCheck( Handle, CachedSelectors.layoutSanityCheck, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void layoutStatusbar() {
			RuntimeObject ___occuredException;
			NativeMethods.layoutStatusbar( Handle, CachedSelectors.layoutStatusbar, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int layoutType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.layoutType( Handle, CachedSelectors.layoutType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void makeBTAvailable_( NObjective.RuntimeObject available ) {
			RuntimeObject ___occuredException;
			NativeMethods.makeBTAvailable_( Handle, CachedSelectors.makeBTAvailable_, out ___occuredException, sizeof( NObjective.RuntimeObject ), available );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void makeBTUnavailable_( NObjective.RuntimeObject unavailable ) {
			RuntimeObject ___occuredException;
			NativeMethods.makeBTUnavailable_( Handle, CachedSelectors.makeBTUnavailable_, out ___occuredException, sizeof( NObjective.RuntimeObject ), unavailable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void membersChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.membersChanged_( Handle, CachedSelectors.membersChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject membersController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.membersController( Handle, CachedSelectors.membersController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void membersSelectionChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.membersSelectionChanged_( Handle, CachedSelectors.membersSelectionChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float minimunWindowWidth_( char width ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.minimunWindowWidth_( Handle, CachedSelectors.minimunWindowWidth_, out ___occuredException, sizeof( char ), width );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char modalMode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.modalMode( Handle, CachedSelectors.modalMode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject model() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.model( Handle, CachedSelectors.model, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void nextCard_( NObjective.RuntimeObject card ) {
			RuntimeObject ___occuredException;
			NativeMethods.nextCard_( Handle, CachedSelectors.nextCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void nextPreviousCard_( NObjective.RuntimeObject card ) {
			RuntimeObject ___occuredException;
			NativeMethods.nextPreviousCard_( Handle, CachedSelectors.nextPreviousCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject objectForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectForKey_( Handle, CachedSelectors.objectForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void openInSeparateWindow_( NObjective.RuntimeObject window ) {
			RuntimeObject ___occuredException;
			NativeMethods.openInSeparateWindow_( Handle, CachedSelectors.openInSeparateWindow_, out ___occuredException, sizeof( NObjective.RuntimeObject ), window );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void openInSeparateWindowWithoutAsking() {
			RuntimeObject ___occuredException;
			NativeMethods.openInSeparateWindowWithoutAsking( Handle, CachedSelectors.openInSeparateWindowWithoutAsking, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void openPersonInSeparateWindow_( NObjective.RuntimeObject window ) {
			RuntimeObject ___occuredException;
			NativeMethods.openPersonInSeparateWindow_( Handle, CachedSelectors.openPersonInSeparateWindow_, out ___occuredException, sizeof( NObjective.RuntimeObject ), window );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject peoplePane() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.peoplePane( Handle, CachedSelectors.peoplePane, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject peoplePickerView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.peoplePickerView( Handle, CachedSelectors.peoplePickerView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void personChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.personChanged_( Handle, CachedSelectors.personChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject plusGroupButton() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.plusGroupButton( Handle, CachedSelectors.plusGroupButton, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject plusPersonButton() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.plusPersonButton( Handle, CachedSelectors.plusPersonButton, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void previousCard_( NObjective.RuntimeObject card ) {
			RuntimeObject ___occuredException;
			NativeMethods.previousCard_( Handle, CachedSelectors.previousCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeSpinningArrows() {
			RuntimeObject ___occuredException;
			NativeMethods.removeSpinningArrows( Handle, CachedSelectors.removeSpinningArrows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void resetFirstLastName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.resetFirstLastName_( Handle, CachedSelectors.resetFirstLastName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void resetGroupAndPeopleFromDefaults() {
			RuntimeObject ___occuredException;
			NativeMethods.resetGroupAndPeopleFromDefaults( Handle, CachedSelectors.resetGroupAndPeopleFromDefaults, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void resizeColumnsToMinimun() {
			RuntimeObject ___occuredException;
			NativeMethods.resizeColumnsToMinimun( Handle, CachedSelectors.resizeColumnsToMinimun, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void resizeWindow_animate_fromLayout_toLayout_paneWidths_numberOfPanes_( float window, char animate, int fromLayout, int toLayout, System.IntPtr paneWidths, int numberOfPanes ) {
			RuntimeObject ___occuredException;
			NativeMethods.resizeWindow_animate_fromLayout_toLayout_paneWidths_numberOfPanes_( Handle, CachedSelectors.resizeWindow_animate_fromLayout_toLayout_paneWidths_numberOfPanes_, out ___occuredException, sizeof( float ) + sizeof( char ) + sizeof( int ) + sizeof( int ) + sizeof( System.IntPtr ) + sizeof( int ), window, animate, fromLayout, toLayout, paneWidths, numberOfPanes
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject searchController() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchController( Handle, CachedSelectors.searchController, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject searchField() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchField( Handle, CachedSelectors.searchField, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject searchString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchString( Handle, CachedSelectors.searchString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedGroupsInMembersColumn() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedGroupsInMembersColumn( Handle, CachedSelectors.selectedGroupsInMembersColumn, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public uint selectedPeople() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedPeople( Handle, CachedSelectors.selectedPeople, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public void setAllowGroupSelection_( char selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowGroupSelection_( Handle, CachedSelectors.setAllowGroupSelection_, out ___occuredException, sizeof( char ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsDirectoriesSearches_( char searches ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsDirectoriesSearches_( Handle, CachedSelectors.setAllowsDirectoriesSearches_, out ___occuredException, sizeof( char ), searches );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsGroupEditing_( char editing ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsGroupEditing_( Handle, CachedSelectors.setAllowsGroupEditing_, out ___occuredException, sizeof( char ), editing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAutosaveName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAutosaveName_( Handle, CachedSelectors.setAutosaveName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBluetoothButton_( NObjective.RuntimeObject button ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBluetoothButton_( Handle, CachedSelectors.setBluetoothButton_, out ___occuredException, sizeof( NObjective.RuntimeObject ), button );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBool_forKey_( char @bool, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBool_forKey_( Handle, CachedSelectors.setBool_forKey_, out ___occuredException, sizeof( char ) + sizeof( NObjective.RuntimeObject ), @bool, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCountLabel_( NObjective.RuntimeObject label ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCountLabel_( Handle, CachedSelectors.setCountLabel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), label );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFloat_forKey_( float @float, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFloat_forKey_( Handle, CachedSelectors.setFloat_forKey_, out ___occuredException, sizeof( float ) + sizeof( NObjective.RuntimeObject ), @float, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setInteger_forKey_( int integer, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.setInteger_forKey_( Handle, CachedSelectors.setInteger_forKey_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ), integer, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setIsDistributionList_( char list ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIsDistributionList_( Handle, CachedSelectors.setIsDistributionList_, out ___occuredException, sizeof( char ), list );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLayoutType_animate_( int type, char animate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLayoutType_animate_( Handle, CachedSelectors.setLayoutType_animate_, out ___occuredException, sizeof( int ) + sizeof( char ), type, animate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setModalMode_( char mode ) {
			RuntimeObject ___occuredException;
			NativeMethods.setModalMode_( Handle, CachedSelectors.setModalMode_, out ___occuredException, sizeof( char ), mode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setObject_forKey_( NObjective.RuntimeObject @object, NObjective.RuntimeObject forKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.setObject_forKey_( Handle, CachedSelectors.setObject_forKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @object, forKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPeoplePickerView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPeoplePickerView_( Handle, CachedSelectors.setPeoplePickerView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSearchString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSearchString_( Handle, CachedSelectors.setSearchString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShouldHideMeCard_( char card ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShouldHideMeCard_( Handle, CachedSelectors.setShouldHideMeCard_, out ___occuredException, sizeof( char ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setupAsPeoplePicker_( char picker ) {
			RuntimeObject ___occuredException;
			NativeMethods.setupAsPeoplePicker_( Handle, CachedSelectors.setupAsPeoplePicker_, out ___occuredException, sizeof( char ), picker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUpDataSources() {
			RuntimeObject ___occuredException;
			NativeMethods.setUpDataSources( Handle, CachedSelectors.setUpDataSources, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUpDataSourcesAndSelection() {
			RuntimeObject ___occuredException;
			NativeMethods.setUpDataSourcesAndSelection( Handle, CachedSelectors.setUpDataSourcesAndSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setupKeyboardNavigation_( NObjective.RuntimeObject navigation ) {
			RuntimeObject ___occuredException;
			NativeMethods.setupKeyboardNavigation_( Handle, CachedSelectors.setupKeyboardNavigation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), navigation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool shouldHideMeCard() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shouldHideMeCard( Handle, CachedSelectors.shouldHideMeCard, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void showAsCompany_( NObjective.RuntimeObject company ) {
			RuntimeObject ___occuredException;
			NativeMethods.showAsCompany_( Handle, CachedSelectors.showAsCompany_, out ___occuredException, sizeof( NObjective.RuntimeObject ), company );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showAsPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			NativeMethods.showAsPerson_( Handle, CachedSelectors.showAsPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showCard_( NObjective.RuntimeObject card ) {
			RuntimeObject ___occuredException;
			NativeMethods.showCard_( Handle, CachedSelectors.showCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ), card );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showCardAndColumns_( NObjective.RuntimeObject columns ) {
			RuntimeObject ___occuredException;
			NativeMethods.showCardAndColumns_( Handle, CachedSelectors.showCardAndColumns_, out ___occuredException, sizeof( NObjective.RuntimeObject ), columns );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showColumns_( NObjective.RuntimeObject columns ) {
			RuntimeObject ___occuredException;
			NativeMethods.showColumns_( Handle, CachedSelectors.showColumns_, out ___occuredException, sizeof( NObjective.RuntimeObject ), columns );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showDirectories_( NObjective.RuntimeObject directories ) {
			RuntimeObject ___occuredException;
			NativeMethods.showDirectories_( Handle, CachedSelectors.showDirectories_, out ___occuredException, sizeof( NObjective.RuntimeObject ), directories );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showLastImport_( NObjective.RuntimeObject import ) {
			RuntimeObject ___occuredException;
			NativeMethods.showLastImport_( Handle, CachedSelectors.showLastImport_, out ___occuredException, sizeof( NObjective.RuntimeObject ), import );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showPeopleButton() {
			RuntimeObject ___occuredException;
			NativeMethods.showPeopleButton( Handle, CachedSelectors.showPeopleButton, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject spinningArrows() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.spinningArrows( Handle, CachedSelectors.spinningArrows, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject splitView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.splitView( Handle, CachedSelectors.splitView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public float splitView_constrainMaxCoordinate_ofSubviewAt_( NObjective.RuntimeObject view, float constrainMaxCoordinate, int ofSubviewAt ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.splitView_constrainMaxCoordinate_ofSubviewAt_( Handle, CachedSelectors.splitView_constrainMaxCoordinate_ofSubviewAt_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( float ) + sizeof( int ), view, constrainMaxCoordinate, ofSubviewAt );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float splitView_constrainMinCoordinate_ofSubviewAt_( NObjective.RuntimeObject view, float constrainMinCoordinate, int ofSubviewAt ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.splitView_constrainMinCoordinate_ofSubviewAt_( Handle, CachedSelectors.splitView_constrainMinCoordinate_ofSubviewAt_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( float ) + sizeof( int ), view, constrainMinCoordinate, ofSubviewAt );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void splitView_didMoveDivider_distance_( NObjective.RuntimeObject view, int didMoveDivider, float distance ) {
			RuntimeObject ___occuredException;
			NativeMethods.splitView_didMoveDivider_distance_( Handle, CachedSelectors.splitView_didMoveDivider_distance_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( float ), view, didMoveDivider, distance );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char splitView_willMoveDivider_distance_( NObjective.RuntimeObject view, int willMoveDivider, float distance ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.splitView_willMoveDivider_distance_( Handle, CachedSelectors.splitView_willMoveDivider_distance_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( float ), view, willMoveDivider, distance );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void splitViewDidResizeSubviews_( NObjective.RuntimeObject subviews ) {
			RuntimeObject ___occuredException;
			NativeMethods.splitViewDidResizeSubviews_( Handle, CachedSelectors.splitViewDidResizeSubviews_, out ___occuredException, sizeof( NObjective.RuntimeObject ), subviews );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject stringsFromSelectionExpanding_( char expanding ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringsFromSelectionExpanding_( Handle, CachedSelectors.stringsFromSelectionExpanding_, out ___occuredException, sizeof( char ), expanding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void swapFirstLastName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.swapFirstLastName_( Handle, CachedSelectors.swapFirstLastName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void switchLayoutTo_withAnimation_( int to, char withAnimation ) {
			RuntimeObject ___occuredException;
			NativeMethods.switchLayoutTo_withAnimation_( Handle, CachedSelectors.switchLayoutTo_withAnimation_, out ___occuredException, sizeof( int ) + sizeof( char ), to, withAnimation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void tearDown() {
			RuntimeObject ___occuredException;
			NativeMethods.tearDown( Handle, CachedSelectors.tearDown, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void thisIsACompany_( NObjective.RuntimeObject company ) {
			RuntimeObject ___occuredException;
			NativeMethods.thisIsACompany_( Handle, CachedSelectors.thisIsACompany_, out ___occuredException, sizeof( NObjective.RuntimeObject ), company );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void turnOffEditMode() {
			RuntimeObject ___occuredException;
			NativeMethods.turnOffEditMode( Handle, CachedSelectors.turnOffEditMode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateCountLabel() {
			RuntimeObject ___occuredException;
			NativeMethods.updateCountLabel( Handle, CachedSelectors.updateCountLabel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateNextPreviousState() {
			RuntimeObject ___occuredException;
			NativeMethods.updateNextPreviousState( Handle, CachedSelectors.updateNextPreviousState, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updatePlusMinus_( NObjective.RuntimeObject minus ) {
			RuntimeObject ___occuredException;
			NativeMethods.updatePlusMinus_( Handle, CachedSelectors.updatePlusMinus_, out ___occuredException, sizeof( NObjective.RuntimeObject ), minus );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char validateMenuItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validateMenuItem_( Handle, CachedSelectors.validateMenuItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject window() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.window( Handle, CachedSelectors.window, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void writeSelectedGroupsAndPeopleToDefaults() {
			RuntimeObject ___occuredException;
			NativeMethods.writeSelectedGroupsAndPeopleToDefaults( Handle, CachedSelectors.writeSelectedGroupsAndPeopleToDefaults, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addFieldWithNoPopup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject popup );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char allowGroupSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char allowsDirectoriesSearches( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char allowsGroupEditing( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr autosaveName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr bluetoothButton( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char boolForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cardPane( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cardScrollView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clearCustomImage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void commitPendingChangesAndSave_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char save );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void didEndShouldCloseSheet_returnCode_contextInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject sheet, int returnCode, System.IntPtr contextInfo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr directoriesController( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr directoriesPane( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr directoryResultsController( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr directoryResultsPane( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void doRemoveFromGroup( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void dummyAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject action );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr editButton( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void editInput_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject input );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void find_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject find );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void findString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float floatForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr groupsController( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr groupsPane( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char groupsPaneHasFocus( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void groupsSelectionChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void handleSwitchToCardAndColumnsFrom_animate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int @from, char animate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void handleSwitchToCardOnlyFrom_animate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int @from, char animate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void handleSwitchToColumnsOnlyFrom_animate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int @from, char animate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void handleSwitchToDirectoriesFrom_animate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int @from, char animate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void hideAddPeopleButton( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void hideShowLastImport_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char import );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initAsPeoplePicker_mainSplit_searchLabel_searchField_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject picker, NObjective.RuntimeObject mainSplit, NObjective.RuntimeObject searchLabel, NObjective.RuntimeObject searchField );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr inputController( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertSpinningArrows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int integerForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isAddressBook( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isAnimating( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isCardDisplayed( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isCardPaneVisible( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isDirectoriesPaneVisible( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isDirectoryResultsPaneVisible( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isDistributionList( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isEditingGroupName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isFrontWindow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isGroupsPaneVisible( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isLoaded( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isMembersPaneVisible( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isPeoplePicker( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void layoutSanityCheck( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void layoutStatusbar( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int layoutType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void makeBTAvailable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject available );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void makeBTUnavailable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject unavailable );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void membersChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr membersController( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void membersSelectionChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float minimunWindowWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char width );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char modalMode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr model( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nextCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void nextPreviousCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectForKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void openInSeparateWindow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject window );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void openInSeparateWindowWithoutAsking( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void openPersonInSeparateWindow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject window );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr peoplePane( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr peoplePickerView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void personChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr plusGroupButton( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr plusPersonButton( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void previousCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeSpinningArrows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resetFirstLastName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resetGroupAndPeopleFromDefaults( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resizeColumnsToMinimun( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resizeWindow_animate_fromLayout_toLayout_paneWidths_numberOfPanes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float window, char animate, int fromLayout, int toLayout, System.IntPtr paneWidths, int numberOfPanes
			 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr searchController( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr searchField( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr searchString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedGroupsInMembersColumn( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint selectedPeople( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowGroupSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowsDirectoriesSearches_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char searches );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowsGroupEditing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char editing );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAutosaveName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBluetoothButton_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject button );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBool_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @bool, NObjective.RuntimeObject forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCountLabel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject label );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFloat_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float @float, NObjective.RuntimeObject forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setInteger_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int integer, NObjective.RuntimeObject forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setIsDistributionList_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char list );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLayoutType_animate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int type, char animate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setModalMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char mode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setObject_forKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @object, NObjective.RuntimeObject forKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPeoplePickerView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSearchString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setShouldHideMeCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char card );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setupAsPeoplePicker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char picker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUpDataSources( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUpDataSourcesAndSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setupKeyboardNavigation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject navigation );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool shouldHideMeCard( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void showAsCompany_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject company );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void showAsPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void showCard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject card );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void showCardAndColumns_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject columns );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void showColumns_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject columns );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void showDirectories_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject directories );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void showLastImport_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject import );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void showPeopleButton( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr spinningArrows( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr splitView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float splitView_constrainMaxCoordinate_ofSubviewAt_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, float constrainMaxCoordinate, int ofSubviewAt );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float splitView_constrainMinCoordinate_ofSubviewAt_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, float constrainMinCoordinate, int ofSubviewAt );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void splitView_didMoveDivider_distance_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, int didMoveDivider, float distance );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char splitView_willMoveDivider_distance_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, int willMoveDivider, float distance );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void splitViewDidResizeSubviews_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject subviews );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringsFromSelectionExpanding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char expanding );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void swapFirstLastName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void switchLayoutTo_withAnimation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int to, char withAnimation );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void tearDown( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void thisIsACompany_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject company );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void turnOffEditMode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateCountLabel( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateNextPreviousState( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updatePlusMinus_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject minus );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char validateMenuItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr window( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void writeSelectedGroupsAndPeopleToDefaults( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addFieldWithNoPopup_ = "addFieldWithNoPopup:";
			public static readonly Selector allowGroupSelection = "allowGroupSelection";
			public static readonly Selector allowsDirectoriesSearches = "allowsDirectoriesSearches";
			public static readonly Selector allowsGroupEditing = "allowsGroupEditing";
			public static readonly Selector autosaveName = "autosaveName";
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector bluetoothButton = "bluetoothButton";
			public static readonly Selector boolForKey_ = "boolForKey:";
			public static readonly Selector cardPane = "cardPane";
			public static readonly Selector cardScrollView = "cardScrollView";
			public static readonly Selector clearCustomImage_ = "clearCustomImage:";
			public static readonly Selector commitPendingChangesAndSave_ = "commitPendingChangesAndSave:";
			public static readonly Selector didEndShouldCloseSheet_returnCode_contextInfo_ = "didEndShouldCloseSheet:returnCode:contextInfo:";
			public static readonly Selector directoriesController = "directoriesController";
			public static readonly Selector directoriesPane = "directoriesPane";
			public static readonly Selector directoryResultsController = "directoryResultsController";
			public static readonly Selector directoryResultsPane = "directoryResultsPane";
			public static readonly Selector doRemoveFromGroup = "doRemoveFromGroup";
			public static readonly Selector dummyAction_ = "dummyAction:";
			public static readonly Selector editButton = "editButton";
			public static readonly Selector editInput_ = "editInput:";
			public static readonly Selector find_ = "find:";
			public static readonly Selector findString_ = "findString:";
			public static readonly Selector floatForKey_ = "floatForKey:";
			public static readonly Selector groupsController = "groupsController";
			public static readonly Selector groupsPane = "groupsPane";
			public static readonly Selector groupsPaneHasFocus = "groupsPaneHasFocus";
			public static readonly Selector groupsSelectionChanged_ = "groupsSelectionChanged:";
			public static readonly Selector handleSwitchToCardAndColumnsFrom_animate_ = "handleSwitchToCardAndColumnsFrom:animate:";
			public static readonly Selector handleSwitchToCardOnlyFrom_animate_ = "handleSwitchToCardOnlyFrom:animate:";
			public static readonly Selector handleSwitchToColumnsOnlyFrom_animate_ = "handleSwitchToColumnsOnlyFrom:animate:";
			public static readonly Selector handleSwitchToDirectoriesFrom_animate_ = "handleSwitchToDirectoriesFrom:animate:";
			public static readonly Selector hideAddPeopleButton = "hideAddPeopleButton";
			public static readonly Selector hideShowLastImport_ = "hideShowLastImport:";
			public static readonly Selector initAsPeoplePicker_mainSplit_searchLabel_searchField_ = "initAsPeoplePicker:mainSplit:searchLabel:searchField:";
			public static readonly Selector inputController = "inputController";
			public static readonly Selector insertSpinningArrows = "insertSpinningArrows";
			public static readonly Selector integerForKey_ = "integerForKey:";
			public static readonly Selector isAddressBook = "isAddressBook";
			public static readonly Selector isAnimating = "isAnimating";
			public static readonly Selector isCardDisplayed = "isCardDisplayed";
			public static readonly Selector isCardPaneVisible = "isCardPaneVisible";
			public static readonly Selector isDirectoriesPaneVisible = "isDirectoriesPaneVisible";
			public static readonly Selector isDirectoryResultsPaneVisible = "isDirectoryResultsPaneVisible";
			public static readonly Selector isDistributionList = "isDistributionList";
			public static readonly Selector isEditingGroupName = "isEditingGroupName";
			public static readonly Selector isFrontWindow = "isFrontWindow";
			public static readonly Selector isGroupsPaneVisible = "isGroupsPaneVisible";
			public static readonly Selector isLoaded = "isLoaded";
			public static readonly Selector isMembersPaneVisible = "isMembersPaneVisible";
			public static readonly Selector isPeoplePicker = "isPeoplePicker";
			public static readonly Selector layoutSanityCheck = "layoutSanityCheck";
			public static readonly Selector layoutStatusbar = "layoutStatusbar";
			public static readonly Selector layoutType = "layoutType";
			public static readonly Selector makeBTAvailable_ = "makeBTAvailable:";
			public static readonly Selector makeBTUnavailable_ = "makeBTUnavailable:";
			public static readonly Selector membersChanged_ = "membersChanged:";
			public static readonly Selector membersController = "membersController";
			public static readonly Selector membersSelectionChanged_ = "membersSelectionChanged:";
			public static readonly Selector minimunWindowWidth_ = "minimunWindowWidth:";
			public static readonly Selector modalMode = "modalMode";
			public static readonly Selector model = "model";
			public static readonly Selector nextCard_ = "nextCard:";
			public static readonly Selector nextPreviousCard_ = "nextPreviousCard:";
			public static readonly Selector objectForKey_ = "objectForKey:";
			public static readonly Selector openInSeparateWindow_ = "openInSeparateWindow:";
			public static readonly Selector openInSeparateWindowWithoutAsking = "openInSeparateWindowWithoutAsking";
			public static readonly Selector openPersonInSeparateWindow_ = "openPersonInSeparateWindow:";
			public static readonly Selector peoplePane = "peoplePane";
			public static readonly Selector peoplePickerView = "peoplePickerView";
			public static readonly Selector personChanged_ = "personChanged:";
			public static readonly Selector plusGroupButton = "plusGroupButton";
			public static readonly Selector plusPersonButton = "plusPersonButton";
			public static readonly Selector previousCard_ = "previousCard:";
			public static readonly Selector removeSpinningArrows = "removeSpinningArrows";
			public static readonly Selector resetFirstLastName_ = "resetFirstLastName:";
			public static readonly Selector resetGroupAndPeopleFromDefaults = "resetGroupAndPeopleFromDefaults";
			public static readonly Selector resizeColumnsToMinimun = "resizeColumnsToMinimun";
			public static readonly Selector resizeWindow_animate_fromLayout_toLayout_paneWidths_numberOfPanes_ = "resizeWindow:animate:fromLayout:toLayout:paneWidths:numberOfPanes:";
			public static readonly Selector searchController = "searchController";
			public static readonly Selector searchField = "searchField";
			public static readonly Selector searchString = "searchString";
			public static readonly Selector selectedGroupsInMembersColumn = "selectedGroupsInMembersColumn";
			public static readonly Selector selectedPeople = "selectedPeople";
			public static readonly Selector setAllowGroupSelection_ = "setAllowGroupSelection:";
			public static readonly Selector setAllowsDirectoriesSearches_ = "setAllowsDirectoriesSearches:";
			public static readonly Selector setAllowsGroupEditing_ = "setAllowsGroupEditing:";
			public static readonly Selector setAutosaveName_ = "setAutosaveName:";
			public static readonly Selector setBluetoothButton_ = "setBluetoothButton:";
			public static readonly Selector setBool_forKey_ = "setBool:forKey:";
			public static readonly Selector setCountLabel_ = "setCountLabel:";
			public static readonly Selector setFloat_forKey_ = "setFloat:forKey:";
			public static readonly Selector setInteger_forKey_ = "setInteger:forKey:";
			public static readonly Selector setIsDistributionList_ = "setIsDistributionList:";
			public static readonly Selector setLayoutType_animate_ = "setLayoutType:animate:";
			public static readonly Selector setModalMode_ = "setModalMode:";
			public static readonly Selector setObject_forKey_ = "setObject:forKey:";
			public static readonly Selector setPeoplePickerView_ = "setPeoplePickerView:";
			public static readonly Selector setSearchString_ = "setSearchString:";
			public static readonly Selector setShouldHideMeCard_ = "setShouldHideMeCard:";
			public static readonly Selector setupAsPeoplePicker_ = "setupAsPeoplePicker:";
			public static readonly Selector setUpDataSources = "setUpDataSources";
			public static readonly Selector setUpDataSourcesAndSelection = "setUpDataSourcesAndSelection";
			public static readonly Selector setupKeyboardNavigation_ = "setupKeyboardNavigation:";
			public static readonly Selector shouldHideMeCard = "shouldHideMeCard";
			public static readonly Selector showAsCompany_ = "showAsCompany:";
			public static readonly Selector showAsPerson_ = "showAsPerson:";
			public static readonly Selector showCard_ = "showCard:";
			public static readonly Selector showCardAndColumns_ = "showCardAndColumns:";
			public static readonly Selector showColumns_ = "showColumns:";
			public static readonly Selector showDirectories_ = "showDirectories:";
			public static readonly Selector showLastImport_ = "showLastImport:";
			public static readonly Selector showPeopleButton = "showPeopleButton";
			public static readonly Selector spinningArrows = "spinningArrows";
			public static readonly Selector splitView = "splitView";
			public static readonly Selector splitView_constrainMaxCoordinate_ofSubviewAt_ = "splitView:constrainMaxCoordinate:ofSubviewAt:";
			public static readonly Selector splitView_constrainMinCoordinate_ofSubviewAt_ = "splitView:constrainMinCoordinate:ofSubviewAt:";
			public static readonly Selector splitView_didMoveDivider_distance_ = "splitView:didMoveDivider:distance:";
			public static readonly Selector splitView_willMoveDivider_distance_ = "splitView:willMoveDivider:distance:";
			public static readonly Selector splitViewDidResizeSubviews_ = "splitViewDidResizeSubviews:";
			public static readonly Selector stringsFromSelectionExpanding_ = "stringsFromSelectionExpanding:";
			public static readonly Selector swapFirstLastName_ = "swapFirstLastName:";
			public static readonly Selector switchLayoutTo_withAnimation_ = "switchLayoutTo:withAnimation:";
			public static readonly Selector tearDown = "tearDown";
			public static readonly Selector thisIsACompany_ = "thisIsACompany:";
			public static readonly Selector turnOffEditMode = "turnOffEditMode";
			public static readonly Selector updateCountLabel = "updateCountLabel";
			public static readonly Selector updateNextPreviousState = "updateNextPreviousState";
			public static readonly Selector updatePlusMinus_ = "updatePlusMinus:";
			public static readonly Selector validateMenuItem_ = "validateMenuItem:";
			public static readonly Selector window = "window";
			public static readonly Selector writeSelectedGroupsAndPeopleToDefaults = "writeSelectedGroupsAndPeopleToDefaults";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABUndoer : IEquatable<ABUndoer> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABUndoer;
		public static implicit operator NSObject( ABUndoer value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABUndoer value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABUndoer value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABUndoer?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABUndoer value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABUndoer value1, ABUndoer value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABUndoer value1, ABUndoer value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABUndoer( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABUndoer alloc() {
			return new ABUndoer( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithUndoManager_( NObjective.RuntimeObject manager ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithUndoManager_( Handle, CachedSelectors.initWithUndoManager_, out ___occuredException, sizeof( NObjective.RuntimeObject ), manager );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithUndoManager_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject manager );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithUndoManager_ = "initWithUndoManager:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSUndoManager ) )]
	public struct ABUndoManager : IEquatable<ABUndoManager> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABUndoManager;
		public static implicit operator NSUndoManager( ABUndoManager value ) {
			return new NSUndoManager( value.Handle );
		}
		public static implicit operator NSObject( ABUndoManager value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABUndoManager value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABUndoManager value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABUndoManager?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABUndoManager value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABUndoManager value1, ABUndoManager value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABUndoManager value1, ABUndoManager value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABUndoManager( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABUndoManager alloc() {
			return new ABUndoManager( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithStringsBundle_( NObjective.RuntimeObject bundle ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithStringsBundle_( Handle, CachedSelectors.initWithStringsBundle_, out ___occuredException, sizeof( NObjective.RuntimeObject ), bundle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithStringsBundle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject bundle );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithStringsBundle_ = "initWithStringsBundle:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABImportPanelController ) )]
	public struct ABvCardController : IEquatable<ABvCardController> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABvCardController;
		public static implicit operator ABImportPanelController( ABvCardController value ) {
			return new ABImportPanelController( value.Handle );
		}
		public static implicit operator NSObject( ABvCardController value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABvCardController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABvCardController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABvCardController?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABvCardController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABvCardController value1, ABvCardController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABvCardController value1, ABvCardController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABvCardController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABvCardController alloc() {
			return new ABvCardController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void addRecord_toArray_( NObjective.RuntimeObject record, NObjective.RuntimeObject toArray ) {
			RuntimeObject ___occuredException;
			NativeMethods.addRecord_toArray_( ClassHandle, CachedSelectors.addRecord_toArray_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), record, toArray );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void exportRecords_( NObjective.RuntimeObject records ) {
			RuntimeObject ___occuredException;
			NativeMethods.exportRecords_( ClassHandle, CachedSelectors.exportRecords_, out ___occuredException, sizeof( NObjective.RuntimeObject ), records );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject pathNamesForRecords_( NObjective.RuntimeObject records ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pathNamesForRecords_( ClassHandle, CachedSelectors.pathNamesForRecords_, out ___occuredException, sizeof( NObjective.RuntimeObject ), records );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject pathNamesForRecords_singleCard_( NObjective.RuntimeObject records, char singleCard ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pathNamesForRecords_singleCard_( ClassHandle, CachedSelectors.pathNamesForRecords_singleCard_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), records, singleCard );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject pathNamesForRecords_singleCard_dataForAllRecords_( NObjective.RuntimeObject records, char singleCard, System.IntPtr dataForAllRecords ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pathNamesForRecords_singleCard_dataForAllRecords_( ClassHandle, CachedSelectors.pathNamesForRecords_singleCard_dataForAllRecords_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( System.IntPtr ), records, singleCard, dataForAllRecords );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void savePanelDidEnd_returnCode_contextInfo_( NObjective.RuntimeObject end, int returnCode, NObjective.RuntimeObject contextInfo ) {
			RuntimeObject ___occuredException;
			NativeMethods.savePanelDidEnd_returnCode_contextInfo_( ClassHandle, CachedSelectors.savePanelDidEnd_returnCode_contextInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), end, returnCode, contextInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject uniqueNameForPerson_atPath_( NObjective.RuntimeObject person, NObjective.RuntimeObject atPath ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.uniqueNameForPerson_atPath_( ClassHandle, CachedSelectors.uniqueNameForPerson_atPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), person, atPath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject vCardControllerWithUIController_( NObjective.RuntimeObject controller ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.vCardControllerWithUIController_( ClassHandle, CachedSelectors.vCardControllerWithUIController_, out ___occuredException, sizeof( NObjective.RuntimeObject ), controller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject vCardRepresentationOfRecord_( NObjective.RuntimeObject record ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.vCardRepresentationOfRecord_( ClassHandle, CachedSelectors.vCardRepresentationOfRecord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), record );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject vCardRepresentationOfRecords_( NObjective.RuntimeObject records ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.vCardRepresentationOfRecords_( ClassHandle, CachedSelectors.vCardRepresentationOfRecords_, out ___occuredException, sizeof( NObjective.RuntimeObject ), records );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject allImportableFilesFromPaths_( NObjective.RuntimeObject paths ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allImportableFilesFromPaths_( Handle, CachedSelectors.allImportableFilesFromPaths_, out ___occuredException, sizeof( NObjective.RuntimeObject ), paths );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char containsMetaDataCacheCards_( NObjective.RuntimeObject cards ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.containsMetaDataCacheCards_( Handle, CachedSelectors.containsMetaDataCacheCards_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cards );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void importPromisedFiles_intoGroup_( NObjective.RuntimeObject files, NObjective.RuntimeObject intoGroup ) {
			RuntimeObject ___occuredException;
			NativeMethods.importPromisedFiles_intoGroup_( Handle, CachedSelectors.importPromisedFiles_intoGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), files, intoGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void importVCardData_intoGroup_( NObjective.RuntimeObject data, NObjective.RuntimeObject intoGroup ) {
			RuntimeObject ___occuredException;
			NativeMethods.importVCardData_intoGroup_( Handle, CachedSelectors.importVCardData_intoGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), data, intoGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void importVCardFiles_intoGroup_( NObjective.RuntimeObject files, NObjective.RuntimeObject intoGroup ) {
			RuntimeObject ___occuredException;
			NativeMethods.importVCardFiles_intoGroup_( Handle, CachedSelectors.importVCardFiles_intoGroup_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), files, intoGroup );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void importVCards() {
			RuntimeObject ___occuredException;
			NativeMethods.importVCards( Handle, CachedSelectors.importVCards, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject nextData() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextData( Handle, CachedSelectors.nextData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addRecord_toArray_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record, NObjective.RuntimeObject toArray );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr allImportableFilesFromPaths_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject paths );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char containsMetaDataCacheCards_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cards );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void exportRecords_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject records );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void importPromisedFiles_intoGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject files, NObjective.RuntimeObject intoGroup );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void importVCardData_intoGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data, NObjective.RuntimeObject intoGroup );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void importVCardFiles_intoGroup_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject files, NObjective.RuntimeObject intoGroup );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void importVCards( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nextData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pathNamesForRecords_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject records );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pathNamesForRecords_singleCard_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject records, char singleCard );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pathNamesForRecords_singleCard_dataForAllRecords_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject records, char singleCard, System.IntPtr dataForAllRecords );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void savePanelDidEnd_returnCode_contextInfo_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject end, int returnCode, NObjective.RuntimeObject contextInfo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr uniqueNameForPerson_atPath_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person, NObjective.RuntimeObject atPath );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr vCardControllerWithUIController_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject controller );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr vCardRepresentationOfRecord_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject record );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr vCardRepresentationOfRecords_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject records );
		}
		static internal class CachedSelectors {
			public static readonly Selector addRecord_toArray_ = "addRecord:toArray:";
			public static readonly Selector allImportableFilesFromPaths_ = "allImportableFilesFromPaths:";
			public static readonly Selector containsMetaDataCacheCards_ = "containsMetaDataCacheCards:";
			public static readonly Selector exportRecords_ = "exportRecords:";
			public static readonly Selector importPromisedFiles_intoGroup_ = "importPromisedFiles:intoGroup:";
			public static readonly Selector importVCardData_intoGroup_ = "importVCardData:intoGroup:";
			public static readonly Selector importVCardFiles_intoGroup_ = "importVCardFiles:intoGroup:";
			public static readonly Selector importVCards = "importVCards";
			public static readonly Selector nextData = "nextData";
			public static readonly Selector pathNamesForRecords_ = "pathNamesForRecords:";
			public static readonly Selector pathNamesForRecords_singleCard_ = "pathNamesForRecords:singleCard:";
			public static readonly Selector pathNamesForRecords_singleCard_dataForAllRecords_ = "pathNamesForRecords:singleCard:dataForAllRecords:";
			public static readonly Selector savePanelDidEnd_returnCode_contextInfo_ = "savePanelDidEnd:returnCode:contextInfo:";
			public static readonly Selector uniqueNameForPerson_atPath_ = "uniqueNameForPerson:atPath:";
			public static readonly Selector vCardControllerWithUIController_ = "vCardControllerWithUIController:";
			public static readonly Selector vCardRepresentationOfRecord_ = "vCardRepresentationOfRecord:";
			public static readonly Selector vCardRepresentationOfRecords_ = "vCardRepresentationOfRecords:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABVCardValueSetter ) )]
	public struct ABVCardDictionaryValueSetter : IEquatable<ABVCardDictionaryValueSetter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABVCardDictionaryValueSetter;
		public static implicit operator ABVCardValueSetter( ABVCardDictionaryValueSetter value ) {
			return new ABVCardValueSetter( value.Handle );
		}
		public static implicit operator NSObject( ABVCardDictionaryValueSetter value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABVCardDictionaryValueSetter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABVCardDictionaryValueSetter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABVCardDictionaryValueSetter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABVCardDictionaryValueSetter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABVCardDictionaryValueSetter value1, ABVCardDictionaryValueSetter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABVCardDictionaryValueSetter value1, ABVCardDictionaryValueSetter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABVCardDictionaryValueSetter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABVCardDictionaryValueSetter alloc() {
			return new ABVCardDictionaryValueSetter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject dictionaryRep() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dictionaryRep( Handle, CachedSelectors.dictionaryRep, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dictionaryRep( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector dictionaryRep = "dictionaryRep";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABVCardLexer : IEquatable<ABVCardLexer> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABVCardLexer;
		public static implicit operator NSObject( ABVCardLexer value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABVCardLexer value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABVCardLexer value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABVCardLexer?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABVCardLexer value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABVCardLexer value1, ABVCardLexer value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABVCardLexer value1, ABVCardLexer value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABVCardLexer( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABVCardLexer alloc() {
			return new ABVCardLexer( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char advancePastEOL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.advancePastEOL( Handle, CachedSelectors.advancePastEOL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char advancePastEOLSingle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.advancePastEOLSingle( Handle, CachedSelectors.advancePastEOLSingle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char advancePastEOLUnicode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.advancePastEOLUnicode( Handle, CachedSelectors.advancePastEOLUnicode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char advanceToEOL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.advanceToEOL( Handle, CachedSelectors.advanceToEOL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char advanceToEOLSingle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.advanceToEOLSingle( Handle, CachedSelectors.advanceToEOLSingle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char advanceToEOLUnicode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.advanceToEOLUnicode( Handle, CachedSelectors.advanceToEOLUnicode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void advanceToPeakPoint() {
			RuntimeObject ___occuredException;
			NativeMethods.advanceToPeakPoint( Handle, CachedSelectors.advanceToPeakPoint, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int advanceToSingleByteString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.advanceToSingleByteString( Handle, CachedSelectors.advanceToSingleByteString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int advanceToString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.advanceToString( Handle, CachedSelectors.advanceToString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char advanceToToken_throughTypes_( int token, int throughTypes ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.advanceToToken_throughTypes_( Handle, CachedSelectors.advanceToToken_throughTypes_, out ___occuredException, sizeof( int ) + sizeof( int ), token, throughTypes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int advanceToUnicodeString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.advanceToUnicodeString( Handle, CachedSelectors.advanceToUnicodeString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char atEOF() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.atEOF( Handle, CachedSelectors.atEOF, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint cursor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cursor( Handle, CachedSelectors.cursor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public int errorCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.errorCount( Handle, CachedSelectors.errorCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject initWithData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithData_( Handle, CachedSelectors.initWithData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nextArraySeperatedByToken_stoppingAt_inEncoding_( int token, int stoppingAt, uint inEncoding ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextArraySeperatedByToken_stoppingAt_inEncoding_( Handle, CachedSelectors.nextArraySeperatedByToken_stoppingAt_inEncoding_, out ___occuredException, sizeof( int ) + sizeof( int ) + sizeof( uint ), token, stoppingAt, inEncoding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nextBase64Data() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextBase64Data( Handle, CachedSelectors.nextBase64Data, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nextBase64Line_( System.IntPtr line ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextBase64Line_( Handle, CachedSelectors.nextBase64Line_, out ___occuredException, sizeof( System.IntPtr ), line );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nextEscapedCharacter() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextEscapedCharacter( Handle, CachedSelectors.nextEscapedCharacter, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nextQuotedPrintableData() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextQuotedPrintableData( Handle, CachedSelectors.nextQuotedPrintableData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nextSingleByteBase64Line_( System.IntPtr line ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextSingleByteBase64Line_( Handle, CachedSelectors.nextSingleByteBase64Line_, out ___occuredException, sizeof( System.IntPtr ), line );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nextSingleByteStringInEncoding_quotedPrintable_stopTokens_trim_( uint encoding, char quotedPrintable, int stopTokens, char trim ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextSingleByteStringInEncoding_quotedPrintable_stopTokens_trim_( Handle, CachedSelectors.nextSingleByteStringInEncoding_quotedPrintable_stopTokens_trim_, out ___occuredException, sizeof( uint ) + sizeof( char ) + sizeof( int ) + sizeof( char ), encoding, quotedPrintable, stopTokens, trim );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nextStringInEncoding_quotedPrintable_stopTokens_trim_( uint encoding, char quotedPrintable, int stopTokens, char trim ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextStringInEncoding_quotedPrintable_stopTokens_trim_( Handle, CachedSelectors.nextStringInEncoding_quotedPrintable_stopTokens_trim_, out ___occuredException, sizeof( uint ) + sizeof( char ) + sizeof( int ) + sizeof( char ), encoding, quotedPrintable, stopTokens, trim );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int nextTokenPeak_( char peak ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextTokenPeak_( Handle, CachedSelectors.nextTokenPeak_, out ___occuredException, sizeof( char ), peak );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int nextTokenPeakSingle_length_( char single, int length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextTokenPeakSingle_length_( Handle, CachedSelectors.nextTokenPeakSingle_length_, out ___occuredException, sizeof( char ) + sizeof( int ), single, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int nextTokenPeakUnicode_length_( char unicode, int length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextTokenPeakUnicode_length_( Handle, CachedSelectors.nextTokenPeakUnicode_length_, out ___occuredException, sizeof( char ) + sizeof( int ), unicode, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject nextUnicodeBase64Line_( System.IntPtr line ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextUnicodeBase64Line_( Handle, CachedSelectors.nextUnicodeBase64Line_, out ___occuredException, sizeof( System.IntPtr ), line );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nextUnicodeStringStopTokens_quotedPrintable_trim_( int tokens, char quotedPrintable, char trim ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextUnicodeStringStopTokens_quotedPrintable_trim_( Handle, CachedSelectors.nextUnicodeStringStopTokens_quotedPrintable_trim_, out ___occuredException, sizeof( int ) + sizeof( char ) + sizeof( char ), tokens, quotedPrintable, trim );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int tokenAtCursor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tokenAtCursor( Handle, CachedSelectors.tokenAtCursor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject tokenName_( int name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tokenName_( Handle, CachedSelectors.tokenName_, out ___occuredException, sizeof( int ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject tokenSetForLength_( int length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tokenSetForLength_( Handle, CachedSelectors.tokenSetForLength_, out ___occuredException, sizeof( int ), length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char advancePastEOL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char advancePastEOLSingle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char advancePastEOLUnicode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char advanceToEOL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char advanceToEOLSingle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char advanceToEOLUnicode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void advanceToPeakPoint( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int advanceToSingleByteString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int advanceToString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char advanceToToken_throughTypes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int token, int throughTypes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int advanceToUnicodeString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char atEOF( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint cursor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int errorCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nextArraySeperatedByToken_stoppingAt_inEncoding_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int token, int stoppingAt, uint inEncoding );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nextBase64Data( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nextBase64Line_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr line );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nextEscapedCharacter( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nextQuotedPrintableData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nextSingleByteBase64Line_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr line );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nextSingleByteStringInEncoding_quotedPrintable_stopTokens_trim_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint encoding, char quotedPrintable, int stopTokens, char trim );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nextStringInEncoding_quotedPrintable_stopTokens_trim_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint encoding, char quotedPrintable, int stopTokens, char trim );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int nextTokenPeak_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char peak );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int nextTokenPeakSingle_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char single, int length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int nextTokenPeakUnicode_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char unicode, int length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nextUnicodeBase64Line_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr line );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nextUnicodeStringStopTokens_quotedPrintable_trim_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int tokens, char quotedPrintable, char trim );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int tokenAtCursor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr tokenName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr tokenSetForLength_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int length );
		}
		static internal class CachedSelectors {
			public static readonly Selector advancePastEOL = "advancePastEOL";
			public static readonly Selector advancePastEOLSingle = "advancePastEOLSingle";
			public static readonly Selector advancePastEOLUnicode = "advancePastEOLUnicode";
			public static readonly Selector advanceToEOL = "advanceToEOL";
			public static readonly Selector advanceToEOLSingle = "advanceToEOLSingle";
			public static readonly Selector advanceToEOLUnicode = "advanceToEOLUnicode";
			public static readonly Selector advanceToPeakPoint = "advanceToPeakPoint";
			public static readonly Selector advanceToSingleByteString = "advanceToSingleByteString";
			public static readonly Selector advanceToString = "advanceToString";
			public static readonly Selector advanceToToken_throughTypes_ = "advanceToToken:throughTypes:";
			public static readonly Selector advanceToUnicodeString = "advanceToUnicodeString";
			public static readonly Selector atEOF = "atEOF";
			public static readonly Selector cursor = "cursor";
			public static readonly Selector errorCount = "errorCount";
			public static readonly Selector initWithData_ = "initWithData:";
			public static readonly Selector nextArraySeperatedByToken_stoppingAt_inEncoding_ = "nextArraySeperatedByToken:stoppingAt:inEncoding:";
			public static readonly Selector nextBase64Data = "nextBase64Data";
			public static readonly Selector nextBase64Line_ = "nextBase64Line:";
			public static readonly Selector nextEscapedCharacter = "nextEscapedCharacter";
			public static readonly Selector nextQuotedPrintableData = "nextQuotedPrintableData";
			public static readonly Selector nextSingleByteBase64Line_ = "nextSingleByteBase64Line:";
			public static readonly Selector nextSingleByteStringInEncoding_quotedPrintable_stopTokens_trim_ = "nextSingleByteStringInEncoding:quotedPrintable:stopTokens:trim:";
			public static readonly Selector nextStringInEncoding_quotedPrintable_stopTokens_trim_ = "nextStringInEncoding:quotedPrintable:stopTokens:trim:";
			public static readonly Selector nextTokenPeak_ = "nextTokenPeak:";
			public static readonly Selector nextTokenPeakSingle_length_ = "nextTokenPeakSingle:length:";
			public static readonly Selector nextTokenPeakUnicode_length_ = "nextTokenPeakUnicode:length:";
			public static readonly Selector nextUnicodeBase64Line_ = "nextUnicodeBase64Line:";
			public static readonly Selector nextUnicodeStringStopTokens_quotedPrintable_trim_ = "nextUnicodeStringStopTokens:quotedPrintable:trim:";
			public static readonly Selector tokenAtCursor = "tokenAtCursor";
			public static readonly Selector tokenName_ = "tokenName:";
			public static readonly Selector tokenSetForLength_ = "tokenSetForLength:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABVCardParameter : IEquatable<ABVCardParameter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABVCardParameter;
		public static implicit operator NSObject( ABVCardParameter value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABVCardParameter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABVCardParameter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABVCardParameter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABVCardParameter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABVCardParameter value1, ABVCardParameter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABVCardParameter value1, ABVCardParameter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABVCardParameter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABVCardParameter alloc() {
			return new ABVCardParameter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			NativeMethods.addType_( Handle, CachedSelectors.addType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addTypes_( NObjective.RuntimeObject types ) {
			RuntimeObject ___occuredException;
			NativeMethods.addTypes_( Handle, CachedSelectors.addTypes_, out ___occuredException, sizeof( NObjective.RuntimeObject ), types );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject grouping() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.grouping( Handle, CachedSelectors.grouping, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithName_( Handle, CachedSelectors.initWithName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isPrimary() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isPrimary( Handle, CachedSelectors.isPrimary, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setGrouping_( NObjective.RuntimeObject grouping ) {
			RuntimeObject ___occuredException;
			NativeMethods.setGrouping_( Handle, CachedSelectors.setGrouping_, out ___occuredException, sizeof( NObjective.RuntimeObject ), grouping );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setIsPrimary_( char primary ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIsPrimary_( Handle, CachedSelectors.setIsPrimary_, out ___occuredException, sizeof( char ), primary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setValue_( NObjective.RuntimeObject value ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValue_( Handle, CachedSelectors.setValue_, out ___occuredException, sizeof( NObjective.RuntimeObject ), value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject types() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.types( Handle, CachedSelectors.types, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject value() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.value( Handle, CachedSelectors.value, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addTypes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject types );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr grouping( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isPrimary( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setGrouping_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject grouping );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setIsPrimary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char primary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValue_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr types( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr value( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addType_ = "addType:";
			public static readonly Selector addTypes_ = "addTypes:";
			public static readonly Selector grouping = "grouping";
			public static readonly Selector initWithName_ = "initWithName:";
			public static readonly Selector isPrimary = "isPrimary";
			public static readonly Selector name = "name";
			public static readonly Selector setGrouping_ = "setGrouping:";
			public static readonly Selector setIsPrimary_ = "setIsPrimary:";
			public static readonly Selector setValue_ = "setValue:";
			public static readonly Selector types = "types";
			public static readonly Selector value = "value";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABVCardParser : IEquatable<ABVCardParser> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABVCardParser;
		public static implicit operator NSObject( ABVCardParser value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABVCardParser value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABVCardParser value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABVCardParser?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABVCardParser value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABVCardParser value1, ABVCardParser value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABVCardParser value1, ABVCardParser value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABVCardParser( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABVCardParser alloc() {
			return new ABVCardParser( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject dictionaryRepresentationOfVCardAtPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dictionaryRepresentationOfVCardAtPath_( ClassHandle, CachedSelectors.dictionaryRepresentationOfVCardAtPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addAddressMultiValues() {
			RuntimeObject ___occuredException;
			NativeMethods.addAddressMultiValues( Handle, CachedSelectors.addAddressMultiValues, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char addIMValueTo_( NObjective.RuntimeObject to ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addIMValueTo_( Handle, CachedSelectors.addIMValueTo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), to );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void addMultiValues_toProperty_( NObjective.RuntimeObject values, NObjective.RuntimeObject toProperty ) {
			RuntimeObject ___occuredException;
			NativeMethods.addMultiValues_toProperty_( Handle, CachedSelectors.addMultiValues_toProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), values, toProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void cleanUpCardState() {
			RuntimeObject ___occuredException;
			NativeMethods.cleanUpCardState( Handle, CachedSelectors.cleanUpCardState, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject dateFromISO8601String_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dateFromISO8601String_( Handle, CachedSelectors.dateFromISO8601String_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject genericLabel() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.genericLabel( Handle, CachedSelectors.genericLabel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasImportErrors() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasImportErrors( Handle, CachedSelectors.hasImportErrors, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char importToPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.importToPerson_( Handle, CachedSelectors.importToPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char importToValueSetter_( NObjective.RuntimeObject setter ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.importToValueSetter_( Handle, CachedSelectors.importToValueSetter_, out ___occuredException, sizeof( NObjective.RuntimeObject ), setter );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject initWithData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithData_( Handle, CachedSelectors.initWithData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject nextPersonWithLength_( System.IntPtr length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nextPersonWithLength_( Handle, CachedSelectors.nextPersonWithLength_, out ___occuredException, sizeof( System.IntPtr ), length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char parseABDATE() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseABDATE( Handle, CachedSelectors.parseABDATE, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char parseABExtensionType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseABExtensionType_( Handle, CachedSelectors.parseABExtensionType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char parseABMaiden() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseABMaiden( Handle, CachedSelectors.parseABMaiden, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void parseABOrder() {
			RuntimeObject ___occuredException;
			NativeMethods.parseABOrder( Handle, CachedSelectors.parseABOrder, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void parseABPhoto() {
			RuntimeObject ___occuredException;
			NativeMethods.parseABPhoto( Handle, CachedSelectors.parseABPhoto, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char parseABReleatedNames() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseABReleatedNames( Handle, CachedSelectors.parseABReleatedNames, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void parseABShowAs() {
			RuntimeObject ___occuredException;
			NativeMethods.parseABShowAs( Handle, CachedSelectors.parseABShowAs, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char parseABUID() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseABUID( Handle, CachedSelectors.parseABUID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char parseADD() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseADD( Handle, CachedSelectors.parseADD, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char parseADR() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseADR( Handle, CachedSelectors.parseADR, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char parseBDAY() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseBDAY( Handle, CachedSelectors.parseBDAY, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char parseEMAIL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseEMAIL( Handle, CachedSelectors.parseEMAIL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char parseItem() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseItem( Handle, CachedSelectors.parseItem, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char parseN() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseN( Handle, CachedSelectors.parseN, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char parseNICKNAME() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseNICKNAME( Handle, CachedSelectors.parseNICKNAME, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char parseORG() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseORG( Handle, CachedSelectors.parseORG, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void parsePhoto_( NObjective.RuntimeObject photo ) {
			RuntimeObject ___occuredException;
			NativeMethods.parsePhoto_( Handle, CachedSelectors.parsePhoto_, out ___occuredException, sizeof( NObjective.RuntimeObject ), photo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject parseSingleValue() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseSingleValue( Handle, CachedSelectors.parseSingleValue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char parseTEL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseTEL( Handle, CachedSelectors.parseTEL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject parseURL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseURL( Handle, CachedSelectors.parseURL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char parseVERSION() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parseVERSION( Handle, CachedSelectors.parseVERSION, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject people() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.people( Handle, CachedSelectors.people, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject phoneLabel() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.phoneLabel( Handle, CachedSelectors.phoneLabel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addAddressMultiValues( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char addIMValueTo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject to );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addMultiValues_toProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject values, NObjective.RuntimeObject toProperty );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cleanUpCardState( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dateFromISO8601String_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dictionaryRepresentationOfVCardAtPath_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr genericLabel( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasImportErrors( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char importToPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char importToValueSetter_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject setter );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nextPersonWithLength_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char parseABDATE( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char parseABExtensionType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char parseABMaiden( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void parseABOrder( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void parseABPhoto( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char parseABReleatedNames( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void parseABShowAs( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char parseABUID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char parseADD( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char parseADR( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char parseBDAY( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char parseEMAIL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char parseItem( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char parseN( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char parseNICKNAME( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char parseORG( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void parsePhoto_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject photo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parseSingleValue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char parseTEL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parseURL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char parseVERSION( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr people( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr phoneLabel( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addAddressMultiValues = "addAddressMultiValues";
			public static readonly Selector addIMValueTo_ = "addIMValueTo:";
			public static readonly Selector addMultiValues_toProperty_ = "addMultiValues:toProperty:";
			public static readonly Selector cleanUpCardState = "cleanUpCardState";
			public static readonly Selector dateFromISO8601String_ = "dateFromISO8601String:";
			public static readonly Selector dictionaryRepresentationOfVCardAtPath_ = "dictionaryRepresentationOfVCardAtPath:";
			public static readonly Selector genericLabel = "genericLabel";
			public static readonly Selector hasImportErrors = "hasImportErrors";
			public static readonly Selector importToPerson_ = "importToPerson:";
			public static readonly Selector importToValueSetter_ = "importToValueSetter:";
			public static readonly Selector initWithData_ = "initWithData:";
			public static readonly Selector nextPersonWithLength_ = "nextPersonWithLength:";
			public static readonly Selector parseABDATE = "parseABDATE";
			public static readonly Selector parseABExtensionType_ = "parseABExtensionType:";
			public static readonly Selector parseABMaiden = "parseABMaiden";
			public static readonly Selector parseABOrder = "parseABOrder";
			public static readonly Selector parseABPhoto = "parseABPhoto";
			public static readonly Selector parseABReleatedNames = "parseABReleatedNames";
			public static readonly Selector parseABShowAs = "parseABShowAs";
			public static readonly Selector parseABUID = "parseABUID";
			public static readonly Selector parseADD = "parseADD";
			public static readonly Selector parseADR = "parseADR";
			public static readonly Selector parseBDAY = "parseBDAY";
			public static readonly Selector parseEMAIL = "parseEMAIL";
			public static readonly Selector parseItem = "parseItem";
			public static readonly Selector parseN = "parseN";
			public static readonly Selector parseNICKNAME = "parseNICKNAME";
			public static readonly Selector parseORG = "parseORG";
			public static readonly Selector parsePhoto_ = "parsePhoto:";
			public static readonly Selector parseSingleValue = "parseSingleValue";
			public static readonly Selector parseTEL = "parseTEL";
			public static readonly Selector parseURL = "parseURL";
			public static readonly Selector parseVERSION = "parseVERSION";
			public static readonly Selector people = "people";
			public static readonly Selector phoneLabel = "phoneLabel";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( ABVCardValueSetter ) )]
	public struct ABVCardPersonValueSetter : IEquatable<ABVCardPersonValueSetter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABVCardPersonValueSetter;
		public static implicit operator ABVCardValueSetter( ABVCardPersonValueSetter value ) {
			return new ABVCardValueSetter( value.Handle );
		}
		public static implicit operator NSObject( ABVCardPersonValueSetter value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABVCardPersonValueSetter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABVCardPersonValueSetter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABVCardPersonValueSetter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABVCardPersonValueSetter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABVCardPersonValueSetter value1, ABVCardPersonValueSetter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABVCardPersonValueSetter value1, ABVCardPersonValueSetter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABVCardPersonValueSetter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABVCardPersonValueSetter alloc() {
			return new ABVCardPersonValueSetter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithPerson_( NObjective.RuntimeObject person ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithPerson_( Handle, CachedSelectors.initWithPerson_, out ___occuredException, sizeof( NObjective.RuntimeObject ), person );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithPerson_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject person );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithPerson_ = "initWithPerson:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABVCardValueSetter : IEquatable<ABVCardValueSetter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABVCardValueSetter;
		public static implicit operator NSObject( ABVCardValueSetter value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABVCardValueSetter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABVCardValueSetter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABVCardValueSetter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABVCardValueSetter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABVCardValueSetter value1, ABVCardValueSetter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABVCardValueSetter value1, ABVCardValueSetter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABVCardValueSetter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABVCardValueSetter alloc() {
			return new ABVCardValueSetter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject fullName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fullName( Handle, CachedSelectors.fullName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char setImageData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setImageData_( Handle, CachedSelectors.setImageData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char setValue_forProperty_( NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setValue_forProperty_( Handle, CachedSelectors.setValue_forProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), value, forProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setValueInTemporaryCache_forProperty_( NObjective.RuntimeObject cache, NObjective.RuntimeObject forProperty ) {
			RuntimeObject ___occuredException;
			NativeMethods.setValueInTemporaryCache_forProperty_( Handle, CachedSelectors.setValueInTemporaryCache_forProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), cache, forProperty );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject valueForProperty_( NObjective.RuntimeObject property ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueForProperty_( Handle, CachedSelectors.valueForProperty_, out ___occuredException, sizeof( NObjective.RuntimeObject ), property );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fullName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char setImageData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char setValue_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject value, NObjective.RuntimeObject forProperty );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setValueInTemporaryCache_forProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cache, NObjective.RuntimeObject forProperty );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueForProperty_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject property );
		}
		static internal class CachedSelectors {
			public static readonly Selector fullName = "fullName";
			public static readonly Selector setImageData_ = "setImageData:";
			public static readonly Selector setValue_forProperty_ = "setValue:forProperty:";
			public static readonly Selector setValueInTemporaryCache_forProperty_ = "setValueInTemporaryCache:forProperty:";
			public static readonly Selector valueForProperty_ = "valueForProperty:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABWebDAVLock : IEquatable<ABWebDAVLock> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABWebDAVLock;
		public static implicit operator NSObject( ABWebDAVLock value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABWebDAVLock value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABWebDAVLock value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABWebDAVLock?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABWebDAVLock value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABWebDAVLock value1, ABWebDAVLock value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABWebDAVLock value1, ABWebDAVLock value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABWebDAVLock( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABWebDAVLock alloc() {
			return new ABWebDAVLock( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static int lockTimeout() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lockTimeout( ClassHandle, CachedSelectors.lockTimeout, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject bodyForContact_( NObjective.RuntimeObject contact ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bodyForContact_( Handle, CachedSelectors.bodyForContact_, out ___occuredException, sizeof( NObjective.RuntimeObject ), contact );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject expires() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.expires( Handle, CachedSelectors.expires, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithURL_( Handle, CachedSelectors.initWithURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject lastApplied() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lastApplied( Handle, CachedSelectors.lastApplied, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char locked() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.locked( Handle, CachedSelectors.locked, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char renew() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.renew( Handle, CachedSelectors.renew, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char tryLock() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tryLock( Handle, CachedSelectors.tryLock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void unlock() {
			RuntimeObject ___occuredException;
			NativeMethods.unlock( Handle, CachedSelectors.unlock, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject url() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.url( Handle, CachedSelectors.url, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr bodyForContact_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject contact );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr expires( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lastApplied( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char locked( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int lockTimeout( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char renew( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char tryLock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unlock( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr url( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector bodyForContact_ = "bodyForContact:";
			public static readonly Selector expires = "expires";
			public static readonly Selector initWithURL_ = "initWithURL:";
			public static readonly Selector lastApplied = "lastApplied";
			public static readonly Selector locked = "locked";
			public static readonly Selector lockTimeout = "lockTimeout";
			public static readonly Selector renew = "renew";
			public static readonly Selector tryLock = "tryLock";
			public static readonly Selector unlock = "unlock";
			public static readonly Selector url = "url";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSWindow ) )]
	public struct ABWindow : IEquatable<ABWindow> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABWindow;
		public static implicit operator NSWindow( ABWindow value ) {
			return new NSWindow( value.Handle );
		}
		public static implicit operator NSResponder( ABWindow value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( ABWindow value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABWindow value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABWindow value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABWindow?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABWindow value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABWindow value1, ABWindow value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABWindow value1, ABWindow value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABWindow( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABWindow alloc() {
			return new ABWindow( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void awakeFromNib() {
			RuntimeObject ___occuredException;
			NativeMethods.awakeFromNib( Handle, CachedSelectors.awakeFromNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void windowDidDeminiaturize_( NObjective.RuntimeObject deminiaturize ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowDidDeminiaturize_( Handle, CachedSelectors.windowDidDeminiaturize_, out ___occuredException, sizeof( NObjective.RuntimeObject ), deminiaturize );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void awakeFromNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void windowDidDeminiaturize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject deminiaturize );
		}
		static internal class CachedSelectors {
			public static readonly Selector awakeFromNib = "awakeFromNib";
			public static readonly Selector windowDidDeminiaturize_ = "windowDidDeminiaturize:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ABXMLParseNode : IEquatable<ABXMLParseNode> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.ABXMLParseNode;
		public static implicit operator NSObject( ABXMLParseNode value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( ABXMLParseNode value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ABXMLParseNode value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ABXMLParseNode?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ABXMLParseNode value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ABXMLParseNode value1, ABXMLParseNode value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ABXMLParseNode value1, ABXMLParseNode value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ABXMLParseNode( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ABXMLParseNode alloc() {
			return new ABXMLParseNode( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addChild_( NObjective.RuntimeObject child ) {
			RuntimeObject ___occuredException;
			NativeMethods.addChild_( Handle, CachedSelectors.addChild_, out ___occuredException, sizeof( NObjective.RuntimeObject ), child );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject childAtIndex_( int index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.childAtIndex_( Handle, CachedSelectors.childAtIndex_, out ___occuredException, sizeof( int ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int childCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.childCount( Handle, CachedSelectors.childCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject childNodesMatchingString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.childNodesMatchingString_( Handle, CachedSelectors.childNodesMatchingString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject children() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.children( Handle, CachedSelectors.children, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char hasChildren() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasChildren( Handle, CachedSelectors.hasChildren, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject initWithString_nodeType_( NObjective.RuntimeObject @string, int nodeType ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithString_nodeType_( Handle, CachedSelectors.initWithString_nodeType_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), @string, nodeType );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int nodeType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nodeType( Handle, CachedSelectors.nodeType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject objectGraphDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectGraphDescription( Handle, CachedSelectors.objectGraphDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject parent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parent( Handle, CachedSelectors.parent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setParent_( NObjective.RuntimeObject parent ) {
			RuntimeObject ___occuredException;
			NativeMethods.setParent_( Handle, CachedSelectors.setParent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), parent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject @string() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@string( Handle, CachedSelectors.@string, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addChild_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject child );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr childAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int childCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr childNodesMatchingString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr children( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasChildren( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithString_nodeType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, int nodeType );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int nodeType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectGraphDescription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setParent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject parent );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @string( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addChild_ = "addChild:";
			public static readonly Selector childAtIndex_ = "childAtIndex:";
			public static readonly Selector childCount = "childCount";
			public static readonly Selector childNodesMatchingString_ = "childNodesMatchingString:";
			public static readonly Selector children = "children";
			public static readonly Selector hasChildren = "hasChildren";
			public static readonly Selector initWithString_nodeType_ = "initWithString:nodeType:";
			public static readonly Selector nodeType = "nodeType";
			public static readonly Selector objectGraphDescription = "objectGraphDescription";
			public static readonly Selector parent = "parent";
			public static readonly Selector setParent_ = "setParent:";
			public static readonly Selector @string = "string";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct FZDaemonListenerStub : IEquatable<FZDaemonListenerStub> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.FZDaemonListenerStub;
		public static implicit operator NSObject( FZDaemonListenerStub value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( FZDaemonListenerStub value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( FZDaemonListenerStub value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as FZDaemonListenerStub?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( FZDaemonListenerStub value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( FZDaemonListenerStub value1, FZDaemonListenerStub value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( FZDaemonListenerStub value1, FZDaemonListenerStub value2 ) {
			return value1.Handle != value2.Handle;
		}
		public FZDaemonListenerStub( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static FZDaemonListenerStub alloc() {
			return new FZDaemonListenerStub( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void myStatusChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.myStatusChanged_( Handle, CachedSelectors.myStatusChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void openNotesChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.openNotesChanged_( Handle, CachedSelectors.openNotesChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void myStatusChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void openNotesChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
		}
		static internal class CachedSelectors {
			public static readonly Selector myStatusChanged_ = "myStatusChanged:";
			public static readonly Selector openNotesChanged_ = "openNotesChanged:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSWindowController ) )]
	public struct NSImagePickerController : IEquatable<NSImagePickerController> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.NSImagePickerController;
		public static implicit operator NSWindowController( NSImagePickerController value ) {
			return new NSWindowController( value.Handle );
		}
		public static implicit operator NSResponder( NSImagePickerController value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( NSImagePickerController value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( NSImagePickerController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSImagePickerController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSImagePickerController?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSImagePickerController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSImagePickerController value1, NSImagePickerController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSImagePickerController value1, NSImagePickerController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSImagePickerController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSImagePickerController alloc() {
			return new NSImagePickerController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject recentPicturesPopUp() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.recentPicturesPopUp( ClassHandle, CachedSelectors.recentPicturesPopUp, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject sharedImagePickerControllerCreate_( char create ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedImagePickerControllerCreate_( ClassHandle, CachedSelectors.sharedImagePickerControllerCreate_, out ___occuredException, sizeof( char ), create );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject sharedImagePickerControllerCreate_withTexturedWindow_( char create, char withTexturedWindow ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedImagePickerControllerCreate_withTexturedWindow_( ClassHandle, CachedSelectors.sharedImagePickerControllerCreate_withTexturedWindow_, out ___occuredException, sizeof( char ) + sizeof( char ), create, withTexturedWindow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void hideRecentsPopUp() {
			RuntimeObject ___occuredException;
			NativeMethods.hideRecentsPopUp( Handle, CachedSelectors.hideRecentsPopUp, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject image() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.image( Handle, CachedSelectors.image, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public float maxImageSize() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.maxImageSize( Handle, CachedSelectors.maxImageSize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject originalImage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.originalImage( Handle, CachedSelectors.originalImage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void selectionChanged() {
			RuntimeObject ___occuredException;
			NativeMethods.selectionChanged( Handle, CachedSelectors.selectionChanged, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAcceptsDrags_( char drags ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAcceptsDrags_( Handle, CachedSelectors.setAcceptsDrags_, out ___occuredException, sizeof( char ), drags );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDelegate_( Handle, CachedSelectors.setDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMaxImageSize_( float size ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMaxImageSize_( Handle, CachedSelectors.setMaxImageSize_, out ___occuredException, sizeof( float ), size );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTarget_selector_userInfo_( NObjective.RuntimeObject target, NObjective.Selector selector, System.IntPtr userInfo ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTarget_selector_userInfo_( Handle, CachedSelectors.setTarget_selector_userInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ) + sizeof( System.IntPtr ), target, selector, userInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void hideRecentsPopUp( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr image( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float maxImageSize( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr originalImage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr recentPicturesPopUp( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectionChanged( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAcceptsDrags_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char drags );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMaxImageSize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float size );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTarget_selector_userInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target, NObjective.Selector selector, System.IntPtr userInfo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedImagePickerControllerCreate_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char create );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedImagePickerControllerCreate_withTexturedWindow_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char create, char withTexturedWindow );
		}
		static internal class CachedSelectors {
			public static readonly Selector hideRecentsPopUp = "hideRecentsPopUp";
			public static readonly Selector image = "image";
			public static readonly Selector maxImageSize = "maxImageSize";
			public static readonly Selector originalImage = "originalImage";
			public static readonly Selector recentPicturesPopUp = "recentPicturesPopUp";
			public static readonly Selector selectionChanged = "selectionChanged";
			public static readonly Selector setAcceptsDrags_ = "setAcceptsDrags:";
			public static readonly Selector setDelegate_ = "setDelegate:";
			public static readonly Selector setMaxImageSize_ = "setMaxImageSize:";
			public static readonly Selector setTarget_selector_userInfo_ = "setTarget:selector:userInfo:";
			public static readonly Selector sharedImagePickerControllerCreate_ = "sharedImagePickerControllerCreate:";
			public static readonly Selector sharedImagePickerControllerCreate_withTexturedWindow_ = "sharedImagePickerControllerCreate:withTexturedWindow:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSIPIconPopUp : IEquatable<NSIPIconPopUp> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.NSIPIconPopUp;
		public static implicit operator NSObject( NSIPIconPopUp value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( NSIPIconPopUp value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSIPIconPopUp value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSIPIconPopUp?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSIPIconPopUp value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSIPIconPopUp value1, NSIPIconPopUp value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSIPIconPopUp value1, NSIPIconPopUp value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSIPIconPopUp( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSIPIconPopUp alloc() {
			return new NSIPIconPopUp( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addItemsWithImages_( NObjective.RuntimeObject images ) {
			RuntimeObject ___occuredException;
			NativeMethods.addItemsWithImages_( Handle, CachedSelectors.addItemsWithImages_, out ___occuredException, sizeof( NObjective.RuntimeObject ), images );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addItemsWithImagesInReverseOrder_( NObjective.RuntimeObject order ) {
			RuntimeObject ___occuredException;
			NativeMethods.addItemsWithImagesInReverseOrder_( Handle, CachedSelectors.addItemsWithImagesInReverseOrder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), order );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addItemsWithTitles_( NObjective.RuntimeObject titles ) {
			RuntimeObject ___occuredException;
			NativeMethods.addItemsWithTitles_( Handle, CachedSelectors.addItemsWithTitles_, out ___occuredException, sizeof( NObjective.RuntimeObject ), titles );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addItemWithImage_( NObjective.RuntimeObject image ) {
			RuntimeObject ___occuredException;
			NativeMethods.addItemWithImage_( Handle, CachedSelectors.addItemWithImage_, out ___occuredException, sizeof( NObjective.RuntimeObject ), image );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addItemWithTitle_( NObjective.RuntimeObject title ) {
			RuntimeObject ___occuredException;
			NativeMethods.addItemWithTitle_( Handle, CachedSelectors.addItemWithTitle_, out ___occuredException, sizeof( NObjective.RuntimeObject ), title );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void fadePopUpWindowImmediately() {
			RuntimeObject ___occuredException;
			NativeMethods.fadePopUpWindowImmediately( Handle, CachedSelectors.fadePopUpWindowImmediately, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject imageOfSelectedItem() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.imageOfSelectedItem( Handle, CachedSelectors.imageOfSelectedItem, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int indexOfSelectedItem() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfSelectedItem( Handle, CachedSelectors.indexOfSelectedItem, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void insertItemWithImage_atIndex_( NObjective.RuntimeObject image, int atIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertItemWithImage_atIndex_( Handle, CachedSelectors.insertItemWithImage_atIndex_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), image, atIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void insertItemWithTitle_atIndex_( NObjective.RuntimeObject title, int atIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertItemWithTitle_atIndex_( Handle, CachedSelectors.insertItemWithTitle_atIndex_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), title, atIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject itemArray() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.itemArray( Handle, CachedSelectors.itemArray, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int numberOfImageItems() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberOfImageItems( Handle, CachedSelectors.numberOfImageItems, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int numberOfItems() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberOfItems( Handle, CachedSelectors.numberOfItems, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int numberOfItemsPerRow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberOfItemsPerRow( Handle, CachedSelectors.numberOfItemsPerRow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int popUpWithEvent_inView_( NObjective.RuntimeObject @event, NObjective.RuntimeObject inView ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.popUpWithEvent_inView_( Handle, CachedSelectors.popUpWithEvent_inView_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @event, inView );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void selectItemAtIndex_( int index ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectItemAtIndex_( Handle, CachedSelectors.selectItemAtIndex_, out ___occuredException, sizeof( int ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMinNumberOfRows_( int rows ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMinNumberOfRows_( Handle, CachedSelectors.setMinNumberOfRows_, out ___occuredException, sizeof( int ), rows );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNumberOfItemsPerRow_( int row ) {
			RuntimeObject ___occuredException;
			NativeMethods.setNumberOfItemsPerRow_( Handle, CachedSelectors.setNumberOfItemsPerRow_, out ___occuredException, sizeof( int ), row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTitle_( NObjective.RuntimeObject title ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTitle_( Handle, CachedSelectors.setTitle_, out ___occuredException, sizeof( NObjective.RuntimeObject ), title );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int trackKeyEvent_inView_( NObjective.RuntimeObject @event, NObjective.RuntimeObject inView ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.trackKeyEvent_inView_( Handle, CachedSelectors.trackKeyEvent_inView_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @event, inView );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int trackMouseEvent_inView_( NObjective.RuntimeObject @event, NObjective.RuntimeObject inView ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.trackMouseEvent_inView_( Handle, CachedSelectors.trackMouseEvent_inView_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @event, inView );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addItemsWithImages_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject images );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addItemsWithImagesInReverseOrder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject order );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addItemsWithTitles_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject titles );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addItemWithImage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addItemWithTitle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject title );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void fadePopUpWindowImmediately( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr imageOfSelectedItem( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int indexOfSelectedItem( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertItemWithImage_atIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image, int atIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertItemWithTitle_atIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject title, int atIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr itemArray( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int numberOfImageItems( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int numberOfItems( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int numberOfItemsPerRow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int popUpWithEvent_inView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @event, NObjective.RuntimeObject inView );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectItemAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMinNumberOfRows_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int rows );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNumberOfItemsPerRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTitle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject title );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int trackKeyEvent_inView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @event, NObjective.RuntimeObject inView );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int trackMouseEvent_inView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @event, NObjective.RuntimeObject inView );
		}
		static internal class CachedSelectors {
			public static readonly Selector addItemsWithImages_ = "addItemsWithImages:";
			public static readonly Selector addItemsWithImagesInReverseOrder_ = "addItemsWithImagesInReverseOrder:";
			public static readonly Selector addItemsWithTitles_ = "addItemsWithTitles:";
			public static readonly Selector addItemWithImage_ = "addItemWithImage:";
			public static readonly Selector addItemWithTitle_ = "addItemWithTitle:";
			public static readonly Selector fadePopUpWindowImmediately = "fadePopUpWindowImmediately";
			public static readonly Selector imageOfSelectedItem = "imageOfSelectedItem";
			public static readonly Selector indexOfSelectedItem = "indexOfSelectedItem";
			public static readonly Selector insertItemWithImage_atIndex_ = "insertItemWithImage:atIndex:";
			public static readonly Selector insertItemWithTitle_atIndex_ = "insertItemWithTitle:atIndex:";
			public static readonly Selector itemArray = "itemArray";
			public static readonly Selector numberOfImageItems = "numberOfImageItems";
			public static readonly Selector numberOfItems = "numberOfItems";
			public static readonly Selector numberOfItemsPerRow = "numberOfItemsPerRow";
			public static readonly Selector popUpWithEvent_inView_ = "popUpWithEvent:inView:";
			public static readonly Selector selectItemAtIndex_ = "selectItemAtIndex:";
			public static readonly Selector setMinNumberOfRows_ = "setMinNumberOfRows:";
			public static readonly Selector setNumberOfItemsPerRow_ = "setNumberOfItemsPerRow:";
			public static readonly Selector setTitle_ = "setTitle:";
			public static readonly Selector trackKeyEvent_inView_ = "trackKeyEvent:inView:";
			public static readonly Selector trackMouseEvent_inView_ = "trackMouseEvent:inView:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSMatrix ) )]
	public struct NSIPPopUpItemMatrix : IEquatable<NSIPPopUpItemMatrix> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.NSIPPopUpItemMatrix;
		public static implicit operator NSMatrix( NSIPPopUpItemMatrix value ) {
			return new NSMatrix( value.Handle );
		}
		public static implicit operator NSControl( NSIPPopUpItemMatrix value ) {
			return new NSControl( value.Handle );
		}
		public static implicit operator NSView( NSIPPopUpItemMatrix value ) {
			return new NSView( value.Handle );
		}
		public static implicit operator NSResponder( NSIPPopUpItemMatrix value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( NSIPPopUpItemMatrix value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( NSIPPopUpItemMatrix value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSIPPopUpItemMatrix value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSIPPopUpItemMatrix?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSIPPopUpItemMatrix value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSIPPopUpItemMatrix value1, NSIPPopUpItemMatrix value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSIPPopUpItemMatrix value1, NSIPPopUpItemMatrix value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSIPPopUpItemMatrix( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSIPPopUpItemMatrix alloc() {
			return new NSIPPopUpItemMatrix( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSButton ) )]
	public struct NSIPPopUpMatrixButton : IEquatable<NSIPPopUpMatrixButton> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.NSIPPopUpMatrixButton;
		public static implicit operator NSButton( NSIPPopUpMatrixButton value ) {
			return new NSButton( value.Handle );
		}
		public static implicit operator NSControl( NSIPPopUpMatrixButton value ) {
			return new NSControl( value.Handle );
		}
		public static implicit operator NSView( NSIPPopUpMatrixButton value ) {
			return new NSView( value.Handle );
		}
		public static implicit operator NSResponder( NSIPPopUpMatrixButton value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( NSIPPopUpMatrixButton value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( NSIPPopUpMatrixButton value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSIPPopUpMatrixButton value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSIPPopUpMatrixButton?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSIPPopUpMatrixButton value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSIPPopUpMatrixButton value1, NSIPPopUpMatrixButton value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSIPPopUpMatrixButton value1, NSIPPopUpMatrixButton value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSIPPopUpMatrixButton( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSIPPopUpMatrixButton alloc() {
			return new NSIPPopUpMatrixButton( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addItemsWithImages_( NObjective.RuntimeObject images ) {
			RuntimeObject ___occuredException;
			NativeMethods.addItemsWithImages_( Handle, CachedSelectors.addItemsWithImages_, out ___occuredException, sizeof( NObjective.RuntimeObject ), images );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addItemsWithTitles_( NObjective.RuntimeObject titles ) {
			RuntimeObject ___occuredException;
			NativeMethods.addItemsWithTitles_( Handle, CachedSelectors.addItemsWithTitles_, out ___occuredException, sizeof( NObjective.RuntimeObject ), titles );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addItemWithImage_( NObjective.RuntimeObject image ) {
			RuntimeObject ___occuredException;
			NativeMethods.addItemWithImage_( Handle, CachedSelectors.addItemWithImage_, out ___occuredException, sizeof( NObjective.RuntimeObject ), image );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addItemWithTitle_( NObjective.RuntimeObject title ) {
			RuntimeObject ___occuredException;
			NativeMethods.addItemWithTitle_( Handle, CachedSelectors.addItemWithTitle_, out ___occuredException, sizeof( NObjective.RuntimeObject ), title );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject iconPopUp() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.iconPopUp( Handle, CachedSelectors.iconPopUp, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int indexOfSelectedItem() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.indexOfSelectedItem( Handle, CachedSelectors.indexOfSelectedItem, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void insertItemWithImage_atIndex_( NObjective.RuntimeObject image, int atIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertItemWithImage_atIndex_( Handle, CachedSelectors.insertItemWithImage_atIndex_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), image, atIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void insertItemWithTitle_atIndex_( NObjective.RuntimeObject title, int atIndex ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertItemWithTitle_atIndex_( Handle, CachedSelectors.insertItemWithTitle_atIndex_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), title, atIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject itemArray() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.itemArray( Handle, CachedSelectors.itemArray, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int numberOfItems() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberOfItems( Handle, CachedSelectors.numberOfItems, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int numberOfItemsPerRow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberOfItemsPerRow( Handle, CachedSelectors.numberOfItemsPerRow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void selectItemAtIndex_( int index ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectItemAtIndex_( Handle, CachedSelectors.selectItemAtIndex_, out ___occuredException, sizeof( int ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNumberOfItemsPerRow_( int row ) {
			RuntimeObject ___occuredException;
			NativeMethods.setNumberOfItemsPerRow_( Handle, CachedSelectors.setNumberOfItemsPerRow_, out ___occuredException, sizeof( int ), row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addItemsWithImages_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject images );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addItemsWithTitles_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject titles );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addItemWithImage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addItemWithTitle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject title );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr iconPopUp( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int indexOfSelectedItem( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertItemWithImage_atIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image, int atIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertItemWithTitle_atIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject title, int atIndex );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr itemArray( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int numberOfItems( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int numberOfItemsPerRow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectItemAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNumberOfItemsPerRow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int row );
		}
		static internal class CachedSelectors {
			public static readonly Selector addItemsWithImages_ = "addItemsWithImages:";
			public static readonly Selector addItemsWithTitles_ = "addItemsWithTitles:";
			public static readonly Selector addItemWithImage_ = "addItemWithImage:";
			public static readonly Selector addItemWithTitle_ = "addItemWithTitle:";
			public static readonly Selector iconPopUp = "iconPopUp";
			public static readonly Selector indexOfSelectedItem = "indexOfSelectedItem";
			public static readonly Selector insertItemWithImage_atIndex_ = "insertItemWithImage:atIndex:";
			public static readonly Selector insertItemWithTitle_atIndex_ = "insertItemWithTitle:atIndex:";
			public static readonly Selector itemArray = "itemArray";
			public static readonly Selector numberOfItems = "numberOfItems";
			public static readonly Selector numberOfItemsPerRow = "numberOfItemsPerRow";
			public static readonly Selector selectItemAtIndex_ = "selectItemAtIndex:";
			public static readonly Selector setNumberOfItemsPerRow_ = "setNumberOfItemsPerRow:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSMenuItemCell ) )]
	public struct NSIPPopUpMatrixItemCell : IEquatable<NSIPPopUpMatrixItemCell> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.NSIPPopUpMatrixItemCell;
		public static implicit operator NSMenuItemCell( NSIPPopUpMatrixItemCell value ) {
			return new NSMenuItemCell( value.Handle );
		}
		public static implicit operator NSButtonCell( NSIPPopUpMatrixItemCell value ) {
			return new NSButtonCell( value.Handle );
		}
		public static implicit operator NSActionCell( NSIPPopUpMatrixItemCell value ) {
			return new NSActionCell( value.Handle );
		}
		public static implicit operator NSCell( NSIPPopUpMatrixItemCell value ) {
			return new NSCell( value.Handle );
		}
		public static implicit operator NSObject( NSIPPopUpMatrixItemCell value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( NSIPPopUpMatrixItemCell value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSIPPopUpMatrixItemCell value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSIPPopUpMatrixItemCell?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSIPPopUpMatrixItemCell value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSIPPopUpMatrixItemCell value1, NSIPPopUpMatrixItemCell value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSIPPopUpMatrixItemCell value1, NSIPPopUpMatrixItemCell value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSIPPopUpMatrixItemCell( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSIPPopUpMatrixItemCell alloc() {
			return new NSIPPopUpMatrixItemCell( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct NSIPRecentPicture : IEquatable<NSIPRecentPicture> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.NSIPRecentPicture;
		public static implicit operator NSObject( NSIPRecentPicture value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( NSIPRecentPicture value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSIPRecentPicture value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSIPRecentPicture?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSIPRecentPicture value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSIPRecentPicture value1, NSIPRecentPicture value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSIPRecentPicture value1, NSIPRecentPicture value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSIPRecentPicture( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSIPRecentPicture alloc() {
			return new NSIPRecentPicture( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject currentPicture() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentPicture( ClassHandle, CachedSelectors.currentPicture, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static int maxRecents() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.maxRecents( ClassHandle, CachedSelectors.maxRecents, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static void noCurrentPicture() {
			RuntimeObject ___occuredException;
			NativeMethods.noCurrentPicture( ClassHandle, CachedSelectors.noCurrentPicture, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject pictureDirPath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pictureDirPath( ClassHandle, CachedSelectors.pictureDirPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static char purgeExtras() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.purgeExtras( ClassHandle, CachedSelectors.purgeExtras, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject recentPictures() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.recentPictures( ClassHandle, CachedSelectors.recentPictures, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject recentSmallIcons() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.recentSmallIcons( ClassHandle, CachedSelectors.recentSmallIcons, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void removeAllButCurrent() {
			RuntimeObject ___occuredException;
			NativeMethods.removeAllButCurrent( ClassHandle, CachedSelectors.removeAllButCurrent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject croppedImage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.croppedImage( Handle, CachedSelectors.croppedImage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSIPRecentPicture initWithInfo_( NObjective.RuntimeObject info ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithInfo_( Handle, CachedSelectors.initWithInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), info );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSIPRecentPicture( ___result );
		}
		unsafe public NSIPRecentPicture initWithOriginalImage_( NObjective.RuntimeObject image ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithOriginalImage_( Handle, CachedSelectors.initWithOriginalImage_, out ___occuredException, sizeof( NObjective.RuntimeObject ), image );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSIPRecentPicture( ___result );
		}
		unsafe public NObjective.RuntimeObject originalImage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.originalImage( Handle, CachedSelectors.originalImage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject originalImagePath() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.originalImagePath( Handle, CachedSelectors.originalImagePath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setCurrent() {
			RuntimeObject ___occuredException;
			NativeMethods.setCurrent( Handle, CachedSelectors.setCurrent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject smallIcon() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.smallIcon( Handle, CachedSelectors.smallIcon, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr croppedImage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currentPicture( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject info );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithOriginalImage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject image );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int maxRecents( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void noCurrentPicture( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr originalImage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr originalImagePath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pictureDirPath( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char purgeExtras( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr recentPictures( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr recentSmallIcons( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeAllButCurrent( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCurrent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr smallIcon( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector croppedImage = "croppedImage";
			public static readonly Selector currentPicture = "currentPicture";
			public static readonly Selector initWithInfo_ = "initWithInfo:";
			public static readonly Selector initWithOriginalImage_ = "initWithOriginalImage:";
			public static readonly Selector maxRecents = "maxRecents";
			public static readonly Selector noCurrentPicture = "noCurrentPicture";
			public static readonly Selector originalImage = "originalImage";
			public static readonly Selector originalImagePath = "originalImagePath";
			public static readonly Selector pictureDirPath = "pictureDirPath";
			public static readonly Selector purgeExtras = "purgeExtras";
			public static readonly Selector recentPictures = "recentPictures";
			public static readonly Selector recentSmallIcons = "recentSmallIcons";
			public static readonly Selector removeAllButCurrent = "removeAllButCurrent";
			public static readonly Selector setCurrent = "setCurrent";
			public static readonly Selector smallIcon = "smallIcon";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSPopUpButton ) )]
	public struct NSIPRecentPicturesPopUpButton : IEquatable<NSIPRecentPicturesPopUpButton> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = AddressBookCachedClasses.NSIPRecentPicturesPopUpButton;
		public static implicit operator NSPopUpButton( NSIPRecentPicturesPopUpButton value ) {
			return new NSPopUpButton( value.Handle );
		}
		public static implicit operator NSButton( NSIPRecentPicturesPopUpButton value ) {
			return new NSButton( value.Handle );
		}
		public static implicit operator NSControl( NSIPRecentPicturesPopUpButton value ) {
			return new NSControl( value.Handle );
		}
		public static implicit operator NSView( NSIPRecentPicturesPopUpButton value ) {
			return new NSView( value.Handle );
		}
		public static implicit operator NSResponder( NSIPRecentPicturesPopUpButton value ) {
			return new NSResponder( value.Handle );
		}
		public static implicit operator NSObject( NSIPRecentPicturesPopUpButton value ) {
			return new NSObject( value.Handle );
		}
		public static implicit operator IntPtr( NSIPRecentPicturesPopUpButton value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NSIPRecentPicturesPopUpButton value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NSIPRecentPicturesPopUpButton?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NSIPRecentPicturesPopUpButton value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NSIPRecentPicturesPopUpButton value1, NSIPRecentPicturesPopUpButton value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NSIPRecentPicturesPopUpButton value1, NSIPRecentPicturesPopUpButton value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NSIPRecentPicturesPopUpButton( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NSIPRecentPicturesPopUpButton alloc() {
			return new NSIPRecentPicturesPopUpButton( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class AddressBookExtensionsOfNSWindow {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class AddressBookExtensionsOfNSMutableData {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static void abAppendString_( this NSMutableData ___this, NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			NativeMethods.abAppendString_( ___this, CachedSelectors.abAppendString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void abAppendString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
		}
		static internal class CachedSelectors {
			public static readonly Selector abAppendString_ = "abAppendString:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class AddressBookExtensionsOfNSString {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static NObjective.RuntimeObject ab_queryPieces( this NSString ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ab_queryPieces( ___this, CachedSelectors.ab_queryPieces, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject ab_queryPiecesNoLowerCase( this NSString ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ab_queryPiecesNoLowerCase( ___this, CachedSelectors.ab_queryPiecesNoLowerCase, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject ab_stringByAddingPercentEscapesIfNecessary( this NSString ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ab_stringByAddingPercentEscapesIfNecessary( ___this, CachedSelectors.ab_stringByAddingPercentEscapesIfNecessary, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject ab_StringByMakingNameUnique( this NSString ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ab_StringByMakingNameUnique( ___this, CachedSelectors.ab_StringByMakingNameUnique, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abEllipsizeWithFont_withWidth_( this NSString ___this, NObjective.RuntimeObject font, float withWidth ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abEllipsizeWithFont_withWidth_( ___this, CachedSelectors.abEllipsizeWithFont_withWidth_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( float ), font, withWidth );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static uint abEndOfParagraphStartingAtIndex_( this NSString ___this, uint index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abEndOfParagraphStartingAtIndex_( ___this, CachedSelectors.abEndOfParagraphStartingAtIndex_, out ___occuredException, sizeof( uint ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public static NObjective.RuntimeObject abEscapeStringForUnichar_and_advance_( this NSString ___this, ushort unichar, ushort and, System.IntPtr advance ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abEscapeStringForUnichar_and_advance_( ___this, CachedSelectors.abEscapeStringForUnichar_and_advance_, out ___occuredException, sizeof( ushort ) + sizeof( ushort ) + sizeof( System.IntPtr ), unichar, and, advance );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abNormalizedUID( this NSString ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abNormalizedUID( ___this, CachedSelectors.abNormalizedUID, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static float abRankOfPhoneNumberMatchingString_( this NSString ___this, NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abRankOfPhoneNumberMatchingString_( ___this, CachedSelectors.abRankOfPhoneNumberMatchingString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject abStandardizedPhoneNumber( this NSString ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abStandardizedPhoneNumber( ___this, CachedSelectors.abStandardizedPhoneNumber, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abStringByRemovingDotMac( this NSString ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abStringByRemovingDotMac( ___this, CachedSelectors.abStringByRemovingDotMac, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abStringByRemovingPunctuation( this NSString ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abStringByRemovingPunctuation( ___this, CachedSelectors.abStringByRemovingPunctuation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abUIDWithTableName_( this NSString ___this, NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abUIDWithTableName_( ___this, CachedSelectors.abUIDWithTableName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abVCardDataRepresenation( this NSString ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abVCardDataRepresenation( ___this, CachedSelectors.abVCardDataRepresenation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abVCardKoshify( this NSString ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abVCardKoshify( ___this, CachedSelectors.abVCardKoshify, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abWords( this NSString ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abWords( ___this, CachedSelectors.abWords, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static int compareAscending_( this NSString ___this, NObjective.RuntimeObject @ascending ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareAscending_( ___this, CachedSelectors.compareAscending_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @ascending );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int compareCaseInsensitiveAscending_( this NSString ___this, NObjective.RuntimeObject @ascending ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareCaseInsensitiveAscending_( ___this, CachedSelectors.compareCaseInsensitiveAscending_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @ascending );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int compareCaseInsensitiveDescending_( this NSString ___this, NObjective.RuntimeObject @descending ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareCaseInsensitiveDescending_( ___this, CachedSelectors.compareCaseInsensitiveDescending_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @descending );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareContainsSubString_( this NSString ___this, NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareContainsSubString_( ___this, CachedSelectors.compareContainsSubString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareContainsSubStringCaseInsensitive_( this NSString ___this, NObjective.RuntimeObject insensitive ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareContainsSubStringCaseInsensitive_( ___this, CachedSelectors.compareContainsSubStringCaseInsensitive_, out ___occuredException, sizeof( NObjective.RuntimeObject ), insensitive );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int compareDescending_( this NSString ___this, NObjective.RuntimeObject @descending ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareDescending_( ___this, CachedSelectors.compareDescending_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @descending );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareNotWithinIntervalAroundToday_( this NSString ___this, NObjective.RuntimeObject today ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareNotWithinIntervalAroundToday_( ___this, CachedSelectors.compareNotWithinIntervalAroundToday_, out ___occuredException, sizeof( NObjective.RuntimeObject ), today );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareNotWithinIntervalAroundTodayYearless_( this NSString ___this, NObjective.RuntimeObject yearless ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareNotWithinIntervalAroundTodayYearless_( ___this, CachedSelectors.compareNotWithinIntervalAroundTodayYearless_, out ___occuredException, sizeof( NObjective.RuntimeObject ), yearless );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareNotWithinIntervalFromToday_( this NSString ___this, NObjective.RuntimeObject today ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareNotWithinIntervalFromToday_( ___this, CachedSelectors.compareNotWithinIntervalFromToday_, out ___occuredException, sizeof( NObjective.RuntimeObject ), today );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareNotWithinIntervalFromTodayYearless_( this NSString ___this, NObjective.RuntimeObject yearless ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareNotWithinIntervalFromTodayYearless_( ___this, CachedSelectors.compareNotWithinIntervalFromTodayYearless_, out ___occuredException, sizeof( NObjective.RuntimeObject ), yearless );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char comparePrefixMatch_( this NSString ___this, NObjective.RuntimeObject match ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.comparePrefixMatch_( ___this, CachedSelectors.comparePrefixMatch_, out ___occuredException, sizeof( NObjective.RuntimeObject ), match );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char comparePrefixMatchCaseInsensitive_( this NSString ___this, NObjective.RuntimeObject insensitive ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.comparePrefixMatchCaseInsensitive_( ___this, CachedSelectors.comparePrefixMatchCaseInsensitive_, out ___occuredException, sizeof( NObjective.RuntimeObject ), insensitive );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareSuffixMatch_( this NSString ___this, NObjective.RuntimeObject match ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareSuffixMatch_( ___this, CachedSelectors.compareSuffixMatch_, out ___occuredException, sizeof( NObjective.RuntimeObject ), match );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareSuffixMatchCaseInsensitive_( this NSString ___this, NObjective.RuntimeObject insensitive ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareSuffixMatchCaseInsensitive_( ___this, CachedSelectors.compareSuffixMatchCaseInsensitive_, out ___occuredException, sizeof( NObjective.RuntimeObject ), insensitive );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareWithinIntervalAroundToday_( this NSString ___this, NObjective.RuntimeObject today ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareWithinIntervalAroundToday_( ___this, CachedSelectors.compareWithinIntervalAroundToday_, out ___occuredException, sizeof( NObjective.RuntimeObject ), today );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareWithinIntervalAroundTodayYearless_( this NSString ___this, NObjective.RuntimeObject yearless ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareWithinIntervalAroundTodayYearless_( ___this, CachedSelectors.compareWithinIntervalAroundTodayYearless_, out ___occuredException, sizeof( NObjective.RuntimeObject ), yearless );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareWithinIntervalFromToday_( this NSString ___this, NObjective.RuntimeObject today ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareWithinIntervalFromToday_( ___this, CachedSelectors.compareWithinIntervalFromToday_, out ___occuredException, sizeof( NObjective.RuntimeObject ), today );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareWithinIntervalFromTodayYearless_( this NSString ___this, NObjective.RuntimeObject yearless ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareWithinIntervalFromTodayYearless_( ___this, CachedSelectors.compareWithinIntervalFromTodayYearless_, out ___occuredException, sizeof( NObjective.RuntimeObject ), yearless );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static bool isCompatibleWithSubscription_( this NSString ___this, NObjective.RuntimeObject subscription ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isCompatibleWithSubscription_( ___this, CachedSelectors.isCompatibleWithSubscription_, out ___occuredException, sizeof( NObjective.RuntimeObject ), subscription );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static bool isSubscribed( this NSString ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isSubscribed( ___this, CachedSelectors.isSubscribed, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr ab_queryPieces( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr ab_queryPiecesNoLowerCase( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr ab_stringByAddingPercentEscapesIfNecessary( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr ab_StringByMakingNameUnique( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abEllipsizeWithFont_withWidth_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject font, float withWidth );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint abEndOfParagraphStartingAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abEscapeStringForUnichar_and_advance_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ushort unichar, ushort and, System.IntPtr advance );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abNormalizedUID( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float abRankOfPhoneNumberMatchingString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abStandardizedPhoneNumber( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abStringByRemovingDotMac( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abStringByRemovingPunctuation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abUIDWithTableName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abVCardDataRepresenation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abVCardKoshify( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abWords( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int compareAscending_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @ascending );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int compareCaseInsensitiveAscending_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @ascending );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int compareCaseInsensitiveDescending_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @descending );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareContainsSubString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareContainsSubStringCaseInsensitive_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject insensitive );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int compareDescending_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @descending );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareNotWithinIntervalAroundToday_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject today );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareNotWithinIntervalAroundTodayYearless_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject yearless );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareNotWithinIntervalFromToday_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject today );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareNotWithinIntervalFromTodayYearless_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject yearless );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char comparePrefixMatch_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject match );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char comparePrefixMatchCaseInsensitive_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject insensitive );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareSuffixMatch_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject match );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareSuffixMatchCaseInsensitive_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject insensitive );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareWithinIntervalAroundToday_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject today );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareWithinIntervalAroundTodayYearless_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject yearless );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareWithinIntervalFromToday_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject today );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareWithinIntervalFromTodayYearless_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject yearless );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isCompatibleWithSubscription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject subscription );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isSubscribed( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector ab_queryPieces = "ab_queryPieces";
			public static readonly Selector ab_queryPiecesNoLowerCase = "ab_queryPiecesNoLowerCase";
			public static readonly Selector ab_stringByAddingPercentEscapesIfNecessary = "ab_stringByAddingPercentEscapesIfNecessary";
			public static readonly Selector ab_StringByMakingNameUnique = "ab_StringByMakingNameUnique";
			public static readonly Selector abEllipsizeWithFont_withWidth_ = "abEllipsizeWithFont:withWidth:";
			public static readonly Selector abEndOfParagraphStartingAtIndex_ = "abEndOfParagraphStartingAtIndex:";
			public static readonly Selector abEscapeStringForUnichar_and_advance_ = "abEscapeStringForUnichar:and:advance:";
			public static readonly Selector abNormalizedUID = "abNormalizedUID";
			public static readonly Selector abRankOfPhoneNumberMatchingString_ = "abRankOfPhoneNumberMatchingString:";
			public static readonly Selector abStandardizedPhoneNumber = "abStandardizedPhoneNumber";
			public static readonly Selector abStringByRemovingDotMac = "abStringByRemovingDotMac";
			public static readonly Selector abStringByRemovingPunctuation = "abStringByRemovingPunctuation";
			public static readonly Selector abUIDWithTableName_ = "abUIDWithTableName:";
			public static readonly Selector abVCardDataRepresenation = "abVCardDataRepresenation";
			public static readonly Selector abVCardKoshify = "abVCardKoshify";
			public static readonly Selector abWords = "abWords";
			public static readonly Selector compareAscending_ = "compareAscending:";
			public static readonly Selector compareCaseInsensitiveAscending_ = "compareCaseInsensitiveAscending:";
			public static readonly Selector compareCaseInsensitiveDescending_ = "compareCaseInsensitiveDescending:";
			public static readonly Selector compareContainsSubString_ = "compareContainsSubString:";
			public static readonly Selector compareContainsSubStringCaseInsensitive_ = "compareContainsSubStringCaseInsensitive:";
			public static readonly Selector compareDescending_ = "compareDescending:";
			public static readonly Selector compareNotWithinIntervalAroundToday_ = "compareNotWithinIntervalAroundToday:";
			public static readonly Selector compareNotWithinIntervalAroundTodayYearless_ = "compareNotWithinIntervalAroundTodayYearless:";
			public static readonly Selector compareNotWithinIntervalFromToday_ = "compareNotWithinIntervalFromToday:";
			public static readonly Selector compareNotWithinIntervalFromTodayYearless_ = "compareNotWithinIntervalFromTodayYearless:";
			public static readonly Selector comparePrefixMatch_ = "comparePrefixMatch:";
			public static readonly Selector comparePrefixMatchCaseInsensitive_ = "comparePrefixMatchCaseInsensitive:";
			public static readonly Selector compareSuffixMatch_ = "compareSuffixMatch:";
			public static readonly Selector compareSuffixMatchCaseInsensitive_ = "compareSuffixMatchCaseInsensitive:";
			public static readonly Selector compareWithinIntervalAroundToday_ = "compareWithinIntervalAroundToday:";
			public static readonly Selector compareWithinIntervalAroundTodayYearless_ = "compareWithinIntervalAroundTodayYearless:";
			public static readonly Selector compareWithinIntervalFromToday_ = "compareWithinIntervalFromToday:";
			public static readonly Selector compareWithinIntervalFromTodayYearless_ = "compareWithinIntervalFromTodayYearless:";
			public static readonly Selector isCompatibleWithSubscription_ = "isCompatibleWithSubscription:";
			public static readonly Selector isSubscribed = "isSubscribed";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class AddressBookExtensionsOfNSImage {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static NObjective.RuntimeObject imageNamed_ofType_inBundle_( NObjective.RuntimeObject named, NObjective.RuntimeObject ofType, NObjective.RuntimeObject inBundle ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.imageNamed_ofType_inBundle_( NSImage.ClassHandle, CachedSelectors.imageNamed_ofType_inBundle_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), named, ofType, inBundle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject nsipImageWithMaxSize_( this NSImage ___this, int size ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nsipImageWithMaxSize_( ___this, CachedSelectors.nsipImageWithMaxSize_, out ___occuredException, sizeof( int ), size );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject nsipImageWithMaxSize_withLeftPad_( this NSImage ___this, int size, int withLeftPad ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nsipImageWithMaxSize_withLeftPad_( ___this, CachedSelectors.nsipImageWithMaxSize_withLeftPad_, out ___occuredException, sizeof( int ) + sizeof( int ), size, withLeftPad );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject nsipJPEGDataWithMaxSize_compression_( this NSImage ___this, float size, float compression ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nsipJPEGDataWithMaxSize_compression_( ___this, CachedSelectors.nsipJPEGDataWithMaxSize_compression_, out ___occuredException, sizeof( float ) + sizeof( float ), size, compression );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr imageNamed_ofType_inBundle_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject named, NObjective.RuntimeObject ofType, NObjective.RuntimeObject inBundle );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nsipImageWithMaxSize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int size );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nsipImageWithMaxSize_withLeftPad_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int size, int withLeftPad );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nsipJPEGDataWithMaxSize_compression_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float size, float compression );
		}
		static internal class CachedSelectors {
			public static readonly Selector imageNamed_ofType_inBundle_ = "imageNamed:ofType:inBundle:";
			public static readonly Selector nsipImageWithMaxSize_ = "nsipImageWithMaxSize:";
			public static readonly Selector nsipImageWithMaxSize_withLeftPad_ = "nsipImageWithMaxSize:withLeftPad:";
			public static readonly Selector nsipJPEGDataWithMaxSize_compression_ = "nsipJPEGDataWithMaxSize:compression:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class AddressBookExtensionsOfNSDictionary {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static NObjective.RuntimeObject abDictionaryForBackupAtPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abDictionaryForBackupAtPath_( NSDictionary.ClassHandle, CachedSelectors.abDictionaryForBackupAtPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abBackupDate( this NSDictionary ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abBackupDate( ___this, CachedSelectors.abBackupDate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static uint abBackupGroupsCount( this NSDictionary ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abBackupGroupsCount( ___this, CachedSelectors.abBackupGroupsCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public static NObjective.RuntimeObject abBackupPath( this NSDictionary ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abBackupPath( ___this, CachedSelectors.abBackupPath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static uint abBackupPeopleCount( this NSDictionary ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abBackupPeopleCount( ___this, CachedSelectors.abBackupPeopleCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public static int abCompareBackupInfo_( this NSDictionary ___this, NObjective.RuntimeObject info ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abCompareBackupInfo_( ___this, CachedSelectors.abCompareBackupInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), info );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abBackupDate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint abBackupGroupsCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abBackupPath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint abBackupPeopleCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int abCompareBackupInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject info );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abDictionaryForBackupAtPath_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
		}
		static internal class CachedSelectors {
			public static readonly Selector abBackupDate = "abBackupDate";
			public static readonly Selector abBackupGroupsCount = "abBackupGroupsCount";
			public static readonly Selector abBackupPath = "abBackupPath";
			public static readonly Selector abBackupPeopleCount = "abBackupPeopleCount";
			public static readonly Selector abCompareBackupInfo_ = "abCompareBackupInfo:";
			public static readonly Selector abDictionaryForBackupAtPath_ = "abDictionaryForBackupAtPath:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class AddressBookExtensionsOfDSoNode {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static NObjective.RuntimeObject findAllUsers( this DSoNode ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.findAllUsers( ___this, CachedSelectors.findAllUsers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr findAllUsers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector findAllUsers = "findAllUsers";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class AddressBookExtensionsOfNSColor {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static NObjective.RuntimeObject nsipMenuWindowBackgroundColor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nsipMenuWindowBackgroundColor( NSColor.ClassHandle, CachedSelectors.nsipMenuWindowBackgroundColor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nsipMenuWindowBackgroundColor( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector nsipMenuWindowBackgroundColor = "nsipMenuWindowBackgroundColor";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class AddressBookExtensionsOfNSFileManager {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static char nsipMakeDirectoriesInPath_mode_( this NSFileManager ___this, NObjective.RuntimeObject path, int mode ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nsipMakeDirectoriesInPath_mode_( ___this, CachedSelectors.nsipMakeDirectoriesInPath_mode_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ), path, mode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nsipMakeDirectoriesInPath_mode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path, int mode );
		}
		static internal class CachedSelectors {
			public static readonly Selector nsipMakeDirectoriesInPath_mode_ = "nsipMakeDirectoriesInPath:mode:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class AddressBookExtensionsOfNSURL {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static NObjective.RuntimeObject ab_URLWithStringByEscapingStringIfNecessary_( NObjective.RuntimeObject necessary ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ab_URLWithStringByEscapingStringIfNecessary_( NSURL.ClassHandle, CachedSelectors.ab_URLWithStringByEscapingStringIfNecessary_, out ___occuredException, sizeof( NObjective.RuntimeObject ), necessary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abArguments( this NSURL ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abArguments( ___this, CachedSelectors.abArguments, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abURLWithScheme_( this NSURL ___this, NObjective.RuntimeObject scheme ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abURLWithScheme_( ___this, CachedSelectors.abURLWithScheme_, out ___occuredException, sizeof( NObjective.RuntimeObject ), scheme );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject lastComponent( this NSURL ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lastComponent( ___this, CachedSelectors.lastComponent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject pathlessURL( this NSURL ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pathlessURL( ___this, CachedSelectors.pathlessURL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject URLByAppendingComponent_( this NSURL ___this, NObjective.RuntimeObject component ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.URLByAppendingComponent_( ___this, CachedSelectors.URLByAppendingComponent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), component );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject URLByDeletingLastComponent( this NSURL ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.URLByDeletingLastComponent( ___this, CachedSelectors.URLByDeletingLastComponent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr ab_URLWithStringByEscapingStringIfNecessary_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject necessary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abArguments( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abURLWithScheme_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject scheme );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr lastComponent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pathlessURL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr URLByAppendingComponent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject component );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr URLByDeletingLastComponent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector ab_URLWithStringByEscapingStringIfNecessary_ = "ab_URLWithStringByEscapingStringIfNecessary:";
			public static readonly Selector abArguments = "abArguments";
			public static readonly Selector abURLWithScheme_ = "abURLWithScheme:";
			public static readonly Selector lastComponent = "lastComponent";
			public static readonly Selector pathlessURL = "pathlessURL";
			public static readonly Selector URLByAppendingComponent_ = "URLByAppendingComponent:";
			public static readonly Selector URLByDeletingLastComponent = "URLByDeletingLastComponent";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class AddressBookExtensionsOfNSObject {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static int compareAscending_( this NSObject ___this, NObjective.RuntimeObject @ascending ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareAscending_( ___this, CachedSelectors.compareAscending_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @ascending );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int compareCaseInsensitiveAscending_( this NSObject ___this, NObjective.RuntimeObject @ascending ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareCaseInsensitiveAscending_( ___this, CachedSelectors.compareCaseInsensitiveAscending_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @ascending );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int compareCaseInsensitiveDescending_( this NSObject ___this, NObjective.RuntimeObject @descending ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareCaseInsensitiveDescending_( ___this, CachedSelectors.compareCaseInsensitiveDescending_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @descending );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareContainsSubString_( this NSObject ___this, NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareContainsSubString_( ___this, CachedSelectors.compareContainsSubString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareContainsSubStringCaseInsensitive_( this NSObject ___this, NObjective.RuntimeObject insensitive ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareContainsSubStringCaseInsensitive_( ___this, CachedSelectors.compareContainsSubStringCaseInsensitive_, out ___occuredException, sizeof( NObjective.RuntimeObject ), insensitive );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int compareDescending_( this NSObject ___this, NObjective.RuntimeObject @descending ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareDescending_( ___this, CachedSelectors.compareDescending_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @descending );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareNotWithinIntervalAroundToday_( this NSObject ___this, NObjective.RuntimeObject today ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareNotWithinIntervalAroundToday_( ___this, CachedSelectors.compareNotWithinIntervalAroundToday_, out ___occuredException, sizeof( NObjective.RuntimeObject ), today );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareNotWithinIntervalAroundTodayYearless_( this NSObject ___this, NObjective.RuntimeObject yearless ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareNotWithinIntervalAroundTodayYearless_( ___this, CachedSelectors.compareNotWithinIntervalAroundTodayYearless_, out ___occuredException, sizeof( NObjective.RuntimeObject ), yearless );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareNotWithinIntervalFromToday_( this NSObject ___this, NObjective.RuntimeObject today ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareNotWithinIntervalFromToday_( ___this, CachedSelectors.compareNotWithinIntervalFromToday_, out ___occuredException, sizeof( NObjective.RuntimeObject ), today );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareNotWithinIntervalFromTodayYearless_( this NSObject ___this, NObjective.RuntimeObject yearless ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareNotWithinIntervalFromTodayYearless_( ___this, CachedSelectors.compareNotWithinIntervalFromTodayYearless_, out ___occuredException, sizeof( NObjective.RuntimeObject ), yearless );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char comparePrefixMatch_( this NSObject ___this, NObjective.RuntimeObject match ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.comparePrefixMatch_( ___this, CachedSelectors.comparePrefixMatch_, out ___occuredException, sizeof( NObjective.RuntimeObject ), match );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char comparePrefixMatchCaseInsensitive_( this NSObject ___this, NObjective.RuntimeObject insensitive ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.comparePrefixMatchCaseInsensitive_( ___this, CachedSelectors.comparePrefixMatchCaseInsensitive_, out ___occuredException, sizeof( NObjective.RuntimeObject ), insensitive );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareSuffixMatch_( this NSObject ___this, NObjective.RuntimeObject match ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareSuffixMatch_( ___this, CachedSelectors.compareSuffixMatch_, out ___occuredException, sizeof( NObjective.RuntimeObject ), match );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareSuffixMatchCaseInsensitive_( this NSObject ___this, NObjective.RuntimeObject insensitive ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareSuffixMatchCaseInsensitive_( ___this, CachedSelectors.compareSuffixMatchCaseInsensitive_, out ___occuredException, sizeof( NObjective.RuntimeObject ), insensitive );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareWithinIntervalAroundToday_( this NSObject ___this, NObjective.RuntimeObject today ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareWithinIntervalAroundToday_( ___this, CachedSelectors.compareWithinIntervalAroundToday_, out ___occuredException, sizeof( NObjective.RuntimeObject ), today );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareWithinIntervalAroundTodayYearless_( this NSObject ___this, NObjective.RuntimeObject yearless ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareWithinIntervalAroundTodayYearless_( ___this, CachedSelectors.compareWithinIntervalAroundTodayYearless_, out ___occuredException, sizeof( NObjective.RuntimeObject ), yearless );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareWithinIntervalFromToday_( this NSObject ___this, NObjective.RuntimeObject today ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareWithinIntervalFromToday_( ___this, CachedSelectors.compareWithinIntervalFromToday_, out ___occuredException, sizeof( NObjective.RuntimeObject ), today );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareWithinIntervalFromTodayYearless_( this NSObject ___this, NObjective.RuntimeObject yearless ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareWithinIntervalFromTodayYearless_( ___this, CachedSelectors.compareWithinIntervalFromTodayYearless_, out ___occuredException, sizeof( NObjective.RuntimeObject ), yearless );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int compareAscending_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @ascending );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int compareCaseInsensitiveAscending_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @ascending );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int compareCaseInsensitiveDescending_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @descending );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareContainsSubString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareContainsSubStringCaseInsensitive_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject insensitive );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int compareDescending_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @descending );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareNotWithinIntervalAroundToday_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject today );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareNotWithinIntervalAroundTodayYearless_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject yearless );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareNotWithinIntervalFromToday_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject today );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareNotWithinIntervalFromTodayYearless_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject yearless );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char comparePrefixMatch_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject match );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char comparePrefixMatchCaseInsensitive_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject insensitive );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareSuffixMatch_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject match );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareSuffixMatchCaseInsensitive_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject insensitive );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareWithinIntervalAroundToday_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject today );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareWithinIntervalAroundTodayYearless_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject yearless );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareWithinIntervalFromToday_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject today );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareWithinIntervalFromTodayYearless_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject yearless );
		}
		static internal class CachedSelectors {
			public static readonly Selector compareAscending_ = "compareAscending:";
			public static readonly Selector compareCaseInsensitiveAscending_ = "compareCaseInsensitiveAscending:";
			public static readonly Selector compareCaseInsensitiveDescending_ = "compareCaseInsensitiveDescending:";
			public static readonly Selector compareContainsSubString_ = "compareContainsSubString:";
			public static readonly Selector compareContainsSubStringCaseInsensitive_ = "compareContainsSubStringCaseInsensitive:";
			public static readonly Selector compareDescending_ = "compareDescending:";
			public static readonly Selector compareNotWithinIntervalAroundToday_ = "compareNotWithinIntervalAroundToday:";
			public static readonly Selector compareNotWithinIntervalAroundTodayYearless_ = "compareNotWithinIntervalAroundTodayYearless:";
			public static readonly Selector compareNotWithinIntervalFromToday_ = "compareNotWithinIntervalFromToday:";
			public static readonly Selector compareNotWithinIntervalFromTodayYearless_ = "compareNotWithinIntervalFromTodayYearless:";
			public static readonly Selector comparePrefixMatch_ = "comparePrefixMatch:";
			public static readonly Selector comparePrefixMatchCaseInsensitive_ = "comparePrefixMatchCaseInsensitive:";
			public static readonly Selector compareSuffixMatch_ = "compareSuffixMatch:";
			public static readonly Selector compareSuffixMatchCaseInsensitive_ = "compareSuffixMatchCaseInsensitive:";
			public static readonly Selector compareWithinIntervalAroundToday_ = "compareWithinIntervalAroundToday:";
			public static readonly Selector compareWithinIntervalAroundTodayYearless_ = "compareWithinIntervalAroundTodayYearless:";
			public static readonly Selector compareWithinIntervalFromToday_ = "compareWithinIntervalFromToday:";
			public static readonly Selector compareWithinIntervalFromTodayYearless_ = "compareWithinIntervalFromTodayYearless:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class AddressBookExtensionsOfNSURL__ {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static NObjective.RuntimeObject ab_URLWithStringByEscapingStringIfNecessary_( NObjective.RuntimeObject necessary ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ab_URLWithStringByEscapingStringIfNecessary_( NSURL__.ClassHandle, CachedSelectors.ab_URLWithStringByEscapingStringIfNecessary_, out ___occuredException, sizeof( NObjective.RuntimeObject ), necessary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr ab_URLWithStringByEscapingStringIfNecessary_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject necessary );
		}
		static internal class CachedSelectors {
			public static readonly Selector ab_URLWithStringByEscapingStringIfNecessary_ = "ab_URLWithStringByEscapingStringIfNecessary:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class AddressBookExtensionsOfNSArray {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static NObjective.RuntimeObject abArrayCombinedWithArray_( this NSArray ___this, NObjective.RuntimeObject array ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abArrayCombinedWithArray_( ___this, CachedSelectors.abArrayCombinedWithArray_, out ___occuredException, sizeof( NObjective.RuntimeObject ), array );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static char abContainsCaseInsensitiveString_( this NSArray ___this, NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abContainsCaseInsensitiveString_( ___this, CachedSelectors.abContainsCaseInsensitiveString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject abDifferencesBetweenArray_( this NSArray ___this, NObjective.RuntimeObject array ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abDifferencesBetweenArray_( ___this, CachedSelectors.abDifferencesBetweenArray_, out ___occuredException, sizeof( NObjective.RuntimeObject ), array );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abPeopleFromUniqueIds( this NSArray ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abPeopleFromUniqueIds( ___this, CachedSelectors.abPeopleFromUniqueIds, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abUniqueIds( this NSArray ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abUniqueIds( ___this, CachedSelectors.abUniqueIds, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject arrayWithResultsOf_( this NSArray ___this, NObjective.Selector of ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.arrayWithResultsOf_( ___this, CachedSelectors.arrayWithResultsOf_, out ___occuredException, sizeof( NObjective.Selector ), of );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject nsipArrayByApplyingSelector_( this NSArray ___this, NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nsipArrayByApplyingSelector_( ___this, CachedSelectors.nsipArrayByApplyingSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject nsipArrayByApplyingSelector_withObject_( this NSArray ___this, NObjective.Selector selector, NObjective.RuntimeObject withObject ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nsipArrayByApplyingSelector_withObject_( ___this, CachedSelectors.nsipArrayByApplyingSelector_withObject_, out ___occuredException, sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ), selector, withObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static char nsipContainsObjectIdenticalTo_( this NSArray ___this, NObjective.RuntimeObject to ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.nsipContainsObjectIdenticalTo_( ___this, CachedSelectors.nsipContainsObjectIdenticalTo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), to );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abArrayCombinedWithArray_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject array );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char abContainsCaseInsensitiveString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abDifferencesBetweenArray_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject array );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abPeopleFromUniqueIds( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abUniqueIds( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr arrayWithResultsOf_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector of );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nsipArrayByApplyingSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr nsipArrayByApplyingSelector_withObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector, NObjective.RuntimeObject withObject );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char nsipContainsObjectIdenticalTo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject to );
		}
		static internal class CachedSelectors {
			public static readonly Selector abArrayCombinedWithArray_ = "abArrayCombinedWithArray:";
			public static readonly Selector abContainsCaseInsensitiveString_ = "abContainsCaseInsensitiveString:";
			public static readonly Selector abDifferencesBetweenArray_ = "abDifferencesBetweenArray:";
			public static readonly Selector abPeopleFromUniqueIds = "abPeopleFromUniqueIds";
			public static readonly Selector abUniqueIds = "abUniqueIds";
			public static readonly Selector arrayWithResultsOf_ = "arrayWithResultsOf:";
			public static readonly Selector nsipArrayByApplyingSelector_ = "nsipArrayByApplyingSelector:";
			public static readonly Selector nsipArrayByApplyingSelector_withObject_ = "nsipArrayByApplyingSelector:withObject:";
			public static readonly Selector nsipContainsObjectIdenticalTo_ = "nsipContainsObjectIdenticalTo:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class AddressBookExtensionsOfNSCalendarDate {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static double ab_smallestTimeIntervalAroundTodayYearLess( this NSCalendarDate ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ab_smallestTimeIntervalAroundTodayYearLess( ___this, CachedSelectors.ab_smallestTimeIntervalAroundTodayYearLess, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static double ab_timeIntervalFromTodayYearLess( this NSCalendarDate ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ab_timeIntervalFromTodayYearLess( ___this, CachedSelectors.ab_timeIntervalFromTodayYearLess, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static double ab_timeIntervalSinceToday( this NSCalendarDate ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ab_timeIntervalSinceToday( ___this, CachedSelectors.ab_timeIntervalSinceToday, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareNotWithinIntervalAroundToday_( this NSCalendarDate ___this, NObjective.RuntimeObject today ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareNotWithinIntervalAroundToday_( ___this, CachedSelectors.compareNotWithinIntervalAroundToday_, out ___occuredException, sizeof( NObjective.RuntimeObject ), today );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareNotWithinIntervalAroundTodayYearless_( this NSCalendarDate ___this, NObjective.RuntimeObject yearless ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareNotWithinIntervalAroundTodayYearless_( ___this, CachedSelectors.compareNotWithinIntervalAroundTodayYearless_, out ___occuredException, sizeof( NObjective.RuntimeObject ), yearless );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareNotWithinIntervalFromToday_( this NSCalendarDate ___this, NObjective.RuntimeObject today ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareNotWithinIntervalFromToday_( ___this, CachedSelectors.compareNotWithinIntervalFromToday_, out ___occuredException, sizeof( NObjective.RuntimeObject ), today );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareNotWithinIntervalFromTodayYearless_( this NSCalendarDate ___this, NObjective.RuntimeObject yearless ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareNotWithinIntervalFromTodayYearless_( ___this, CachedSelectors.compareNotWithinIntervalFromTodayYearless_, out ___occuredException, sizeof( NObjective.RuntimeObject ), yearless );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareWithinIntervalAroundToday_( this NSCalendarDate ___this, NObjective.RuntimeObject today ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareWithinIntervalAroundToday_( ___this, CachedSelectors.compareWithinIntervalAroundToday_, out ___occuredException, sizeof( NObjective.RuntimeObject ), today );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareWithinIntervalAroundTodayYearless_( this NSCalendarDate ___this, NObjective.RuntimeObject yearless ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareWithinIntervalAroundTodayYearless_( ___this, CachedSelectors.compareWithinIntervalAroundTodayYearless_, out ___occuredException, sizeof( NObjective.RuntimeObject ), yearless );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareWithinIntervalFromToday_( this NSCalendarDate ___this, NObjective.RuntimeObject today ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareWithinIntervalFromToday_( ___this, CachedSelectors.compareWithinIntervalFromToday_, out ___occuredException, sizeof( NObjective.RuntimeObject ), today );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareWithinIntervalFromTodayYearless_( this NSCalendarDate ___this, NObjective.RuntimeObject yearless ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareWithinIntervalFromTodayYearless_( ___this, CachedSelectors.compareWithinIntervalFromTodayYearless_, out ___occuredException, sizeof( NObjective.RuntimeObject ), yearless );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double ab_smallestTimeIntervalAroundTodayYearLess( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double ab_timeIntervalFromTodayYearLess( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double ab_timeIntervalSinceToday( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareNotWithinIntervalAroundToday_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject today );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareNotWithinIntervalAroundTodayYearless_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject yearless );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareNotWithinIntervalFromToday_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject today );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareNotWithinIntervalFromTodayYearless_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject yearless );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareWithinIntervalAroundToday_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject today );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareWithinIntervalAroundTodayYearless_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject yearless );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareWithinIntervalFromToday_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject today );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareWithinIntervalFromTodayYearless_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject yearless );
		}
		static internal class CachedSelectors {
			public static readonly Selector ab_smallestTimeIntervalAroundTodayYearLess = "ab_smallestTimeIntervalAroundTodayYearLess";
			public static readonly Selector ab_timeIntervalFromTodayYearLess = "ab_timeIntervalFromTodayYearLess";
			public static readonly Selector ab_timeIntervalSinceToday = "ab_timeIntervalSinceToday";
			public static readonly Selector compareNotWithinIntervalAroundToday_ = "compareNotWithinIntervalAroundToday:";
			public static readonly Selector compareNotWithinIntervalAroundTodayYearless_ = "compareNotWithinIntervalAroundTodayYearless:";
			public static readonly Selector compareNotWithinIntervalFromToday_ = "compareNotWithinIntervalFromToday:";
			public static readonly Selector compareNotWithinIntervalFromTodayYearless_ = "compareNotWithinIntervalFromTodayYearless:";
			public static readonly Selector compareWithinIntervalAroundToday_ = "compareWithinIntervalAroundToday:";
			public static readonly Selector compareWithinIntervalAroundTodayYearless_ = "compareWithinIntervalAroundTodayYearless:";
			public static readonly Selector compareWithinIntervalFromToday_ = "compareWithinIntervalFromToday:";
			public static readonly Selector compareWithinIntervalFromTodayYearless_ = "compareWithinIntervalFromTodayYearless:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class AddressBookExtensionsOfNSDate {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static double ab_smallestTimeIntervalAroundTodayYearLess( this NSDate ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ab_smallestTimeIntervalAroundTodayYearLess( ___this, CachedSelectors.ab_smallestTimeIntervalAroundTodayYearLess, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static double ab_timeIntervalFromTodayYearLess( this NSDate ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ab_timeIntervalFromTodayYearLess( ___this, CachedSelectors.ab_timeIntervalFromTodayYearLess, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static double ab_timeIntervalSinceToday( this NSDate ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ab_timeIntervalSinceToday( ___this, CachedSelectors.ab_timeIntervalSinceToday, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareNotWithinIntervalAroundToday_( this NSDate ___this, NObjective.RuntimeObject today ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareNotWithinIntervalAroundToday_( ___this, CachedSelectors.compareNotWithinIntervalAroundToday_, out ___occuredException, sizeof( NObjective.RuntimeObject ), today );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareNotWithinIntervalAroundTodayYearless_( this NSDate ___this, NObjective.RuntimeObject yearless ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareNotWithinIntervalAroundTodayYearless_( ___this, CachedSelectors.compareNotWithinIntervalAroundTodayYearless_, out ___occuredException, sizeof( NObjective.RuntimeObject ), yearless );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareNotWithinIntervalFromToday_( this NSDate ___this, NObjective.RuntimeObject today ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareNotWithinIntervalFromToday_( ___this, CachedSelectors.compareNotWithinIntervalFromToday_, out ___occuredException, sizeof( NObjective.RuntimeObject ), today );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareNotWithinIntervalFromTodayYearless_( this NSDate ___this, NObjective.RuntimeObject yearless ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareNotWithinIntervalFromTodayYearless_( ___this, CachedSelectors.compareNotWithinIntervalFromTodayYearless_, out ___occuredException, sizeof( NObjective.RuntimeObject ), yearless );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareWithinIntervalAroundToday_( this NSDate ___this, NObjective.RuntimeObject today ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareWithinIntervalAroundToday_( ___this, CachedSelectors.compareWithinIntervalAroundToday_, out ___occuredException, sizeof( NObjective.RuntimeObject ), today );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareWithinIntervalAroundTodayYearless_( this NSDate ___this, NObjective.RuntimeObject yearless ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareWithinIntervalAroundTodayYearless_( ___this, CachedSelectors.compareWithinIntervalAroundTodayYearless_, out ___occuredException, sizeof( NObjective.RuntimeObject ), yearless );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareWithinIntervalFromToday_( this NSDate ___this, NObjective.RuntimeObject today ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareWithinIntervalFromToday_( ___this, CachedSelectors.compareWithinIntervalFromToday_, out ___occuredException, sizeof( NObjective.RuntimeObject ), today );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareWithinIntervalFromTodayYearless_( this NSDate ___this, NObjective.RuntimeObject yearless ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareWithinIntervalFromTodayYearless_( ___this, CachedSelectors.compareWithinIntervalFromTodayYearless_, out ___occuredException, sizeof( NObjective.RuntimeObject ), yearless );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double ab_smallestTimeIntervalAroundTodayYearLess( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double ab_timeIntervalFromTodayYearLess( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double ab_timeIntervalSinceToday( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareNotWithinIntervalAroundToday_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject today );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareNotWithinIntervalAroundTodayYearless_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject yearless );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareNotWithinIntervalFromToday_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject today );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareNotWithinIntervalFromTodayYearless_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject yearless );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareWithinIntervalAroundToday_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject today );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareWithinIntervalAroundTodayYearless_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject yearless );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareWithinIntervalFromToday_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject today );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareWithinIntervalFromTodayYearless_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject yearless );
		}
		static internal class CachedSelectors {
			public static readonly Selector ab_smallestTimeIntervalAroundTodayYearLess = "ab_smallestTimeIntervalAroundTodayYearLess";
			public static readonly Selector ab_timeIntervalFromTodayYearLess = "ab_timeIntervalFromTodayYearLess";
			public static readonly Selector ab_timeIntervalSinceToday = "ab_timeIntervalSinceToday";
			public static readonly Selector compareNotWithinIntervalAroundToday_ = "compareNotWithinIntervalAroundToday:";
			public static readonly Selector compareNotWithinIntervalAroundTodayYearless_ = "compareNotWithinIntervalAroundTodayYearless:";
			public static readonly Selector compareNotWithinIntervalFromToday_ = "compareNotWithinIntervalFromToday:";
			public static readonly Selector compareNotWithinIntervalFromTodayYearless_ = "compareNotWithinIntervalFromTodayYearless:";
			public static readonly Selector compareWithinIntervalAroundToday_ = "compareWithinIntervalAroundToday:";
			public static readonly Selector compareWithinIntervalAroundTodayYearless_ = "compareWithinIntervalAroundTodayYearless:";
			public static readonly Selector compareWithinIntervalFromToday_ = "compareWithinIntervalFromToday:";
			public static readonly Selector compareWithinIntervalFromTodayYearless_ = "compareWithinIntervalFromTodayYearless:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class AddressBookExtensionsOfNSNull {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static int compareAscending_( this NSNull ___this, NObjective.RuntimeObject @ascending ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareAscending_( ___this, CachedSelectors.compareAscending_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @ascending );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int compareCaseInsensitiveAscending_( this NSNull ___this, NObjective.RuntimeObject @ascending ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareCaseInsensitiveAscending_( ___this, CachedSelectors.compareCaseInsensitiveAscending_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @ascending );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int compareCaseInsensitiveDescending_( this NSNull ___this, NObjective.RuntimeObject @descending ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareCaseInsensitiveDescending_( ___this, CachedSelectors.compareCaseInsensitiveDescending_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @descending );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareContainsSubString_( this NSNull ___this, NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareContainsSubString_( ___this, CachedSelectors.compareContainsSubString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareContainsSubStringCaseInsensitive_( this NSNull ___this, NObjective.RuntimeObject insensitive ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareContainsSubStringCaseInsensitive_( ___this, CachedSelectors.compareContainsSubStringCaseInsensitive_, out ___occuredException, sizeof( NObjective.RuntimeObject ), insensitive );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int compareDescending_( this NSNull ___this, NObjective.RuntimeObject @descending ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareDescending_( ___this, CachedSelectors.compareDescending_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @descending );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareNotWithinIntervalFromToday_( this NSNull ___this, NObjective.RuntimeObject today ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareNotWithinIntervalFromToday_( ___this, CachedSelectors.compareNotWithinIntervalFromToday_, out ___occuredException, sizeof( NObjective.RuntimeObject ), today );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareNotWithinIntervalFromTodayYearless_( this NSNull ___this, NObjective.RuntimeObject yearless ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareNotWithinIntervalFromTodayYearless_( ___this, CachedSelectors.compareNotWithinIntervalFromTodayYearless_, out ___occuredException, sizeof( NObjective.RuntimeObject ), yearless );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char comparePrefixMatch_( this NSNull ___this, NObjective.RuntimeObject match ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.comparePrefixMatch_( ___this, CachedSelectors.comparePrefixMatch_, out ___occuredException, sizeof( NObjective.RuntimeObject ), match );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char comparePrefixMatchCaseInsensitive_( this NSNull ___this, NObjective.RuntimeObject insensitive ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.comparePrefixMatchCaseInsensitive_( ___this, CachedSelectors.comparePrefixMatchCaseInsensitive_, out ___occuredException, sizeof( NObjective.RuntimeObject ), insensitive );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareSuffixMatch_( this NSNull ___this, NObjective.RuntimeObject match ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareSuffixMatch_( ___this, CachedSelectors.compareSuffixMatch_, out ___occuredException, sizeof( NObjective.RuntimeObject ), match );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareSuffixMatchCaseInsensitive_( this NSNull ___this, NObjective.RuntimeObject insensitive ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareSuffixMatchCaseInsensitive_( ___this, CachedSelectors.compareSuffixMatchCaseInsensitive_, out ___occuredException, sizeof( NObjective.RuntimeObject ), insensitive );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareWithinIntervalFromToday_( this NSNull ___this, NObjective.RuntimeObject today ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareWithinIntervalFromToday_( ___this, CachedSelectors.compareWithinIntervalFromToday_, out ___occuredException, sizeof( NObjective.RuntimeObject ), today );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char compareWithinIntervalFromTodayYearless_( this NSNull ___this, NObjective.RuntimeObject yearless ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.compareWithinIntervalFromTodayYearless_( ___this, CachedSelectors.compareWithinIntervalFromTodayYearless_, out ___occuredException, sizeof( NObjective.RuntimeObject ), yearless );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int compareAscending_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @ascending );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int compareCaseInsensitiveAscending_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @ascending );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int compareCaseInsensitiveDescending_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @descending );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareContainsSubString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareContainsSubStringCaseInsensitive_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject insensitive );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int compareDescending_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @descending );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareNotWithinIntervalFromToday_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject today );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareNotWithinIntervalFromTodayYearless_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject yearless );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char comparePrefixMatch_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject match );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char comparePrefixMatchCaseInsensitive_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject insensitive );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareSuffixMatch_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject match );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareSuffixMatchCaseInsensitive_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject insensitive );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareWithinIntervalFromToday_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject today );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char compareWithinIntervalFromTodayYearless_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject yearless );
		}
		static internal class CachedSelectors {
			public static readonly Selector compareAscending_ = "compareAscending:";
			public static readonly Selector compareCaseInsensitiveAscending_ = "compareCaseInsensitiveAscending:";
			public static readonly Selector compareCaseInsensitiveDescending_ = "compareCaseInsensitiveDescending:";
			public static readonly Selector compareContainsSubString_ = "compareContainsSubString:";
			public static readonly Selector compareContainsSubStringCaseInsensitive_ = "compareContainsSubStringCaseInsensitive:";
			public static readonly Selector compareDescending_ = "compareDescending:";
			public static readonly Selector compareNotWithinIntervalFromToday_ = "compareNotWithinIntervalFromToday:";
			public static readonly Selector compareNotWithinIntervalFromTodayYearless_ = "compareNotWithinIntervalFromTodayYearless:";
			public static readonly Selector comparePrefixMatch_ = "comparePrefixMatch:";
			public static readonly Selector comparePrefixMatchCaseInsensitive_ = "comparePrefixMatchCaseInsensitive:";
			public static readonly Selector compareSuffixMatch_ = "compareSuffixMatch:";
			public static readonly Selector compareSuffixMatchCaseInsensitive_ = "compareSuffixMatchCaseInsensitive:";
			public static readonly Selector compareWithinIntervalFromToday_ = "compareWithinIntervalFromToday:";
			public static readonly Selector compareWithinIntervalFromTodayYearless_ = "compareWithinIntervalFromTodayYearless:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class AddressBookExtensionsOfNSData {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static NObjective.RuntimeObject abDecodeBase64( this NSData ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abDecodeBase64( ___this, CachedSelectors.abDecodeBase64, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abDecodedUTF7( this NSData ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abDecodedUTF7( ___this, CachedSelectors.abDecodedUTF7, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject abEncodeBase64DataBreakLines_allowSlash_padChar_( this NSData ___this, char lines, char allowSlash, char padChar ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abEncodeBase64DataBreakLines_allowSlash_padChar_( ___this, CachedSelectors.abEncodeBase64DataBreakLines_allowSlash_padChar_, out ___occuredException, sizeof( char ) + sizeof( char ) + sizeof( char ), lines, allowSlash, padChar );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static char abIsUTF16EntourageVCard( this NSData ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.abIsUTF16EntourageVCard( ___this, CachedSelectors.abIsUTF16EntourageVCard, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abDecodeBase64( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abDecodedUTF7( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr abEncodeBase64DataBreakLines_allowSlash_padChar_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char lines, char allowSlash, char padChar );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char abIsUTF16EntourageVCard( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector abDecodeBase64 = "abDecodeBase64";
			public static readonly Selector abDecodedUTF7 = "abDecodedUTF7";
			public static readonly Selector abEncodeBase64DataBreakLines_allowSlash_padChar_ = "abEncodeBase64DataBreakLines:allowSlash:padChar:";
			public static readonly Selector abIsUTF16EntourageVCard = "abIsUTF16EntourageVCard";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class AddressBookExtensionsOfDSoUser {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static NObjective.RuntimeObject getHomePath( this DSoUser ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getHomePath( ___this, CachedSelectors.getHomePath, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject getPassword( this DSoUser ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPassword( ___this, CachedSelectors.getPassword, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject getPicture( this DSoUser ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPicture( ___this, CachedSelectors.getPicture, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject getRealName( this DSoUser ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getRealName( ___this, CachedSelectors.getRealName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static bool isMobileHomeUser( this DSoUser ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isMobileHomeUser( ___this, CachedSelectors.isMobileHomeUser, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static bool isPortableUser( this DSoUser ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isPortableUser( ___this, CachedSelectors.isPortableUser, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getHomePath( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPassword( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getPicture( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr getRealName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isMobileHomeUser( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isPortableUser( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector getHomePath = "getHomePath";
			public static readonly Selector getPassword = "getPassword";
			public static readonly Selector getPicture = "getPicture";
			public static readonly Selector getRealName = "getRealName";
			public static readonly Selector isMobileHomeUser = "isMobileHomeUser";
			public static readonly Selector isPortableUser = "isPortableUser";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class AddressBookExtensionsOfNSMutableArray {
		private static int ___lazyLoad = AddressBookCachedClasses.___lazyLoad;
		unsafe public static void addUniqueObjectsFromArray_( this NSMutableArray ___this, NObjective.RuntimeObject array ) {
			RuntimeObject ___occuredException;
			NativeMethods.addUniqueObjectsFromArray_( ___this, CachedSelectors.addUniqueObjectsFromArray_, out ___occuredException, sizeof( NObjective.RuntimeObject ), array );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject pop( this NSMutableArray ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pop( ___this, CachedSelectors.pop, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void push_( this NSMutableArray ___this, NObjective.RuntimeObject push ) {
			RuntimeObject ___occuredException;
			NativeMethods.push_( ___this, CachedSelectors.push_, out ___occuredException, sizeof( NObjective.RuntimeObject ), push );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject top( this NSMutableArray ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.top( ___this, CachedSelectors.top, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addUniqueObjectsFromArray_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject array );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pop( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void push_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject push );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr top( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addUniqueObjectsFromArray_ = "addUniqueObjectsFromArray:";
			public static readonly Selector pop = "pop";
			public static readonly Selector push_ = "push:";
			public static readonly Selector top = "top";
		}
	}
	static internal class AddressBookCachedClasses {
		static internal int ___lazyLoad = Platform.NativeMethods.dlopen( "/System/Library/Frameworks/AddressBook.framework/AddressBook" );
		public static readonly RuntimeClass AB_AFCard = "AB_AFCard";
		public static readonly RuntimeClass AB_AFDataFile = "AB_AFDataFile";
		public static readonly RuntimeClass ABAccessibilityMockUIElement = "ABAccessibilityMockUIElement";
		public static readonly RuntimeClass ABACE = "ABACE";
		public static readonly RuntimeClass ABACL = "ABACL";
		public static readonly RuntimeClass ABAddressAttributedString = "ABAddressAttributedString";
		public static readonly RuntimeClass ABAddressBook = "ABAddressBook";
		public static readonly RuntimeClass ABAddToGroupCommand = "ABAddToGroupCommand";
		public static readonly RuntimeClass ABAllGroup = "ABAllGroup";
		public static readonly RuntimeClass ABAuthenticationInfo = "ABAuthenticationInfo";
		public static readonly RuntimeClass ABBackgroundImageButtonCell = "ABBackgroundImageButtonCell";
		public static readonly RuntimeClass ABBackupManager = "ABBackupManager";
		public static readonly RuntimeClass ABBackupScheduler = "ABBackupScheduler";
		public static readonly RuntimeClass ABBevellerView = "ABBevellerView";
		public static readonly RuntimeClass ABBuddyStatus = "ABBuddyStatus";
		public static readonly RuntimeClass ABButtonCell = "ABButtonCell";
		public static readonly RuntimeClass ABCardBackgroundView = "ABCardBackgroundView";
		public static readonly RuntimeClass ABCardItemRuler = "ABCardItemRuler";
		public static readonly RuntimeClass ABCardItemRulerAccessibilityElement = "ABCardItemRulerAccessibilityElement";
		public static readonly RuntimeClass ABCardViewerController = "ABCardViewerController";
		public static readonly RuntimeClass ABCardWindowController = "ABCardWindowController";
		public static readonly RuntimeClass ABCertController = "ABCertController";
		public static readonly RuntimeClass ABCertificateButtonCell = "ABCertificateButtonCell";
		public static readonly RuntimeClass ABChangePropertiesCommand = "ABChangePropertiesCommand";
		public static readonly RuntimeClass ABChangePropertyCommand = "ABChangePropertyCommand";
		public static readonly RuntimeClass ABCommand = "ABCommand";
		public static readonly RuntimeClass ABCompanyButtonCell = "ABCompanyButtonCell";
		public static readonly RuntimeClass ABConverter = "ABConverter";
		public static readonly RuntimeClass ABCustomLabelEditor = "ABCustomLabelEditor";
		public static readonly RuntimeClass ABDataType = "ABDataType";
		public static readonly RuntimeClass ABDAVManager = "ABDAVManager";
		public static readonly RuntimeClass ABDAVQuery = "ABDAVQuery";
		public static readonly RuntimeClass ABDBCache = "ABDBCache";
		public static readonly RuntimeClass ABDeleteGroupsCommand = "ABDeleteGroupsCommand";
		public static readonly RuntimeClass ABDeleteRecordsCommand = "ABDeleteRecordsCommand";
		public static readonly RuntimeClass ABDirectoriesController = "ABDirectoriesController";
		public static readonly RuntimeClass ABDirectoriesGroup = "ABDirectoriesGroup";
		public static readonly RuntimeClass ABDirectoryResultsController = "ABDirectoryResultsController";
		public static readonly RuntimeClass ABDragAnimationView = "ABDragAnimationView";
		public static readonly RuntimeClass ABDragAnimationWindow = "ABDragAnimationWindow";
		public static readonly RuntimeClass ABEditSmartGroupCommand = "ABEditSmartGroupCommand";
		public static readonly RuntimeClass ABEditSwitch = "ABEditSwitch";
		public static readonly RuntimeClass ABEmbossedText = "ABEmbossedText";
		public static readonly RuntimeClass ABExampleTextField = "ABExampleTextField";
		public static readonly RuntimeClass ABExchangeSetup = "ABExchangeSetup";
		public static readonly RuntimeClass ABFancyImagePickerController = "ABFancyImagePickerController";
		public static readonly RuntimeClass ABFancyImagePickerView = "ABFancyImagePickerView";
		public static readonly RuntimeClass ABFileManager = "ABFileManager";
		public static readonly RuntimeClass ABFlareScrollView = "ABFlareScrollView";
		public static readonly RuntimeClass ABFZServiceClient = "ABFZServiceClient";
		public static readonly RuntimeClass ABGroup = "ABGroup";
		public static readonly RuntimeClass ABGroupCommand = "ABGroupCommand";
		public static readonly RuntimeClass ABGroupContents = "ABGroupContents";
		public static readonly RuntimeClass ABGroupsController = "ABGroupsController";
		public static readonly RuntimeClass ABImageCell = "ABImageCell";
		public static readonly RuntimeClass ABImportCommand = "ABImportCommand";
		public static readonly RuntimeClass ABImportPanelController = "ABImportPanelController";
		public static readonly RuntimeClass ABIndexer = "ABIndexer";
		public static readonly RuntimeClass ABInfo = "ABInfo";
		public static readonly RuntimeClass ABInputController = "ABInputController";
		public static readonly RuntimeClass ABInputModel = "ABInputModel";
		public static readonly RuntimeClass ABInstantPopUpButtonCell = "ABInstantPopUpButtonCell";
		public static readonly RuntimeClass ABKeyValueCell = "ABKeyValueCell";
		public static readonly RuntimeClass ABLabelPopUpButtonCell = "ABLabelPopUpButtonCell";
		public static readonly RuntimeClass ABLastImportGroup = "ABLastImportGroup";
		public static readonly RuntimeClass ABLayoutManager = "ABLayoutManager";
		public static readonly RuntimeClass ABLDAP_ConfigController = "ABLDAP_ConfigController";
		public static readonly RuntimeClass ABLDAP_Manager = "ABLDAP_Manager";
		public static readonly RuntimeClass ABLDAP_Query = "ABLDAP_Query";
		public static readonly RuntimeClass ABLDAP_Query_DS = "ABLDAP_Query_DS";
		public static readonly RuntimeClass ABLDAP_ResultElement = "ABLDAP_ResultElement";
		public static readonly RuntimeClass ABLDAP_Server = "ABLDAP_Server";
		public static readonly RuntimeClass ABLocalImageDataCache = "ABLocalImageDataCache";
		public static readonly RuntimeClass ABLog = "ABLog";
		public static readonly RuntimeClass ABMailRecent = "ABMailRecent";
		public static readonly RuntimeClass ABMatrix = "ABMatrix";
		public static readonly RuntimeClass ABMeCommand = "ABMeCommand";
		public static readonly RuntimeClass ABMembersController = "ABMembersController";
		public static readonly RuntimeClass ABMergePeopleCommand = "ABMergePeopleCommand";
		public static readonly RuntimeClass ABMerger = "ABMerger";
		public static readonly RuntimeClass ABMessage = "ABMessage";
		public static readonly RuntimeClass ABMessageView = "ABMessageView";
		public static readonly RuntimeClass ABMetaDataController = "ABMetaDataController";
		public static readonly RuntimeClass ABModel = "ABModel";
		public static readonly RuntimeClass ABMultiValue = "ABMultiValue";
		public static readonly RuntimeClass ABMutableMultiValue = "ABMutableMultiValue";
		public static readonly RuntimeClass ABMutablePackedImage = "ABMutablePackedImage";
		public static readonly RuntimeClass ABNetworkController = "ABNetworkController";
		public static readonly RuntimeClass ABNewGroupCommand = "ABNewGroupCommand";
		public static readonly RuntimeClass ABNewPersonCommand = "ABNewPersonCommand";
		public static readonly RuntimeClass ABNewSmartGroupCommand = "ABNewSmartGroupCommand";
		public static readonly RuntimeClass ABOnMyMacGroup = "ABOnMyMacGroup";
		public static readonly RuntimeClass ABOutlineView = "ABOutlineView";
		public static readonly RuntimeClass ABPackedImage = "ABPackedImage";
		public static readonly RuntimeClass ABPasteGroupsCommand = "ABPasteGroupsCommand";
		public static readonly RuntimeClass ABPastePeopleCommand = "ABPastePeopleCommand";
		public static readonly RuntimeClass ABPeopleController = "ABPeopleController";
		public static readonly RuntimeClass ABPeoplePickerController = "ABPeoplePickerController";
		public static readonly RuntimeClass ABPeoplePickerNibLoader = "ABPeoplePickerNibLoader";
		public static readonly RuntimeClass ABPeoplePickerView = "ABPeoplePickerView";
		public static readonly RuntimeClass ABPeopleTableTextFieldCell = "ABPeopleTableTextFieldCell";
		public static readonly RuntimeClass ABPerson = "ABPerson";
		public static readonly RuntimeClass ABPersonImageView = "ABPersonImageView";
		public static readonly RuntimeClass ABPhoneFormatter = "ABPhoneFormatter";
		public static readonly RuntimeClass ABPopUpButtonCell = "ABPopUpButtonCell";
		public static readonly RuntimeClass ABProgressWedgeCell = "ABProgressWedgeCell";
		public static readonly RuntimeClass ABPropertyHeaderCell = "ABPropertyHeaderCell";
		public static readonly RuntimeClass ABPropertyHeaderView = "ABPropertyHeaderView";
		public static readonly RuntimeClass ABPropertyTableColumn = "ABPropertyTableColumn";
		public static readonly RuntimeClass ABRadioButtonCell = "ABRadioButtonCell";
		public static readonly RuntimeClass ABRecord = "ABRecord";
		public static readonly RuntimeClass ABRectObject = "ABRectObject";
		public static readonly RuntimeClass ABRemoteImageLoader = "ABRemoteImageLoader";
		public static readonly RuntimeClass ABRemoveFromGroupCommand = "ABRemoveFromGroupCommand";
		public static readonly RuntimeClass ABRenameGroupCommand = "ABRenameGroupCommand";
		public static readonly RuntimeClass ABRollOver = "ABRollOver";
		public static readonly RuntimeClass ABScrollView = "ABScrollView";
		public static readonly RuntimeClass ABSearchController = "ABSearchController";
		public static readonly RuntimeClass ABSearchElement = "ABSearchElement";
		public static readonly RuntimeClass ABSearchElementConjunction = "ABSearchElementConjunction";
		public static readonly RuntimeClass ABSearchElementHelper = "ABSearchElementHelper";
		public static readonly RuntimeClass ABSearchElementMatch = "ABSearchElementMatch";
		public static readonly RuntimeClass ABSearchElementOrderManager = "ABSearchElementOrderManager";
		public static readonly RuntimeClass ABSearchElementSetView = "ABSearchElementSetView";
		public static readonly RuntimeClass ABSearchElementUIController = "ABSearchElementUIController";
		public static readonly RuntimeClass ABSearchElementView = "ABSearchElementView";
		public static readonly RuntimeClass ABSearchField = "ABSearchField";
		public static readonly RuntimeClass ABSearchFieldCell = "ABSearchFieldCell";
		public static readonly RuntimeClass ABSeparatedButtons = "ABSeparatedButtons";
		public static readonly RuntimeClass ABSeparatedButtonsAccessibilityElement = "ABSeparatedButtonsAccessibilityElement";
		public static readonly RuntimeClass ABSeparatedButtonsCell = "ABSeparatedButtonsCell";
		public static readonly RuntimeClass ABSeparatorLineCell = "ABSeparatorLineCell";
		public static readonly RuntimeClass ABSetImageCommand = "ABSetImageCommand";
		public static readonly RuntimeClass ABShowAsCommand = "ABShowAsCommand";
		public static readonly RuntimeClass ABSimpleImportController = "ABSimpleImportController";
		public static readonly RuntimeClass ABSingleColorView = "ABSingleColorView";
		public static readonly RuntimeClass ABSmartGroup = "ABSmartGroup";
		public static readonly RuntimeClass ABSpaceFormatter = "ABSpaceFormatter";
		public static readonly RuntimeClass ABSplitView = "ABSplitView";
		public static readonly RuntimeClass ABSubrowGroupElement = "ABSubrowGroupElement";
		public static readonly RuntimeClass ABSubrowObject = "ABSubrowObject";
		public static readonly RuntimeClass ABSubscribedGroup = "ABSubscribedGroup";
		public static readonly RuntimeClass ABSubscribedPerson = "ABSubscribedPerson";
		public static readonly RuntimeClass ABSubscription = "ABSubscription";
		public static readonly RuntimeClass ABSwapLastFirstCommand = "ABSwapLastFirstCommand";
		public static readonly RuntimeClass ABSyncManager = "ABSyncManager";
		public static readonly RuntimeClass ABTableController = "ABTableController";
		public static readonly RuntimeClass ABTableRow = "ABTableRow";
		public static readonly RuntimeClass ABTableView = "ABTableView";
		public static readonly RuntimeClass ABTextContainer = "ABTextContainer";
		public static readonly RuntimeClass ABTextFieldCell = "ABTextFieldCell";
		public static readonly RuntimeClass ABTextLabelAccessibilityElement = "ABTextLabelAccessibilityElement";
		public static readonly RuntimeClass ABTextStorage = "ABTextStorage";
		public static readonly RuntimeClass ABTextValueAccessibilityElement = "ABTextValueAccessibilityElement";
		public static readonly RuntimeClass ABTextView = "ABTextView";
		public static readonly RuntimeClass ABTypesetter = "ABTypesetter";
		public static readonly RuntimeClass ABUIController = "ABUIController";
		public static readonly RuntimeClass ABUndoer = "ABUndoer";
		public static readonly RuntimeClass ABUndoManager = "ABUndoManager";
		public static readonly RuntimeClass ABvCardController = "ABvCardController";
		public static readonly RuntimeClass ABVCardDictionaryValueSetter = "ABVCardDictionaryValueSetter";
		public static readonly RuntimeClass ABVCardLexer = "ABVCardLexer";
		public static readonly RuntimeClass ABVCardParameter = "ABVCardParameter";
		public static readonly RuntimeClass ABVCardParser = "ABVCardParser";
		public static readonly RuntimeClass ABVCardPersonValueSetter = "ABVCardPersonValueSetter";
		public static readonly RuntimeClass ABVCardValueSetter = "ABVCardValueSetter";
		public static readonly RuntimeClass ABWebDAVLock = "ABWebDAVLock";
		public static readonly RuntimeClass ABWindow = "ABWindow";
		public static readonly RuntimeClass ABXMLParseNode = "ABXMLParseNode";
		public static readonly RuntimeClass FZDaemonListenerStub = "FZDaemonListenerStub";
		public static readonly RuntimeClass NSImagePickerController = "NSImagePickerController";
		public static readonly RuntimeClass NSIPIconPopUp = "NSIPIconPopUp";
		public static readonly RuntimeClass NSIPPopUpItemMatrix = "NSIPPopUpItemMatrix";
		public static readonly RuntimeClass NSIPPopUpMatrixButton = "NSIPPopUpMatrixButton";
		public static readonly RuntimeClass NSIPPopUpMatrixItemCell = "NSIPPopUpMatrixItemCell";
		public static readonly RuntimeClass NSIPRecentPicture = "NSIPRecentPicture";
		public static readonly RuntimeClass NSIPRecentPicturesPopUpButton = "NSIPRecentPicturesPopUpButton";
		public static readonly RuntimeClass NSWindow = "NSWindow";
		public static readonly RuntimeClass NSMutableData = "NSMutableData";
		public static readonly RuntimeClass NSString = "NSString";
		public static readonly RuntimeClass NSImage = "NSImage";
		public static readonly RuntimeClass NSDictionary = "NSDictionary";
		public static readonly RuntimeClass DSoNode = "DSoNode";
		public static readonly RuntimeClass NSColor = "NSColor";
		public static readonly RuntimeClass NSFileManager = "NSFileManager";
		public static readonly RuntimeClass NSURL = "NSURL";
		public static readonly RuntimeClass NSObject = "NSObject";
		public static readonly RuntimeClass NSURL__ = "NSURL__";
		public static readonly RuntimeClass NSArray = "NSArray";
		public static readonly RuntimeClass NSCalendarDate = "NSCalendarDate";
		public static readonly RuntimeClass NSDate = "NSDate";
		public static readonly RuntimeClass NSNull = "NSNull";
		public static readonly RuntimeClass NSData = "NSData";
		public static readonly RuntimeClass DSoUser = "DSoUser";
		public static readonly RuntimeClass NSMutableArray = "NSMutableArray";
	}
}
