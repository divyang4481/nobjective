//
// Copyright (C) 2009 Eugeny Grishul
//
// See license in License.txt
//

namespace NObjective.Proxies {
	using System;
	using System.Runtime.InteropServices;
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct _WebCoreHistoryProvider : IEquatable<_WebCoreHistoryProvider> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses._WebCoreHistoryProvider;
		public static implicit operator IntPtr( _WebCoreHistoryProvider value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _WebCoreHistoryProvider value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _WebCoreHistoryProvider?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _WebCoreHistoryProvider value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _WebCoreHistoryProvider value1, _WebCoreHistoryProvider value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _WebCoreHistoryProvider value1, _WebCoreHistoryProvider value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _WebCoreHistoryProvider( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _WebCoreHistoryProvider alloc() {
			return new _WebCoreHistoryProvider( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char containsURL_length_( System.IntPtr url, uint length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.containsURL_length_( Handle, CachedSelectors.containsURL_length_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ), url, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject initWithHistory_( NObjective.RuntimeObject history ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithHistory_( Handle, CachedSelectors.initWithHistory_, out ___occuredException, sizeof( NObjective.RuntimeObject ), history );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char containsURL_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr url, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithHistory_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject history );
		}
		static internal class CachedSelectors {
			public static readonly Selector containsURL_length_ = "containsURL:length:";
			public static readonly Selector initWithHistory_ = "initWithHistory:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct _WebSafeForwarder : IEquatable<_WebSafeForwarder> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses._WebSafeForwarder;
		public static implicit operator IntPtr( _WebSafeForwarder value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( _WebSafeForwarder value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as _WebSafeForwarder?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( _WebSafeForwarder value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( _WebSafeForwarder value1, _WebSafeForwarder value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( _WebSafeForwarder value1, _WebSafeForwarder value2 ) {
			return value1.Handle != value2.Handle;
		}
		public _WebSafeForwarder( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static _WebSafeForwarder alloc() {
			return new _WebSafeForwarder( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithTarget_defaultTarget_catchExceptions_( NObjective.RuntimeObject target, NObjective.RuntimeObject defaultTarget, char catchExceptions ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithTarget_defaultTarget_catchExceptions_( Handle, CachedSelectors.initWithTarget_defaultTarget_catchExceptions_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), target, defaultTarget, catchExceptions );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithTarget_defaultTarget_catchExceptions_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target, NObjective.RuntimeObject defaultTarget, char catchExceptions );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithTarget_defaultTarget_catchExceptions_ = "initWithTarget:defaultTarget:catchExceptions:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSWindow ) )]
	public struct CarbonWindowAdapter : IEquatable<CarbonWindowAdapter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.CarbonWindowAdapter;
		public static implicit operator IntPtr( CarbonWindowAdapter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( CarbonWindowAdapter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as CarbonWindowAdapter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( CarbonWindowAdapter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( CarbonWindowAdapter value1, CarbonWindowAdapter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( CarbonWindowAdapter value1, CarbonWindowAdapter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public CarbonWindowAdapter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static CarbonWindowAdapter alloc() {
			return new CarbonWindowAdapter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public uint carbonHICommandIDFromActionSelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.carbonHICommandIDFromActionSelector_( Handle, CachedSelectors.carbonHICommandIDFromActionSelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public char reconcileToCarbonWindowBounds() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.reconcileToCarbonWindowBounds( Handle, CachedSelectors.reconcileToCarbonWindowBounds, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void relinquishFocus() {
			RuntimeObject ___occuredException;
			NativeMethods.relinquishFocus( Handle, CachedSelectors.relinquishFocus, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void sendCarbonProcessHICommandEvent_( uint @event ) {
			RuntimeObject ___occuredException;
			NativeMethods.sendCarbonProcessHICommandEvent_( Handle, CachedSelectors.sendCarbonProcessHICommandEvent_, out ___occuredException, sizeof( uint ), @event );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void sendSuperEvent_( NObjective.RuntimeObject @event ) {
			RuntimeObject ___occuredException;
			NativeMethods.sendSuperEvent_( Handle, CachedSelectors.sendSuperEvent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @event );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint carbonHICommandIDFromActionSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char reconcileToCarbonWindowBounds( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void relinquishFocus( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void sendCarbonProcessHICommandEvent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint @event );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void sendSuperEvent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @event );
		}
		static internal class CachedSelectors {
			public static readonly Selector carbonHICommandIDFromActionSelector_ = "carbonHICommandIDFromActionSelector:";
			public static readonly Selector reconcileToCarbonWindowBounds = "reconcileToCarbonWindowBounds";
			public static readonly Selector relinquishFocus = "relinquishFocus";
			public static readonly Selector sendCarbonProcessHICommandEvent_ = "sendCarbonProcessHICommandEvent:";
			public static readonly Selector sendSuperEvent_ = "sendSuperEvent:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSView ) )]
	public struct CarbonWindowContentView : IEquatable<CarbonWindowContentView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.CarbonWindowContentView;
		public static implicit operator IntPtr( CarbonWindowContentView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( CarbonWindowContentView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as CarbonWindowContentView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( CarbonWindowContentView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( CarbonWindowContentView value1, CarbonWindowContentView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( CarbonWindowContentView value1, CarbonWindowContentView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public CarbonWindowContentView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static CarbonWindowContentView alloc() {
			return new CarbonWindowContentView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSView ) )]
	public struct CarbonWindowFrame : IEquatable<CarbonWindowFrame> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.CarbonWindowFrame;
		public static implicit operator IntPtr( CarbonWindowFrame value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( CarbonWindowFrame value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as CarbonWindowFrame?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( CarbonWindowFrame value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( CarbonWindowFrame value1, CarbonWindowFrame value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( CarbonWindowFrame value1, CarbonWindowFrame value2 ) {
			return value1.Handle != value2.Handle;
		}
		public CarbonWindowFrame( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static CarbonWindowFrame alloc() {
			return new CarbonWindowFrame( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject closeButton() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.closeButton( Handle, CachedSelectors.closeButton, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject minimizeButton() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.minimizeButton( Handle, CachedSelectors.minimizeButton, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setTitle_( NObjective.RuntimeObject title ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTitle_( Handle, CachedSelectors.setTitle_, out ___occuredException, sizeof( NObjective.RuntimeObject ), title );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint styleMask() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.styleMask( Handle, CachedSelectors.styleMask, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public NObjective.RuntimeObject title() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.title( Handle, CachedSelectors.title, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr closeButton( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr minimizeButton( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTitle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject title );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint styleMask( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr title( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector closeButton = "closeButton";
			public static readonly Selector minimizeButton = "minimizeButton";
			public static readonly Selector setTitle_ = "setTitle:";
			public static readonly Selector styleMask = "styleMask";
			public static readonly Selector title = "title";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct HIViewAdapter : IEquatable<HIViewAdapter> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.HIViewAdapter;
		public static implicit operator IntPtr( HIViewAdapter value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( HIViewAdapter value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as HIViewAdapter?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( HIViewAdapter value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( HIViewAdapter value1, HIViewAdapter value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( HIViewAdapter value1, HIViewAdapter value2 ) {
			return value1.Handle != value2.Handle;
		}
		public HIViewAdapter( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static HIViewAdapter alloc() {
			return new HIViewAdapter( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void unbindNSView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			NativeMethods.unbindNSView_( ClassHandle, CachedSelectors.unbindNSView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unbindNSView_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
		}
		static internal class CachedSelectors {
			public static readonly Selector unbindNSView_ = "unbindNSView:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct MenuItemProxy : IEquatable<MenuItemProxy> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.MenuItemProxy;
		public static implicit operator IntPtr( MenuItemProxy value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( MenuItemProxy value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as MenuItemProxy?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( MenuItemProxy value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( MenuItemProxy value1, MenuItemProxy value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( MenuItemProxy value1, MenuItemProxy value2 ) {
			return value1.Handle != value2.Handle;
		}
		public MenuItemProxy( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static MenuItemProxy alloc() {
			return new MenuItemProxy( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.Selector action() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.action( Handle, CachedSelectors.action, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject initWithAction_( NObjective.Selector action ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithAction_( Handle, CachedSelectors.initWithAction_, out ___occuredException, sizeof( NObjective.Selector ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int tag() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tag( Handle, CachedSelectors.tag, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.Selector action( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector action );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int tag( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector action = "action";
			public static readonly Selector initWithAction_ = "initWithAction:";
			public static readonly Selector tag = "tag";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSPanel ) )]
	public struct NonBlockingPanel : IEquatable<NonBlockingPanel> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.NonBlockingPanel;
		public static implicit operator IntPtr( NonBlockingPanel value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( NonBlockingPanel value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as NonBlockingPanel?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( NonBlockingPanel value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( NonBlockingPanel value1, NonBlockingPanel value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( NonBlockingPanel value1, NonBlockingPanel value2 ) {
			return value1.Handle != value2.Handle;
		}
		public NonBlockingPanel( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static NonBlockingPanel alloc() {
			return new NonBlockingPanel( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSProxy ) )]
	public struct PDFPrefUpdatingProxy : IEquatable<PDFPrefUpdatingProxy> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.PDFPrefUpdatingProxy;
		public static implicit operator IntPtr( PDFPrefUpdatingProxy value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( PDFPrefUpdatingProxy value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as PDFPrefUpdatingProxy?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( PDFPrefUpdatingProxy value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( PDFPrefUpdatingProxy value1, PDFPrefUpdatingProxy value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( PDFPrefUpdatingProxy value1, PDFPrefUpdatingProxy value2 ) {
			return value1.Handle != value2.Handle;
		}
		public PDFPrefUpdatingProxy( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static PDFPrefUpdatingProxy alloc() {
			return new PDFPrefUpdatingProxy( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithView_( Handle, CachedSelectors.initWithView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithView_ = "initWithView:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct ThreadEnabler : IEquatable<ThreadEnabler> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.ThreadEnabler;
		public static implicit operator IntPtr( ThreadEnabler value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( ThreadEnabler value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as ThreadEnabler?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( ThreadEnabler value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( ThreadEnabler value1, ThreadEnabler value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( ThreadEnabler value1, ThreadEnabler value2 ) {
			return value1.Handle != value2.Handle;
		}
		public ThreadEnabler( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static ThreadEnabler alloc() {
			return new ThreadEnabler( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void enableThreading() {
			RuntimeObject ___occuredException;
			NativeMethods.enableThreading( ClassHandle, CachedSelectors.enableThreading, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void threadEnablingSelector_( NObjective.RuntimeObject selector ) {
			RuntimeObject ___occuredException;
			NativeMethods.threadEnablingSelector_( Handle, CachedSelectors.threadEnablingSelector_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void enableThreading( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void threadEnablingSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selector );
		}
		static internal class CachedSelectors {
			public static readonly Selector enableThreading = "enableThreading";
			public static readonly Selector threadEnablingSelector_ = "threadEnablingSelector:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebArchive : IEquatable<WebArchive> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebArchive;
		public static implicit operator IntPtr( WebArchive value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebArchive value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebArchive?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebArchive value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebArchive value1, WebArchive value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebArchive value1, WebArchive value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebArchive( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebArchive alloc() {
			return new WebArchive( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSData data() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.data( Handle, CachedSelectors.data, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithData_( NSData data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithData_( Handle, CachedSelectors.initWithData_, out ___occuredException, sizeof( NSData ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithMainResource_subresources_subframeArchives_( WebResource resource, NSArray subresources, NSArray subframeArchives ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithMainResource_subresources_subframeArchives_( Handle, CachedSelectors.initWithMainResource_subresources_subframeArchives_, out ___occuredException, sizeof( WebResource ) + sizeof( NSArray ) + sizeof( NSArray ), resource, subresources, subframeArchives );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public WebResource mainResource() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mainResource( Handle, CachedSelectors.mainResource, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebResource( ___result );
		}
		unsafe public NSArray subframeArchives() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subframeArchives( Handle, CachedSelectors.subframeArchives, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSArray subresources() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subresources( Handle, CachedSelectors.subresources, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr data( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithMainResource_subresources_subframeArchives_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, WebResource resource, NSArray subresources, NSArray subframeArchives );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mainResource( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr subframeArchives( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr subresources( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector data = "data";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithData_ = "initWithData:";
			public static readonly Selector initWithMainResource_subresources_subframeArchives_ = "initWithMainResource:subresources:subframeArchives:";
			public static readonly Selector mainResource = "mainResource";
			public static readonly Selector subframeArchives = "subframeArchives";
			public static readonly Selector subresources = "subresources";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebArchivePrivate : IEquatable<WebArchivePrivate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebArchivePrivate;
		public static implicit operator IntPtr( WebArchivePrivate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebArchivePrivate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebArchivePrivate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebArchivePrivate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebArchivePrivate value1, WebArchivePrivate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebArchivePrivate value1, WebArchivePrivate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebArchivePrivate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebArchivePrivate alloc() {
			return new WebArchivePrivate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebArchiver : IEquatable<WebArchiver> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebArchiver;
		public static implicit operator IntPtr( WebArchiver value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebArchiver value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebArchiver?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebArchiver value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebArchiver value1, WebArchiver value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebArchiver value1, WebArchiver value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebArchiver( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebArchiver alloc() {
			return new WebArchiver( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject archiveFrame_( NObjective.RuntimeObject frame ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.archiveFrame_( ClassHandle, CachedSelectors.archiveFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ), frame );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject archiveMainResourceForFrame_( NObjective.RuntimeObject frame ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.archiveMainResourceForFrame_( ClassHandle, CachedSelectors.archiveMainResourceForFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ), frame );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject archiveNode_( NObjective.RuntimeObject node ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.archiveNode_( ClassHandle, CachedSelectors.archiveNode_, out ___occuredException, sizeof( NObjective.RuntimeObject ), node );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject archiveRange_( NObjective.RuntimeObject range ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.archiveRange_( ClassHandle, CachedSelectors.archiveRange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject archiveSelectionInFrame_( NObjective.RuntimeObject frame ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.archiveSelectionInFrame_( ClassHandle, CachedSelectors.archiveSelectionInFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ), frame );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr archiveFrame_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject frame );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr archiveMainResourceForFrame_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject frame );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr archiveNode_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject node );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr archiveRange_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr archiveSelectionInFrame_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject frame );
		}
		static internal class CachedSelectors {
			public static readonly Selector archiveFrame_ = "archiveFrame:";
			public static readonly Selector archiveMainResourceForFrame_ = "archiveMainResourceForFrame:";
			public static readonly Selector archiveNode_ = "archiveNode:";
			public static readonly Selector archiveRange_ = "archiveRange:";
			public static readonly Selector archiveSelectionInFrame_ = "archiveSelectionInFrame:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebAuthenticationPanel : IEquatable<WebAuthenticationPanel> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebAuthenticationPanel;
		public static implicit operator IntPtr( WebAuthenticationPanel value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebAuthenticationPanel value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebAuthenticationPanel?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebAuthenticationPanel value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebAuthenticationPanel value1, WebAuthenticationPanel value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebAuthenticationPanel value1, WebAuthenticationPanel value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebAuthenticationPanel( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebAuthenticationPanel alloc() {
			return new WebAuthenticationPanel( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void cancel_( NObjective.RuntimeObject cancel ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancel_( Handle, CachedSelectors.cancel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cancel );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithCallback_selector_( NObjective.RuntimeObject callback, NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCallback_selector_( Handle, CachedSelectors.initWithCallback_selector_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ), callback, selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char loadNib() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.loadNib( Handle, CachedSelectors.loadNib, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void logIn_( NObjective.RuntimeObject @in ) {
			RuntimeObject ___occuredException;
			NativeMethods.logIn_( Handle, CachedSelectors.logIn_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @in );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void runAsModalDialogWithChallenge_( NObjective.RuntimeObject challenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.runAsModalDialogWithChallenge_( Handle, CachedSelectors.runAsModalDialogWithChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ), challenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void runAsSheetOnWindow_withChallenge_( NObjective.RuntimeObject window, NObjective.RuntimeObject withChallenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.runAsSheetOnWindow_withChallenge_( Handle, CachedSelectors.runAsSheetOnWindow_withChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), window, withChallenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUpForChallenge_( NObjective.RuntimeObject challenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUpForChallenge_( Handle, CachedSelectors.setUpForChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ), challenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void sheetDidEnd_returnCode_contextInfo_( NObjective.RuntimeObject end, int returnCode, System.IntPtr contextInfo ) {
			RuntimeObject ___occuredException;
			NativeMethods.sheetDidEnd_returnCode_contextInfo_( Handle, CachedSelectors.sheetDidEnd_returnCode_contextInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( System.IntPtr ), end, returnCode, contextInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cancel );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCallback_selector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject callback, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char loadNib( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void logIn_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @in );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void runAsModalDialogWithChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject challenge );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void runAsSheetOnWindow_withChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject window, NObjective.RuntimeObject withChallenge );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUpForChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject challenge );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void sheetDidEnd_returnCode_contextInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject end, int returnCode, System.IntPtr contextInfo );
		}
		static internal class CachedSelectors {
			public static readonly Selector cancel_ = "cancel:";
			public static readonly Selector initWithCallback_selector_ = "initWithCallback:selector:";
			public static readonly Selector loadNib = "loadNib";
			public static readonly Selector logIn_ = "logIn:";
			public static readonly Selector runAsModalDialogWithChallenge_ = "runAsModalDialogWithChallenge:";
			public static readonly Selector runAsSheetOnWindow_withChallenge_ = "runAsSheetOnWindow:withChallenge:";
			public static readonly Selector setUpForChallenge_ = "setUpForChallenge:";
			public static readonly Selector sheetDidEnd_returnCode_contextInfo_ = "sheetDidEnd:returnCode:contextInfo:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebBackForwardList : IEquatable<WebBackForwardList> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebBackForwardList;
		public static implicit operator IntPtr( WebBackForwardList value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebBackForwardList value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebBackForwardList?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebBackForwardList value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebBackForwardList value1, WebBackForwardList value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebBackForwardList value1, WebBackForwardList value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebBackForwardList( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebBackForwardList alloc() {
			return new WebBackForwardList( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addItem_( WebHistoryItem item ) {
			RuntimeObject ___occuredException;
			NativeMethods.addItem_( Handle, CachedSelectors.addItem_, out ___occuredException, sizeof( WebHistoryItem ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public WebHistoryItem backItem() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backItem( Handle, CachedSelectors.backItem, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebHistoryItem( ___result );
		}
		unsafe public int backListCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backListCount( Handle, CachedSelectors.backListCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSArray backListWithLimit_( int limit ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backListWithLimit_( Handle, CachedSelectors.backListWithLimit_, out ___occuredException, sizeof( int ), limit );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public int capacity() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.capacity( Handle, CachedSelectors.capacity, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool containsItem_( WebHistoryItem item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.containsItem_( Handle, CachedSelectors.containsItem_, out ___occuredException, sizeof( WebHistoryItem ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public WebHistoryItem currentItem() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentItem( Handle, CachedSelectors.currentItem, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebHistoryItem( ___result );
		}
		unsafe public WebHistoryItem forwardItem() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.forwardItem( Handle, CachedSelectors.forwardItem, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebHistoryItem( ___result );
		}
		unsafe public int forwardListCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.forwardListCount( Handle, CachedSelectors.forwardListCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSArray forwardListWithLimit_( int limit ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.forwardListWithLimit_( Handle, CachedSelectors.forwardListWithLimit_, out ___occuredException, sizeof( int ), limit );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public void goBack() {
			RuntimeObject ___occuredException;
			NativeMethods.goBack( Handle, CachedSelectors.goBack, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void goForward() {
			RuntimeObject ___occuredException;
			NativeMethods.goForward( Handle, CachedSelectors.goForward, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void goToItem_( WebHistoryItem item ) {
			RuntimeObject ___occuredException;
			NativeMethods.goToItem_( Handle, CachedSelectors.goToItem_, out ___occuredException, sizeof( WebHistoryItem ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public WebHistoryItem itemAtIndex_( int index ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.itemAtIndex_( Handle, CachedSelectors.itemAtIndex_, out ___occuredException, sizeof( int ), index );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebHistoryItem( ___result );
		}
		unsafe public uint pageCacheSize() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pageCacheSize( Handle, CachedSelectors.pageCacheSize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public void removeItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeItem_( Handle, CachedSelectors.removeItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCapacity_( int capacity ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCapacity_( Handle, CachedSelectors.setCapacity_, out ___occuredException, sizeof( int ), capacity );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPageCacheSize_( uint size ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPageCacheSize_( Handle, CachedSelectors.setPageCacheSize_, out ___occuredException, sizeof( uint ), size );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, WebHistoryItem item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr backItem( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int backListCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr backListWithLimit_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int limit );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int capacity( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool containsItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, WebHistoryItem item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currentItem( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr forwardItem( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int forwardListCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr forwardListWithLimit_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int limit );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void goBack( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void goForward( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void goToItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, WebHistoryItem item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr itemAtIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int index );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint pageCacheSize( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCapacity_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int capacity );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPageCacheSize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, uint size );
		}
		static internal class CachedSelectors {
			public static readonly Selector addItem_ = "addItem:";
			public static readonly Selector backItem = "backItem";
			public static readonly Selector backListCount = "backListCount";
			public static readonly Selector backListWithLimit_ = "backListWithLimit:";
			public static readonly Selector capacity = "capacity";
			public static readonly Selector containsItem_ = "containsItem:";
			public static readonly Selector currentItem = "currentItem";
			public static readonly Selector forwardItem = "forwardItem";
			public static readonly Selector forwardListCount = "forwardListCount";
			public static readonly Selector forwardListWithLimit_ = "forwardListWithLimit:";
			public static readonly Selector goBack = "goBack";
			public static readonly Selector goForward = "goForward";
			public static readonly Selector goToItem_ = "goToItem:";
			public static readonly Selector initialize = "initialize";
			public static readonly Selector itemAtIndex_ = "itemAtIndex:";
			public static readonly Selector pageCacheSize = "pageCacheSize";
			public static readonly Selector removeItem_ = "removeItem:";
			public static readonly Selector setCapacity_ = "setCapacity:";
			public static readonly Selector setPageCacheSize_ = "setPageCacheSize:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebBaseNetscapePluginStream : IEquatable<WebBaseNetscapePluginStream> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebBaseNetscapePluginStream;
		public static implicit operator IntPtr( WebBaseNetscapePluginStream value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebBaseNetscapePluginStream value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebBaseNetscapePluginStream?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebBaseNetscapePluginStream value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebBaseNetscapePluginStream value1, WebBaseNetscapePluginStream value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebBaseNetscapePluginStream value1, WebBaseNetscapePluginStream value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebBaseNetscapePluginStream( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebBaseNetscapePluginStream alloc() {
			return new WebBaseNetscapePluginStream( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static short reasonForError_( NObjective.RuntimeObject error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.reasonForError_( ClassHandle, CachedSelectors.reasonForError_, out ___occuredException, sizeof( NObjective.RuntimeObject ), error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void cancelLoadAndDestroyStreamWithError_( NObjective.RuntimeObject error ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancelLoadAndDestroyStreamWithError_( Handle, CachedSelectors.cancelLoadAndDestroyStreamWithError_, out ___occuredException, sizeof( NObjective.RuntimeObject ), error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void cancelLoadWithError_( NObjective.RuntimeObject error ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancelLoadWithError_( Handle, CachedSelectors.cancelLoadWithError_, out ___occuredException, sizeof( NObjective.RuntimeObject ), error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void destroyStreamWithError_( NObjective.RuntimeObject error ) {
			RuntimeObject ___occuredException;
			NativeMethods.destroyStreamWithError_( Handle, CachedSelectors.destroyStreamWithError_, out ___occuredException, sizeof( NObjective.RuntimeObject ), error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject errorForReason_( short reason ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.errorForReason_( Handle, CachedSelectors.errorForReason_, out ___occuredException, sizeof( short ), reason );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void finishedLoading() {
			RuntimeObject ___occuredException;
			NativeMethods.finishedLoading( Handle, CachedSelectors.finishedLoading, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void receivedData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			NativeMethods.receivedData_( Handle, CachedSelectors.receivedData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMIMEType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMIMEType_( Handle, CachedSelectors.setMIMEType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRequestURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRequestURL_( Handle, CachedSelectors.setRequestURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setResponseURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			NativeMethods.setResponseURL_( Handle, CachedSelectors.setResponseURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void startStreamResponseURL_expectedContentLength_lastModifiedDate_MIMEType_headers_( NObjective.RuntimeObject url, long expectedContentLength, NObjective.RuntimeObject lastModifiedDate, NObjective.RuntimeObject MIMEType, NObjective.RuntimeObject headers ) {
			RuntimeObject ___occuredException;
			NativeMethods.startStreamResponseURL_expectedContentLength_lastModifiedDate_MIMEType_headers_( Handle, CachedSelectors.startStreamResponseURL_expectedContentLength_lastModifiedDate_MIMEType_headers_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( long ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), url, expectedContentLength, lastModifiedDate, MIMEType, headers );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void startStreamWithResponse_( NObjective.RuntimeObject response ) {
			RuntimeObject ___occuredException;
			NativeMethods.startStreamWithResponse_( Handle, CachedSelectors.startStreamWithResponse_, out ___occuredException, sizeof( NObjective.RuntimeObject ), response );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public ushort transferMode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.transferMode( Handle, CachedSelectors.transferMode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancelLoadAndDestroyStreamWithError_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancelLoadWithError_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void destroyStreamWithError_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr errorForReason_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, short reason );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void finishedLoading( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern short reasonForError_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void receivedData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMIMEType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRequestURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setResponseURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void startStreamResponseURL_expectedContentLength_lastModifiedDate_MIMEType_headers_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url, long expectedContentLength, NObjective.RuntimeObject lastModifiedDate, NObjective.RuntimeObject MIMEType, NObjective.RuntimeObject headers );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void startStreamWithResponse_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject response );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort transferMode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector cancelLoadAndDestroyStreamWithError_ = "cancelLoadAndDestroyStreamWithError:";
			public static readonly Selector cancelLoadWithError_ = "cancelLoadWithError:";
			public static readonly Selector destroyStreamWithError_ = "destroyStreamWithError:";
			public static readonly Selector errorForReason_ = "errorForReason:";
			public static readonly Selector finishedLoading = "finishedLoading";
			public static readonly Selector initialize = "initialize";
			public static readonly Selector reasonForError_ = "reasonForError:";
			public static readonly Selector receivedData_ = "receivedData:";
			public static readonly Selector setMIMEType_ = "setMIMEType:";
			public static readonly Selector setRequestURL_ = "setRequestURL:";
			public static readonly Selector setResponseURL_ = "setResponseURL:";
			public static readonly Selector startStreamResponseURL_expectedContentLength_lastModifiedDate_MIMEType_headers_ = "startStreamResponseURL:expectedContentLength:lastModifiedDate:MIMEType:headers:";
			public static readonly Selector startStreamWithResponse_ = "startStreamWithResponse:";
			public static readonly Selector transferMode = "transferMode";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSView ) )]
	public struct WebBaseNetscapePluginView : IEquatable<WebBaseNetscapePluginView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebBaseNetscapePluginView;
		public static implicit operator IntPtr( WebBaseNetscapePluginView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebBaseNetscapePluginView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebBaseNetscapePluginView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebBaseNetscapePluginView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebBaseNetscapePluginView value1, WebBaseNetscapePluginView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebBaseNetscapePluginView value1, WebBaseNetscapePluginView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebBaseNetscapePluginView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebBaseNetscapePluginView alloc() {
			return new WebBaseNetscapePluginView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject currentPluginView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentPluginView( ClassHandle, CachedSelectors.currentPluginView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void setCurrentPluginView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCurrentPluginView_( ClassHandle, CachedSelectors.setCurrentPluginView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addWindowObservers() {
			RuntimeObject ___occuredException;
			NativeMethods.addWindowObservers( Handle, CachedSelectors.addWindowObservers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char canStart() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canStart( Handle, CachedSelectors.canStart, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void copy_( NObjective.RuntimeObject copy ) {
			RuntimeObject ___occuredException;
			NativeMethods.copy_( Handle, CachedSelectors.copy_, out ___occuredException, sizeof( NObjective.RuntimeObject ), copy );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject currentWindow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentWindow( Handle, CachedSelectors.currentWindow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void cut_( NObjective.RuntimeObject cut ) {
			RuntimeObject ___occuredException;
			NativeMethods.cut_( Handle, CachedSelectors.cut_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cut );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject dataSource() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dataSource( Handle, CachedSelectors.dataSource, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void didCallPlugInFunction() {
			RuntimeObject ___occuredException;
			NativeMethods.didCallPlugInFunction( Handle, CachedSelectors.didCallPlugInFunction, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void didStart() {
			RuntimeObject ___occuredException;
			NativeMethods.didStart( Handle, CachedSelectors.didStart, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void disconnectStream_( NObjective.RuntimeObject stream ) {
			RuntimeObject ___occuredException;
			NativeMethods.disconnectStream_( Handle, CachedSelectors.disconnectStream_, out ___occuredException, sizeof( NObjective.RuntimeObject ), stream );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void evaluateJavaScriptPluginRequest_( NObjective.RuntimeObject request ) {
			RuntimeObject ___occuredException;
			NativeMethods.evaluateJavaScriptPluginRequest_( Handle, CachedSelectors.evaluateJavaScriptPluginRequest_, out ___occuredException, sizeof( NObjective.RuntimeObject ), request );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void fini() {
			RuntimeObject ___occuredException;
			NativeMethods.fini( Handle, CachedSelectors.fini, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void fixWindowPort() {
			RuntimeObject ___occuredException;
			NativeMethods.fixWindowPort( Handle, CachedSelectors.fixWindowPort, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void forceRedraw() {
			RuntimeObject ___occuredException;
			NativeMethods.forceRedraw( Handle, CachedSelectors.forceRedraw, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public short getURL_target_( System.IntPtr url, System.IntPtr target ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getURL_target_( Handle, CachedSelectors.getURL_target_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( System.IntPtr ), url, target );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public short getURLNotify_target_notifyData_( System.IntPtr notify, System.IntPtr target, System.IntPtr notifyData ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getURLNotify_target_notifyData_( Handle, CachedSelectors.getURLNotify_target_notifyData_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ), notify, target, notifyData );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public short getVariable_value_( int variable, System.IntPtr value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getVariable_value_( Handle, CachedSelectors.getVariable_value_, out ___occuredException, sizeof( int ) + sizeof( System.IntPtr ), variable, value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void installKeyEventHandler() {
			RuntimeObject ___occuredException;
			NativeMethods.installKeyEventHandler( Handle, CachedSelectors.installKeyEventHandler, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void invalidateRegion_( System.IntPtr region ) {
			RuntimeObject ___occuredException;
			NativeMethods.invalidateRegion_( Handle, CachedSelectors.invalidateRegion_, out ___occuredException, sizeof( System.IntPtr ), region );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool isNewWindowEqualToOldWindow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isNewWindowEqualToOldWindow( Handle, CachedSelectors.isNewWindowEqualToOldWindow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isOpaque() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isOpaque( Handle, CachedSelectors.isOpaque, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isStarted() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isStarted( Handle, CachedSelectors.isStarted, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint keyMessageForEvent_( NObjective.RuntimeObject @event ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.keyMessageForEvent_( Handle, CachedSelectors.keyMessageForEvent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @event );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public void loadPluginRequest_( NObjective.RuntimeObject request ) {
			RuntimeObject ___occuredException;
			NativeMethods.loadPluginRequest_( Handle, CachedSelectors.loadPluginRequest_, out ___occuredException, sizeof( NObjective.RuntimeObject ), request );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public short loadRequest_inTarget_withNotifyData_sendNotification_( NObjective.RuntimeObject request, System.IntPtr inTarget, System.IntPtr withNotifyData, char sendNotification ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.loadRequest_inTarget_withNotifyData_sendNotification_( Handle, CachedSelectors.loadRequest_inTarget_withNotifyData_sendNotification_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ) + sizeof( System.IntPtr ) + sizeof( char ), request, inTarget, withNotifyData, sendNotification );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void loginWindowDidSwitchFromUser_( NObjective.RuntimeObject user ) {
			RuntimeObject ___occuredException;
			NativeMethods.loginWindowDidSwitchFromUser_( Handle, CachedSelectors.loginWindowDidSwitchFromUser_, out ___occuredException, sizeof( NObjective.RuntimeObject ), user );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void loginWindowDidSwitchToUser_( NObjective.RuntimeObject user ) {
			RuntimeObject ___occuredException;
			NativeMethods.loginWindowDidSwitchToUser_( Handle, CachedSelectors.loginWindowDidSwitchToUser_, out ___occuredException, sizeof( NObjective.RuntimeObject ), user );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public ushort modifiersForEvent_( NObjective.RuntimeObject @event ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.modifiersForEvent_( Handle, CachedSelectors.modifiersForEvent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @event );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void paste_( NObjective.RuntimeObject paste ) {
			RuntimeObject ___occuredException;
			NativeMethods.paste_( Handle, CachedSelectors.paste_, out ___occuredException, sizeof( NObjective.RuntimeObject ), paste );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject pluginPackage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pluginPackage( Handle, CachedSelectors.pluginPackage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void pluginView_receivedData_( NObjective.RuntimeObject view, NObjective.RuntimeObject receivedData ) {
			RuntimeObject ___occuredException;
			NativeMethods.pluginView_receivedData_( Handle, CachedSelectors.pluginView_receivedData_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, receivedData );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void pluginView_receivedError_( NObjective.RuntimeObject view, NObjective.RuntimeObject receivedError ) {
			RuntimeObject ___occuredException;
			NativeMethods.pluginView_receivedError_( Handle, CachedSelectors.pluginView_receivedError_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, receivedError );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void pluginView_receivedResponse_( NObjective.RuntimeObject view, NObjective.RuntimeObject receivedResponse ) {
			RuntimeObject ___occuredException;
			NativeMethods.pluginView_receivedResponse_( Handle, CachedSelectors.pluginView_receivedResponse_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, receivedResponse );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void pluginViewFinishedLoading_( NObjective.RuntimeObject loading ) {
			RuntimeObject ___occuredException;
			NativeMethods.pluginViewFinishedLoading_( Handle, CachedSelectors.pluginViewFinishedLoading_, out ___occuredException, sizeof( NObjective.RuntimeObject ), loading );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public short postURL_target_len_buf_file_( System.IntPtr url, System.IntPtr target, uint len, System.IntPtr buf, char file ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.postURL_target_len_buf_file_( Handle, CachedSelectors.postURL_target_len_buf_file_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( System.IntPtr ) + sizeof( uint ) + sizeof( System.IntPtr ) + sizeof( char ), url, target, len, buf, file );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public short postURLNotify_target_len_buf_file_notifyData_( System.IntPtr notify, System.IntPtr target, uint len, System.IntPtr buf, char file, System.IntPtr notifyData ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.postURLNotify_target_len_buf_file_notifyData_( Handle, CachedSelectors.postURLNotify_target_len_buf_file_notifyData_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( System.IntPtr ) + sizeof( uint ) + sizeof( System.IntPtr ) + sizeof( char ) + sizeof( System.IntPtr ), notify, target, len, buf, file, notifyData
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void preferencesHaveChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.preferencesHaveChanged_( Handle, CachedSelectors.preferencesHaveChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeKeyEventHandler() {
			RuntimeObject ___occuredException;
			NativeMethods.removeKeyEventHandler( Handle, CachedSelectors.removeKeyEventHandler, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeTrackingRect() {
			RuntimeObject ___occuredException;
			NativeMethods.removeTrackingRect( Handle, CachedSelectors.removeTrackingRect, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeWindowObservers() {
			RuntimeObject ___occuredException;
			NativeMethods.removeWindowObservers( Handle, CachedSelectors.removeWindowObservers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject requestWithURLCString_( System.IntPtr @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.requestWithURLCString_( Handle, CachedSelectors.requestWithURLCString_, out ___occuredException, sizeof( System.IntPtr ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void resetTrackingRect() {
			RuntimeObject ___occuredException;
			NativeMethods.resetTrackingRect( Handle, CachedSelectors.resetTrackingRect, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void restartNullEvents() {
			RuntimeObject ___occuredException;
			NativeMethods.restartNullEvents( Handle, CachedSelectors.restartNullEvents, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectAll_( NObjective.RuntimeObject all ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectAll_( Handle, CachedSelectors.selectAll_, out ___occuredException, sizeof( NObjective.RuntimeObject ), all );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void sendActivateEvent_( char @event ) {
			RuntimeObject ___occuredException;
			NativeMethods.sendActivateEvent_( Handle, CachedSelectors.sendActivateEvent_, out ___occuredException, sizeof( char ), @event );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void sendModifierEventWithKeyCode_character_( int code, char character ) {
			RuntimeObject ___occuredException;
			NativeMethods.sendModifierEventWithKeyCode_character_( Handle, CachedSelectors.sendModifierEventWithKeyCode_character_, out ___occuredException, sizeof( int ) + sizeof( char ), code, character );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void sendNullEvent() {
			RuntimeObject ___occuredException;
			NativeMethods.sendNullEvent( Handle, CachedSelectors.sendNullEvent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char sendUpdateEvent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sendUpdateEvent( Handle, CachedSelectors.sendUpdateEvent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setAttributeKeys_andValues_( NObjective.RuntimeObject keys, NObjective.RuntimeObject andValues ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAttributeKeys_andValues_( Handle, CachedSelectors.setAttributeKeys_andValues_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), keys, andValues );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBaseURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBaseURL_( Handle, CachedSelectors.setBaseURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHasFocus_( char focus ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHasFocus_( Handle, CachedSelectors.setHasFocus_, out ___occuredException, sizeof( char ), focus );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMIMEType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMIMEType_( Handle, CachedSelectors.setMIMEType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMode_( int mode ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMode_( Handle, CachedSelectors.setMode_, out ___occuredException, sizeof( int ), mode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPluginPackage_( NObjective.RuntimeObject package ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPluginPackage_( Handle, CachedSelectors.setPluginPackage_, out ___occuredException, sizeof( NObjective.RuntimeObject ), package );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public short setVariable_value_( int variable, System.IntPtr value ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.setVariable_value_( Handle, CachedSelectors.setVariable_value_, out ___occuredException, sizeof( int ) + sizeof( System.IntPtr ), variable, value );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setWindowIfNecessary() {
			RuntimeObject ___occuredException;
			NativeMethods.setWindowIfNecessary( Handle, CachedSelectors.setWindowIfNecessary, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char start() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.start( Handle, CachedSelectors.start, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void status_( System.IntPtr status ) {
			RuntimeObject ___occuredException;
			NativeMethods.status_( Handle, CachedSelectors.status_, out ___occuredException, sizeof( System.IntPtr ), status );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void stop() {
			RuntimeObject ___occuredException;
			NativeMethods.stop( Handle, CachedSelectors.stop, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void stopNullEvents() {
			RuntimeObject ___occuredException;
			NativeMethods.stopNullEvents( Handle, CachedSelectors.stopNullEvents, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char superviewsHaveSuperviews() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.superviewsHaveSuperviews( Handle, CachedSelectors.superviewsHaveSuperviews, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void tellQuickTimeToChill() {
			RuntimeObject ___occuredException;
			NativeMethods.tellQuickTimeToChill( Handle, CachedSelectors.tellQuickTimeToChill, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateAndSetWindow() {
			RuntimeObject ___occuredException;
			NativeMethods.updateAndSetWindow( Handle, CachedSelectors.updateAndSetWindow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public System.IntPtr userAgent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.userAgent( Handle, CachedSelectors.userAgent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void viewDidMoveToHostWindow() {
			RuntimeObject ___occuredException;
			NativeMethods.viewDidMoveToHostWindow( Handle, CachedSelectors.viewDidMoveToHostWindow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void viewWillMoveToHostWindow_( NObjective.RuntimeObject window ) {
			RuntimeObject ___occuredException;
			NativeMethods.viewWillMoveToHostWindow_( Handle, CachedSelectors.viewWillMoveToHostWindow_, out ___occuredException, sizeof( NObjective.RuntimeObject ), window );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject webFrame() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webFrame( Handle, CachedSelectors.webFrame, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void webFrame_didFinishLoadWithError_( NObjective.RuntimeObject frame, NObjective.RuntimeObject didFinishLoadWithError ) {
			RuntimeObject ___occuredException;
			NativeMethods.webFrame_didFinishLoadWithError_( Handle, CachedSelectors.webFrame_didFinishLoadWithError_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), frame, didFinishLoadWithError );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webFrame_didFinishLoadWithReason_( NObjective.RuntimeObject frame, short didFinishLoadWithReason ) {
			RuntimeObject ___occuredException;
			NativeMethods.webFrame_didFinishLoadWithReason_( Handle, CachedSelectors.webFrame_didFinishLoadWithReason_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( short ), frame, didFinishLoadWithReason );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject webView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webView( Handle, CachedSelectors.webView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void willCallPlugInFunction() {
			RuntimeObject ___occuredException;
			NativeMethods.willCallPlugInFunction( Handle, CachedSelectors.willCallPlugInFunction, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void windowBecameKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowBecameKey_( Handle, CachedSelectors.windowBecameKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void windowDidDeminiaturize_( NObjective.RuntimeObject deminiaturize ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowDidDeminiaturize_( Handle, CachedSelectors.windowDidDeminiaturize_, out ___occuredException, sizeof( NObjective.RuntimeObject ), deminiaturize );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void windowDidMiniaturize_( NObjective.RuntimeObject miniaturize ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowDidMiniaturize_( Handle, CachedSelectors.windowDidMiniaturize_, out ___occuredException, sizeof( NObjective.RuntimeObject ), miniaturize );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void windowResignedKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowResignedKey_( Handle, CachedSelectors.windowResignedKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void windowWillClose_( NObjective.RuntimeObject close ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowWillClose_( Handle, CachedSelectors.windowWillClose_, out ___occuredException, sizeof( NObjective.RuntimeObject ), close );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addWindowObservers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char canStart( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void copy_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject copy );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currentPluginView( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currentWindow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cut_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cut );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dataSource( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void didCallPlugInFunction( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void didStart( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void disconnectStream_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject stream );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void evaluateJavaScriptPluginRequest_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject request );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void fini( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void fixWindowPort( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void forceRedraw( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern short getURL_target_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr url, System.IntPtr target );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern short getURLNotify_target_notifyData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr notify, System.IntPtr target, System.IntPtr notifyData );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern short getVariable_value_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int variable, System.IntPtr value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void installKeyEventHandler( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void invalidateRegion_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr region );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isNewWindowEqualToOldWindow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isOpaque( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isStarted( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint keyMessageForEvent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @event );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void loadPluginRequest_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject request );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern short loadRequest_inTarget_withNotifyData_sendNotification_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject request, System.IntPtr inTarget, System.IntPtr withNotifyData, char sendNotification );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void loginWindowDidSwitchFromUser_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject user );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void loginWindowDidSwitchToUser_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject user );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort modifiersForEvent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @event );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void paste_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject paste );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pluginPackage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pluginView_receivedData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject receivedData );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pluginView_receivedError_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject receivedError );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pluginView_receivedResponse_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject receivedResponse );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pluginViewFinishedLoading_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject loading );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern short postURL_target_len_buf_file_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr url, System.IntPtr target, uint len, System.IntPtr buf, char file );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern short postURLNotify_target_len_buf_file_notifyData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr notify, System.IntPtr target, uint len, System.IntPtr buf, char file, System.IntPtr notifyData
			 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void preferencesHaveChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeKeyEventHandler( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeTrackingRect( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeWindowObservers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr requestWithURLCString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resetTrackingRect( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void restartNullEvents( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectAll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject all );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void sendActivateEvent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char @event );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void sendModifierEventWithKeyCode_character_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int code, char character );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void sendNullEvent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char sendUpdateEvent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAttributeKeys_andValues_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject keys, NObjective.RuntimeObject andValues );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBaseURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCurrentPluginView_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHasFocus_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char focus );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMIMEType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int mode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPluginPackage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject package );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern short setVariable_value_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int variable, System.IntPtr value );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWindowIfNecessary( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char start( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void status_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr status );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void stop( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void stopNullEvents( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char superviewsHaveSuperviews( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void tellQuickTimeToChill( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateAndSetWindow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern System.IntPtr userAgent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void viewDidMoveToHostWindow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void viewWillMoveToHostWindow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject window );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr webFrame( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webFrame_didFinishLoadWithError_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject frame, NObjective.RuntimeObject didFinishLoadWithError );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webFrame_didFinishLoadWithReason_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject frame, short didFinishLoadWithReason );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr webView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void willCallPlugInFunction( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void windowBecameKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void windowDidDeminiaturize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject deminiaturize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void windowDidMiniaturize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject miniaturize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void windowResignedKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void windowWillClose_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject close );
		}
		static internal class CachedSelectors {
			public static readonly Selector addWindowObservers = "addWindowObservers";
			public static readonly Selector canStart = "canStart";
			public static readonly Selector copy_ = "copy:";
			public static readonly Selector currentPluginView = "currentPluginView";
			public static readonly Selector currentWindow = "currentWindow";
			public static readonly Selector cut_ = "cut:";
			public static readonly Selector dataSource = "dataSource";
			public static readonly Selector didCallPlugInFunction = "didCallPlugInFunction";
			public static readonly Selector didStart = "didStart";
			public static readonly Selector disconnectStream_ = "disconnectStream:";
			public static readonly Selector evaluateJavaScriptPluginRequest_ = "evaluateJavaScriptPluginRequest:";
			public static readonly Selector fini = "fini";
			public static readonly Selector fixWindowPort = "fixWindowPort";
			public static readonly Selector forceRedraw = "forceRedraw";
			public static readonly Selector getURL_target_ = "getURL:target:";
			public static readonly Selector getURLNotify_target_notifyData_ = "getURLNotify:target:notifyData:";
			public static readonly Selector getVariable_value_ = "getVariable:value:";
			public static readonly Selector installKeyEventHandler = "installKeyEventHandler";
			public static readonly Selector invalidateRegion_ = "invalidateRegion:";
			public static readonly Selector isNewWindowEqualToOldWindow = "isNewWindowEqualToOldWindow";
			public static readonly Selector isOpaque = "isOpaque";
			public static readonly Selector isStarted = "isStarted";
			public static readonly Selector keyMessageForEvent_ = "keyMessageForEvent:";
			public static readonly Selector loadPluginRequest_ = "loadPluginRequest:";
			public static readonly Selector loadRequest_inTarget_withNotifyData_sendNotification_ = "loadRequest:inTarget:withNotifyData:sendNotification:";
			public static readonly Selector loginWindowDidSwitchFromUser_ = "loginWindowDidSwitchFromUser:";
			public static readonly Selector loginWindowDidSwitchToUser_ = "loginWindowDidSwitchToUser:";
			public static readonly Selector modifiersForEvent_ = "modifiersForEvent:";
			public static readonly Selector paste_ = "paste:";
			public static readonly Selector pluginPackage = "pluginPackage";
			public static readonly Selector pluginView_receivedData_ = "pluginView:receivedData:";
			public static readonly Selector pluginView_receivedError_ = "pluginView:receivedError:";
			public static readonly Selector pluginView_receivedResponse_ = "pluginView:receivedResponse:";
			public static readonly Selector pluginViewFinishedLoading_ = "pluginViewFinishedLoading:";
			public static readonly Selector postURL_target_len_buf_file_ = "postURL:target:len:buf:file:";
			public static readonly Selector postURLNotify_target_len_buf_file_notifyData_ = "postURLNotify:target:len:buf:file:notifyData:";
			public static readonly Selector preferencesHaveChanged_ = "preferencesHaveChanged:";
			public static readonly Selector removeKeyEventHandler = "removeKeyEventHandler";
			public static readonly Selector removeTrackingRect = "removeTrackingRect";
			public static readonly Selector removeWindowObservers = "removeWindowObservers";
			public static readonly Selector requestWithURLCString_ = "requestWithURLCString:";
			public static readonly Selector resetTrackingRect = "resetTrackingRect";
			public static readonly Selector restartNullEvents = "restartNullEvents";
			public static readonly Selector selectAll_ = "selectAll:";
			public static readonly Selector sendActivateEvent_ = "sendActivateEvent:";
			public static readonly Selector sendModifierEventWithKeyCode_character_ = "sendModifierEventWithKeyCode:character:";
			public static readonly Selector sendNullEvent = "sendNullEvent";
			public static readonly Selector sendUpdateEvent = "sendUpdateEvent";
			public static readonly Selector setAttributeKeys_andValues_ = "setAttributeKeys:andValues:";
			public static readonly Selector setBaseURL_ = "setBaseURL:";
			public static readonly Selector setCurrentPluginView_ = "setCurrentPluginView:";
			public static readonly Selector setHasFocus_ = "setHasFocus:";
			public static readonly Selector setMIMEType_ = "setMIMEType:";
			public static readonly Selector setMode_ = "setMode:";
			public static readonly Selector setPluginPackage_ = "setPluginPackage:";
			public static readonly Selector setVariable_value_ = "setVariable:value:";
			public static readonly Selector setWindowIfNecessary = "setWindowIfNecessary";
			public static readonly Selector start = "start";
			public static readonly Selector status_ = "status:";
			public static readonly Selector stop = "stop";
			public static readonly Selector stopNullEvents = "stopNullEvents";
			public static readonly Selector superviewsHaveSuperviews = "superviewsHaveSuperviews";
			public static readonly Selector tellQuickTimeToChill = "tellQuickTimeToChill";
			public static readonly Selector updateAndSetWindow = "updateAndSetWindow";
			public static readonly Selector userAgent = "userAgent";
			public static readonly Selector viewDidMoveToHostWindow = "viewDidMoveToHostWindow";
			public static readonly Selector viewWillMoveToHostWindow_ = "viewWillMoveToHostWindow:";
			public static readonly Selector webFrame = "webFrame";
			public static readonly Selector webFrame_didFinishLoadWithError_ = "webFrame:didFinishLoadWithError:";
			public static readonly Selector webFrame_didFinishLoadWithReason_ = "webFrame:didFinishLoadWithReason:";
			public static readonly Selector webView = "webView";
			public static readonly Selector willCallPlugInFunction = "willCallPlugInFunction";
			public static readonly Selector windowBecameKey_ = "windowBecameKey:";
			public static readonly Selector windowDidDeminiaturize_ = "windowDidDeminiaturize:";
			public static readonly Selector windowDidMiniaturize_ = "windowDidMiniaturize:";
			public static readonly Selector windowResignedKey_ = "windowResignedKey:";
			public static readonly Selector windowWillClose_ = "windowWillClose:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebBasePluginPackage : IEquatable<WebBasePluginPackage> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebBasePluginPackage;
		public static implicit operator IntPtr( WebBasePluginPackage value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebBasePluginPackage value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebBasePluginPackage?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebBasePluginPackage value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebBasePluginPackage value1, WebBasePluginPackage value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebBasePluginPackage value1, WebBasePluginPackage value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebBasePluginPackage( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebBasePluginPackage alloc() {
			return new WebBasePluginPackage( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject pluginWithPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pluginWithPath_( ClassHandle, CachedSelectors.pluginWithPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject preferredLocalizationName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.preferredLocalizationName( ClassHandle, CachedSelectors.preferredLocalizationName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject bundle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bundle( Handle, CachedSelectors.bundle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject descriptionForMIMEType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.descriptionForMIMEType_( Handle, CachedSelectors.descriptionForMIMEType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject extensionEnumerator() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.extensionEnumerator( Handle, CachedSelectors.extensionEnumerator, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject extensionsForMIMEType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.extensionsForMIMEType_( Handle, CachedSelectors.extensionsForMIMEType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject filename() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.filename( Handle, CachedSelectors.filename, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char getPluginInfoFromBundleAndMIMEDictionary_( NObjective.RuntimeObject dictionary ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPluginInfoFromBundleAndMIMEDictionary_( Handle, CachedSelectors.getPluginInfoFromBundleAndMIMEDictionary_, out ___occuredException, sizeof( NObjective.RuntimeObject ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char getPluginInfoFromPLists() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPluginInfoFromPLists( Handle, CachedSelectors.getPluginInfoFromPLists, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject initWithPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithPath_( Handle, CachedSelectors.initWithPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isJavaPlugIn() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isJavaPlugIn( Handle, CachedSelectors.isJavaPlugIn, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isNativeLibraryData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isNativeLibraryData_( Handle, CachedSelectors.isNativeLibraryData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isQuickTimePlugIn() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isQuickTimePlugIn( Handle, CachedSelectors.isQuickTimePlugIn, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char load() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.load( Handle, CachedSelectors.load, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject MIMETypeEnumerator() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.MIMETypeEnumerator( Handle, CachedSelectors.MIMETypeEnumerator, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject MIMETypeForExtension_( NObjective.RuntimeObject extension ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.MIMETypeForExtension_( Handle, CachedSelectors.MIMETypeForExtension_, out ___occuredException, sizeof( NObjective.RuntimeObject ), extension );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject path() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.path( Handle, CachedSelectors.path, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject pathByResolvingSymlinksAndAliasesInPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pathByResolvingSymlinksAndAliasesInPath_( Handle, CachedSelectors.pathByResolvingSymlinksAndAliasesInPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject pListForPath_createFile_( NObjective.RuntimeObject path, char createFile ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pListForPath_createFile_( Handle, CachedSelectors.pListForPath_createFile_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), path, createFile );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject pluginDescription() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pluginDescription( Handle, CachedSelectors.pluginDescription, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setMIMEToDescriptionDictionary_( NObjective.RuntimeObject dictionary ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMIMEToDescriptionDictionary_( Handle, CachedSelectors.setMIMEToDescriptionDictionary_, out ___occuredException, sizeof( NObjective.RuntimeObject ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMIMEToExtensionsDictionary_( NObjective.RuntimeObject dictionary ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMIMEToExtensionsDictionary_( Handle, CachedSelectors.setMIMEToExtensionsDictionary_, out ___occuredException, sizeof( NObjective.RuntimeObject ), dictionary );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			NativeMethods.setName_( Handle, CachedSelectors.setName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPath_( NObjective.RuntimeObject path ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPath_( Handle, CachedSelectors.setPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ), path );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPluginDescription_( NObjective.RuntimeObject description ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPluginDescription_( Handle, CachedSelectors.setPluginDescription_, out ___occuredException, sizeof( NObjective.RuntimeObject ), description );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint versionNumber() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.versionNumber( Handle, CachedSelectors.versionNumber, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public void wasAddedToPluginDatabase_( NObjective.RuntimeObject database ) {
			RuntimeObject ___occuredException;
			NativeMethods.wasAddedToPluginDatabase_( Handle, CachedSelectors.wasAddedToPluginDatabase_, out ___occuredException, sizeof( NObjective.RuntimeObject ), database );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void wasRemovedFromPluginDatabase_( NObjective.RuntimeObject database ) {
			RuntimeObject ___occuredException;
			NativeMethods.wasRemovedFromPluginDatabase_( Handle, CachedSelectors.wasRemovedFromPluginDatabase_, out ___occuredException, sizeof( NObjective.RuntimeObject ), database );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr bundle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr descriptionForMIMEType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr extensionEnumerator( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr extensionsForMIMEType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr filename( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char getPluginInfoFromBundleAndMIMEDictionary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char getPluginInfoFromPLists( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isJavaPlugIn( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isNativeLibraryData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isQuickTimePlugIn( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char load( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr MIMETypeEnumerator( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr MIMETypeForExtension_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject extension );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr path( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pathByResolvingSymlinksAndAliasesInPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pListForPath_createFile_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path, char createFile );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pluginDescription( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pluginWithPath_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr preferredLocalizationName( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMIMEToDescriptionDictionary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMIMEToExtensionsDictionary_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject dictionary );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject path );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPluginDescription_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject description );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint versionNumber( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void wasAddedToPluginDatabase_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject database );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void wasRemovedFromPluginDatabase_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject database );
		}
		static internal class CachedSelectors {
			public static readonly Selector bundle = "bundle";
			public static readonly Selector descriptionForMIMEType_ = "descriptionForMIMEType:";
			public static readonly Selector extensionEnumerator = "extensionEnumerator";
			public static readonly Selector extensionsForMIMEType_ = "extensionsForMIMEType:";
			public static readonly Selector filename = "filename";
			public static readonly Selector getPluginInfoFromBundleAndMIMEDictionary_ = "getPluginInfoFromBundleAndMIMEDictionary:";
			public static readonly Selector getPluginInfoFromPLists = "getPluginInfoFromPLists";
			public static readonly Selector initialize = "initialize";
			public static readonly Selector initWithPath_ = "initWithPath:";
			public static readonly Selector isJavaPlugIn = "isJavaPlugIn";
			public static readonly Selector isNativeLibraryData_ = "isNativeLibraryData:";
			public static readonly Selector isQuickTimePlugIn = "isQuickTimePlugIn";
			public static readonly Selector load = "load";
			public static readonly Selector MIMETypeEnumerator = "MIMETypeEnumerator";
			public static readonly Selector MIMETypeForExtension_ = "MIMETypeForExtension:";
			public static readonly Selector name = "name";
			public static readonly Selector path = "path";
			public static readonly Selector pathByResolvingSymlinksAndAliasesInPath_ = "pathByResolvingSymlinksAndAliasesInPath:";
			public static readonly Selector pListForPath_createFile_ = "pListForPath:createFile:";
			public static readonly Selector pluginDescription = "pluginDescription";
			public static readonly Selector pluginWithPath_ = "pluginWithPath:";
			public static readonly Selector preferredLocalizationName = "preferredLocalizationName";
			public static readonly Selector setMIMEToDescriptionDictionary_ = "setMIMEToDescriptionDictionary:";
			public static readonly Selector setMIMEToExtensionsDictionary_ = "setMIMEToExtensionsDictionary:";
			public static readonly Selector setName_ = "setName:";
			public static readonly Selector setPath_ = "setPath:";
			public static readonly Selector setPluginDescription_ = "setPluginDescription:";
			public static readonly Selector versionNumber = "versionNumber";
			public static readonly Selector wasAddedToPluginDatabase_ = "wasAddedToPluginDatabase:";
			public static readonly Selector wasRemovedFromPluginDatabase_ = "wasRemovedFromPluginDatabase:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebCache : IEquatable<WebCache> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebCache;
		public static implicit operator IntPtr( WebCache value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebCache value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebCache?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebCache value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebCache value1, WebCache value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebCache value1, WebCache value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebCache( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebCache alloc() {
			return new WebCache( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void empty() {
			RuntimeObject ___occuredException;
			NativeMethods.empty( ClassHandle, CachedSelectors.empty, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static bool isDisabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isDisabled( ClassHandle, CachedSelectors.isDisabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static void setDisabled_( char disabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDisabled_( ClassHandle, CachedSelectors.setDisabled_, out ___occuredException, sizeof( char ), disabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject statistics() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.statistics( ClassHandle, CachedSelectors.statistics, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void empty( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isDisabled( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDisabled_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char disabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr statistics( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector empty = "empty";
			public static readonly Selector isDisabled = "isDisabled";
			public static readonly Selector setDisabled_ = "setDisabled:";
			public static readonly Selector statistics = "statistics";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSClipView ) )]
	public struct WebClipView : IEquatable<WebClipView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebClipView;
		public static implicit operator IntPtr( WebClipView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebClipView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebClipView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebClipView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebClipView value1, WebClipView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebClipView value1, WebClipView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebClipView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebClipView alloc() {
			return new WebClipView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char hasAdditionalClip() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasAdditionalClip( Handle, CachedSelectors.hasAdditionalClip, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void resetAdditionalClip() {
			RuntimeObject ___occuredException;
			NativeMethods.resetAdditionalClip( Handle, CachedSelectors.resetAdditionalClip, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasAdditionalClip( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resetAdditionalClip( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector hasAdditionalClip = "hasAdditionalClip";
			public static readonly Selector resetAdditionalClip = "resetAdditionalClip";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScrollView ) )]
	public struct WebCoreScrollView : IEquatable<WebCoreScrollView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebCoreScrollView;
		public static implicit operator IntPtr( WebCoreScrollView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebCoreScrollView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebCoreScrollView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebCoreScrollView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebCoreScrollView value1, WebCoreScrollView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebCoreScrollView value1, WebCoreScrollView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebCoreScrollView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebCoreScrollView alloc() {
			return new WebCoreScrollView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebCoreStatistics : IEquatable<WebCoreStatistics> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebCoreStatistics;
		public static implicit operator IntPtr( WebCoreStatistics value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebCoreStatistics value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebCoreStatistics?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebCoreStatistics value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebCoreStatistics value1, WebCoreStatistics value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebCoreStatistics value1, WebCoreStatistics value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebCoreStatistics( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebCoreStatistics alloc() {
			return new WebCoreStatistics( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void emptyCache() {
			RuntimeObject ___occuredException;
			NativeMethods.emptyCache( ClassHandle, CachedSelectors.emptyCache, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void garbageCollectJavaScriptObjects() {
			RuntimeObject ___occuredException;
			NativeMethods.garbageCollectJavaScriptObjects( ClassHandle, CachedSelectors.garbageCollectJavaScriptObjects, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void garbageCollectJavaScriptObjectsOnAlternateThreadForDebugging_( char debugging ) {
			RuntimeObject ___occuredException;
			NativeMethods.garbageCollectJavaScriptObjectsOnAlternateThreadForDebugging_( ClassHandle, CachedSelectors.garbageCollectJavaScriptObjectsOnAlternateThreadForDebugging_, out ___occuredException, sizeof( char ), debugging );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static uint iconPageURLMappingCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.iconPageURLMappingCount( ClassHandle, CachedSelectors.iconPageURLMappingCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public static uint iconRecordCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.iconRecordCount( ClassHandle, CachedSelectors.iconRecordCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public static uint iconRetainedPageURLCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.iconRetainedPageURLCount( ClassHandle, CachedSelectors.iconRetainedPageURLCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public static uint iconsWithDataCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.iconsWithDataCount( ClassHandle, CachedSelectors.iconsWithDataCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public static uint javaScriptGlobalObjectsCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.javaScriptGlobalObjectsCount( ClassHandle, CachedSelectors.javaScriptGlobalObjectsCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public static uint javaScriptInterpretersCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.javaScriptInterpretersCount( ClassHandle, CachedSelectors.javaScriptInterpretersCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public static uint javaScriptNoGCAllowedObjectsCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.javaScriptNoGCAllowedObjectsCount( ClassHandle, CachedSelectors.javaScriptNoGCAllowedObjectsCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public static uint javaScriptObjectsCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.javaScriptObjectsCount( ClassHandle, CachedSelectors.javaScriptObjectsCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public static uint javaScriptProtectedGlobalObjectsCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.javaScriptProtectedGlobalObjectsCount( ClassHandle, CachedSelectors.javaScriptProtectedGlobalObjectsCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public static uint javaScriptProtectedObjectsCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.javaScriptProtectedObjectsCount( ClassHandle, CachedSelectors.javaScriptProtectedObjectsCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public static NObjective.RuntimeObject javaScriptProtectedObjectTypeCounts() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.javaScriptProtectedObjectTypeCounts( ClassHandle, CachedSelectors.javaScriptProtectedObjectTypeCounts, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static uint javaScriptReferencedObjectsCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.javaScriptReferencedObjectsCount( ClassHandle, CachedSelectors.javaScriptReferencedObjectsCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public static NObjective.RuntimeObject javaScriptRootObjectClasses() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.javaScriptRootObjectClasses( ClassHandle, CachedSelectors.javaScriptRootObjectClasses, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject javaScriptRootObjectTypeCounts() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.javaScriptRootObjectTypeCounts( ClassHandle, CachedSelectors.javaScriptRootObjectTypeCounts, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void setCacheDisabled_( char disabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCacheDisabled_( ClassHandle, CachedSelectors.setCacheDisabled_, out ___occuredException, sizeof( char ), disabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void setShouldPrintExceptions_( char exceptions ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShouldPrintExceptions_( ClassHandle, CachedSelectors.setShouldPrintExceptions_, out ___occuredException, sizeof( char ), exceptions );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static bool shouldPrintExceptions() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shouldPrintExceptions( ClassHandle, CachedSelectors.shouldPrintExceptions, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static void startIgnoringWebCoreNodeLeaks() {
			RuntimeObject ___occuredException;
			NativeMethods.startIgnoringWebCoreNodeLeaks( ClassHandle, CachedSelectors.startIgnoringWebCoreNodeLeaks, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject statistics() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.statistics( ClassHandle, CachedSelectors.statistics, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void stopIgnoringWebCoreNodeLeaks() {
			RuntimeObject ___occuredException;
			NativeMethods.stopIgnoringWebCoreNodeLeaks( ClassHandle, CachedSelectors.stopIgnoringWebCoreNodeLeaks, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void emptyCache( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void garbageCollectJavaScriptObjects( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void garbageCollectJavaScriptObjectsOnAlternateThreadForDebugging_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char debugging );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint iconPageURLMappingCount( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint iconRecordCount( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint iconRetainedPageURLCount( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint iconsWithDataCount( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint javaScriptGlobalObjectsCount( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint javaScriptInterpretersCount( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint javaScriptNoGCAllowedObjectsCount( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint javaScriptObjectsCount( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint javaScriptProtectedGlobalObjectsCount( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint javaScriptProtectedObjectsCount( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr javaScriptProtectedObjectTypeCounts( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint javaScriptReferencedObjectsCount( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr javaScriptRootObjectClasses( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr javaScriptRootObjectTypeCounts( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCacheDisabled_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char disabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setShouldPrintExceptions_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char exceptions );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool shouldPrintExceptions( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void startIgnoringWebCoreNodeLeaks( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr statistics( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void stopIgnoringWebCoreNodeLeaks( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector emptyCache = "emptyCache";
			public static readonly Selector garbageCollectJavaScriptObjects = "garbageCollectJavaScriptObjects";
			public static readonly Selector garbageCollectJavaScriptObjectsOnAlternateThreadForDebugging_ = "garbageCollectJavaScriptObjectsOnAlternateThreadForDebugging:";
			public static readonly Selector iconPageURLMappingCount = "iconPageURLMappingCount";
			public static readonly Selector iconRecordCount = "iconRecordCount";
			public static readonly Selector iconRetainedPageURLCount = "iconRetainedPageURLCount";
			public static readonly Selector iconsWithDataCount = "iconsWithDataCount";
			public static readonly Selector javaScriptGlobalObjectsCount = "javaScriptGlobalObjectsCount";
			public static readonly Selector javaScriptInterpretersCount = "javaScriptInterpretersCount";
			public static readonly Selector javaScriptNoGCAllowedObjectsCount = "javaScriptNoGCAllowedObjectsCount";
			public static readonly Selector javaScriptObjectsCount = "javaScriptObjectsCount";
			public static readonly Selector javaScriptProtectedGlobalObjectsCount = "javaScriptProtectedGlobalObjectsCount";
			public static readonly Selector javaScriptProtectedObjectsCount = "javaScriptProtectedObjectsCount";
			public static readonly Selector javaScriptProtectedObjectTypeCounts = "javaScriptProtectedObjectTypeCounts";
			public static readonly Selector javaScriptReferencedObjectsCount = "javaScriptReferencedObjectsCount";
			public static readonly Selector javaScriptRootObjectClasses = "javaScriptRootObjectClasses";
			public static readonly Selector javaScriptRootObjectTypeCounts = "javaScriptRootObjectTypeCounts";
			public static readonly Selector setCacheDisabled_ = "setCacheDisabled:";
			public static readonly Selector setShouldPrintExceptions_ = "setShouldPrintExceptions:";
			public static readonly Selector shouldPrintExceptions = "shouldPrintExceptions";
			public static readonly Selector startIgnoringWebCoreNodeLeaks = "startIgnoringWebCoreNodeLeaks";
			public static readonly Selector statistics = "statistics";
			public static readonly Selector stopIgnoringWebCoreNodeLeaks = "stopIgnoringWebCoreNodeLeaks";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebDatabaseManager : IEquatable<WebDatabaseManager> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebDatabaseManager;
		public static implicit operator IntPtr( WebDatabaseManager value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebDatabaseManager value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebDatabaseManager?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebDatabaseManager value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebDatabaseManager value1, WebDatabaseManager value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebDatabaseManager value1, WebDatabaseManager value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebDatabaseManager( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebDatabaseManager alloc() {
			return new WebDatabaseManager( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject sharedWebDatabaseManager() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedWebDatabaseManager( ClassHandle, CachedSelectors.sharedWebDatabaseManager, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject databasesWithOrigin_( NObjective.RuntimeObject origin ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.databasesWithOrigin_( Handle, CachedSelectors.databasesWithOrigin_, out ___occuredException, sizeof( NObjective.RuntimeObject ), origin );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void deleteAllDatabases() {
			RuntimeObject ___occuredException;
			NativeMethods.deleteAllDatabases( Handle, CachedSelectors.deleteAllDatabases, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteDatabase_withOrigin_( NObjective.RuntimeObject database, NObjective.RuntimeObject withOrigin ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteDatabase_withOrigin_( Handle, CachedSelectors.deleteDatabase_withOrigin_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), database, withOrigin );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteOrigin_( NObjective.RuntimeObject origin ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteOrigin_( Handle, CachedSelectors.deleteOrigin_, out ___occuredException, sizeof( NObjective.RuntimeObject ), origin );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject detailsForDatabase_withOrigin_( NObjective.RuntimeObject database, NObjective.RuntimeObject withOrigin ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.detailsForDatabase_withOrigin_( Handle, CachedSelectors.detailsForDatabase_withOrigin_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), database, withOrigin );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject origins() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.origins( Handle, CachedSelectors.origins, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr databasesWithOrigin_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject origin );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteAllDatabases( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteDatabase_withOrigin_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject database, NObjective.RuntimeObject withOrigin );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteOrigin_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject origin );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr detailsForDatabase_withOrigin_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject database, NObjective.RuntimeObject withOrigin );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr origins( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedWebDatabaseManager( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector databasesWithOrigin_ = "databasesWithOrigin:";
			public static readonly Selector deleteAllDatabases = "deleteAllDatabases";
			public static readonly Selector deleteDatabase_withOrigin_ = "deleteDatabase:withOrigin:";
			public static readonly Selector deleteOrigin_ = "deleteOrigin:";
			public static readonly Selector detailsForDatabase_withOrigin_ = "detailsForDatabase:withOrigin:";
			public static readonly Selector origins = "origins";
			public static readonly Selector sharedWebDatabaseManager = "sharedWebDatabaseManager";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebDataSource : IEquatable<WebDataSource> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebDataSource;
		public static implicit operator IntPtr( WebDataSource value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebDataSource value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebDataSource?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebDataSource value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebDataSource value1, WebDataSource value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebDataSource value1, WebDataSource value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebDataSource( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebDataSource alloc() {
			return new WebDataSource( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addSubresource_( WebResource subresource ) {
			RuntimeObject ___occuredException;
			NativeMethods.addSubresource_( Handle, CachedSelectors.addSubresource_, out ___occuredException, sizeof( WebResource ), subresource );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSData data() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.data( Handle, CachedSelectors.data, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public NSURLRequest initialRequest() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initialRequest( Handle, CachedSelectors.initialRequest, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLRequest( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithRequest_( NSURLRequest request ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithRequest_( Handle, CachedSelectors.initWithRequest_, out ___occuredException, sizeof( NSURLRequest ), request );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isLoading() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isLoading( Handle, CachedSelectors.isLoading, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public WebResource mainResource() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mainResource( Handle, CachedSelectors.mainResource, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebResource( ___result );
		}
		unsafe public string pageTitle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pageTitle( Handle, CachedSelectors.pageTitle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject representation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.representation( Handle, CachedSelectors.representation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSMutableURLRequest request() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.request( Handle, CachedSelectors.request, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSMutableURLRequest( ___result );
		}
		unsafe public NSURLResponse response() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.response( Handle, CachedSelectors.response, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURLResponse( ___result );
		}
		unsafe public WebResource subresourceForURL_( NSURL url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subresourceForURL_( Handle, CachedSelectors.subresourceForURL_, out ___occuredException, sizeof( NSURL ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebResource( ___result );
		}
		unsafe public NSArray subresources() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.subresources( Handle, CachedSelectors.subresources, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public string textEncodingName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textEncodingName( Handle, CachedSelectors.textEncodingName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSURL unreachableURL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.unreachableURL( Handle, CachedSelectors.unreachableURL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURL( ___result );
		}
		unsafe public WebArchive webArchive() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webArchive( Handle, CachedSelectors.webArchive, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebArchive( ___result );
		}
		unsafe public WebFrame webFrame() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webFrame( Handle, CachedSelectors.webFrame, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebFrame( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addSubresource_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, WebResource subresource );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr data( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initialRequest( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithRequest_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURLRequest request );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isLoading( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mainResource( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pageTitle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr representation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr request( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr response( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr subresourceForURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr subresources( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr textEncodingName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr unreachableURL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr webArchive( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr webFrame( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addSubresource_ = "addSubresource:";
			public static readonly Selector data = "data";
			public static readonly Selector initialRequest = "initialRequest";
			public static readonly Selector initWithRequest_ = "initWithRequest:";
			public static readonly Selector isLoading = "isLoading";
			public static readonly Selector mainResource = "mainResource";
			public static readonly Selector pageTitle = "pageTitle";
			public static readonly Selector representation = "representation";
			public static readonly Selector request = "request";
			public static readonly Selector response = "response";
			public static readonly Selector subresourceForURL_ = "subresourceForURL:";
			public static readonly Selector subresources = "subresources";
			public static readonly Selector textEncodingName = "textEncodingName";
			public static readonly Selector unreachableURL = "unreachableURL";
			public static readonly Selector webArchive = "webArchive";
			public static readonly Selector webFrame = "webFrame";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebDataSourcePrivate : IEquatable<WebDataSourcePrivate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebDataSourcePrivate;
		public static implicit operator IntPtr( WebDataSourcePrivate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebDataSourcePrivate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebDataSourcePrivate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebDataSourcePrivate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebDataSourcePrivate value1, WebDataSourcePrivate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebDataSourcePrivate value1, WebDataSourcePrivate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebDataSourcePrivate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebDataSourcePrivate alloc() {
			return new WebDataSourcePrivate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initialize = "initialize";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebDefaultEditingDelegate : IEquatable<WebDefaultEditingDelegate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebDefaultEditingDelegate;
		public static implicit operator IntPtr( WebDefaultEditingDelegate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebDefaultEditingDelegate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebDefaultEditingDelegate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebDefaultEditingDelegate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebDefaultEditingDelegate value1, WebDefaultEditingDelegate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebDefaultEditingDelegate value1, WebDefaultEditingDelegate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebDefaultEditingDelegate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebDefaultEditingDelegate alloc() {
			return new WebDefaultEditingDelegate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject sharedEditingDelegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedEditingDelegate( ClassHandle, CachedSelectors.sharedEditingDelegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject undoManagerForWebView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.undoManagerForWebView_( Handle, CachedSelectors.undoManagerForWebView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void webView_didSetSelectionTypesForPasteboard_( NObjective.RuntimeObject view, NObjective.RuntimeObject didSetSelectionTypesForPasteboard ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_didSetSelectionTypesForPasteboard_( Handle, CachedSelectors.webView_didSetSelectionTypesForPasteboard_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, didSetSelectionTypesForPasteboard );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webView_didWriteSelectionToPasteboard_( NObjective.RuntimeObject view, NObjective.RuntimeObject didWriteSelectionToPasteboard ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_didWriteSelectionToPasteboard_( Handle, CachedSelectors.webView_didWriteSelectionToPasteboard_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, didWriteSelectionToPasteboard );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char webView_doCommandBySelector_( NObjective.RuntimeObject view, NObjective.Selector doCommandBySelector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webView_doCommandBySelector_( Handle, CachedSelectors.webView_doCommandBySelector_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ), view, doCommandBySelector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char webView_shouldApplyStyle_toElementsInDOMRange_( NObjective.RuntimeObject view, NObjective.RuntimeObject shouldApplyStyle, NObjective.RuntimeObject toElementsInDOMRange ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webView_shouldApplyStyle_toElementsInDOMRange_( Handle, CachedSelectors.webView_shouldApplyStyle_toElementsInDOMRange_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, shouldApplyStyle, toElementsInDOMRange );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char webView_shouldBeginEditingInDOMRange_( NObjective.RuntimeObject view, NObjective.RuntimeObject shouldBeginEditingInDOMRange ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webView_shouldBeginEditingInDOMRange_( Handle, CachedSelectors.webView_shouldBeginEditingInDOMRange_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, shouldBeginEditingInDOMRange );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char webView_shouldChangeSelectedDOMRange_toDOMRange_affinity_stillSelecting_( NObjective.RuntimeObject view, NObjective.RuntimeObject shouldChangeSelectedDOMRange, NObjective.RuntimeObject toDOMRange, uint affinity, char stillSelecting ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webView_shouldChangeSelectedDOMRange_toDOMRange_affinity_stillSelecting_( Handle, CachedSelectors.webView_shouldChangeSelectedDOMRange_toDOMRange_affinity_stillSelecting_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( char ), view, shouldChangeSelectedDOMRange, toDOMRange, affinity, stillSelecting );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char webView_shouldChangeTypingStyle_toStyle_( NObjective.RuntimeObject view, NObjective.RuntimeObject shouldChangeTypingStyle, NObjective.RuntimeObject toStyle ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webView_shouldChangeTypingStyle_toStyle_( Handle, CachedSelectors.webView_shouldChangeTypingStyle_toStyle_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, shouldChangeTypingStyle, toStyle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char webView_shouldDeleteDOMRange_( NObjective.RuntimeObject view, NObjective.RuntimeObject shouldDeleteDOMRange ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webView_shouldDeleteDOMRange_( Handle, CachedSelectors.webView_shouldDeleteDOMRange_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, shouldDeleteDOMRange );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char webView_shouldEndEditingInDOMRange_( NObjective.RuntimeObject view, NObjective.RuntimeObject shouldEndEditingInDOMRange ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webView_shouldEndEditingInDOMRange_( Handle, CachedSelectors.webView_shouldEndEditingInDOMRange_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, shouldEndEditingInDOMRange );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char webView_shouldInsertNode_replacingDOMRange_givenAction_( NObjective.RuntimeObject view, NObjective.RuntimeObject shouldInsertNode, NObjective.RuntimeObject replacingDOMRange, int givenAction ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webView_shouldInsertNode_replacingDOMRange_givenAction_( Handle, CachedSelectors.webView_shouldInsertNode_replacingDOMRange_givenAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), view, shouldInsertNode, replacingDOMRange, givenAction );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char webView_shouldInsertText_replacingDOMRange_givenAction_( NObjective.RuntimeObject view, NObjective.RuntimeObject shouldInsertText, NObjective.RuntimeObject replacingDOMRange, int givenAction ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webView_shouldInsertText_replacingDOMRange_givenAction_( Handle, CachedSelectors.webView_shouldInsertText_replacingDOMRange_givenAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), view, shouldInsertText, replacingDOMRange, givenAction );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char webView_shouldMoveRangeAfterDelete_replacingRange_( NObjective.RuntimeObject view, NObjective.RuntimeObject shouldMoveRangeAfterDelete, NObjective.RuntimeObject replacingRange ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webView_shouldMoveRangeAfterDelete_replacingRange_( Handle, CachedSelectors.webView_shouldMoveRangeAfterDelete_replacingRange_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, shouldMoveRangeAfterDelete, replacingRange );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char webView_shouldShowDeleteInterfaceForElement_( NObjective.RuntimeObject view, NObjective.RuntimeObject shouldShowDeleteInterfaceForElement ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webView_shouldShowDeleteInterfaceForElement_( Handle, CachedSelectors.webView_shouldShowDeleteInterfaceForElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, shouldShowDeleteInterfaceForElement );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void webViewDidBeginEditing_( NObjective.RuntimeObject editing ) {
			RuntimeObject ___occuredException;
			NativeMethods.webViewDidBeginEditing_( Handle, CachedSelectors.webViewDidBeginEditing_, out ___occuredException, sizeof( NObjective.RuntimeObject ), editing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webViewDidChange_( NObjective.RuntimeObject change ) {
			RuntimeObject ___occuredException;
			NativeMethods.webViewDidChange_( Handle, CachedSelectors.webViewDidChange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), change );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webViewDidChangeSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.webViewDidChangeSelection_( Handle, CachedSelectors.webViewDidChangeSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webViewDidChangeTypingStyle_( NObjective.RuntimeObject style ) {
			RuntimeObject ___occuredException;
			NativeMethods.webViewDidChangeTypingStyle_( Handle, CachedSelectors.webViewDidChangeTypingStyle_, out ___occuredException, sizeof( NObjective.RuntimeObject ), style );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webViewDidEndEditing_( NObjective.RuntimeObject editing ) {
			RuntimeObject ___occuredException;
			NativeMethods.webViewDidEndEditing_( Handle, CachedSelectors.webViewDidEndEditing_, out ___occuredException, sizeof( NObjective.RuntimeObject ), editing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedEditingDelegate( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr undoManagerForWebView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_didSetSelectionTypesForPasteboard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject didSetSelectionTypesForPasteboard );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_didWriteSelectionToPasteboard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject didWriteSelectionToPasteboard );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char webView_doCommandBySelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.Selector doCommandBySelector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char webView_shouldApplyStyle_toElementsInDOMRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject shouldApplyStyle, NObjective.RuntimeObject toElementsInDOMRange );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char webView_shouldBeginEditingInDOMRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject shouldBeginEditingInDOMRange );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char webView_shouldChangeSelectedDOMRange_toDOMRange_affinity_stillSelecting_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject shouldChangeSelectedDOMRange, NObjective.RuntimeObject toDOMRange, uint affinity, char stillSelecting );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char webView_shouldChangeTypingStyle_toStyle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject shouldChangeTypingStyle, NObjective.RuntimeObject toStyle );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char webView_shouldDeleteDOMRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject shouldDeleteDOMRange );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char webView_shouldEndEditingInDOMRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject shouldEndEditingInDOMRange );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char webView_shouldInsertNode_replacingDOMRange_givenAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject shouldInsertNode, NObjective.RuntimeObject replacingDOMRange, int givenAction );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char webView_shouldInsertText_replacingDOMRange_givenAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject shouldInsertText, NObjective.RuntimeObject replacingDOMRange, int givenAction );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char webView_shouldMoveRangeAfterDelete_replacingRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject shouldMoveRangeAfterDelete, NObjective.RuntimeObject replacingRange );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char webView_shouldShowDeleteInterfaceForElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject shouldShowDeleteInterfaceForElement );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webViewDidBeginEditing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject editing );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webViewDidChange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject change );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webViewDidChangeSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webViewDidChangeTypingStyle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject style );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webViewDidEndEditing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject editing );
		}
		static internal class CachedSelectors {
			public static readonly Selector sharedEditingDelegate = "sharedEditingDelegate";
			public static readonly Selector undoManagerForWebView_ = "undoManagerForWebView:";
			public static readonly Selector webView_didSetSelectionTypesForPasteboard_ = "webView:didSetSelectionTypesForPasteboard:";
			public static readonly Selector webView_didWriteSelectionToPasteboard_ = "webView:didWriteSelectionToPasteboard:";
			public static readonly Selector webView_doCommandBySelector_ = "webView:doCommandBySelector:";
			public static readonly Selector webView_shouldApplyStyle_toElementsInDOMRange_ = "webView:shouldApplyStyle:toElementsInDOMRange:";
			public static readonly Selector webView_shouldBeginEditingInDOMRange_ = "webView:shouldBeginEditingInDOMRange:";
			public static readonly Selector webView_shouldChangeSelectedDOMRange_toDOMRange_affinity_stillSelecting_ = "webView:shouldChangeSelectedDOMRange:toDOMRange:affinity:stillSelecting:";
			public static readonly Selector webView_shouldChangeTypingStyle_toStyle_ = "webView:shouldChangeTypingStyle:toStyle:";
			public static readonly Selector webView_shouldDeleteDOMRange_ = "webView:shouldDeleteDOMRange:";
			public static readonly Selector webView_shouldEndEditingInDOMRange_ = "webView:shouldEndEditingInDOMRange:";
			public static readonly Selector webView_shouldInsertNode_replacingDOMRange_givenAction_ = "webView:shouldInsertNode:replacingDOMRange:givenAction:";
			public static readonly Selector webView_shouldInsertText_replacingDOMRange_givenAction_ = "webView:shouldInsertText:replacingDOMRange:givenAction:";
			public static readonly Selector webView_shouldMoveRangeAfterDelete_replacingRange_ = "webView:shouldMoveRangeAfterDelete:replacingRange:";
			public static readonly Selector webView_shouldShowDeleteInterfaceForElement_ = "webView:shouldShowDeleteInterfaceForElement:";
			public static readonly Selector webViewDidBeginEditing_ = "webViewDidBeginEditing:";
			public static readonly Selector webViewDidChange_ = "webViewDidChange:";
			public static readonly Selector webViewDidChangeSelection_ = "webViewDidChangeSelection:";
			public static readonly Selector webViewDidChangeTypingStyle_ = "webViewDidChangeTypingStyle:";
			public static readonly Selector webViewDidEndEditing_ = "webViewDidEndEditing:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebDefaultPolicyDelegate : IEquatable<WebDefaultPolicyDelegate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebDefaultPolicyDelegate;
		public static implicit operator IntPtr( WebDefaultPolicyDelegate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebDefaultPolicyDelegate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebDefaultPolicyDelegate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebDefaultPolicyDelegate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebDefaultPolicyDelegate value1, WebDefaultPolicyDelegate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebDefaultPolicyDelegate value1, WebDefaultPolicyDelegate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebDefaultPolicyDelegate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebDefaultPolicyDelegate alloc() {
			return new WebDefaultPolicyDelegate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject sharedPolicyDelegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedPolicyDelegate( ClassHandle, CachedSelectors.sharedPolicyDelegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void webView_decidePolicyForMIMEType_request_frame_decisionListener_( NObjective.RuntimeObject view, NObjective.RuntimeObject decidePolicyForMIMEType, NObjective.RuntimeObject request, NObjective.RuntimeObject frame, NObjective.RuntimeObject decisionListener ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_decidePolicyForMIMEType_request_frame_decisionListener_( Handle, CachedSelectors.webView_decidePolicyForMIMEType_request_frame_decisionListener_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, decidePolicyForMIMEType, request, frame, decisionListener );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webView_decidePolicyForNavigationAction_request_frame_decisionListener_( NObjective.RuntimeObject view, NObjective.RuntimeObject decidePolicyForNavigationAction, NObjective.RuntimeObject request, NObjective.RuntimeObject frame, NObjective.RuntimeObject decisionListener ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_decidePolicyForNavigationAction_request_frame_decisionListener_( Handle, CachedSelectors.webView_decidePolicyForNavigationAction_request_frame_decisionListener_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, decidePolicyForNavigationAction, request, frame, decisionListener );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webView_decidePolicyForNewWindowAction_request_newFrameName_decisionListener_( NObjective.RuntimeObject view, NObjective.RuntimeObject decidePolicyForNewWindowAction, NObjective.RuntimeObject request, NObjective.RuntimeObject newFrameName, NObjective.RuntimeObject decisionListener ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_decidePolicyForNewWindowAction_request_newFrameName_decisionListener_( Handle, CachedSelectors.webView_decidePolicyForNewWindowAction_request_newFrameName_decisionListener_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, decidePolicyForNewWindowAction, request, newFrameName, decisionListener );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char webView_shouldGoToHistoryItem_( NObjective.RuntimeObject view, NObjective.RuntimeObject shouldGoToHistoryItem ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webView_shouldGoToHistoryItem_( Handle, CachedSelectors.webView_shouldGoToHistoryItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, shouldGoToHistoryItem );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void webView_unableToImplementPolicyWithError_frame_( NObjective.RuntimeObject view, NObjective.RuntimeObject unableToImplementPolicyWithError, NObjective.RuntimeObject frame ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_unableToImplementPolicyWithError_frame_( Handle, CachedSelectors.webView_unableToImplementPolicyWithError_frame_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, unableToImplementPolicyWithError, frame );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedPolicyDelegate( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_decidePolicyForMIMEType_request_frame_decisionListener_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject decidePolicyForMIMEType, NObjective.RuntimeObject request, NObjective.RuntimeObject frame, NObjective.RuntimeObject decisionListener );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_decidePolicyForNavigationAction_request_frame_decisionListener_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject decidePolicyForNavigationAction, NObjective.RuntimeObject request, NObjective.RuntimeObject frame, NObjective.RuntimeObject decisionListener );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_decidePolicyForNewWindowAction_request_newFrameName_decisionListener_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject decidePolicyForNewWindowAction, NObjective.RuntimeObject request, NObjective.RuntimeObject newFrameName, NObjective.RuntimeObject decisionListener );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char webView_shouldGoToHistoryItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject shouldGoToHistoryItem );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_unableToImplementPolicyWithError_frame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject unableToImplementPolicyWithError, NObjective.RuntimeObject frame );
		}
		static internal class CachedSelectors {
			public static readonly Selector sharedPolicyDelegate = "sharedPolicyDelegate";
			public static readonly Selector webView_decidePolicyForMIMEType_request_frame_decisionListener_ = "webView:decidePolicyForMIMEType:request:frame:decisionListener:";
			public static readonly Selector webView_decidePolicyForNavigationAction_request_frame_decisionListener_ = "webView:decidePolicyForNavigationAction:request:frame:decisionListener:";
			public static readonly Selector webView_decidePolicyForNewWindowAction_request_newFrameName_decisionListener_ = "webView:decidePolicyForNewWindowAction:request:newFrameName:decisionListener:";
			public static readonly Selector webView_shouldGoToHistoryItem_ = "webView:shouldGoToHistoryItem:";
			public static readonly Selector webView_unableToImplementPolicyWithError_frame_ = "webView:unableToImplementPolicyWithError:frame:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebDefaultScriptDebugDelegate : IEquatable<WebDefaultScriptDebugDelegate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebDefaultScriptDebugDelegate;
		public static implicit operator IntPtr( WebDefaultScriptDebugDelegate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebDefaultScriptDebugDelegate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebDefaultScriptDebugDelegate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebDefaultScriptDebugDelegate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebDefaultScriptDebugDelegate value1, WebDefaultScriptDebugDelegate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebDefaultScriptDebugDelegate value1, WebDefaultScriptDebugDelegate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebDefaultScriptDebugDelegate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebDefaultScriptDebugDelegate alloc() {
			return new WebDefaultScriptDebugDelegate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject sharedScriptDebugDelegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedScriptDebugDelegate( ClassHandle, CachedSelectors.sharedScriptDebugDelegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void webView_didEnterCallFrame_sourceId_line_forWebFrame_( NObjective.RuntimeObject view, NObjective.RuntimeObject didEnterCallFrame, int sourceId, int line, NObjective.RuntimeObject forWebFrame ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_didEnterCallFrame_sourceId_line_forWebFrame_( Handle, CachedSelectors.webView_didEnterCallFrame_sourceId_line_forWebFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), view, didEnterCallFrame, sourceId, line, forWebFrame );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webView_didParseSource_baseLineNumber_fromURL_sourceId_forWebFrame_( NObjective.RuntimeObject view, NObjective.RuntimeObject didParseSource, uint baseLineNumber, NObjective.RuntimeObject fromURL, int sourceId, NObjective.RuntimeObject forWebFrame ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_didParseSource_baseLineNumber_fromURL_sourceId_forWebFrame_( Handle, CachedSelectors.webView_didParseSource_baseLineNumber_fromURL_sourceId_forWebFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), view, didParseSource, baseLineNumber, fromURL, sourceId, forWebFrame
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webView_didParseSource_fromURL_sourceId_forWebFrame_( NObjective.RuntimeObject view, NObjective.RuntimeObject didParseSource, NObjective.RuntimeObject fromURL, int sourceId, NObjective.RuntimeObject forWebFrame ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_didParseSource_fromURL_sourceId_forWebFrame_( Handle, CachedSelectors.webView_didParseSource_fromURL_sourceId_forWebFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), view, didParseSource, fromURL, sourceId, forWebFrame );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webView_exceptionWasRaised_sourceId_line_forWebFrame_( NObjective.RuntimeObject view, NObjective.RuntimeObject exceptionWasRaised, int sourceId, int line, NObjective.RuntimeObject forWebFrame ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_exceptionWasRaised_sourceId_line_forWebFrame_( Handle, CachedSelectors.webView_exceptionWasRaised_sourceId_line_forWebFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), view, exceptionWasRaised, sourceId, line, forWebFrame );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webView_failedToParseSource_baseLineNumber_fromURL_withError_forWebFrame_( NObjective.RuntimeObject view, NObjective.RuntimeObject failedToParseSource, uint baseLineNumber, NObjective.RuntimeObject fromURL, NObjective.RuntimeObject withError, NObjective.RuntimeObject forWebFrame ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_failedToParseSource_baseLineNumber_fromURL_withError_forWebFrame_( Handle, CachedSelectors.webView_failedToParseSource_baseLineNumber_fromURL_withError_forWebFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, failedToParseSource, baseLineNumber, fromURL, withError, forWebFrame
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webView_willExecuteStatement_sourceId_line_forWebFrame_( NObjective.RuntimeObject view, NObjective.RuntimeObject willExecuteStatement, int sourceId, int line, NObjective.RuntimeObject forWebFrame ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_willExecuteStatement_sourceId_line_forWebFrame_( Handle, CachedSelectors.webView_willExecuteStatement_sourceId_line_forWebFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), view, willExecuteStatement, sourceId, line, forWebFrame );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webView_willLeaveCallFrame_sourceId_line_forWebFrame_( NObjective.RuntimeObject view, NObjective.RuntimeObject willLeaveCallFrame, int sourceId, int line, NObjective.RuntimeObject forWebFrame ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_willLeaveCallFrame_sourceId_line_forWebFrame_( Handle, CachedSelectors.webView_willLeaveCallFrame_sourceId_line_forWebFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), view, willLeaveCallFrame, sourceId, line, forWebFrame );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedScriptDebugDelegate( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_didEnterCallFrame_sourceId_line_forWebFrame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject didEnterCallFrame, int sourceId, int line, NObjective.RuntimeObject forWebFrame );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_didParseSource_baseLineNumber_fromURL_sourceId_forWebFrame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject didParseSource, uint baseLineNumber, NObjective.RuntimeObject fromURL, int sourceId, NObjective.RuntimeObject forWebFrame
			 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_didParseSource_fromURL_sourceId_forWebFrame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject didParseSource, NObjective.RuntimeObject fromURL, int sourceId, NObjective.RuntimeObject forWebFrame );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_exceptionWasRaised_sourceId_line_forWebFrame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject exceptionWasRaised, int sourceId, int line, NObjective.RuntimeObject forWebFrame );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_failedToParseSource_baseLineNumber_fromURL_withError_forWebFrame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject failedToParseSource, uint baseLineNumber, NObjective.RuntimeObject fromURL, NObjective.RuntimeObject withError, NObjective.RuntimeObject forWebFrame
			 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_willExecuteStatement_sourceId_line_forWebFrame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject willExecuteStatement, int sourceId, int line, NObjective.RuntimeObject forWebFrame );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_willLeaveCallFrame_sourceId_line_forWebFrame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject willLeaveCallFrame, int sourceId, int line, NObjective.RuntimeObject forWebFrame );
		}
		static internal class CachedSelectors {
			public static readonly Selector sharedScriptDebugDelegate = "sharedScriptDebugDelegate";
			public static readonly Selector webView_didEnterCallFrame_sourceId_line_forWebFrame_ = "webView:didEnterCallFrame:sourceId:line:forWebFrame:";
			public static readonly Selector webView_didParseSource_baseLineNumber_fromURL_sourceId_forWebFrame_ = "webView:didParseSource:baseLineNumber:fromURL:sourceId:forWebFrame:";
			public static readonly Selector webView_didParseSource_fromURL_sourceId_forWebFrame_ = "webView:didParseSource:fromURL:sourceId:forWebFrame:";
			public static readonly Selector webView_exceptionWasRaised_sourceId_line_forWebFrame_ = "webView:exceptionWasRaised:sourceId:line:forWebFrame:";
			public static readonly Selector webView_failedToParseSource_baseLineNumber_fromURL_withError_forWebFrame_ = "webView:failedToParseSource:baseLineNumber:fromURL:withError:forWebFrame:";
			public static readonly Selector webView_willExecuteStatement_sourceId_line_forWebFrame_ = "webView:willExecuteStatement:sourceId:line:forWebFrame:";
			public static readonly Selector webView_willLeaveCallFrame_sourceId_line_forWebFrame_ = "webView:willLeaveCallFrame:sourceId:line:forWebFrame:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebDefaultUIDelegate : IEquatable<WebDefaultUIDelegate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebDefaultUIDelegate;
		public static implicit operator IntPtr( WebDefaultUIDelegate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebDefaultUIDelegate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebDefaultUIDelegate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebDefaultUIDelegate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebDefaultUIDelegate value1, WebDefaultUIDelegate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebDefaultUIDelegate value1, WebDefaultUIDelegate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebDefaultUIDelegate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebDefaultUIDelegate alloc() {
			return new WebDefaultUIDelegate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject sharedUIDelegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedUIDelegate( ClassHandle, CachedSelectors.sharedUIDelegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void appendDefaultItems_toArray_( NObjective.RuntimeObject items, NObjective.RuntimeObject toArray ) {
			RuntimeObject ___occuredException;
			NativeMethods.appendDefaultItems_toArray_( Handle, CachedSelectors.appendDefaultItems_toArray_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), items, toArray );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject menuItemWithTag_target_representedObject_( int tag, NObjective.RuntimeObject target, NObjective.RuntimeObject representedObject ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.menuItemWithTag_target_representedObject_( Handle, CachedSelectors.menuItemWithTag_target_representedObject_, out ___occuredException, sizeof( int ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), tag, target, representedObject );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void webView_contextMenuItemSelected_forElement_( NObjective.RuntimeObject view, NObjective.RuntimeObject contextMenuItemSelected, NObjective.RuntimeObject forElement ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_contextMenuItemSelected_forElement_( Handle, CachedSelectors.webView_contextMenuItemSelected_forElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, contextMenuItemSelected, forElement );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject webView_contextMenuItemsForElement_defaultMenuItems_( NObjective.RuntimeObject view, NObjective.RuntimeObject contextMenuItemsForElement, NObjective.RuntimeObject defaultMenuItems ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webView_contextMenuItemsForElement_defaultMenuItems_( Handle, CachedSelectors.webView_contextMenuItemsForElement_defaultMenuItems_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, contextMenuItemsForElement, defaultMenuItems );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject webView_createWebViewWithRequest_windowFeatures_( NObjective.RuntimeObject view, NObjective.RuntimeObject createWebViewWithRequest, NObjective.RuntimeObject windowFeatures ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webView_createWebViewWithRequest_windowFeatures_( Handle, CachedSelectors.webView_createWebViewWithRequest_windowFeatures_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, createWebViewWithRequest, windowFeatures );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void webView_didScrollDocumentInFrameView_( NObjective.RuntimeObject view, NObjective.RuntimeObject didScrollDocumentInFrameView ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_didScrollDocumentInFrameView_( Handle, CachedSelectors.webView_didScrollDocumentInFrameView_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, didScrollDocumentInFrameView );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint webView_dragDestinationActionMaskForDraggingInfo_( NObjective.RuntimeObject view, NObjective.RuntimeObject dragDestinationActionMaskForDraggingInfo ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webView_dragDestinationActionMaskForDraggingInfo_( Handle, CachedSelectors.webView_dragDestinationActionMaskForDraggingInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, dragDestinationActionMaskForDraggingInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public void webView_makeFirstResponder_( NObjective.RuntimeObject view, NObjective.RuntimeObject makeFirstResponder ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_makeFirstResponder_( Handle, CachedSelectors.webView_makeFirstResponder_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, makeFirstResponder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webView_mouseDidMoveOverElement_modifierFlags_( NObjective.RuntimeObject view, NObjective.RuntimeObject mouseDidMoveOverElement, uint modifierFlags ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_mouseDidMoveOverElement_modifierFlags_( Handle, CachedSelectors.webView_mouseDidMoveOverElement_modifierFlags_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ), view, mouseDidMoveOverElement, modifierFlags );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webView_printFrameView_( NObjective.RuntimeObject view, NObjective.RuntimeObject printFrameView ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_printFrameView_( Handle, CachedSelectors.webView_printFrameView_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, printFrameView );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webView_runJavaScriptAlertPanelWithMessage_initiatedByFrame_( NObjective.RuntimeObject view, NObjective.RuntimeObject runJavaScriptAlertPanelWithMessage, NObjective.RuntimeObject initiatedByFrame ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_runJavaScriptAlertPanelWithMessage_initiatedByFrame_( Handle, CachedSelectors.webView_runJavaScriptAlertPanelWithMessage_initiatedByFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, runJavaScriptAlertPanelWithMessage, initiatedByFrame );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char webView_runJavaScriptConfirmPanelWithMessage_initiatedByFrame_( NObjective.RuntimeObject view, NObjective.RuntimeObject runJavaScriptConfirmPanelWithMessage, NObjective.RuntimeObject initiatedByFrame ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webView_runJavaScriptConfirmPanelWithMessage_initiatedByFrame_( Handle, CachedSelectors.webView_runJavaScriptConfirmPanelWithMessage_initiatedByFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, runJavaScriptConfirmPanelWithMessage, initiatedByFrame );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject webView_runJavaScriptTextInputPanelWithPrompt_defaultText_initiatedByFrame_( NObjective.RuntimeObject view, NObjective.RuntimeObject runJavaScriptTextInputPanelWithPrompt, NObjective.RuntimeObject defaultText, NObjective.RuntimeObject initiatedByFrame ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webView_runJavaScriptTextInputPanelWithPrompt_defaultText_initiatedByFrame_( Handle, CachedSelectors.webView_runJavaScriptTextInputPanelWithPrompt_defaultText_initiatedByFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, runJavaScriptTextInputPanelWithPrompt, defaultText, initiatedByFrame );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void webView_runOpenPanelForFileButtonWithResultListener_( NObjective.RuntimeObject view, NObjective.RuntimeObject runOpenPanelForFileButtonWithResultListener ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_runOpenPanelForFileButtonWithResultListener_( Handle, CachedSelectors.webView_runOpenPanelForFileButtonWithResultListener_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, runOpenPanelForFileButtonWithResultListener );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webView_setResizable_( NObjective.RuntimeObject view, char setResizable ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_setResizable_( Handle, CachedSelectors.webView_setResizable_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), view, setResizable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webView_setStatusBarVisible_( NObjective.RuntimeObject view, char setStatusBarVisible ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_setStatusBarVisible_( Handle, CachedSelectors.webView_setStatusBarVisible_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), view, setStatusBarVisible );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webView_setStatusText_( NObjective.RuntimeObject view, NObjective.RuntimeObject setStatusText ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_setStatusText_( Handle, CachedSelectors.webView_setStatusText_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, setStatusText );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webView_setToolbarsVisible_( NObjective.RuntimeObject view, char setToolbarsVisible ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_setToolbarsVisible_( Handle, CachedSelectors.webView_setToolbarsVisible_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ), view, setToolbarsVisible );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char webView_shouldBeginDragForElement_dragImage_mouseDownEvent_mouseDraggedEvent_( NObjective.RuntimeObject view, NObjective.RuntimeObject shouldBeginDragForElement, NObjective.RuntimeObject dragImage, NObjective.RuntimeObject mouseDownEvent, NObjective.RuntimeObject mouseDraggedEvent ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webView_shouldBeginDragForElement_dragImage_mouseDownEvent_mouseDraggedEvent_( Handle, CachedSelectors.webView_shouldBeginDragForElement_dragImage_mouseDownEvent_mouseDraggedEvent_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, shouldBeginDragForElement, dragImage, mouseDownEvent, mouseDraggedEvent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void webView_willPerformDragDestinationAction_forDraggingInfo_( NObjective.RuntimeObject view, int willPerformDragDestinationAction, NObjective.RuntimeObject forDraggingInfo ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_willPerformDragDestinationAction_forDraggingInfo_( Handle, CachedSelectors.webView_willPerformDragDestinationAction_forDraggingInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), view, willPerformDragDestinationAction, forDraggingInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webView_willPopupMenu_( NObjective.RuntimeObject view, NObjective.RuntimeObject willPopupMenu ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_willPopupMenu_( Handle, CachedSelectors.webView_willPopupMenu_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, willPopupMenu );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char webViewAreToolbarsVisible_( NObjective.RuntimeObject visible ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webViewAreToolbarsVisible_( Handle, CachedSelectors.webViewAreToolbarsVisible_, out ___occuredException, sizeof( NObjective.RuntimeObject ), visible );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void webViewClose_( NObjective.RuntimeObject close ) {
			RuntimeObject ___occuredException;
			NativeMethods.webViewClose_( Handle, CachedSelectors.webViewClose_, out ___occuredException, sizeof( NObjective.RuntimeObject ), close );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject webViewFirstResponder_( NObjective.RuntimeObject responder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webViewFirstResponder_( Handle, CachedSelectors.webViewFirstResponder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), responder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void webViewFocus_( NObjective.RuntimeObject focus ) {
			RuntimeObject ___occuredException;
			NativeMethods.webViewFocus_( Handle, CachedSelectors.webViewFocus_, out ___occuredException, sizeof( NObjective.RuntimeObject ), focus );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char webViewIsResizable_( NObjective.RuntimeObject resizable ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webViewIsResizable_( Handle, CachedSelectors.webViewIsResizable_, out ___occuredException, sizeof( NObjective.RuntimeObject ), resizable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char webViewIsStatusBarVisible_( NObjective.RuntimeObject visible ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webViewIsStatusBarVisible_( Handle, CachedSelectors.webViewIsStatusBarVisible_, out ___occuredException, sizeof( NObjective.RuntimeObject ), visible );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void webViewShow_( NObjective.RuntimeObject show ) {
			RuntimeObject ___occuredException;
			NativeMethods.webViewShow_( Handle, CachedSelectors.webViewShow_, out ___occuredException, sizeof( NObjective.RuntimeObject ), show );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject webViewStatusText_( NObjective.RuntimeObject text ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webViewStatusText_( Handle, CachedSelectors.webViewStatusText_, out ___occuredException, sizeof( NObjective.RuntimeObject ), text );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void webViewUnfocus_( NObjective.RuntimeObject unfocus ) {
			RuntimeObject ___occuredException;
			NativeMethods.webViewUnfocus_( Handle, CachedSelectors.webViewUnfocus_, out ___occuredException, sizeof( NObjective.RuntimeObject ), unfocus );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void appendDefaultItems_toArray_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject items, NObjective.RuntimeObject toArray );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr menuItemWithTag_target_representedObject_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int tag, NObjective.RuntimeObject target, NObjective.RuntimeObject representedObject );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedUIDelegate( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_contextMenuItemSelected_forElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject contextMenuItemSelected, NObjective.RuntimeObject forElement );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr webView_contextMenuItemsForElement_defaultMenuItems_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject contextMenuItemsForElement, NObjective.RuntimeObject defaultMenuItems );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr webView_createWebViewWithRequest_windowFeatures_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject createWebViewWithRequest, NObjective.RuntimeObject windowFeatures );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_didScrollDocumentInFrameView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject didScrollDocumentInFrameView );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint webView_dragDestinationActionMaskForDraggingInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject dragDestinationActionMaskForDraggingInfo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_makeFirstResponder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject makeFirstResponder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_mouseDidMoveOverElement_modifierFlags_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject mouseDidMoveOverElement, uint modifierFlags );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_printFrameView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject printFrameView );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_runJavaScriptAlertPanelWithMessage_initiatedByFrame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject runJavaScriptAlertPanelWithMessage, NObjective.RuntimeObject initiatedByFrame );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char webView_runJavaScriptConfirmPanelWithMessage_initiatedByFrame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject runJavaScriptConfirmPanelWithMessage, NObjective.RuntimeObject initiatedByFrame );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr webView_runJavaScriptTextInputPanelWithPrompt_defaultText_initiatedByFrame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject runJavaScriptTextInputPanelWithPrompt, NObjective.RuntimeObject defaultText, NObjective.RuntimeObject initiatedByFrame );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_runOpenPanelForFileButtonWithResultListener_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject runOpenPanelForFileButtonWithResultListener );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_setResizable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, char setResizable );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_setStatusBarVisible_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, char setStatusBarVisible );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_setStatusText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject setStatusText );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_setToolbarsVisible_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, char setToolbarsVisible );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char webView_shouldBeginDragForElement_dragImage_mouseDownEvent_mouseDraggedEvent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject shouldBeginDragForElement, NObjective.RuntimeObject dragImage, NObjective.RuntimeObject mouseDownEvent, NObjective.RuntimeObject mouseDraggedEvent );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_willPerformDragDestinationAction_forDraggingInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, int willPerformDragDestinationAction, NObjective.RuntimeObject forDraggingInfo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_willPopupMenu_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject willPopupMenu );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char webViewAreToolbarsVisible_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject visible );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webViewClose_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject close );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr webViewFirstResponder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject responder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webViewFocus_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject focus );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char webViewIsResizable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject resizable );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char webViewIsStatusBarVisible_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject visible );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webViewShow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject show );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr webViewStatusText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject text );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webViewUnfocus_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject unfocus );
		}
		static internal class CachedSelectors {
			public static readonly Selector appendDefaultItems_toArray_ = "appendDefaultItems:toArray:";
			public static readonly Selector menuItemWithTag_target_representedObject_ = "menuItemWithTag:target:representedObject:";
			public static readonly Selector sharedUIDelegate = "sharedUIDelegate";
			public static readonly Selector webView_contextMenuItemSelected_forElement_ = "webView:contextMenuItemSelected:forElement:";
			public static readonly Selector webView_contextMenuItemsForElement_defaultMenuItems_ = "webView:contextMenuItemsForElement:defaultMenuItems:";
			public static readonly Selector webView_createWebViewWithRequest_windowFeatures_ = "webView:createWebViewWithRequest:windowFeatures:";
			public static readonly Selector webView_didScrollDocumentInFrameView_ = "webView:didScrollDocumentInFrameView:";
			public static readonly Selector webView_dragDestinationActionMaskForDraggingInfo_ = "webView:dragDestinationActionMaskForDraggingInfo:";
			public static readonly Selector webView_makeFirstResponder_ = "webView:makeFirstResponder:";
			public static readonly Selector webView_mouseDidMoveOverElement_modifierFlags_ = "webView:mouseDidMoveOverElement:modifierFlags:";
			public static readonly Selector webView_printFrameView_ = "webView:printFrameView:";
			public static readonly Selector webView_runJavaScriptAlertPanelWithMessage_initiatedByFrame_ = "webView:runJavaScriptAlertPanelWithMessage:initiatedByFrame:";
			public static readonly Selector webView_runJavaScriptConfirmPanelWithMessage_initiatedByFrame_ = "webView:runJavaScriptConfirmPanelWithMessage:initiatedByFrame:";
			public static readonly Selector webView_runJavaScriptTextInputPanelWithPrompt_defaultText_initiatedByFrame_ = "webView:runJavaScriptTextInputPanelWithPrompt:defaultText:initiatedByFrame:";
			public static readonly Selector webView_runOpenPanelForFileButtonWithResultListener_ = "webView:runOpenPanelForFileButtonWithResultListener:";
			public static readonly Selector webView_setResizable_ = "webView:setResizable:";
			public static readonly Selector webView_setStatusBarVisible_ = "webView:setStatusBarVisible:";
			public static readonly Selector webView_setStatusText_ = "webView:setStatusText:";
			public static readonly Selector webView_setToolbarsVisible_ = "webView:setToolbarsVisible:";
			public static readonly Selector webView_shouldBeginDragForElement_dragImage_mouseDownEvent_mouseDraggedEvent_ = "webView:shouldBeginDragForElement:dragImage:mouseDownEvent:mouseDraggedEvent:";
			public static readonly Selector webView_willPerformDragDestinationAction_forDraggingInfo_ = "webView:willPerformDragDestinationAction:forDraggingInfo:";
			public static readonly Selector webView_willPopupMenu_ = "webView:willPopupMenu:";
			public static readonly Selector webViewAreToolbarsVisible_ = "webViewAreToolbarsVisible:";
			public static readonly Selector webViewClose_ = "webViewClose:";
			public static readonly Selector webViewFirstResponder_ = "webViewFirstResponder:";
			public static readonly Selector webViewFocus_ = "webViewFocus:";
			public static readonly Selector webViewIsResizable_ = "webViewIsResizable:";
			public static readonly Selector webViewIsStatusBarVisible_ = "webViewIsStatusBarVisible:";
			public static readonly Selector webViewShow_ = "webViewShow:";
			public static readonly Selector webViewStatusText_ = "webViewStatusText:";
			public static readonly Selector webViewUnfocus_ = "webViewUnfocus:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSURLDownload ) )]
	public struct WebDownload : IEquatable<WebDownload> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebDownload;
		public static implicit operator IntPtr( WebDownload value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebDownload value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebDownload?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebDownload value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebDownload value1, WebDownload value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebDownload value1, WebDownload value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebDownload( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebDownload alloc() {
			return new WebDownload( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void connection_willStopBufferingData_( NObjective.RuntimeObject connection, NObjective.RuntimeObject willStopBufferingData ) {
			RuntimeObject ___occuredException;
			NativeMethods.connection_willStopBufferingData_( Handle, CachedSelectors.connection_willStopBufferingData_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), connection, willStopBufferingData );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void connection_willStopBufferingData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject connection, NObjective.RuntimeObject willStopBufferingData );
		}
		static internal class CachedSelectors {
			public static readonly Selector connection_willStopBufferingData_ = "connection:willStopBufferingData:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebDownloadInternal : IEquatable<WebDownloadInternal> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebDownloadInternal;
		public static implicit operator IntPtr( WebDownloadInternal value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebDownloadInternal value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebDownloadInternal?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebDownloadInternal value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebDownloadInternal value1, WebDownloadInternal value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebDownloadInternal value1, WebDownloadInternal value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebDownloadInternal( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebDownloadInternal alloc() {
			return new WebDownloadInternal( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void download_decideDestinationWithSuggestedFilename_( NObjective.RuntimeObject download, NObjective.RuntimeObject decideDestinationWithSuggestedFilename ) {
			RuntimeObject ___occuredException;
			NativeMethods.download_decideDestinationWithSuggestedFilename_( Handle, CachedSelectors.download_decideDestinationWithSuggestedFilename_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), download, decideDestinationWithSuggestedFilename );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void download_didBeginChildDownload_( NObjective.RuntimeObject download, NObjective.RuntimeObject didBeginChildDownload ) {
			RuntimeObject ___occuredException;
			NativeMethods.download_didBeginChildDownload_( Handle, CachedSelectors.download_didBeginChildDownload_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), download, didBeginChildDownload );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void download_didCancelAuthenticationChallenge_( NObjective.RuntimeObject download, NObjective.RuntimeObject didCancelAuthenticationChallenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.download_didCancelAuthenticationChallenge_( Handle, CachedSelectors.download_didCancelAuthenticationChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), download, didCancelAuthenticationChallenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void download_didCreateDestination_( NObjective.RuntimeObject download, NObjective.RuntimeObject didCreateDestination ) {
			RuntimeObject ___occuredException;
			NativeMethods.download_didCreateDestination_( Handle, CachedSelectors.download_didCreateDestination_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), download, didCreateDestination );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void download_didFailWithError_( NObjective.RuntimeObject download, NObjective.RuntimeObject didFailWithError ) {
			RuntimeObject ___occuredException;
			NativeMethods.download_didFailWithError_( Handle, CachedSelectors.download_didFailWithError_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), download, didFailWithError );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void download_didReceiveAuthenticationChallenge_( NObjective.RuntimeObject download, NObjective.RuntimeObject didReceiveAuthenticationChallenge ) {
			RuntimeObject ___occuredException;
			NativeMethods.download_didReceiveAuthenticationChallenge_( Handle, CachedSelectors.download_didReceiveAuthenticationChallenge_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), download, didReceiveAuthenticationChallenge );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void download_didReceiveDataOfLength_( NObjective.RuntimeObject download, uint didReceiveDataOfLength ) {
			RuntimeObject ___occuredException;
			NativeMethods.download_didReceiveDataOfLength_( Handle, CachedSelectors.download_didReceiveDataOfLength_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( uint ), download, didReceiveDataOfLength );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void download_didReceiveResponse_( NObjective.RuntimeObject download, NObjective.RuntimeObject didReceiveResponse ) {
			RuntimeObject ___occuredException;
			NativeMethods.download_didReceiveResponse_( Handle, CachedSelectors.download_didReceiveResponse_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), download, didReceiveResponse );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject download_shouldBeginChildDownloadOfSource_delegate_( NObjective.RuntimeObject download, NObjective.RuntimeObject shouldBeginChildDownloadOfSource, System.IntPtr @delegate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.download_shouldBeginChildDownloadOfSource_delegate_( Handle, CachedSelectors.download_shouldBeginChildDownloadOfSource_delegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), download, shouldBeginChildDownloadOfSource, @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char download_shouldDecodeSourceDataOfMIMEType_( NObjective.RuntimeObject download, NObjective.RuntimeObject shouldDecodeSourceDataOfMIMEType ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.download_shouldDecodeSourceDataOfMIMEType_( Handle, CachedSelectors.download_shouldDecodeSourceDataOfMIMEType_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), download, shouldDecodeSourceDataOfMIMEType );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject download_willSendRequest_redirectResponse_( NObjective.RuntimeObject download, NObjective.RuntimeObject willSendRequest, NObjective.RuntimeObject redirectResponse ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.download_willSendRequest_redirectResponse_( Handle, CachedSelectors.download_willSendRequest_redirectResponse_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), download, willSendRequest, redirectResponse );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void downloadDidBegin_( NObjective.RuntimeObject begin ) {
			RuntimeObject ___occuredException;
			NativeMethods.downloadDidBegin_( Handle, CachedSelectors.downloadDidBegin_, out ___occuredException, sizeof( NObjective.RuntimeObject ), begin );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void downloadDidFinish_( NObjective.RuntimeObject finish ) {
			RuntimeObject ___occuredException;
			NativeMethods.downloadDidFinish_( Handle, CachedSelectors.downloadDidFinish_, out ___occuredException, sizeof( NObjective.RuntimeObject ), finish );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRealDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRealDelegate_( Handle, CachedSelectors.setRealDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void download_decideDestinationWithSuggestedFilename_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject download, NObjective.RuntimeObject decideDestinationWithSuggestedFilename );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void download_didBeginChildDownload_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject download, NObjective.RuntimeObject didBeginChildDownload );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void download_didCancelAuthenticationChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject download, NObjective.RuntimeObject didCancelAuthenticationChallenge );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void download_didCreateDestination_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject download, NObjective.RuntimeObject didCreateDestination );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void download_didFailWithError_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject download, NObjective.RuntimeObject didFailWithError );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void download_didReceiveAuthenticationChallenge_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject download, NObjective.RuntimeObject didReceiveAuthenticationChallenge );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void download_didReceiveDataOfLength_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject download, uint didReceiveDataOfLength );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void download_didReceiveResponse_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject download, NObjective.RuntimeObject didReceiveResponse );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr download_shouldBeginChildDownloadOfSource_delegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject download, NObjective.RuntimeObject shouldBeginChildDownloadOfSource, System.IntPtr @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char download_shouldDecodeSourceDataOfMIMEType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject download, NObjective.RuntimeObject shouldDecodeSourceDataOfMIMEType );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr download_willSendRequest_redirectResponse_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject download, NObjective.RuntimeObject willSendRequest, NObjective.RuntimeObject redirectResponse );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void downloadDidBegin_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject begin );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void downloadDidFinish_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject finish );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRealDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
		}
		static internal class CachedSelectors {
			public static readonly Selector download_decideDestinationWithSuggestedFilename_ = "download:decideDestinationWithSuggestedFilename:";
			public static readonly Selector download_didBeginChildDownload_ = "download:didBeginChildDownload:";
			public static readonly Selector download_didCancelAuthenticationChallenge_ = "download:didCancelAuthenticationChallenge:";
			public static readonly Selector download_didCreateDestination_ = "download:didCreateDestination:";
			public static readonly Selector download_didFailWithError_ = "download:didFailWithError:";
			public static readonly Selector download_didReceiveAuthenticationChallenge_ = "download:didReceiveAuthenticationChallenge:";
			public static readonly Selector download_didReceiveDataOfLength_ = "download:didReceiveDataOfLength:";
			public static readonly Selector download_didReceiveResponse_ = "download:didReceiveResponse:";
			public static readonly Selector download_shouldBeginChildDownloadOfSource_delegate_ = "download:shouldBeginChildDownloadOfSource:delegate:";
			public static readonly Selector download_shouldDecodeSourceDataOfMIMEType_ = "download:shouldDecodeSourceDataOfMIMEType:";
			public static readonly Selector download_willSendRequest_redirectResponse_ = "download:willSendRequest:redirectResponse:";
			public static readonly Selector downloadDidBegin_ = "downloadDidBegin:";
			public static readonly Selector downloadDidFinish_ = "downloadDidFinish:";
			public static readonly Selector setRealDelegate_ = "setRealDelegate:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSScrollView ) )]
	public struct WebDynamicScrollBarsView : IEquatable<WebDynamicScrollBarsView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebDynamicScrollBarsView;
		public static implicit operator IntPtr( WebDynamicScrollBarsView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebDynamicScrollBarsView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebDynamicScrollBarsView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebDynamicScrollBarsView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebDynamicScrollBarsView value1, WebDynamicScrollBarsView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebDynamicScrollBarsView value1, WebDynamicScrollBarsView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebDynamicScrollBarsView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebDynamicScrollBarsView alloc() {
			return new WebDynamicScrollBarsView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public char allowsHorizontalScrolling() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsHorizontalScrolling( Handle, CachedSelectors.allowsHorizontalScrolling, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char allowsScrolling() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsScrolling( Handle, CachedSelectors.allowsScrolling, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char allowsVerticalScrolling() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsVerticalScrolling( Handle, CachedSelectors.allowsVerticalScrolling, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int horizontalScrollingMode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.horizontalScrollingMode( Handle, CachedSelectors.horizontalScrollingMode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char horizontalScrollingModeLocked() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.horizontalScrollingModeLocked( Handle, CachedSelectors.horizontalScrollingModeLocked, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setAllowsHorizontalScrolling_( char scrolling ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsHorizontalScrolling_( Handle, CachedSelectors.setAllowsHorizontalScrolling_, out ___occuredException, sizeof( char ), scrolling );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsScrolling_( char scrolling ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsScrolling_( Handle, CachedSelectors.setAllowsScrolling_, out ___occuredException, sizeof( char ), scrolling );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsVerticalScrolling_( char scrolling ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsVerticalScrolling_( Handle, CachedSelectors.setAllowsVerticalScrolling_, out ___occuredException, sizeof( char ), scrolling );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHorizontalScrollingMode_( int mode ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHorizontalScrollingMode_( Handle, CachedSelectors.setHorizontalScrollingMode_, out ___occuredException, sizeof( int ), mode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHorizontalScrollingMode_andLock_( int mode, char andLock ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHorizontalScrollingMode_andLock_( Handle, CachedSelectors.setHorizontalScrollingMode_andLock_, out ___occuredException, sizeof( int ) + sizeof( char ), mode, andLock );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHorizontalScrollingModeLocked_( char locked ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHorizontalScrollingModeLocked_( Handle, CachedSelectors.setHorizontalScrollingModeLocked_, out ___occuredException, sizeof( char ), locked );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setScrollBarsSuppressed_repaintOnUnsuppress_( char suppressed, char repaintOnUnsuppress ) {
			RuntimeObject ___occuredException;
			NativeMethods.setScrollBarsSuppressed_repaintOnUnsuppress_( Handle, CachedSelectors.setScrollBarsSuppressed_repaintOnUnsuppress_, out ___occuredException, sizeof( char ) + sizeof( char ), suppressed, repaintOnUnsuppress );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setScrollingMode_( int mode ) {
			RuntimeObject ___occuredException;
			NativeMethods.setScrollingMode_( Handle, CachedSelectors.setScrollingMode_, out ___occuredException, sizeof( int ), mode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setScrollingMode_andLock_( int mode, char andLock ) {
			RuntimeObject ___occuredException;
			NativeMethods.setScrollingMode_andLock_( Handle, CachedSelectors.setScrollingMode_andLock_, out ___occuredException, sizeof( int ) + sizeof( char ), mode, andLock );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setScrollingModesLocked_( char locked ) {
			RuntimeObject ___occuredException;
			NativeMethods.setScrollingModesLocked_( Handle, CachedSelectors.setScrollingModesLocked_, out ___occuredException, sizeof( char ), locked );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSuppressLayout_( char layout ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSuppressLayout_( Handle, CachedSelectors.setSuppressLayout_, out ___occuredException, sizeof( char ), layout );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setVerticalScrollingMode_( int mode ) {
			RuntimeObject ___occuredException;
			NativeMethods.setVerticalScrollingMode_( Handle, CachedSelectors.setVerticalScrollingMode_, out ___occuredException, sizeof( int ), mode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setVerticalScrollingMode_andLock_( int mode, char andLock ) {
			RuntimeObject ___occuredException;
			NativeMethods.setVerticalScrollingMode_andLock_( Handle, CachedSelectors.setVerticalScrollingMode_andLock_, out ___occuredException, sizeof( int ) + sizeof( char ), mode, andLock );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setVerticalScrollingModeLocked_( char locked ) {
			RuntimeObject ___occuredException;
			NativeMethods.setVerticalScrollingModeLocked_( Handle, CachedSelectors.setVerticalScrollingModeLocked_, out ___occuredException, sizeof( char ), locked );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void updateScrollers() {
			RuntimeObject ___occuredException;
			NativeMethods.updateScrollers( Handle, CachedSelectors.updateScrollers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int verticalScrollingMode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.verticalScrollingMode( Handle, CachedSelectors.verticalScrollingMode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char verticalScrollingModeLocked() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.verticalScrollingModeLocked( Handle, CachedSelectors.verticalScrollingModeLocked, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char allowsHorizontalScrolling( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char allowsScrolling( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char allowsVerticalScrolling( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int horizontalScrollingMode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char horizontalScrollingModeLocked( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowsHorizontalScrolling_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char scrolling );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowsScrolling_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char scrolling );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowsVerticalScrolling_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char scrolling );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHorizontalScrollingMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int mode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHorizontalScrollingMode_andLock_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int mode, char andLock );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHorizontalScrollingModeLocked_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char locked );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setScrollBarsSuppressed_repaintOnUnsuppress_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char suppressed, char repaintOnUnsuppress );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setScrollingMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int mode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setScrollingMode_andLock_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int mode, char andLock );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setScrollingModesLocked_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char locked );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSuppressLayout_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char layout );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setVerticalScrollingMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int mode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setVerticalScrollingMode_andLock_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int mode, char andLock );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setVerticalScrollingModeLocked_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char locked );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void updateScrollers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int verticalScrollingMode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char verticalScrollingModeLocked( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector allowsHorizontalScrolling = "allowsHorizontalScrolling";
			public static readonly Selector allowsScrolling = "allowsScrolling";
			public static readonly Selector allowsVerticalScrolling = "allowsVerticalScrolling";
			public static readonly Selector horizontalScrollingMode = "horizontalScrollingMode";
			public static readonly Selector horizontalScrollingModeLocked = "horizontalScrollingModeLocked";
			public static readonly Selector setAllowsHorizontalScrolling_ = "setAllowsHorizontalScrolling:";
			public static readonly Selector setAllowsScrolling_ = "setAllowsScrolling:";
			public static readonly Selector setAllowsVerticalScrolling_ = "setAllowsVerticalScrolling:";
			public static readonly Selector setHorizontalScrollingMode_ = "setHorizontalScrollingMode:";
			public static readonly Selector setHorizontalScrollingMode_andLock_ = "setHorizontalScrollingMode:andLock:";
			public static readonly Selector setHorizontalScrollingModeLocked_ = "setHorizontalScrollingModeLocked:";
			public static readonly Selector setScrollBarsSuppressed_repaintOnUnsuppress_ = "setScrollBarsSuppressed:repaintOnUnsuppress:";
			public static readonly Selector setScrollingMode_ = "setScrollingMode:";
			public static readonly Selector setScrollingMode_andLock_ = "setScrollingMode:andLock:";
			public static readonly Selector setScrollingModesLocked_ = "setScrollingModesLocked:";
			public static readonly Selector setSuppressLayout_ = "setSuppressLayout:";
			public static readonly Selector setVerticalScrollingMode_ = "setVerticalScrollingMode:";
			public static readonly Selector setVerticalScrollingMode_andLock_ = "setVerticalScrollingMode:andLock:";
			public static readonly Selector setVerticalScrollingModeLocked_ = "setVerticalScrollingModeLocked:";
			public static readonly Selector updateScrollers = "updateScrollers";
			public static readonly Selector verticalScrollingMode = "verticalScrollingMode";
			public static readonly Selector verticalScrollingModeLocked = "verticalScrollingModeLocked";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebEditCommand : IEquatable<WebEditCommand> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebEditCommand;
		public static implicit operator IntPtr( WebEditCommand value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebEditCommand value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebEditCommand?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebEditCommand value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebEditCommand value1, WebEditCommand value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebEditCommand value1, WebEditCommand value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebEditCommand( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebEditCommand alloc() {
			return new WebEditCommand( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initialize = "initialize";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebEditorUndoTarget : IEquatable<WebEditorUndoTarget> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebEditorUndoTarget;
		public static implicit operator IntPtr( WebEditorUndoTarget value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebEditorUndoTarget value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebEditorUndoTarget?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebEditorUndoTarget value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebEditorUndoTarget value1, WebEditorUndoTarget value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebEditorUndoTarget value1, WebEditorUndoTarget value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebEditorUndoTarget( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebEditorUndoTarget alloc() {
			return new WebEditorUndoTarget( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void redoEditing_( NObjective.RuntimeObject editing ) {
			RuntimeObject ___occuredException;
			NativeMethods.redoEditing_( Handle, CachedSelectors.redoEditing_, out ___occuredException, sizeof( NObjective.RuntimeObject ), editing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void undoEditing_( NObjective.RuntimeObject editing ) {
			RuntimeObject ___occuredException;
			NativeMethods.undoEditing_( Handle, CachedSelectors.undoEditing_, out ___occuredException, sizeof( NObjective.RuntimeObject ), editing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void redoEditing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject editing );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void undoEditing_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject editing );
		}
		static internal class CachedSelectors {
			public static readonly Selector redoEditing_ = "redoEditing:";
			public static readonly Selector undoEditing_ = "undoEditing:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSDictionary ) )]
	public struct WebElementDictionary : IEquatable<WebElementDictionary> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebElementDictionary;
		public static implicit operator IntPtr( WebElementDictionary value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebElementDictionary value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebElementDictionary?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebElementDictionary value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebElementDictionary value1, WebElementDictionary value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebElementDictionary value1, WebElementDictionary value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebElementDictionary( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebElementDictionary alloc() {
			return new WebElementDictionary( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void initializeLookupTable() {
			RuntimeObject ___occuredException;
			NativeMethods.initializeLookupTable( ClassHandle, CachedSelectors.initializeLookupTable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initializeLookupTable( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initialize = "initialize";
			public static readonly Selector initializeLookupTable = "initializeLookupTable";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebFormDelegate : IEquatable<WebFormDelegate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebFormDelegate;
		public static implicit operator IntPtr( WebFormDelegate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebFormDelegate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebFormDelegate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebFormDelegate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebFormDelegate value1, WebFormDelegate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebFormDelegate value1, WebFormDelegate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebFormDelegate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebFormDelegate alloc() {
			return new WebFormDelegate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void frame_sourceFrame_willSubmitForm_withValues_submissionListener_( NObjective.RuntimeObject frame, NObjective.RuntimeObject sourceFrame, NObjective.RuntimeObject willSubmitForm, NObjective.RuntimeObject withValues, NObjective.RuntimeObject submissionListener ) {
			RuntimeObject ___occuredException;
			NativeMethods.frame_sourceFrame_willSubmitForm_withValues_submissionListener_( Handle, CachedSelectors.frame_sourceFrame_willSubmitForm_withValues_submissionListener_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), frame, sourceFrame, willSubmitForm, withValues, submissionListener );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void textDidChangeInTextArea_inFrame_( NObjective.RuntimeObject area, NObjective.RuntimeObject inFrame ) {
			RuntimeObject ___occuredException;
			NativeMethods.textDidChangeInTextArea_inFrame_( Handle, CachedSelectors.textDidChangeInTextArea_inFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), area, inFrame );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void textDidChangeInTextField_inFrame_( NObjective.RuntimeObject field, NObjective.RuntimeObject inFrame ) {
			RuntimeObject ___occuredException;
			NativeMethods.textDidChangeInTextField_inFrame_( Handle, CachedSelectors.textDidChangeInTextField_inFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), field, inFrame );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char textField_doCommandBySelector_inFrame_( NObjective.RuntimeObject field, NObjective.Selector doCommandBySelector, NObjective.RuntimeObject inFrame ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textField_doCommandBySelector_inFrame_( Handle, CachedSelectors.textField_doCommandBySelector_inFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ), field, doCommandBySelector, inFrame );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char textField_shouldHandleEvent_inFrame_( NObjective.RuntimeObject field, NObjective.RuntimeObject shouldHandleEvent, NObjective.RuntimeObject inFrame ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textField_shouldHandleEvent_inFrame_( Handle, CachedSelectors.textField_shouldHandleEvent_inFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), field, shouldHandleEvent, inFrame );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void textFieldDidBeginEditing_inFrame_( NObjective.RuntimeObject editing, NObjective.RuntimeObject inFrame ) {
			RuntimeObject ___occuredException;
			NativeMethods.textFieldDidBeginEditing_inFrame_( Handle, CachedSelectors.textFieldDidBeginEditing_inFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), editing, inFrame );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void textFieldDidEndEditing_inFrame_( NObjective.RuntimeObject editing, NObjective.RuntimeObject inFrame ) {
			RuntimeObject ___occuredException;
			NativeMethods.textFieldDidEndEditing_inFrame_( Handle, CachedSelectors.textFieldDidEndEditing_inFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), editing, inFrame );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void frame_sourceFrame_willSubmitForm_withValues_submissionListener_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject frame, NObjective.RuntimeObject sourceFrame, NObjective.RuntimeObject willSubmitForm, NObjective.RuntimeObject withValues, NObjective.RuntimeObject submissionListener );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void textDidChangeInTextArea_inFrame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject area, NObjective.RuntimeObject inFrame );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void textDidChangeInTextField_inFrame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject field, NObjective.RuntimeObject inFrame );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char textField_doCommandBySelector_inFrame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject field, NObjective.Selector doCommandBySelector, NObjective.RuntimeObject inFrame );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char textField_shouldHandleEvent_inFrame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject field, NObjective.RuntimeObject shouldHandleEvent, NObjective.RuntimeObject inFrame );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void textFieldDidBeginEditing_inFrame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject editing, NObjective.RuntimeObject inFrame );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void textFieldDidEndEditing_inFrame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject editing, NObjective.RuntimeObject inFrame );
		}
		static internal class CachedSelectors {
			public static readonly Selector frame_sourceFrame_willSubmitForm_withValues_submissionListener_ = "frame:sourceFrame:willSubmitForm:withValues:submissionListener:";
			public static readonly Selector textDidChangeInTextArea_inFrame_ = "textDidChangeInTextArea:inFrame:";
			public static readonly Selector textDidChangeInTextField_inFrame_ = "textDidChangeInTextField:inFrame:";
			public static readonly Selector textField_doCommandBySelector_inFrame_ = "textField:doCommandBySelector:inFrame:";
			public static readonly Selector textField_shouldHandleEvent_inFrame_ = "textField:shouldHandleEvent:inFrame:";
			public static readonly Selector textFieldDidBeginEditing_inFrame_ = "textFieldDidBeginEditing:inFrame:";
			public static readonly Selector textFieldDidEndEditing_inFrame_ = "textFieldDidEndEditing:inFrame:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebFrame : IEquatable<WebFrame> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebFrame;
		public static implicit operator IntPtr( WebFrame value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebFrame value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebFrame?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebFrame value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebFrame value1, WebFrame value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebFrame value1, WebFrame value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebFrame( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebFrame alloc() {
			return new WebFrame( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSArray childFrames() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.childFrames( Handle, CachedSelectors.childFrames, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public WebDataSource dataSource() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dataSource( Handle, CachedSelectors.dataSource, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebDataSource( ___result );
		}
		unsafe public DOMDocument DOMDocument() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.DOMDocument( Handle, CachedSelectors.DOMDocument, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMDocument( ___result );
		}
		unsafe public WebFrame findFrameNamed_( string named ) {
			RuntimeObject ___occuredException;
			var ___wrappednamed = Runtime.CreateStringProxy( named );
			var ___result = NativeMethods.findFrameNamed_( Handle, CachedSelectors.findFrameNamed_, out ___occuredException, sizeof( IntPtr ), ___wrappednamed );
			Runtime.ReleaseNativeObject( ___wrappednamed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebFrame( ___result );
		}
		unsafe public DOMHTMLElement frameElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.frameElement( Handle, CachedSelectors.frameElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMHTMLElement( ___result );
		}
		unsafe public WebFrameView frameView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.frameView( Handle, CachedSelectors.frameView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebFrameView( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithName_webFrameView_webView_( string name, WebFrameView webFrameView, WebView webView ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			var ___result = NativeMethods.initWithName_webFrameView_webView_( Handle, CachedSelectors.initWithName_webFrameView_webView_, out ___occuredException, sizeof( IntPtr ) + sizeof( WebFrameView ) + sizeof( WebView ), ___wrappedname, webFrameView, webView );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void loadAlternateHTMLString_baseURL_forUnreachableURL_( string @string, NSURL baseURL, NSURL forUnreachableURL ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			NativeMethods.loadAlternateHTMLString_baseURL_forUnreachableURL_( Handle, CachedSelectors.loadAlternateHTMLString_baseURL_forUnreachableURL_, out ___occuredException, sizeof( IntPtr ) + sizeof( NSURL ) + sizeof( NSURL ), ___wrappedstring, baseURL, forUnreachableURL );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void loadArchive_( WebArchive archive ) {
			RuntimeObject ___occuredException;
			NativeMethods.loadArchive_( Handle, CachedSelectors.loadArchive_, out ___occuredException, sizeof( WebArchive ), archive );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void loadData_MIMEType_textEncodingName_baseURL_( NSData data, string MIMEType, string textEncodingName, NSURL baseURL ) {
			RuntimeObject ___occuredException;
			var ___wrappedMIMEType = Runtime.CreateStringProxy( MIMEType );
			var ___wrappedtextEncodingName = Runtime.CreateStringProxy( textEncodingName );
			NativeMethods.loadData_MIMEType_textEncodingName_baseURL_( Handle, CachedSelectors.loadData_MIMEType_textEncodingName_baseURL_, out ___occuredException, sizeof( NSData ) + sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( NSURL ), data, ___wrappedMIMEType, ___wrappedtextEncodingName, baseURL );
			Runtime.ReleaseNativeObject( ___wrappedMIMEType );
			Runtime.ReleaseNativeObject( ___wrappedtextEncodingName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void loadHTMLString_baseURL_( string @string, NSURL baseURL ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			NativeMethods.loadHTMLString_baseURL_( Handle, CachedSelectors.loadHTMLString_baseURL_, out ___occuredException, sizeof( IntPtr ) + sizeof( NSURL ), ___wrappedstring, baseURL );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void loadRequest_( NSURLRequest request ) {
			RuntimeObject ___occuredException;
			NativeMethods.loadRequest_( Handle, CachedSelectors.loadRequest_, out ___occuredException, sizeof( NSURLRequest ), request );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public WebFrame parentFrame() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.parentFrame( Handle, CachedSelectors.parentFrame, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebFrame( ___result );
		}
		unsafe public WebDataSource provisionalDataSource() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.provisionalDataSource( Handle, CachedSelectors.provisionalDataSource, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebDataSource( ___result );
		}
		unsafe public void reload() {
			RuntimeObject ___occuredException;
			NativeMethods.reload( Handle, CachedSelectors.reload, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject renderTreeAsExternalRepresentation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.renderTreeAsExternalRepresentation( Handle, CachedSelectors.renderTreeAsExternalRepresentation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void stopLoading() {
			RuntimeObject ___occuredException;
			NativeMethods.stopLoading( Handle, CachedSelectors.stopLoading, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public WebView webView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webView( Handle, CachedSelectors.webView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebView( ___result );
		}
		unsafe public WebScriptObject windowObject() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.windowObject( Handle, CachedSelectors.windowObject, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebScriptObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr childFrames( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dataSource( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr DOMDocument( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr findFrameNamed_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr named );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr frameElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr frameView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithName_webFrameView_webView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name, WebFrameView webFrameView, WebView webView );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void loadAlternateHTMLString_baseURL_forUnreachableURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string, NSURL baseURL, NSURL forUnreachableURL );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void loadArchive_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, WebArchive archive );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void loadData_MIMEType_textEncodingName_baseURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData data, IntPtr MIMEType, IntPtr textEncodingName, NSURL baseURL );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void loadHTMLString_baseURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string, NSURL baseURL );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void loadRequest_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURLRequest request );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr parentFrame( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr provisionalDataSource( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void reload( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr renderTreeAsExternalRepresentation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void stopLoading( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr webView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr windowObject( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector childFrames = "childFrames";
			public static readonly Selector dataSource = "dataSource";
			public static readonly Selector DOMDocument = "DOMDocument";
			public static readonly Selector findFrameNamed_ = "findFrameNamed:";
			public static readonly Selector frameElement = "frameElement";
			public static readonly Selector frameView = "frameView";
			public static readonly Selector initWithName_webFrameView_webView_ = "initWithName:webFrameView:webView:";
			public static readonly Selector loadAlternateHTMLString_baseURL_forUnreachableURL_ = "loadAlternateHTMLString:baseURL:forUnreachableURL:";
			public static readonly Selector loadArchive_ = "loadArchive:";
			public static readonly Selector loadData_MIMEType_textEncodingName_baseURL_ = "loadData:MIMEType:textEncodingName:baseURL:";
			public static readonly Selector loadHTMLString_baseURL_ = "loadHTMLString:baseURL:";
			public static readonly Selector loadRequest_ = "loadRequest:";
			public static readonly Selector name = "name";
			public static readonly Selector parentFrame = "parentFrame";
			public static readonly Selector provisionalDataSource = "provisionalDataSource";
			public static readonly Selector reload = "reload";
			public static readonly Selector renderTreeAsExternalRepresentation = "renderTreeAsExternalRepresentation";
			public static readonly Selector stopLoading = "stopLoading";
			public static readonly Selector webView = "webView";
			public static readonly Selector windowObject = "windowObject";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( WebCoreFrameBridge ) )]
	public struct WebFrameBridge : IEquatable<WebFrameBridge> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebFrameBridge;
		public static implicit operator IntPtr( WebFrameBridge value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebFrameBridge value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebFrameBridge?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebFrameBridge value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebFrameBridge value1, WebFrameBridge value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebFrameBridge value1, WebFrameBridge value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebFrameBridge( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebFrameBridge alloc() {
			return new WebFrameBridge( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void dashboardRegionsChanged_( NObjective.RuntimeObject changed ) {
			RuntimeObject ___occuredException;
			NativeMethods.dashboardRegionsChanged_( Handle, CachedSelectors.dashboardRegionsChanged_, out ___occuredException, sizeof( NObjective.RuntimeObject ), changed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject dataSource() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dataSource( Handle, CachedSelectors.dataSource, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int determineObjectFromMIMEType_URL_( NObjective.RuntimeObject type, NObjective.RuntimeObject URL ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.determineObjectFromMIMEType_URL_( Handle, CachedSelectors.determineObjectFromMIMEType_URL_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), type, URL );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void fini() {
			RuntimeObject ___occuredException;
			NativeMethods.fini( Handle, CachedSelectors.fini, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject firstResponder() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.firstResponder( Handle, CachedSelectors.firstResponder, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void issuePasteCommand() {
			RuntimeObject ___occuredException;
			NativeMethods.issuePasteCommand( Handle, CachedSelectors.issuePasteCommand, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int keyboardUIMode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.keyboardUIMode( Handle, CachedSelectors.keyboardUIMode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject mainFrame() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mainFrame( Handle, CachedSelectors.mainFrame, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void makeFirstResponder_( NObjective.RuntimeObject responder ) {
			RuntimeObject ___occuredException;
			NativeMethods.makeFirstResponder_( Handle, CachedSelectors.makeFirstResponder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), responder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject pluginViewWithPackage_attributeNames_attributeValues_baseURL_DOMElement_loadManually_( NObjective.RuntimeObject package, NObjective.RuntimeObject attributeNames, NObjective.RuntimeObject attributeValues, NObjective.RuntimeObject baseURL, NObjective.RuntimeObject DOMElement, char loadManually ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pluginViewWithPackage_attributeNames_attributeValues_baseURL_DOMElement_loadManually_( Handle, CachedSelectors.pluginViewWithPackage_attributeNames_attributeValues_baseURL_DOMElement_loadManually_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), package, attributeNames, attributeValues, baseURL, DOMElement, loadManually
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void redirectDataToPlugin_( NObjective.RuntimeObject plugin ) {
			RuntimeObject ___occuredException;
			NativeMethods.redirectDataToPlugin_( Handle, CachedSelectors.redirectDataToPlugin_, out ___occuredException, sizeof( NObjective.RuntimeObject ), plugin );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void respondToChangedContents() {
			RuntimeObject ___occuredException;
			NativeMethods.respondToChangedContents( Handle, CachedSelectors.respondToChangedContents, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void runOpenPanelForFileButtonWithResultListener_( NObjective.RuntimeObject listener ) {
			RuntimeObject ___occuredException;
			NativeMethods.runOpenPanelForFileButtonWithResultListener_( Handle, CachedSelectors.runOpenPanelForFileButtonWithResultListener_, out ___occuredException, sizeof( NObjective.RuntimeObject ), listener );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setIsSelected_forView_( char selected, NObjective.RuntimeObject forView ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIsSelected_forView_( Handle, CachedSelectors.setIsSelected_forView_, out ___occuredException, sizeof( char ) + sizeof( NObjective.RuntimeObject ), selected, forView );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject undoManager() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.undoManager( Handle, CachedSelectors.undoManager, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject valueForKey_keys_values_( NObjective.RuntimeObject key, NObjective.RuntimeObject keys, NObjective.RuntimeObject values ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.valueForKey_keys_values_( Handle, CachedSelectors.valueForKey_keys_values_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), key, keys, values );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject webFrame() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webFrame( Handle, CachedSelectors.webFrame, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject webView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webView( Handle, CachedSelectors.webView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void willPopupMenu_( NObjective.RuntimeObject menu ) {
			RuntimeObject ___occuredException;
			NativeMethods.willPopupMenu_( Handle, CachedSelectors.willPopupMenu_, out ___occuredException, sizeof( NObjective.RuntimeObject ), menu );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject window() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.window( Handle, CachedSelectors.window, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void windowObjectCleared() {
			RuntimeObject ___occuredException;
			NativeMethods.windowObjectCleared( Handle, CachedSelectors.windowObjectCleared, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void dashboardRegionsChanged_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject changed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dataSource( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int determineObjectFromMIMEType_URL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type, NObjective.RuntimeObject URL );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void fini( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr firstResponder( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void issuePasteCommand( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int keyboardUIMode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mainFrame( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void makeFirstResponder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject responder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pluginViewWithPackage_attributeNames_attributeValues_baseURL_DOMElement_loadManually_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject package, NObjective.RuntimeObject attributeNames, NObjective.RuntimeObject attributeValues, NObjective.RuntimeObject baseURL, NObjective.RuntimeObject DOMElement, char loadManually
			 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void redirectDataToPlugin_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject plugin );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void respondToChangedContents( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void runOpenPanelForFileButtonWithResultListener_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject listener );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setIsSelected_forView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char selected, NObjective.RuntimeObject forView );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr undoManager( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr valueForKey_keys_values_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.RuntimeObject keys, NObjective.RuntimeObject values );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr webFrame( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr webView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void willPopupMenu_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject menu );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr window( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void windowObjectCleared( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector dashboardRegionsChanged_ = "dashboardRegionsChanged:";
			public static readonly Selector dataSource = "dataSource";
			public static readonly Selector determineObjectFromMIMEType_URL_ = "determineObjectFromMIMEType:URL:";
			public static readonly Selector fini = "fini";
			public static readonly Selector firstResponder = "firstResponder";
			public static readonly Selector initialize = "initialize";
			public static readonly Selector issuePasteCommand = "issuePasteCommand";
			public static readonly Selector keyboardUIMode = "keyboardUIMode";
			public static readonly Selector mainFrame = "mainFrame";
			public static readonly Selector makeFirstResponder_ = "makeFirstResponder:";
			public static readonly Selector pluginViewWithPackage_attributeNames_attributeValues_baseURL_DOMElement_loadManually_ = "pluginViewWithPackage:attributeNames:attributeValues:baseURL:DOMElement:loadManually:";
			public static readonly Selector redirectDataToPlugin_ = "redirectDataToPlugin:";
			public static readonly Selector respondToChangedContents = "respondToChangedContents";
			public static readonly Selector runOpenPanelForFileButtonWithResultListener_ = "runOpenPanelForFileButtonWithResultListener:";
			public static readonly Selector setIsSelected_forView_ = "setIsSelected:forView:";
			public static readonly Selector undoManager = "undoManager";
			public static readonly Selector valueForKey_keys_values_ = "valueForKey:keys:values:";
			public static readonly Selector webFrame = "webFrame";
			public static readonly Selector webView = "webView";
			public static readonly Selector willPopupMenu_ = "willPopupMenu:";
			public static readonly Selector window = "window";
			public static readonly Selector windowObjectCleared = "windowObjectCleared";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebFramePolicyListener : IEquatable<WebFramePolicyListener> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebFramePolicyListener;
		public static implicit operator IntPtr( WebFramePolicyListener value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebFramePolicyListener value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebFramePolicyListener?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebFramePolicyListener value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebFramePolicyListener value1, WebFramePolicyListener value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebFramePolicyListener value1, WebFramePolicyListener value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebFramePolicyListener( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebFramePolicyListener alloc() {
			return new WebFramePolicyListener( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void @continue() {
			RuntimeObject ___occuredException;
			NativeMethods.@continue( Handle, CachedSelectors.@continue, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void download() {
			RuntimeObject ___occuredException;
			NativeMethods.download( Handle, CachedSelectors.download, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void ignore() {
			RuntimeObject ___occuredException;
			NativeMethods.ignore( Handle, CachedSelectors.ignore, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void invalidate() {
			RuntimeObject ___occuredException;
			NativeMethods.invalidate( Handle, CachedSelectors.invalidate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void receivedPolicyDecision_( int decision ) {
			RuntimeObject ___occuredException;
			NativeMethods.receivedPolicyDecision_( Handle, CachedSelectors.receivedPolicyDecision_, out ___occuredException, sizeof( int ), decision );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void use() {
			RuntimeObject ___occuredException;
			NativeMethods.use( Handle, CachedSelectors.use, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void @continue( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void download( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void ignore( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void invalidate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void receivedPolicyDecision_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int decision );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void use( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector @continue = "continue";
			public static readonly Selector download = "download";
			public static readonly Selector ignore = "ignore";
			public static readonly Selector initialize = "initialize";
			public static readonly Selector invalidate = "invalidate";
			public static readonly Selector receivedPolicyDecision_ = "receivedPolicyDecision:";
			public static readonly Selector use = "use";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebFramePrivate : IEquatable<WebFramePrivate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebFramePrivate;
		public static implicit operator IntPtr( WebFramePrivate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebFramePrivate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebFramePrivate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebFramePrivate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebFramePrivate value1, WebFramePrivate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebFramePrivate value1, WebFramePrivate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebFramePrivate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebFramePrivate alloc() {
			return new WebFramePrivate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void setWebFrameView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			NativeMethods.setWebFrameView_( Handle, CachedSelectors.setWebFrameView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWebFrameView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
		}
		static internal class CachedSelectors {
			public static readonly Selector setWebFrameView_ = "setWebFrameView:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSView ) )]
	public struct WebFrameView : IEquatable<WebFrameView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebFrameView;
		public static implicit operator IntPtr( WebFrameView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebFrameView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebFrameView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebFrameView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebFrameView value1, WebFrameView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebFrameView value1, WebFrameView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebFrameView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebFrameView alloc() {
			return new WebFrameView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public bool allowsScrolling() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsScrolling( Handle, CachedSelectors.allowsScrolling, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool canPrintHeadersAndFooters() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canPrintHeadersAndFooters( Handle, CachedSelectors.canPrintHeadersAndFooters, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSView documentView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.documentView( Handle, CachedSelectors.documentView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSView( ___result );
		}
		unsafe public bool documentViewShouldHandlePrint() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.documentViewShouldHandlePrint( Handle, CachedSelectors.documentViewShouldHandlePrint, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void printDocumentView() {
			RuntimeObject ___occuredException;
			NativeMethods.printDocumentView( Handle, CachedSelectors.printDocumentView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSPrintOperation printOperationWithPrintInfo_( NSPrintInfo info ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.printOperationWithPrintInfo_( Handle, CachedSelectors.printOperationWithPrintInfo_, out ___occuredException, sizeof( NSPrintInfo ), info );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSPrintOperation( ___result );
		}
		unsafe public void scrollLineDown_( NObjective.RuntimeObject down ) {
			RuntimeObject ___occuredException;
			NativeMethods.scrollLineDown_( Handle, CachedSelectors.scrollLineDown_, out ___occuredException, sizeof( NObjective.RuntimeObject ), down );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scrollLineUp_( NObjective.RuntimeObject up ) {
			RuntimeObject ___occuredException;
			NativeMethods.scrollLineUp_( Handle, CachedSelectors.scrollLineUp_, out ___occuredException, sizeof( NObjective.RuntimeObject ), up );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scrollPageDown_( NObjective.RuntimeObject down ) {
			RuntimeObject ___occuredException;
			NativeMethods.scrollPageDown_( Handle, CachedSelectors.scrollPageDown_, out ___occuredException, sizeof( NObjective.RuntimeObject ), down );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scrollPageUp_( NObjective.RuntimeObject up ) {
			RuntimeObject ___occuredException;
			NativeMethods.scrollPageUp_( Handle, CachedSelectors.scrollPageUp_, out ___occuredException, sizeof( NObjective.RuntimeObject ), up );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scrollToBeginningOfDocument_( NObjective.RuntimeObject document ) {
			RuntimeObject ___occuredException;
			NativeMethods.scrollToBeginningOfDocument_( Handle, CachedSelectors.scrollToBeginningOfDocument_, out ___occuredException, sizeof( NObjective.RuntimeObject ), document );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scrollToEndOfDocument_( NObjective.RuntimeObject document ) {
			RuntimeObject ___occuredException;
			NativeMethods.scrollToEndOfDocument_( Handle, CachedSelectors.scrollToEndOfDocument_, out ___occuredException, sizeof( NObjective.RuntimeObject ), document );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsScrolling_( bool scrolling ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsScrolling_( Handle, CachedSelectors.setAllowsScrolling_, out ___occuredException, sizeof( bool ), scrolling );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject webCoreBridge() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webCoreBridge( Handle, CachedSelectors.webCoreBridge, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public WebFrame webFrame() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webFrame( Handle, CachedSelectors.webFrame, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebFrame( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool allowsScrolling( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool canPrintHeadersAndFooters( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr documentView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool documentViewShouldHandlePrint( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void printDocumentView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr printOperationWithPrintInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSPrintInfo info );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scrollLineDown_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject down );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scrollLineUp_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject up );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scrollPageDown_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject down );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scrollPageUp_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject up );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scrollToBeginningOfDocument_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject document );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scrollToEndOfDocument_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject document );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowsScrolling_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool scrolling );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr webCoreBridge( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr webFrame( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector allowsScrolling = "allowsScrolling";
			public static readonly Selector canPrintHeadersAndFooters = "canPrintHeadersAndFooters";
			public static readonly Selector documentView = "documentView";
			public static readonly Selector documentViewShouldHandlePrint = "documentViewShouldHandlePrint";
			public static readonly Selector printDocumentView = "printDocumentView";
			public static readonly Selector printOperationWithPrintInfo_ = "printOperationWithPrintInfo:";
			public static readonly Selector scrollLineDown_ = "scrollLineDown:";
			public static readonly Selector scrollLineUp_ = "scrollLineUp:";
			public static readonly Selector scrollPageDown_ = "scrollPageDown:";
			public static readonly Selector scrollPageUp_ = "scrollPageUp:";
			public static readonly Selector scrollToBeginningOfDocument_ = "scrollToBeginningOfDocument:";
			public static readonly Selector scrollToEndOfDocument_ = "scrollToEndOfDocument:";
			public static readonly Selector setAllowsScrolling_ = "setAllowsScrolling:";
			public static readonly Selector webCoreBridge = "webCoreBridge";
			public static readonly Selector webFrame = "webFrame";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebFrameViewPrivate : IEquatable<WebFrameViewPrivate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebFrameViewPrivate;
		public static implicit operator IntPtr( WebFrameViewPrivate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebFrameViewPrivate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebFrameViewPrivate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebFrameViewPrivate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebFrameViewPrivate value1, WebFrameViewPrivate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebFrameViewPrivate value1, WebFrameViewPrivate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebFrameViewPrivate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebFrameViewPrivate alloc() {
			return new WebFrameViewPrivate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebHistory : IEquatable<WebHistory> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebHistory;
		public static implicit operator IntPtr( WebHistory value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebHistory value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebHistory?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebHistory value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebHistory value1, WebHistory value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebHistory value1, WebHistory value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebHistory( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebHistory alloc() {
			return new WebHistory( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static WebHistory optionalSharedHistory() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.optionalSharedHistory( ClassHandle, CachedSelectors.optionalSharedHistory, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebHistory( ___result );
		}
		unsafe public static void setOptionalSharedHistory_( WebHistory history ) {
			RuntimeObject ___occuredException;
			NativeMethods.setOptionalSharedHistory_( ClassHandle, CachedSelectors.setOptionalSharedHistory_, out ___occuredException, sizeof( WebHistory ), history );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			NativeMethods.addItem_( Handle, CachedSelectors.addItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject addItemForURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addItemForURL_( Handle, CachedSelectors.addItemForURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addItems_( NSArray items ) {
			RuntimeObject ___occuredException;
			NativeMethods.addItems_( Handle, CachedSelectors.addItems_, out ___occuredException, sizeof( NSArray ), items );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject ageLimitDate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ageLimitDate( Handle, CachedSelectors.ageLimitDate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char containsItemForURLString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.containsItemForURLString_( Handle, CachedSelectors.containsItemForURLString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char containsURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.containsURL_( Handle, CachedSelectors.containsURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int historyAgeInDaysLimit() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.historyAgeInDaysLimit( Handle, CachedSelectors.historyAgeInDaysLimit, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int historyItemLimit() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.historyItemLimit( Handle, CachedSelectors.historyItemLimit, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public WebHistoryItem itemForURL_( NSURL url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.itemForURL_( Handle, CachedSelectors.itemForURL_, out ___occuredException, sizeof( NSURL ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebHistoryItem( ___result );
		}
		unsafe public bool loadFromURL_error_( NSURL url, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.loadFromURL_error_( Handle, CachedSelectors.loadFromURL_error_, out ___occuredException, sizeof( NSURL ) + sizeof( IntPtr ), url, ref error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSArray orderedItemsLastVisitedOnDay_( NSCalendarDate day ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.orderedItemsLastVisitedOnDay_( Handle, CachedSelectors.orderedItemsLastVisitedOnDay_, out ___occuredException, sizeof( NSCalendarDate ), day );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSArray orderedLastVisitedDays() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.orderedLastVisitedDays( Handle, CachedSelectors.orderedLastVisitedDays, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public void removeAllItems() {
			RuntimeObject ___occuredException;
			NativeMethods.removeAllItems( Handle, CachedSelectors.removeAllItems, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeItem_( Handle, CachedSelectors.removeItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeItems_( NSArray items ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeItems_( Handle, CachedSelectors.removeItems_, out ___occuredException, sizeof( NSArray ), items );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool saveToURL_error_( NSURL url, ref NSError error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.saveToURL_error_( Handle, CachedSelectors.saveToURL_error_, out ___occuredException, sizeof( NSURL ) + sizeof( IntPtr ), url, ref error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setHistoryAgeInDaysLimit_( int limit ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHistoryAgeInDaysLimit_( Handle, CachedSelectors.setHistoryAgeInDaysLimit_, out ___occuredException, sizeof( int ), limit );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHistoryItemLimit_( int limit ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHistoryItemLimit_( Handle, CachedSelectors.setHistoryItemLimit_, out ___occuredException, sizeof( int ), limit );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLastVisitedTimeInterval_forItem_( double interval, NObjective.RuntimeObject forItem ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLastVisitedTimeInterval_forItem_( Handle, CachedSelectors.setLastVisitedTimeInterval_forItem_, out ___occuredException, sizeof( double ) + sizeof( NObjective.RuntimeObject ), interval, forItem );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr addItemForURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addItems_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray items );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr ageLimitDate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char containsItemForURLString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char containsURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int historyAgeInDaysLimit( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int historyItemLimit( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr itemForURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool loadFromURL_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr optionalSharedHistory( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr orderedItemsLastVisitedOnDay_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCalendarDate day );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr orderedLastVisitedDays( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeAllItems( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeItems_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray items );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool saveToURL_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url, ref NSError error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHistoryAgeInDaysLimit_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int limit );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHistoryItemLimit_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int limit );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLastVisitedTimeInterval_forItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double interval, NObjective.RuntimeObject forItem );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setOptionalSharedHistory_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, WebHistory history );
		}
		static internal class CachedSelectors {
			public static readonly Selector addItem_ = "addItem:";
			public static readonly Selector addItemForURL_ = "addItemForURL:";
			public static readonly Selector addItems_ = "addItems:";
			public static readonly Selector ageLimitDate = "ageLimitDate";
			public static readonly Selector containsItemForURLString_ = "containsItemForURLString:";
			public static readonly Selector containsURL_ = "containsURL:";
			public static readonly Selector historyAgeInDaysLimit = "historyAgeInDaysLimit";
			public static readonly Selector historyItemLimit = "historyItemLimit";
			public static readonly Selector itemForURL_ = "itemForURL:";
			public static readonly Selector loadFromURL_error_ = "loadFromURL:error:";
			public static readonly Selector optionalSharedHistory = "optionalSharedHistory";
			public static readonly Selector orderedItemsLastVisitedOnDay_ = "orderedItemsLastVisitedOnDay:";
			public static readonly Selector orderedLastVisitedDays = "orderedLastVisitedDays";
			public static readonly Selector removeAllItems = "removeAllItems";
			public static readonly Selector removeItem_ = "removeItem:";
			public static readonly Selector removeItems_ = "removeItems:";
			public static readonly Selector saveToURL_error_ = "saveToURL:error:";
			public static readonly Selector setHistoryAgeInDaysLimit_ = "setHistoryAgeInDaysLimit:";
			public static readonly Selector setHistoryItemLimit_ = "setHistoryItemLimit:";
			public static readonly Selector setLastVisitedTimeInterval_forItem_ = "setLastVisitedTimeInterval:forItem:";
			public static readonly Selector setOptionalSharedHistory_ = "setOptionalSharedHistory:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebHistoryItem : IEquatable<WebHistoryItem> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebHistoryItem;
		public static implicit operator IntPtr( WebHistoryItem value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebHistoryItem value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebHistoryItem?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebHistoryItem value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebHistoryItem value1, WebHistoryItem value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebHistoryItem value1, WebHistoryItem value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebHistoryItem( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebHistoryItem alloc() {
			return new WebHistoryItem( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject entryWithURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.entryWithURL_( ClassHandle, CachedSelectors.entryWithURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void initWindowWatcherIfNecessary() {
			RuntimeObject ___occuredException;
			NativeMethods.initWindowWatcherIfNecessary( ClassHandle, CachedSelectors.initWindowWatcherIfNecessary, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string alternateTitle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.alternateTitle( Handle, CachedSelectors.alternateTitle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject children() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.children( Handle, CachedSelectors.children, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject dictionaryRepresentation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dictionaryRepresentation( Handle, CachedSelectors.dictionaryRepresentation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSImage icon() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.icon( Handle, CachedSelectors.icon, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSImage( ___result );
		}
		unsafe public NObjective.RuntimeObject initFromDictionaryRepresentation_( NObjective.RuntimeObject representation ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initFromDictionaryRepresentation_( Handle, CachedSelectors.initFromDictionaryRepresentation_, out ___occuredException, sizeof( NObjective.RuntimeObject ), representation );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithURL_target_parent_title_( NObjective.RuntimeObject url, NObjective.RuntimeObject target, NObjective.RuntimeObject parent, NObjective.RuntimeObject title ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithURL_target_parent_title_( Handle, CachedSelectors.initWithURL_target_parent_title_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), url, target, parent, title );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithURL_title_( NObjective.RuntimeObject url, NObjective.RuntimeObject title ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithURL_title_( Handle, CachedSelectors.initWithURL_title_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), url, title );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithURLString_title_displayTitle_lastVisitedTimeInterval_( NObjective.RuntimeObject @string, NObjective.RuntimeObject title, NObjective.RuntimeObject displayTitle, double lastVisitedTimeInterval ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithURLString_title_displayTitle_lastVisitedTimeInterval_( Handle, CachedSelectors.initWithURLString_title_displayTitle_lastVisitedTimeInterval_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( double ), @string, title, displayTitle, lastVisitedTimeInterval );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithURLString_title_lastVisitedTimeInterval_( string @string, string title, double lastVisitedTimeInterval ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___wrappedtitle = Runtime.CreateStringProxy( title );
			var ___result = NativeMethods.initWithURLString_title_lastVisitedTimeInterval_( Handle, CachedSelectors.initWithURLString_title_lastVisitedTimeInterval_, out ___occuredException, sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( double ), ___wrappedstring, ___wrappedtitle, lastVisitedTimeInterval );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedtitle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isTargetItem() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isTargetItem( Handle, CachedSelectors.isTargetItem, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public double lastVisitedTimeInterval() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.lastVisitedTimeInterval( Handle, CachedSelectors.lastVisitedTimeInterval, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string originalURLString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.originalURLString( Handle, CachedSelectors.originalURLString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject RSSFeedReferrer() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.RSSFeedReferrer( Handle, CachedSelectors.RSSFeedReferrer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setAlternateTitle_( string title ) {
			RuntimeObject ___occuredException;
			var ___wrappedtitle = Runtime.CreateStringProxy( title );
			NativeMethods.setAlternateTitle_( Handle, CachedSelectors.setAlternateTitle_, out ___occuredException, sizeof( IntPtr ), ___wrappedtitle );
			Runtime.ReleaseNativeObject( ___wrappedtitle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAlwaysAttemptToUsePageCache_( char cache ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlwaysAttemptToUsePageCache_( Handle, CachedSelectors.setAlwaysAttemptToUsePageCache_, out ___occuredException, sizeof( char ), cache );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRSSFeedReferrer_( NObjective.RuntimeObject referrer ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRSSFeedReferrer_( Handle, CachedSelectors.setRSSFeedReferrer_, out ___occuredException, sizeof( NObjective.RuntimeObject ), referrer );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTitle_( NObjective.RuntimeObject title ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTitle_( Handle, CachedSelectors.setTitle_, out ___occuredException, sizeof( NObjective.RuntimeObject ), title );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setViewState_( NObjective.RuntimeObject state ) {
			RuntimeObject ___occuredException;
			NativeMethods.setViewState_( Handle, CachedSelectors.setViewState_, out ___occuredException, sizeof( NObjective.RuntimeObject ), state );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setVisitCount_( int count ) {
			RuntimeObject ___occuredException;
			NativeMethods.setVisitCount_( Handle, CachedSelectors.setVisitCount_, out ___occuredException, sizeof( int ), count );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject target() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.target( Handle, CachedSelectors.target, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject targetItem() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.targetItem( Handle, CachedSelectors.targetItem, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string title() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.title( Handle, CachedSelectors.title, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject URL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.URL( Handle, CachedSelectors.URL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string URLString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.URLString( Handle, CachedSelectors.URLString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public int visitCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.visitCount( Handle, CachedSelectors.visitCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr alternateTitle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr children( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr dictionaryRepresentation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr entryWithURL_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr icon( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initFromDictionaryRepresentation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject representation );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initWindowWatcherIfNecessary( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithURL_target_parent_title_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url, NObjective.RuntimeObject target, NObjective.RuntimeObject parent, NObjective.RuntimeObject title );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithURL_title_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url, NObjective.RuntimeObject title );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithURLString_title_displayTitle_lastVisitedTimeInterval_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, NObjective.RuntimeObject title, NObjective.RuntimeObject displayTitle, double lastVisitedTimeInterval );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithURLString_title_lastVisitedTimeInterval_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string, IntPtr title, double lastVisitedTimeInterval );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isTargetItem( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double lastVisitedTimeInterval( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr originalURLString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr RSSFeedReferrer( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlternateTitle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr title );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlwaysAttemptToUsePageCache_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char cache );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRSSFeedReferrer_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject referrer );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTitle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject title );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setViewState_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject state );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setVisitCount_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int count );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr target( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr targetItem( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr title( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr URL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr URLString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int visitCount( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector alternateTitle = "alternateTitle";
			public static readonly Selector children = "children";
			public static readonly Selector dictionaryRepresentation = "dictionaryRepresentation";
			public static readonly Selector entryWithURL_ = "entryWithURL:";
			public static readonly Selector icon = "icon";
			public static readonly Selector initFromDictionaryRepresentation_ = "initFromDictionaryRepresentation:";
			public static readonly Selector initialize = "initialize";
			public static readonly Selector initWindowWatcherIfNecessary = "initWindowWatcherIfNecessary";
			public static readonly Selector initWithURL_target_parent_title_ = "initWithURL:target:parent:title:";
			public static readonly Selector initWithURL_title_ = "initWithURL:title:";
			public static readonly Selector initWithURLString_title_displayTitle_lastVisitedTimeInterval_ = "initWithURLString:title:displayTitle:lastVisitedTimeInterval:";
			public static readonly Selector initWithURLString_title_lastVisitedTimeInterval_ = "initWithURLString:title:lastVisitedTimeInterval:";
			public static readonly Selector isTargetItem = "isTargetItem";
			public static readonly Selector lastVisitedTimeInterval = "lastVisitedTimeInterval";
			public static readonly Selector originalURLString = "originalURLString";
			public static readonly Selector RSSFeedReferrer = "RSSFeedReferrer";
			public static readonly Selector setAlternateTitle_ = "setAlternateTitle:";
			public static readonly Selector setAlwaysAttemptToUsePageCache_ = "setAlwaysAttemptToUsePageCache:";
			public static readonly Selector setRSSFeedReferrer_ = "setRSSFeedReferrer:";
			public static readonly Selector setTitle_ = "setTitle:";
			public static readonly Selector setViewState_ = "setViewState:";
			public static readonly Selector setVisitCount_ = "setVisitCount:";
			public static readonly Selector target = "target";
			public static readonly Selector targetItem = "targetItem";
			public static readonly Selector title = "title";
			public static readonly Selector URL = "URL";
			public static readonly Selector URLString = "URLString";
			public static readonly Selector visitCount = "visitCount";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebHistoryPrivate : IEquatable<WebHistoryPrivate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebHistoryPrivate;
		public static implicit operator IntPtr( WebHistoryPrivate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebHistoryPrivate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebHistoryPrivate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebHistoryPrivate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebHistoryPrivate value1, WebHistoryPrivate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebHistoryPrivate value1, WebHistoryPrivate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebHistoryPrivate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebHistoryPrivate alloc() {
			return new WebHistoryPrivate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			NativeMethods.addItem_( Handle, CachedSelectors.addItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addItems_( NObjective.RuntimeObject items ) {
			RuntimeObject ___occuredException;
			NativeMethods.addItems_( Handle, CachedSelectors.addItems_, out ___occuredException, sizeof( NObjective.RuntimeObject ), items );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject arrayRepresentation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.arrayRepresentation( Handle, CachedSelectors.arrayRepresentation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char containsItemForURLString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.containsItemForURLString_( Handle, CachedSelectors.containsItemForURLString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char containsURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.containsURL_( Handle, CachedSelectors.containsURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char findKey_forDay_( System.IntPtr key, double forDay ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.findKey_forDay_( Handle, CachedSelectors.findKey_forDay_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( double ), key, forDay );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int historyAgeInDaysLimit() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.historyAgeInDaysLimit( Handle, CachedSelectors.historyAgeInDaysLimit, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int historyItemLimit() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.historyItemLimit( Handle, CachedSelectors.historyItemLimit, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void insertItem_forDateKey_( NObjective.RuntimeObject item, long forDateKey ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertItem_forDateKey_( Handle, CachedSelectors.insertItem_forDateKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( long ), item, forDateKey );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject itemForURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.itemForURL_( Handle, CachedSelectors.itemForURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject itemForURLString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.itemForURLString_( Handle, CachedSelectors.itemForURLString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char loadFromURL_collectDiscardedItemsInto_error_( NObjective.RuntimeObject url, NObjective.RuntimeObject collectDiscardedItemsInto, System.IntPtr error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.loadFromURL_collectDiscardedItemsInto_error_( Handle, CachedSelectors.loadFromURL_collectDiscardedItemsInto_error_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), url, collectDiscardedItemsInto, error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject orderedItemsLastVisitedOnDay_( NObjective.RuntimeObject day ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.orderedItemsLastVisitedOnDay_( Handle, CachedSelectors.orderedItemsLastVisitedOnDay_, out ___occuredException, sizeof( NObjective.RuntimeObject ), day );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject orderedLastVisitedDays() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.orderedLastVisitedDays( Handle, CachedSelectors.orderedLastVisitedDays, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char removeAllItems() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeAllItems( Handle, CachedSelectors.removeAllItems, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char removeItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeItem_( Handle, CachedSelectors.removeItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char removeItemForURLString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeItemForURLString_( Handle, CachedSelectors.removeItemForURLString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char removeItems_( NObjective.RuntimeObject items ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.removeItems_( Handle, CachedSelectors.removeItems_, out ___occuredException, sizeof( NObjective.RuntimeObject ), items );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char saveToURL_error_( NObjective.RuntimeObject url, System.IntPtr error ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.saveToURL_error_( Handle, CachedSelectors.saveToURL_error_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ), url, error );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setHistoryAgeInDaysLimit_( int limit ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHistoryAgeInDaysLimit_( Handle, CachedSelectors.setHistoryAgeInDaysLimit_, out ___occuredException, sizeof( int ), limit );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHistoryItemLimit_( int limit ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHistoryItemLimit_( Handle, CachedSelectors.setHistoryItemLimit_, out ___occuredException, sizeof( int ), limit );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLastVisitedTimeInterval_forItem_( double interval, NObjective.RuntimeObject forItem ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLastVisitedTimeInterval_forItem_( Handle, CachedSelectors.setLastVisitedTimeInterval_forItem_, out ___occuredException, sizeof( double ) + sizeof( NObjective.RuntimeObject ), interval, forItem );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addItems_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject items );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr arrayRepresentation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char containsItemForURLString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char containsURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char findKey_forDay_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr key, double forDay );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int historyAgeInDaysLimit( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int historyItemLimit( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertItem_forDateKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item, long forDateKey );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr itemForURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr itemForURLString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char loadFromURL_collectDiscardedItemsInto_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url, NObjective.RuntimeObject collectDiscardedItemsInto, System.IntPtr error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr orderedItemsLastVisitedOnDay_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject day );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr orderedLastVisitedDays( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char removeAllItems( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char removeItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char removeItemForURLString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char removeItems_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject items );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char saveToURL_error_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url, System.IntPtr error );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHistoryAgeInDaysLimit_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int limit );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHistoryItemLimit_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int limit );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLastVisitedTimeInterval_forItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, double interval, NObjective.RuntimeObject forItem );
		}
		static internal class CachedSelectors {
			public static readonly Selector addItem_ = "addItem:";
			public static readonly Selector addItems_ = "addItems:";
			public static readonly Selector arrayRepresentation = "arrayRepresentation";
			public static readonly Selector containsItemForURLString_ = "containsItemForURLString:";
			public static readonly Selector containsURL_ = "containsURL:";
			public static readonly Selector findKey_forDay_ = "findKey:forDay:";
			public static readonly Selector historyAgeInDaysLimit = "historyAgeInDaysLimit";
			public static readonly Selector historyItemLimit = "historyItemLimit";
			public static readonly Selector initialize = "initialize";
			public static readonly Selector insertItem_forDateKey_ = "insertItem:forDateKey:";
			public static readonly Selector itemForURL_ = "itemForURL:";
			public static readonly Selector itemForURLString_ = "itemForURLString:";
			public static readonly Selector loadFromURL_collectDiscardedItemsInto_error_ = "loadFromURL:collectDiscardedItemsInto:error:";
			public static readonly Selector orderedItemsLastVisitedOnDay_ = "orderedItemsLastVisitedOnDay:";
			public static readonly Selector orderedLastVisitedDays = "orderedLastVisitedDays";
			public static readonly Selector removeAllItems = "removeAllItems";
			public static readonly Selector removeItem_ = "removeItem:";
			public static readonly Selector removeItemForURLString_ = "removeItemForURLString:";
			public static readonly Selector removeItems_ = "removeItems:";
			public static readonly Selector saveToURL_error_ = "saveToURL:error:";
			public static readonly Selector setHistoryAgeInDaysLimit_ = "setHistoryAgeInDaysLimit:";
			public static readonly Selector setHistoryItemLimit_ = "setHistoryItemLimit:";
			public static readonly Selector setLastVisitedTimeInterval_forItem_ = "setLastVisitedTimeInterval:forItem:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebHTMLRepresentation : IEquatable<WebHTMLRepresentation> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebHTMLRepresentation;
		public static implicit operator IntPtr( WebHTMLRepresentation value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebHTMLRepresentation value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebHTMLRepresentation?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebHTMLRepresentation value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebHTMLRepresentation value1, WebHTMLRepresentation value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebHTMLRepresentation value1, WebHTMLRepresentation value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebHTMLRepresentation( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebHTMLRepresentation alloc() {
			return new WebHTMLRepresentation( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject supportedImageMIMETypes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.supportedImageMIMETypes( ClassHandle, CachedSelectors.supportedImageMIMETypes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject supportedMIMETypes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.supportedMIMETypes( ClassHandle, CachedSelectors.supportedMIMETypes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject supportedNonImageMIMETypes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.supportedNonImageMIMETypes( ClassHandle, CachedSelectors.supportedNonImageMIMETypes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject attributedStringFrom_startOffset_to_endOffset_( NObjective.RuntimeObject @from, int startOffset, NObjective.RuntimeObject to, int endOffset ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attributedStringFrom_startOffset_to_endOffset_( Handle, CachedSelectors.attributedStringFrom_startOffset_to_endOffset_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), @from, startOffset, to, endOffset );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject attributedText() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attributedText( Handle, CachedSelectors.attributedText, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char canProvideDocumentSource() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canProvideDocumentSource( Handle, CachedSelectors.canProvideDocumentSource, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char canSaveAsWebArchive() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canSaveAsWebArchive( Handle, CachedSelectors.canSaveAsWebArchive, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject controlsInForm_( NObjective.RuntimeObject form ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.controlsInForm_( Handle, CachedSelectors.controlsInForm_, out ___occuredException, sizeof( NObjective.RuntimeObject ), form );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject currentForm() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.currentForm( Handle, CachedSelectors.currentForm, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject documentSource() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.documentSource( Handle, CachedSelectors.documentSource, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject DOMDocument() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.DOMDocument( Handle, CachedSelectors.DOMDocument, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char elementDoesAutoComplete_( NObjective.RuntimeObject complete ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.elementDoesAutoComplete_( Handle, CachedSelectors.elementDoesAutoComplete_, out ___occuredException, sizeof( NObjective.RuntimeObject ), complete );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char elementIsPassword_( NObjective.RuntimeObject password ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.elementIsPassword_( Handle, CachedSelectors.elementIsPassword_, out ___occuredException, sizeof( NObjective.RuntimeObject ), password );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject elementWithName_inForm_( NObjective.RuntimeObject name, NObjective.RuntimeObject inForm ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.elementWithName_inForm_( Handle, CachedSelectors.elementWithName_inForm_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), name, inForm );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void finishedLoadingWithDataSource_( NObjective.RuntimeObject source ) {
			RuntimeObject ___occuredException;
			NativeMethods.finishedLoadingWithDataSource_( Handle, CachedSelectors.finishedLoadingWithDataSource_, out ___occuredException, sizeof( NObjective.RuntimeObject ), source );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject formForElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.formForElement_( Handle, CachedSelectors.formForElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject matchLabels_againstElement_( NObjective.RuntimeObject labels, NObjective.RuntimeObject againstElement ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.matchLabels_againstElement_( Handle, CachedSelectors.matchLabels_againstElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), labels, againstElement );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void receivedData_withDataSource_( NObjective.RuntimeObject data, NObjective.RuntimeObject withDataSource ) {
			RuntimeObject ___occuredException;
			NativeMethods.receivedData_withDataSource_( Handle, CachedSelectors.receivedData_withDataSource_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), data, withDataSource );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void receivedError_withDataSource_( NObjective.RuntimeObject error, NObjective.RuntimeObject withDataSource ) {
			RuntimeObject ___occuredException;
			NativeMethods.receivedError_withDataSource_( Handle, CachedSelectors.receivedError_withDataSource_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), error, withDataSource );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject searchForLabels_beforeElement_( NObjective.RuntimeObject labels, NObjective.RuntimeObject beforeElement ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchForLabels_beforeElement_( Handle, CachedSelectors.searchForLabels_beforeElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), labels, beforeElement );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setDataSource_( NObjective.RuntimeObject source ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDataSource_( Handle, CachedSelectors.setDataSource_, out ___occuredException, sizeof( NObjective.RuntimeObject ), source );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject title() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.title( Handle, CachedSelectors.title, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attributedStringFrom_startOffset_to_endOffset_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @from, int startOffset, NObjective.RuntimeObject to, int endOffset );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attributedText( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char canProvideDocumentSource( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char canSaveAsWebArchive( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr controlsInForm_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject form );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr currentForm( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr documentSource( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr DOMDocument( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char elementDoesAutoComplete_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject complete );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char elementIsPassword_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject password );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr elementWithName_inForm_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, NObjective.RuntimeObject inForm );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void finishedLoadingWithDataSource_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject source );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr formForElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr matchLabels_againstElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject labels, NObjective.RuntimeObject againstElement );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void receivedData_withDataSource_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data, NObjective.RuntimeObject withDataSource );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void receivedError_withDataSource_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject error, NObjective.RuntimeObject withDataSource );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr searchForLabels_beforeElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject labels, NObjective.RuntimeObject beforeElement );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDataSource_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject source );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr supportedImageMIMETypes( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr supportedMIMETypes( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr supportedNonImageMIMETypes( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr title( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector attributedStringFrom_startOffset_to_endOffset_ = "attributedStringFrom:startOffset:to:endOffset:";
			public static readonly Selector attributedText = "attributedText";
			public static readonly Selector canProvideDocumentSource = "canProvideDocumentSource";
			public static readonly Selector canSaveAsWebArchive = "canSaveAsWebArchive";
			public static readonly Selector controlsInForm_ = "controlsInForm:";
			public static readonly Selector currentForm = "currentForm";
			public static readonly Selector documentSource = "documentSource";
			public static readonly Selector DOMDocument = "DOMDocument";
			public static readonly Selector elementDoesAutoComplete_ = "elementDoesAutoComplete:";
			public static readonly Selector elementIsPassword_ = "elementIsPassword:";
			public static readonly Selector elementWithName_inForm_ = "elementWithName:inForm:";
			public static readonly Selector finishedLoadingWithDataSource_ = "finishedLoadingWithDataSource:";
			public static readonly Selector formForElement_ = "formForElement:";
			public static readonly Selector matchLabels_againstElement_ = "matchLabels:againstElement:";
			public static readonly Selector receivedData_withDataSource_ = "receivedData:withDataSource:";
			public static readonly Selector receivedError_withDataSource_ = "receivedError:withDataSource:";
			public static readonly Selector searchForLabels_beforeElement_ = "searchForLabels:beforeElement:";
			public static readonly Selector setDataSource_ = "setDataSource:";
			public static readonly Selector supportedImageMIMETypes = "supportedImageMIMETypes";
			public static readonly Selector supportedMIMETypes = "supportedMIMETypes";
			public static readonly Selector supportedNonImageMIMETypes = "supportedNonImageMIMETypes";
			public static readonly Selector title = "title";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebHTMLRepresentationPrivate : IEquatable<WebHTMLRepresentationPrivate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebHTMLRepresentationPrivate;
		public static implicit operator IntPtr( WebHTMLRepresentationPrivate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebHTMLRepresentationPrivate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebHTMLRepresentationPrivate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebHTMLRepresentationPrivate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebHTMLRepresentationPrivate value1, WebHTMLRepresentationPrivate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebHTMLRepresentationPrivate value1, WebHTMLRepresentationPrivate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebHTMLRepresentationPrivate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebHTMLRepresentationPrivate alloc() {
			return new WebHTMLRepresentationPrivate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSControl ) )]
	public struct WebHTMLView : IEquatable<WebHTMLView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebHTMLView;
		public static implicit operator IntPtr( WebHTMLView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebHTMLView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebHTMLView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebHTMLView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebHTMLView value1, WebHTMLView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebHTMLView value1, WebHTMLView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebHTMLView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebHTMLView alloc() {
			return new WebHTMLView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject supportedImageMIMETypes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.supportedImageMIMETypes( ClassHandle, CachedSelectors.supportedImageMIMETypes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject supportedMIMETypes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.supportedMIMETypes( ClassHandle, CachedSelectors.supportedMIMETypes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject supportedNonImageMIMETypes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.supportedNonImageMIMETypes( ClassHandle, CachedSelectors.supportedNonImageMIMETypes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject unsupportedTextMIMETypes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.unsupportedTextMIMETypes( ClassHandle, CachedSelectors.unsupportedTextMIMETypes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addMouseMovedObserver() {
			RuntimeObject ___occuredException;
			NativeMethods.addMouseMovedObserver( Handle, CachedSelectors.addMouseMovedObserver, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addSuperviewObservers() {
			RuntimeObject ___occuredException;
			NativeMethods.addSuperviewObservers( Handle, CachedSelectors.addSuperviewObservers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addWindowObservers() {
			RuntimeObject ___occuredException;
			NativeMethods.addWindowObservers( Handle, CachedSelectors.addWindowObservers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void alignCenter_( NObjective.RuntimeObject center ) {
			RuntimeObject ___occuredException;
			NativeMethods.alignCenter_( Handle, CachedSelectors.alignCenter_, out ___occuredException, sizeof( NObjective.RuntimeObject ), center );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void alignJustified_( NObjective.RuntimeObject justified ) {
			RuntimeObject ___occuredException;
			NativeMethods.alignJustified_( Handle, CachedSelectors.alignJustified_, out ___occuredException, sizeof( NObjective.RuntimeObject ), justified );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void alignLeft_( NObjective.RuntimeObject left ) {
			RuntimeObject ___occuredException;
			NativeMethods.alignLeft_( Handle, CachedSelectors.alignLeft_, out ___occuredException, sizeof( NObjective.RuntimeObject ), left );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void alignRight_( NObjective.RuntimeObject right ) {
			RuntimeObject ___occuredException;
			NativeMethods.alignRight_( Handle, CachedSelectors.alignRight_, out ___occuredException, sizeof( NObjective.RuntimeObject ), right );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject attributedString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attributedString( Handle, CachedSelectors.attributedString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char callDelegateDoCommandBySelectorIfNeeded_( NObjective.Selector needed ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.callDelegateDoCommandBySelectorIfNeeded_( Handle, CachedSelectors.callDelegateDoCommandBySelectorIfNeeded_, out ___occuredException, sizeof( NObjective.Selector ), needed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char canPrintHeadersAndFooters() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canPrintHeadersAndFooters( Handle, CachedSelectors.canPrintHeadersAndFooters, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void capitalizeWord_( NObjective.RuntimeObject word ) {
			RuntimeObject ___occuredException;
			NativeMethods.capitalizeWord_( Handle, CachedSelectors.capitalizeWord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), word );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void centerSelectionInVisibleArea_( NObjective.RuntimeObject area ) {
			RuntimeObject ___occuredException;
			NativeMethods.centerSelectionInVisibleArea_( Handle, CachedSelectors.centerSelectionInVisibleArea_, out ___occuredException, sizeof( NObjective.RuntimeObject ), area );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changeAttributes_( NObjective.RuntimeObject attributes ) {
			RuntimeObject ___occuredException;
			NativeMethods.changeAttributes_( Handle, CachedSelectors.changeAttributes_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attributes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changeBaseWritingDirection_( NObjective.RuntimeObject direction ) {
			RuntimeObject ___occuredException;
			NativeMethods.changeBaseWritingDirection_( Handle, CachedSelectors.changeBaseWritingDirection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), direction );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changeBaseWritingDirectionToLTR_( NObjective.RuntimeObject ltr ) {
			RuntimeObject ___occuredException;
			NativeMethods.changeBaseWritingDirectionToLTR_( Handle, CachedSelectors.changeBaseWritingDirectionToLTR_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ltr );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changeBaseWritingDirectionToRTL_( NObjective.RuntimeObject rtl ) {
			RuntimeObject ___occuredException;
			NativeMethods.changeBaseWritingDirectionToRTL_( Handle, CachedSelectors.changeBaseWritingDirectionToRTL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), rtl );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changeColor_( NObjective.RuntimeObject color ) {
			RuntimeObject ___occuredException;
			NativeMethods.changeColor_( Handle, CachedSelectors.changeColor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), color );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changeDocumentBackgroundColor_( NObjective.RuntimeObject color ) {
			RuntimeObject ___occuredException;
			NativeMethods.changeDocumentBackgroundColor_( Handle, CachedSelectors.changeDocumentBackgroundColor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), color );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changeFont_( NObjective.RuntimeObject font ) {
			RuntimeObject ___occuredException;
			NativeMethods.changeFont_( Handle, CachedSelectors.changeFont_, out ___occuredException, sizeof( NObjective.RuntimeObject ), font );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changeSpelling_( NObjective.RuntimeObject spelling ) {
			RuntimeObject ___occuredException;
			NativeMethods.changeSpelling_( Handle, CachedSelectors.changeSpelling_, out ___occuredException, sizeof( NObjective.RuntimeObject ), spelling );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void checkSpelling_( NObjective.RuntimeObject spelling ) {
			RuntimeObject ___occuredException;
			NativeMethods.checkSpelling_( Handle, CachedSelectors.checkSpelling_, out ___occuredException, sizeof( NObjective.RuntimeObject ), spelling );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clearFocus() {
			RuntimeObject ___occuredException;
			NativeMethods.clearFocus( Handle, CachedSelectors.clearFocus, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void close() {
			RuntimeObject ___occuredException;
			NativeMethods.close( Handle, CachedSelectors.close, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void closeIfNotCurrentView() {
			RuntimeObject ___occuredException;
			NativeMethods.closeIfNotCurrentView( Handle, CachedSelectors.closeIfNotCurrentView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void complete_( NObjective.RuntimeObject complete ) {
			RuntimeObject ___occuredException;
			NativeMethods.complete_( Handle, CachedSelectors.complete_, out ___occuredException, sizeof( NObjective.RuntimeObject ), complete );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int conversationIdentifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.conversationIdentifier( Handle, CachedSelectors.conversationIdentifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void copy_( NObjective.RuntimeObject copy ) {
			RuntimeObject ___occuredException;
			NativeMethods.copy_( Handle, CachedSelectors.copy_, out ___occuredException, sizeof( NObjective.RuntimeObject ), copy );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void copyFont_( NObjective.RuntimeObject font ) {
			RuntimeObject ___occuredException;
			NativeMethods.copyFont_( Handle, CachedSelectors.copyFont_, out ___occuredException, sizeof( NObjective.RuntimeObject ), font );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void cut_( NObjective.RuntimeObject cut ) {
			RuntimeObject ___occuredException;
			NativeMethods.cut_( Handle, CachedSelectors.cut_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cut );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void dataSourceUpdated_( NObjective.RuntimeObject updated ) {
			RuntimeObject ___occuredException;
			NativeMethods.dataSourceUpdated_( Handle, CachedSelectors.dataSourceUpdated_, out ___occuredException, sizeof( NObjective.RuntimeObject ), updated );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void delete_( NObjective.RuntimeObject delete ) {
			RuntimeObject ___occuredException;
			NativeMethods.delete_( Handle, CachedSelectors.delete_, out ___occuredException, sizeof( NObjective.RuntimeObject ), delete );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteBackward_( NObjective.RuntimeObject backward ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteBackward_( Handle, CachedSelectors.deleteBackward_, out ___occuredException, sizeof( NObjective.RuntimeObject ), backward );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteBackwardByDecomposingPreviousCharacter_( NObjective.RuntimeObject character ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteBackwardByDecomposingPreviousCharacter_( Handle, CachedSelectors.deleteBackwardByDecomposingPreviousCharacter_, out ___occuredException, sizeof( NObjective.RuntimeObject ), character );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteForward_( NObjective.RuntimeObject forward ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteForward_( Handle, CachedSelectors.deleteForward_, out ___occuredException, sizeof( NObjective.RuntimeObject ), forward );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteToBeginningOfLine_( NObjective.RuntimeObject line ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteToBeginningOfLine_( Handle, CachedSelectors.deleteToBeginningOfLine_, out ___occuredException, sizeof( NObjective.RuntimeObject ), line );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteToBeginningOfParagraph_( NObjective.RuntimeObject paragraph ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteToBeginningOfParagraph_( Handle, CachedSelectors.deleteToBeginningOfParagraph_, out ___occuredException, sizeof( NObjective.RuntimeObject ), paragraph );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteToEndOfLine_( NObjective.RuntimeObject line ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteToEndOfLine_( Handle, CachedSelectors.deleteToEndOfLine_, out ___occuredException, sizeof( NObjective.RuntimeObject ), line );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteToEndOfParagraph_( NObjective.RuntimeObject paragraph ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteToEndOfParagraph_( Handle, CachedSelectors.deleteToEndOfParagraph_, out ___occuredException, sizeof( NObjective.RuntimeObject ), paragraph );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteToMark_( NObjective.RuntimeObject mark ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteToMark_( Handle, CachedSelectors.deleteToMark_, out ___occuredException, sizeof( NObjective.RuntimeObject ), mark );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteWordBackward_( NObjective.RuntimeObject backward ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteWordBackward_( Handle, CachedSelectors.deleteWordBackward_, out ___occuredException, sizeof( NObjective.RuntimeObject ), backward );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteWordForward_( NObjective.RuntimeObject forward ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteWordForward_( Handle, CachedSelectors.deleteWordForward_, out ___occuredException, sizeof( NObjective.RuntimeObject ), forward );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deselectAll() {
			RuntimeObject ___occuredException;
			NativeMethods.deselectAll( Handle, CachedSelectors.deselectAll, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint draggingSourceOperationMaskForLocal_( char local ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.draggingSourceOperationMaskForLocal_( Handle, CachedSelectors.draggingSourceOperationMaskForLocal_, out ___occuredException, sizeof( char ), local );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public void executeCoreCommandByName_( System.IntPtr name ) {
			RuntimeObject ___occuredException;
			NativeMethods.executeCoreCommandByName_( Handle, CachedSelectors.executeCoreCommandByName_, out ___occuredException, sizeof( System.IntPtr ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void executeCoreCommandBySelector_( NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			NativeMethods.executeCoreCommandBySelector_( Handle, CachedSelectors.executeCoreCommandBySelector_, out ___occuredException, sizeof( NObjective.Selector ), selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char hasMarkedText() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hasMarkedText( Handle, CachedSelectors.hasMarkedText, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void ignoreSpelling_( NObjective.RuntimeObject spelling ) {
			RuntimeObject ___occuredException;
			NativeMethods.ignoreSpelling_( Handle, CachedSelectors.ignoreSpelling_, out ___occuredException, sizeof( NObjective.RuntimeObject ), spelling );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void indent_( NObjective.RuntimeObject indent ) {
			RuntimeObject ___occuredException;
			NativeMethods.indent_( Handle, CachedSelectors.indent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), indent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void insertBacktab_( NObjective.RuntimeObject backtab ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertBacktab_( Handle, CachedSelectors.insertBacktab_, out ___occuredException, sizeof( NObjective.RuntimeObject ), backtab );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void insertLineBreak_( NObjective.RuntimeObject @break ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertLineBreak_( Handle, CachedSelectors.insertLineBreak_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @break );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void insertNewline_( NObjective.RuntimeObject newline ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertNewline_( Handle, CachedSelectors.insertNewline_, out ___occuredException, sizeof( NObjective.RuntimeObject ), newline );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void insertNewlineIgnoringFieldEditor_( NObjective.RuntimeObject editor ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertNewlineIgnoringFieldEditor_( Handle, CachedSelectors.insertNewlineIgnoringFieldEditor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), editor );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void insertParagraphSeparator_( NObjective.RuntimeObject separator ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertParagraphSeparator_( Handle, CachedSelectors.insertParagraphSeparator_, out ___occuredException, sizeof( NObjective.RuntimeObject ), separator );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void insertTab_( NObjective.RuntimeObject tab ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertTab_( Handle, CachedSelectors.insertTab_, out ___occuredException, sizeof( NObjective.RuntimeObject ), tab );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void insertTabIgnoringFieldEditor_( NObjective.RuntimeObject editor ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertTabIgnoringFieldEditor_( Handle, CachedSelectors.insertTabIgnoringFieldEditor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), editor );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool isGrammarCheckingEnabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isGrammarCheckingEnabled( Handle, CachedSelectors.isGrammarCheckingEnabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void jumpToSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.jumpToSelection_( Handle, CachedSelectors.jumpToSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void layout() {
			RuntimeObject ___occuredException;
			NativeMethods.layout( Handle, CachedSelectors.layout, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void layoutToMinimumPageWidth_maximumPageWidth_adjustingViewSize_( float width, float maximumPageWidth, char adjustingViewSize ) {
			RuntimeObject ___occuredException;
			NativeMethods.layoutToMinimumPageWidth_maximumPageWidth_adjustingViewSize_( Handle, CachedSelectors.layoutToMinimumPageWidth_maximumPageWidth_adjustingViewSize_, out ___occuredException, sizeof( float ) + sizeof( float ) + sizeof( char ), width, maximumPageWidth, adjustingViewSize );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void lowercaseWord_( NObjective.RuntimeObject word ) {
			RuntimeObject ___occuredException;
			NativeMethods.lowercaseWord_( Handle, CachedSelectors.lowercaseWord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), word );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char maintainsInactiveSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.maintainsInactiveSelection( Handle, CachedSelectors.maintainsInactiveSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public uint markAllMatchesForText_caseSensitive_limit_( NObjective.RuntimeObject text, char caseSensitive, uint limit ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.markAllMatchesForText_caseSensitive_limit_( Handle, CachedSelectors.markAllMatchesForText_caseSensitive_limit_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( uint ), text, caseSensitive, limit );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public char markedTextMatchesAreHighlighted() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.markedTextMatchesAreHighlighted( Handle, CachedSelectors.markedTextMatchesAreHighlighted, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void mouseMovedNotification_( NObjective.RuntimeObject notification ) {
			RuntimeObject ___occuredException;
			NativeMethods.mouseMovedNotification_( Handle, CachedSelectors.mouseMovedNotification_, out ___occuredException, sizeof( NObjective.RuntimeObject ), notification );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveBackward_( NObjective.RuntimeObject backward ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveBackward_( Handle, CachedSelectors.moveBackward_, out ___occuredException, sizeof( NObjective.RuntimeObject ), backward );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveBackwardAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveBackwardAndModifySelection_( Handle, CachedSelectors.moveBackwardAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveDown_( NObjective.RuntimeObject down ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveDown_( Handle, CachedSelectors.moveDown_, out ___occuredException, sizeof( NObjective.RuntimeObject ), down );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveDownAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveDownAndModifySelection_( Handle, CachedSelectors.moveDownAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveForward_( NObjective.RuntimeObject forward ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveForward_( Handle, CachedSelectors.moveForward_, out ___occuredException, sizeof( NObjective.RuntimeObject ), forward );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveForwardAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveForwardAndModifySelection_( Handle, CachedSelectors.moveForwardAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveLeft_( NObjective.RuntimeObject left ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveLeft_( Handle, CachedSelectors.moveLeft_, out ___occuredException, sizeof( NObjective.RuntimeObject ), left );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveLeftAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveLeftAndModifySelection_( Handle, CachedSelectors.moveLeftAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveParagraphBackwardAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveParagraphBackwardAndModifySelection_( Handle, CachedSelectors.moveParagraphBackwardAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveParagraphForwardAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveParagraphForwardAndModifySelection_( Handle, CachedSelectors.moveParagraphForwardAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveRight_( NObjective.RuntimeObject right ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveRight_( Handle, CachedSelectors.moveRight_, out ___occuredException, sizeof( NObjective.RuntimeObject ), right );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveRightAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveRightAndModifySelection_( Handle, CachedSelectors.moveRightAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToBeginningOfDocument_( NObjective.RuntimeObject document ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToBeginningOfDocument_( Handle, CachedSelectors.moveToBeginningOfDocument_, out ___occuredException, sizeof( NObjective.RuntimeObject ), document );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToBeginningOfDocumentAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToBeginningOfDocumentAndModifySelection_( Handle, CachedSelectors.moveToBeginningOfDocumentAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToBeginningOfLine_( NObjective.RuntimeObject line ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToBeginningOfLine_( Handle, CachedSelectors.moveToBeginningOfLine_, out ___occuredException, sizeof( NObjective.RuntimeObject ), line );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToBeginningOfLineAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToBeginningOfLineAndModifySelection_( Handle, CachedSelectors.moveToBeginningOfLineAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToBeginningOfParagraph_( NObjective.RuntimeObject paragraph ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToBeginningOfParagraph_( Handle, CachedSelectors.moveToBeginningOfParagraph_, out ___occuredException, sizeof( NObjective.RuntimeObject ), paragraph );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToBeginningOfParagraphAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToBeginningOfParagraphAndModifySelection_( Handle, CachedSelectors.moveToBeginningOfParagraphAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToBeginningOfSentence_( NObjective.RuntimeObject sentence ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToBeginningOfSentence_( Handle, CachedSelectors.moveToBeginningOfSentence_, out ___occuredException, sizeof( NObjective.RuntimeObject ), sentence );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToBeginningOfSentenceAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToBeginningOfSentenceAndModifySelection_( Handle, CachedSelectors.moveToBeginningOfSentenceAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToEndOfDocument_( NObjective.RuntimeObject document ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToEndOfDocument_( Handle, CachedSelectors.moveToEndOfDocument_, out ___occuredException, sizeof( NObjective.RuntimeObject ), document );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToEndOfDocumentAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToEndOfDocumentAndModifySelection_( Handle, CachedSelectors.moveToEndOfDocumentAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToEndOfLine_( NObjective.RuntimeObject line ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToEndOfLine_( Handle, CachedSelectors.moveToEndOfLine_, out ___occuredException, sizeof( NObjective.RuntimeObject ), line );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToEndOfLineAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToEndOfLineAndModifySelection_( Handle, CachedSelectors.moveToEndOfLineAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToEndOfParagraph_( NObjective.RuntimeObject paragraph ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToEndOfParagraph_( Handle, CachedSelectors.moveToEndOfParagraph_, out ___occuredException, sizeof( NObjective.RuntimeObject ), paragraph );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToEndOfParagraphAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToEndOfParagraphAndModifySelection_( Handle, CachedSelectors.moveToEndOfParagraphAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToEndOfSentence_( NObjective.RuntimeObject sentence ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToEndOfSentence_( Handle, CachedSelectors.moveToEndOfSentence_, out ___occuredException, sizeof( NObjective.RuntimeObject ), sentence );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToEndOfSentenceAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToEndOfSentenceAndModifySelection_( Handle, CachedSelectors.moveToEndOfSentenceAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveUp_( NObjective.RuntimeObject up ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveUp_( Handle, CachedSelectors.moveUp_, out ___occuredException, sizeof( NObjective.RuntimeObject ), up );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveUpAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveUpAndModifySelection_( Handle, CachedSelectors.moveUpAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveWordBackward_( NObjective.RuntimeObject backward ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveWordBackward_( Handle, CachedSelectors.moveWordBackward_, out ___occuredException, sizeof( NObjective.RuntimeObject ), backward );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveWordBackwardAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveWordBackwardAndModifySelection_( Handle, CachedSelectors.moveWordBackwardAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveWordForward_( NObjective.RuntimeObject forward ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveWordForward_( Handle, CachedSelectors.moveWordForward_, out ___occuredException, sizeof( NObjective.RuntimeObject ), forward );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveWordForwardAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveWordForwardAndModifySelection_( Handle, CachedSelectors.moveWordForwardAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveWordLeft_( NObjective.RuntimeObject left ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveWordLeft_( Handle, CachedSelectors.moveWordLeft_, out ___occuredException, sizeof( NObjective.RuntimeObject ), left );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveWordLeftAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveWordLeftAndModifySelection_( Handle, CachedSelectors.moveWordLeftAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveWordRight_( NObjective.RuntimeObject right ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveWordRight_( Handle, CachedSelectors.moveWordRight_, out ___occuredException, sizeof( NObjective.RuntimeObject ), right );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveWordRightAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveWordRightAndModifySelection_( Handle, CachedSelectors.moveWordRightAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject namesOfPromisedFilesDroppedAtDestination_( NObjective.RuntimeObject destination ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.namesOfPromisedFilesDroppedAtDestination_( Handle, CachedSelectors.namesOfPromisedFilesDroppedAtDestination_, out ___occuredException, sizeof( NObjective.RuntimeObject ), destination );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void outdent_( NObjective.RuntimeObject outdent ) {
			RuntimeObject ___occuredException;
			NativeMethods.outdent_( Handle, CachedSelectors.outdent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), outdent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void pageDown_( NObjective.RuntimeObject down ) {
			RuntimeObject ___occuredException;
			NativeMethods.pageDown_( Handle, CachedSelectors.pageDown_, out ___occuredException, sizeof( NObjective.RuntimeObject ), down );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void pageDownAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.pageDownAndModifySelection_( Handle, CachedSelectors.pageDownAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void pageUp_( NObjective.RuntimeObject up ) {
			RuntimeObject ___occuredException;
			NativeMethods.pageUp_( Handle, CachedSelectors.pageUp_, out ___occuredException, sizeof( NObjective.RuntimeObject ), up );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void pageUpAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.pageUpAndModifySelection_( Handle, CachedSelectors.pageUpAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void paste_( NObjective.RuntimeObject paste ) {
			RuntimeObject ___occuredException;
			NativeMethods.paste_( Handle, CachedSelectors.paste_, out ___occuredException, sizeof( NObjective.RuntimeObject ), paste );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void pasteAsPlainText_( NObjective.RuntimeObject text ) {
			RuntimeObject ___occuredException;
			NativeMethods.pasteAsPlainText_( Handle, CachedSelectors.pasteAsPlainText_, out ___occuredException, sizeof( NObjective.RuntimeObject ), text );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void pasteAsRichText_( NObjective.RuntimeObject text ) {
			RuntimeObject ___occuredException;
			NativeMethods.pasteAsRichText_( Handle, CachedSelectors.pasteAsRichText_, out ___occuredException, sizeof( NObjective.RuntimeObject ), text );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void pasteboard_provideDataForType_( NObjective.RuntimeObject pasteboard, NObjective.RuntimeObject provideDataForType ) {
			RuntimeObject ___occuredException;
			NativeMethods.pasteboard_provideDataForType_( Handle, CachedSelectors.pasteboard_provideDataForType_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), pasteboard, provideDataForType );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void pasteboardChangedOwner_( NObjective.RuntimeObject owner ) {
			RuntimeObject ___occuredException;
			NativeMethods.pasteboardChangedOwner_( Handle, CachedSelectors.pasteboardChangedOwner_, out ___occuredException, sizeof( NObjective.RuntimeObject ), owner );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject pasteboardTypesForSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pasteboardTypesForSelection( Handle, CachedSelectors.pasteboardTypesForSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void pasteFont_( NObjective.RuntimeObject font ) {
			RuntimeObject ___occuredException;
			NativeMethods.pasteFont_( Handle, CachedSelectors.pasteFont_, out ___occuredException, sizeof( NObjective.RuntimeObject ), font );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void performFindPanelAction_( NObjective.RuntimeObject action ) {
			RuntimeObject ___occuredException;
			NativeMethods.performFindPanelAction_( Handle, CachedSelectors.performFindPanelAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char readSelectionFromPasteboard_( NObjective.RuntimeObject pasteboard ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.readSelectionFromPasteboard_( Handle, CachedSelectors.readSelectionFromPasteboard_, out ___occuredException, sizeof( NObjective.RuntimeObject ), pasteboard );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void reapplyStyles() {
			RuntimeObject ___occuredException;
			NativeMethods.reapplyStyles( Handle, CachedSelectors.reapplyStyles, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject rectsForTextMatches() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rectsForTextMatches( Handle, CachedSelectors.rectsForTextMatches, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void removeMouseMovedObserver() {
			RuntimeObject ___occuredException;
			NativeMethods.removeMouseMovedObserver( Handle, CachedSelectors.removeMouseMovedObserver, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeMouseMovedObserverUnconditionally() {
			RuntimeObject ___occuredException;
			NativeMethods.removeMouseMovedObserverUnconditionally( Handle, CachedSelectors.removeMouseMovedObserverUnconditionally, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeSuperviewObservers() {
			RuntimeObject ___occuredException;
			NativeMethods.removeSuperviewObservers( Handle, CachedSelectors.removeSuperviewObservers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeWindowObservers() {
			RuntimeObject ___occuredException;
			NativeMethods.removeWindowObservers( Handle, CachedSelectors.removeWindowObservers, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char searchFor_direction_caseSensitive_wrap_( NObjective.RuntimeObject @for, char direction, char caseSensitive, char wrap ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchFor_direction_caseSensitive_wrap_( Handle, CachedSelectors.searchFor_direction_caseSensitive_wrap_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ) + sizeof( char ), @for, direction, caseSensitive, wrap );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char searchFor_direction_caseSensitive_wrap_startInSelection_( NObjective.RuntimeObject @for, char direction, char caseSensitive, char wrap, char startInSelection ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchFor_direction_caseSensitive_wrap_startInSelection_( Handle, CachedSelectors.searchFor_direction_caseSensitive_wrap_startInSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ) + sizeof( char ) + sizeof( char ), @for, direction, caseSensitive, wrap, startInSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void selectAll() {
			RuntimeObject ___occuredException;
			NativeMethods.selectAll( Handle, CachedSelectors.selectAll, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectAll_( NObjective.RuntimeObject all ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectAll_( Handle, CachedSelectors.selectAll_, out ___occuredException, sizeof( NObjective.RuntimeObject ), all );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject selectedAttributedString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedAttributedString( Handle, CachedSelectors.selectedAttributedString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedString( Handle, CachedSelectors.selectedString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectionImageForcingBlackText_( char text ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectionImageForcingBlackText_( Handle, CachedSelectors.selectionImageForcingBlackText_, out ___occuredException, sizeof( char ), text );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectionImageForcingWhiteText_( char text ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectionImageForcingWhiteText_( Handle, CachedSelectors.selectionImageForcingWhiteText_, out ___occuredException, sizeof( char ), text );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectionTextRects() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectionTextRects( Handle, CachedSelectors.selectionTextRects, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectionView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectionView( Handle, CachedSelectors.selectionView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void selectLine_( NObjective.RuntimeObject line ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectLine_( Handle, CachedSelectors.selectLine_, out ___occuredException, sizeof( NObjective.RuntimeObject ), line );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectParagraph_( NObjective.RuntimeObject paragraph ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectParagraph_( Handle, CachedSelectors.selectParagraph_, out ___occuredException, sizeof( NObjective.RuntimeObject ), paragraph );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectSentence_( NObjective.RuntimeObject sentence ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectSentence_( Handle, CachedSelectors.selectSentence_, out ___occuredException, sizeof( NObjective.RuntimeObject ), sentence );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectToMark_( NObjective.RuntimeObject mark ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectToMark_( Handle, CachedSelectors.selectToMark_, out ___occuredException, sizeof( NObjective.RuntimeObject ), mark );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectWord_( NObjective.RuntimeObject word ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectWord_( Handle, CachedSelectors.selectWord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), word );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDataSource_( NObjective.RuntimeObject source ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDataSource_( Handle, CachedSelectors.setDataSource_, out ___occuredException, sizeof( NObjective.RuntimeObject ), source );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setGrammarCheckingEnabled_( char enabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setGrammarCheckingEnabled_( Handle, CachedSelectors.setGrammarCheckingEnabled_, out ___occuredException, sizeof( char ), enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMark_( NObjective.RuntimeObject mark ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMark_( Handle, CachedSelectors.setMark_, out ___occuredException, sizeof( NObjective.RuntimeObject ), mark );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMarkedTextMatchesAreHighlighted_( char highlighted ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMarkedTextMatchesAreHighlighted_( Handle, CachedSelectors.setMarkedTextMatchesAreHighlighted_, out ___occuredException, sizeof( char ), highlighted );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNeedsLayout_( char layout ) {
			RuntimeObject ___occuredException;
			NativeMethods.setNeedsLayout_( Handle, CachedSelectors.setNeedsLayout_, out ___occuredException, sizeof( char ), layout );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNeedsToApplyStyles_( char styles ) {
			RuntimeObject ___occuredException;
			NativeMethods.setNeedsToApplyStyles_( Handle, CachedSelectors.setNeedsToApplyStyles_, out ___occuredException, sizeof( char ), styles );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPageWidthForPrinting_( float printing ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPageWidthForPrinting_( Handle, CachedSelectors.setPageWidthForPrinting_, out ___occuredException, sizeof( float ), printing );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showGuessPanel_( NObjective.RuntimeObject panel ) {
			RuntimeObject ___occuredException;
			NativeMethods.showGuessPanel_( Handle, CachedSelectors.showGuessPanel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), panel );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void startSpeaking_( NObjective.RuntimeObject speaking ) {
			RuntimeObject ___occuredException;
			NativeMethods.startSpeaking_( Handle, CachedSelectors.startSpeaking_, out ___occuredException, sizeof( NObjective.RuntimeObject ), speaking );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void stopSpeaking_( NObjective.RuntimeObject speaking ) {
			RuntimeObject ___occuredException;
			NativeMethods.stopSpeaking_( Handle, CachedSelectors.stopSpeaking_, out ___occuredException, sizeof( NObjective.RuntimeObject ), speaking );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject @string() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@string( Handle, CachedSelectors.@string, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void subscript_( NObjective.RuntimeObject subscript ) {
			RuntimeObject ___occuredException;
			NativeMethods.subscript_( Handle, CachedSelectors.subscript_, out ___occuredException, sizeof( NObjective.RuntimeObject ), subscript );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void superscript_( NObjective.RuntimeObject superscript ) {
			RuntimeObject ___occuredException;
			NativeMethods.superscript_( Handle, CachedSelectors.superscript_, out ___occuredException, sizeof( NObjective.RuntimeObject ), superscript );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char supportsTextEncoding() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.supportsTextEncoding( Handle, CachedSelectors.supportsTextEncoding, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void swapWithMark_( NObjective.RuntimeObject mark ) {
			RuntimeObject ___occuredException;
			NativeMethods.swapWithMark_( Handle, CachedSelectors.swapWithMark_, out ___occuredException, sizeof( NObjective.RuntimeObject ), mark );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void takeFindStringFromSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.takeFindStringFromSelection_( Handle, CachedSelectors.takeFindStringFromSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject textStorage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textStorage( Handle, CachedSelectors.textStorage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void toggleBaseWritingDirection_( NObjective.RuntimeObject direction ) {
			RuntimeObject ___occuredException;
			NativeMethods.toggleBaseWritingDirection_( Handle, CachedSelectors.toggleBaseWritingDirection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), direction );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void toggleGrammarChecking_( NObjective.RuntimeObject checking ) {
			RuntimeObject ___occuredException;
			NativeMethods.toggleGrammarChecking_( Handle, CachedSelectors.toggleGrammarChecking_, out ___occuredException, sizeof( NObjective.RuntimeObject ), checking );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void transpose_( NObjective.RuntimeObject transpose ) {
			RuntimeObject ___occuredException;
			NativeMethods.transpose_( Handle, CachedSelectors.transpose_, out ___occuredException, sizeof( NObjective.RuntimeObject ), transpose );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void underline_( NObjective.RuntimeObject underline ) {
			RuntimeObject ___occuredException;
			NativeMethods.underline_( Handle, CachedSelectors.underline_, out ___occuredException, sizeof( NObjective.RuntimeObject ), underline );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void unmarkAllTextMatches() {
			RuntimeObject ___occuredException;
			NativeMethods.unmarkAllTextMatches( Handle, CachedSelectors.unmarkAllTextMatches, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void unmarkText() {
			RuntimeObject ___occuredException;
			NativeMethods.unmarkText( Handle, CachedSelectors.unmarkText, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void unscript_( NObjective.RuntimeObject unscript ) {
			RuntimeObject ___occuredException;
			NativeMethods.unscript_( Handle, CachedSelectors.unscript_, out ___occuredException, sizeof( NObjective.RuntimeObject ), unscript );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void uppercaseWord_( NObjective.RuntimeObject word ) {
			RuntimeObject ___occuredException;
			NativeMethods.uppercaseWord_( Handle, CachedSelectors.uppercaseWord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), word );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char validateUserInterfaceItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validateUserInterfaceItem_( Handle, CachedSelectors.validateUserInterfaceItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char validateUserInterfaceItemWithoutDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validateUserInterfaceItemWithoutDelegate_( Handle, CachedSelectors.validateUserInterfaceItemWithoutDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject validAttributesForMarkedText() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validAttributesForMarkedText( Handle, CachedSelectors.validAttributesForMarkedText, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void viewDidMoveToHostWindow() {
			RuntimeObject ___occuredException;
			NativeMethods.viewDidMoveToHostWindow( Handle, CachedSelectors.viewDidMoveToHostWindow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void viewWillMoveToHostWindow_( NObjective.RuntimeObject window ) {
			RuntimeObject ___occuredException;
			NativeMethods.viewWillMoveToHostWindow_( Handle, CachedSelectors.viewWillMoveToHostWindow_, out ___occuredException, sizeof( NObjective.RuntimeObject ), window );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void windowDidBecomeKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowDidBecomeKey_( Handle, CachedSelectors.windowDidBecomeKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void windowDidResignKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowDidResignKey_( Handle, CachedSelectors.windowDidResignKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void windowWillClose_( NObjective.RuntimeObject close ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowWillClose_( Handle, CachedSelectors.windowWillClose_, out ___occuredException, sizeof( NObjective.RuntimeObject ), close );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char writeSelectionToPasteboard_types_( NObjective.RuntimeObject pasteboard, NObjective.RuntimeObject types ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.writeSelectionToPasteboard_types_( Handle, CachedSelectors.writeSelectionToPasteboard_types_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), pasteboard, types );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void writeSelectionWithPasteboardTypes_toPasteboard_( NObjective.RuntimeObject types, NObjective.RuntimeObject toPasteboard ) {
			RuntimeObject ___occuredException;
			NativeMethods.writeSelectionWithPasteboardTypes_toPasteboard_( Handle, CachedSelectors.writeSelectionWithPasteboardTypes_toPasteboard_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), types, toPasteboard );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void yank_( NObjective.RuntimeObject yank ) {
			RuntimeObject ___occuredException;
			NativeMethods.yank_( Handle, CachedSelectors.yank_, out ___occuredException, sizeof( NObjective.RuntimeObject ), yank );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void yankAndSelect_( NObjective.RuntimeObject @select ) {
			RuntimeObject ___occuredException;
			NativeMethods.yankAndSelect_( Handle, CachedSelectors.yankAndSelect_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @select );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addMouseMovedObserver( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addSuperviewObservers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addWindowObservers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void alignCenter_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject center );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void alignJustified_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject justified );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void alignLeft_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject left );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void alignRight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject right );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attributedString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char callDelegateDoCommandBySelectorIfNeeded_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector needed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char canPrintHeadersAndFooters( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void capitalizeWord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject word );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void centerSelectionInVisibleArea_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject area );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void changeAttributes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attributes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void changeBaseWritingDirection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject direction );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void changeBaseWritingDirectionToLTR_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ltr );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void changeBaseWritingDirectionToRTL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject rtl );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void changeColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject color );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void changeDocumentBackgroundColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject color );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void changeFont_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject font );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void changeSpelling_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject spelling );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void checkSpelling_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject spelling );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clearFocus( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void close( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void closeIfNotCurrentView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void complete_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject complete );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int conversationIdentifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void copy_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject copy );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void copyFont_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject font );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cut_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cut );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void dataSourceUpdated_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject updated );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void delete_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject delete );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteBackward_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject backward );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteBackwardByDecomposingPreviousCharacter_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject character );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteForward_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject forward );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteToBeginningOfLine_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject line );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteToBeginningOfParagraph_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject paragraph );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteToEndOfLine_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject line );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteToEndOfParagraph_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject paragraph );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteToMark_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject mark );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteWordBackward_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject backward );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteWordForward_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject forward );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deselectAll( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint draggingSourceOperationMaskForLocal_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char local );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void executeCoreCommandByName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void executeCoreCommandBySelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char hasMarkedText( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void ignoreSpelling_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject spelling );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void indent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject indent );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertBacktab_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject backtab );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertLineBreak_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @break );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertNewline_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject newline );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertNewlineIgnoringFieldEditor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject editor );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertParagraphSeparator_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject separator );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertTab_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject tab );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertTabIgnoringFieldEditor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject editor );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isGrammarCheckingEnabled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void jumpToSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void layout( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void layoutToMinimumPageWidth_maximumPageWidth_adjustingViewSize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float width, float maximumPageWidth, char adjustingViewSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void lowercaseWord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject word );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char maintainsInactiveSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint markAllMatchesForText_caseSensitive_limit_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject text, char caseSensitive, uint limit );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char markedTextMatchesAreHighlighted( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void mouseMovedNotification_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject notification );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveBackward_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject backward );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveBackwardAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveDown_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject down );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveDownAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveForward_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject forward );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveForwardAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveLeft_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject left );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveLeftAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveParagraphBackwardAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveParagraphForwardAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveRight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject right );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveRightAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToBeginningOfDocument_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject document );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToBeginningOfDocumentAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToBeginningOfLine_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject line );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToBeginningOfLineAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToBeginningOfParagraph_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject paragraph );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToBeginningOfParagraphAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToBeginningOfSentence_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject sentence );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToBeginningOfSentenceAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToEndOfDocument_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject document );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToEndOfDocumentAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToEndOfLine_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject line );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToEndOfLineAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToEndOfParagraph_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject paragraph );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToEndOfParagraphAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToEndOfSentence_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject sentence );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToEndOfSentenceAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveUp_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject up );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveUpAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveWordBackward_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject backward );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveWordBackwardAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveWordForward_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject forward );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveWordForwardAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveWordLeft_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject left );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveWordLeftAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveWordRight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject right );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveWordRightAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr namesOfPromisedFilesDroppedAtDestination_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject destination );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void outdent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject outdent );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pageDown_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject down );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pageDownAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pageUp_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject up );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pageUpAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void paste_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject paste );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pasteAsPlainText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject text );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pasteAsRichText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject text );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pasteboard_provideDataForType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject pasteboard, NObjective.RuntimeObject provideDataForType );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pasteboardChangedOwner_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject owner );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pasteboardTypesForSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pasteFont_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject font );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void performFindPanelAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject action );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char readSelectionFromPasteboard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject pasteboard );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void reapplyStyles( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rectsForTextMatches( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeMouseMovedObserver( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeMouseMovedObserverUnconditionally( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeSuperviewObservers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeWindowObservers( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char searchFor_direction_caseSensitive_wrap_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @for, char direction, char caseSensitive, char wrap );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char searchFor_direction_caseSensitive_wrap_startInSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @for, char direction, char caseSensitive, char wrap, char startInSelection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectAll( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectAll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject all );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedAttributedString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectionImageForcingBlackText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char text );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectionImageForcingWhiteText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char text );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectionTextRects( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectionView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectLine_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject line );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectParagraph_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject paragraph );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectSentence_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject sentence );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectToMark_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject mark );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectWord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject word );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDataSource_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject source );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setGrammarCheckingEnabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char enabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMark_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject mark );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMarkedTextMatchesAreHighlighted_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char highlighted );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNeedsLayout_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char layout );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNeedsToApplyStyles_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char styles );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPageWidthForPrinting_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float printing );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void showGuessPanel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject panel );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void startSpeaking_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject speaking );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void stopSpeaking_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject speaking );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @string( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void subscript_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject subscript );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void superscript_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject superscript );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr supportedImageMIMETypes( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr supportedMIMETypes( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr supportedNonImageMIMETypes( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char supportsTextEncoding( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void swapWithMark_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject mark );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void takeFindStringFromSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr textStorage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void toggleBaseWritingDirection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject direction );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void toggleGrammarChecking_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject checking );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void transpose_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject transpose );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void underline_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject underline );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unmarkAllTextMatches( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unmarkText( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unscript_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject unscript );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr unsupportedTextMIMETypes( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void uppercaseWord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject word );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char validateUserInterfaceItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char validateUserInterfaceItemWithoutDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr validAttributesForMarkedText( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void viewDidMoveToHostWindow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void viewWillMoveToHostWindow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject window );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void windowDidBecomeKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void windowDidResignKey_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void windowWillClose_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject close );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char writeSelectionToPasteboard_types_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject pasteboard, NObjective.RuntimeObject types );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void writeSelectionWithPasteboardTypes_toPasteboard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject types, NObjective.RuntimeObject toPasteboard );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void yank_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject yank );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void yankAndSelect_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @select );
		}
		static internal class CachedSelectors {
			public static readonly Selector addMouseMovedObserver = "addMouseMovedObserver";
			public static readonly Selector addSuperviewObservers = "addSuperviewObservers";
			public static readonly Selector addWindowObservers = "addWindowObservers";
			public static readonly Selector alignCenter_ = "alignCenter:";
			public static readonly Selector alignJustified_ = "alignJustified:";
			public static readonly Selector alignLeft_ = "alignLeft:";
			public static readonly Selector alignRight_ = "alignRight:";
			public static readonly Selector attributedString = "attributedString";
			public static readonly Selector callDelegateDoCommandBySelectorIfNeeded_ = "callDelegateDoCommandBySelectorIfNeeded:";
			public static readonly Selector canPrintHeadersAndFooters = "canPrintHeadersAndFooters";
			public static readonly Selector capitalizeWord_ = "capitalizeWord:";
			public static readonly Selector centerSelectionInVisibleArea_ = "centerSelectionInVisibleArea:";
			public static readonly Selector changeAttributes_ = "changeAttributes:";
			public static readonly Selector changeBaseWritingDirection_ = "changeBaseWritingDirection:";
			public static readonly Selector changeBaseWritingDirectionToLTR_ = "changeBaseWritingDirectionToLTR:";
			public static readonly Selector changeBaseWritingDirectionToRTL_ = "changeBaseWritingDirectionToRTL:";
			public static readonly Selector changeColor_ = "changeColor:";
			public static readonly Selector changeDocumentBackgroundColor_ = "changeDocumentBackgroundColor:";
			public static readonly Selector changeFont_ = "changeFont:";
			public static readonly Selector changeSpelling_ = "changeSpelling:";
			public static readonly Selector checkSpelling_ = "checkSpelling:";
			public static readonly Selector clearFocus = "clearFocus";
			public static readonly Selector close = "close";
			public static readonly Selector closeIfNotCurrentView = "closeIfNotCurrentView";
			public static readonly Selector complete_ = "complete:";
			public static readonly Selector conversationIdentifier = "conversationIdentifier";
			public static readonly Selector copy_ = "copy:";
			public static readonly Selector copyFont_ = "copyFont:";
			public static readonly Selector cut_ = "cut:";
			public static readonly Selector dataSourceUpdated_ = "dataSourceUpdated:";
			public static readonly Selector delete_ = "delete:";
			public static readonly Selector deleteBackward_ = "deleteBackward:";
			public static readonly Selector deleteBackwardByDecomposingPreviousCharacter_ = "deleteBackwardByDecomposingPreviousCharacter:";
			public static readonly Selector deleteForward_ = "deleteForward:";
			public static readonly Selector deleteToBeginningOfLine_ = "deleteToBeginningOfLine:";
			public static readonly Selector deleteToBeginningOfParagraph_ = "deleteToBeginningOfParagraph:";
			public static readonly Selector deleteToEndOfLine_ = "deleteToEndOfLine:";
			public static readonly Selector deleteToEndOfParagraph_ = "deleteToEndOfParagraph:";
			public static readonly Selector deleteToMark_ = "deleteToMark:";
			public static readonly Selector deleteWordBackward_ = "deleteWordBackward:";
			public static readonly Selector deleteWordForward_ = "deleteWordForward:";
			public static readonly Selector deselectAll = "deselectAll";
			public static readonly Selector draggingSourceOperationMaskForLocal_ = "draggingSourceOperationMaskForLocal:";
			public static readonly Selector executeCoreCommandByName_ = "executeCoreCommandByName:";
			public static readonly Selector executeCoreCommandBySelector_ = "executeCoreCommandBySelector:";
			public static readonly Selector hasMarkedText = "hasMarkedText";
			public static readonly Selector ignoreSpelling_ = "ignoreSpelling:";
			public static readonly Selector indent_ = "indent:";
			public static readonly Selector insertBacktab_ = "insertBacktab:";
			public static readonly Selector insertLineBreak_ = "insertLineBreak:";
			public static readonly Selector insertNewline_ = "insertNewline:";
			public static readonly Selector insertNewlineIgnoringFieldEditor_ = "insertNewlineIgnoringFieldEditor:";
			public static readonly Selector insertParagraphSeparator_ = "insertParagraphSeparator:";
			public static readonly Selector insertTab_ = "insertTab:";
			public static readonly Selector insertTabIgnoringFieldEditor_ = "insertTabIgnoringFieldEditor:";
			public static readonly Selector isGrammarCheckingEnabled = "isGrammarCheckingEnabled";
			public static readonly Selector jumpToSelection_ = "jumpToSelection:";
			public static readonly Selector layout = "layout";
			public static readonly Selector layoutToMinimumPageWidth_maximumPageWidth_adjustingViewSize_ = "layoutToMinimumPageWidth:maximumPageWidth:adjustingViewSize:";
			public static readonly Selector lowercaseWord_ = "lowercaseWord:";
			public static readonly Selector maintainsInactiveSelection = "maintainsInactiveSelection";
			public static readonly Selector markAllMatchesForText_caseSensitive_limit_ = "markAllMatchesForText:caseSensitive:limit:";
			public static readonly Selector markedTextMatchesAreHighlighted = "markedTextMatchesAreHighlighted";
			public static readonly Selector mouseMovedNotification_ = "mouseMovedNotification:";
			public static readonly Selector moveBackward_ = "moveBackward:";
			public static readonly Selector moveBackwardAndModifySelection_ = "moveBackwardAndModifySelection:";
			public static readonly Selector moveDown_ = "moveDown:";
			public static readonly Selector moveDownAndModifySelection_ = "moveDownAndModifySelection:";
			public static readonly Selector moveForward_ = "moveForward:";
			public static readonly Selector moveForwardAndModifySelection_ = "moveForwardAndModifySelection:";
			public static readonly Selector moveLeft_ = "moveLeft:";
			public static readonly Selector moveLeftAndModifySelection_ = "moveLeftAndModifySelection:";
			public static readonly Selector moveParagraphBackwardAndModifySelection_ = "moveParagraphBackwardAndModifySelection:";
			public static readonly Selector moveParagraphForwardAndModifySelection_ = "moveParagraphForwardAndModifySelection:";
			public static readonly Selector moveRight_ = "moveRight:";
			public static readonly Selector moveRightAndModifySelection_ = "moveRightAndModifySelection:";
			public static readonly Selector moveToBeginningOfDocument_ = "moveToBeginningOfDocument:";
			public static readonly Selector moveToBeginningOfDocumentAndModifySelection_ = "moveToBeginningOfDocumentAndModifySelection:";
			public static readonly Selector moveToBeginningOfLine_ = "moveToBeginningOfLine:";
			public static readonly Selector moveToBeginningOfLineAndModifySelection_ = "moveToBeginningOfLineAndModifySelection:";
			public static readonly Selector moveToBeginningOfParagraph_ = "moveToBeginningOfParagraph:";
			public static readonly Selector moveToBeginningOfParagraphAndModifySelection_ = "moveToBeginningOfParagraphAndModifySelection:";
			public static readonly Selector moveToBeginningOfSentence_ = "moveToBeginningOfSentence:";
			public static readonly Selector moveToBeginningOfSentenceAndModifySelection_ = "moveToBeginningOfSentenceAndModifySelection:";
			public static readonly Selector moveToEndOfDocument_ = "moveToEndOfDocument:";
			public static readonly Selector moveToEndOfDocumentAndModifySelection_ = "moveToEndOfDocumentAndModifySelection:";
			public static readonly Selector moveToEndOfLine_ = "moveToEndOfLine:";
			public static readonly Selector moveToEndOfLineAndModifySelection_ = "moveToEndOfLineAndModifySelection:";
			public static readonly Selector moveToEndOfParagraph_ = "moveToEndOfParagraph:";
			public static readonly Selector moveToEndOfParagraphAndModifySelection_ = "moveToEndOfParagraphAndModifySelection:";
			public static readonly Selector moveToEndOfSentence_ = "moveToEndOfSentence:";
			public static readonly Selector moveToEndOfSentenceAndModifySelection_ = "moveToEndOfSentenceAndModifySelection:";
			public static readonly Selector moveUp_ = "moveUp:";
			public static readonly Selector moveUpAndModifySelection_ = "moveUpAndModifySelection:";
			public static readonly Selector moveWordBackward_ = "moveWordBackward:";
			public static readonly Selector moveWordBackwardAndModifySelection_ = "moveWordBackwardAndModifySelection:";
			public static readonly Selector moveWordForward_ = "moveWordForward:";
			public static readonly Selector moveWordForwardAndModifySelection_ = "moveWordForwardAndModifySelection:";
			public static readonly Selector moveWordLeft_ = "moveWordLeft:";
			public static readonly Selector moveWordLeftAndModifySelection_ = "moveWordLeftAndModifySelection:";
			public static readonly Selector moveWordRight_ = "moveWordRight:";
			public static readonly Selector moveWordRightAndModifySelection_ = "moveWordRightAndModifySelection:";
			public static readonly Selector namesOfPromisedFilesDroppedAtDestination_ = "namesOfPromisedFilesDroppedAtDestination:";
			public static readonly Selector outdent_ = "outdent:";
			public static readonly Selector pageDown_ = "pageDown:";
			public static readonly Selector pageDownAndModifySelection_ = "pageDownAndModifySelection:";
			public static readonly Selector pageUp_ = "pageUp:";
			public static readonly Selector pageUpAndModifySelection_ = "pageUpAndModifySelection:";
			public static readonly Selector paste_ = "paste:";
			public static readonly Selector pasteAsPlainText_ = "pasteAsPlainText:";
			public static readonly Selector pasteAsRichText_ = "pasteAsRichText:";
			public static readonly Selector pasteboard_provideDataForType_ = "pasteboard:provideDataForType:";
			public static readonly Selector pasteboardChangedOwner_ = "pasteboardChangedOwner:";
			public static readonly Selector pasteboardTypesForSelection = "pasteboardTypesForSelection";
			public static readonly Selector pasteFont_ = "pasteFont:";
			public static readonly Selector performFindPanelAction_ = "performFindPanelAction:";
			public static readonly Selector readSelectionFromPasteboard_ = "readSelectionFromPasteboard:";
			public static readonly Selector reapplyStyles = "reapplyStyles";
			public static readonly Selector rectsForTextMatches = "rectsForTextMatches";
			public static readonly Selector removeMouseMovedObserver = "removeMouseMovedObserver";
			public static readonly Selector removeMouseMovedObserverUnconditionally = "removeMouseMovedObserverUnconditionally";
			public static readonly Selector removeSuperviewObservers = "removeSuperviewObservers";
			public static readonly Selector removeWindowObservers = "removeWindowObservers";
			public static readonly Selector searchFor_direction_caseSensitive_wrap_ = "searchFor:direction:caseSensitive:wrap:";
			public static readonly Selector searchFor_direction_caseSensitive_wrap_startInSelection_ = "searchFor:direction:caseSensitive:wrap:startInSelection:";
			public static readonly Selector selectAll = "selectAll";
			public static readonly Selector selectAll_ = "selectAll:";
			public static readonly Selector selectedAttributedString = "selectedAttributedString";
			public static readonly Selector selectedString = "selectedString";
			public static readonly Selector selectionImageForcingBlackText_ = "selectionImageForcingBlackText:";
			public static readonly Selector selectionImageForcingWhiteText_ = "selectionImageForcingWhiteText:";
			public static readonly Selector selectionTextRects = "selectionTextRects";
			public static readonly Selector selectionView = "selectionView";
			public static readonly Selector selectLine_ = "selectLine:";
			public static readonly Selector selectParagraph_ = "selectParagraph:";
			public static readonly Selector selectSentence_ = "selectSentence:";
			public static readonly Selector selectToMark_ = "selectToMark:";
			public static readonly Selector selectWord_ = "selectWord:";
			public static readonly Selector setDataSource_ = "setDataSource:";
			public static readonly Selector setGrammarCheckingEnabled_ = "setGrammarCheckingEnabled:";
			public static readonly Selector setMark_ = "setMark:";
			public static readonly Selector setMarkedTextMatchesAreHighlighted_ = "setMarkedTextMatchesAreHighlighted:";
			public static readonly Selector setNeedsLayout_ = "setNeedsLayout:";
			public static readonly Selector setNeedsToApplyStyles_ = "setNeedsToApplyStyles:";
			public static readonly Selector setPageWidthForPrinting_ = "setPageWidthForPrinting:";
			public static readonly Selector showGuessPanel_ = "showGuessPanel:";
			public static readonly Selector startSpeaking_ = "startSpeaking:";
			public static readonly Selector stopSpeaking_ = "stopSpeaking:";
			public static readonly Selector @string = "string";
			public static readonly Selector subscript_ = "subscript:";
			public static readonly Selector superscript_ = "superscript:";
			public static readonly Selector supportedImageMIMETypes = "supportedImageMIMETypes";
			public static readonly Selector supportedMIMETypes = "supportedMIMETypes";
			public static readonly Selector supportedNonImageMIMETypes = "supportedNonImageMIMETypes";
			public static readonly Selector supportsTextEncoding = "supportsTextEncoding";
			public static readonly Selector swapWithMark_ = "swapWithMark:";
			public static readonly Selector takeFindStringFromSelection_ = "takeFindStringFromSelection:";
			public static readonly Selector textStorage = "textStorage";
			public static readonly Selector toggleBaseWritingDirection_ = "toggleBaseWritingDirection:";
			public static readonly Selector toggleGrammarChecking_ = "toggleGrammarChecking:";
			public static readonly Selector transpose_ = "transpose:";
			public static readonly Selector underline_ = "underline:";
			public static readonly Selector unmarkAllTextMatches = "unmarkAllTextMatches";
			public static readonly Selector unmarkText = "unmarkText";
			public static readonly Selector unscript_ = "unscript:";
			public static readonly Selector unsupportedTextMIMETypes = "unsupportedTextMIMETypes";
			public static readonly Selector uppercaseWord_ = "uppercaseWord:";
			public static readonly Selector validateUserInterfaceItem_ = "validateUserInterfaceItem:";
			public static readonly Selector validateUserInterfaceItemWithoutDelegate_ = "validateUserInterfaceItemWithoutDelegate:";
			public static readonly Selector validAttributesForMarkedText = "validAttributesForMarkedText";
			public static readonly Selector viewDidMoveToHostWindow = "viewDidMoveToHostWindow";
			public static readonly Selector viewWillMoveToHostWindow_ = "viewWillMoveToHostWindow:";
			public static readonly Selector windowDidBecomeKey_ = "windowDidBecomeKey:";
			public static readonly Selector windowDidResignKey_ = "windowDidResignKey:";
			public static readonly Selector windowWillClose_ = "windowWillClose:";
			public static readonly Selector writeSelectionToPasteboard_types_ = "writeSelectionToPasteboard:types:";
			public static readonly Selector writeSelectionWithPasteboardTypes_toPasteboard_ = "writeSelectionWithPasteboardTypes:toPasteboard:";
			public static readonly Selector yank_ = "yank:";
			public static readonly Selector yankAndSelect_ = "yankAndSelect:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebHTMLViewPrivate : IEquatable<WebHTMLViewPrivate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebHTMLViewPrivate;
		public static implicit operator IntPtr( WebHTMLViewPrivate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebHTMLViewPrivate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebHTMLViewPrivate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebHTMLViewPrivate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebHTMLViewPrivate value1, WebHTMLViewPrivate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebHTMLViewPrivate value1, WebHTMLViewPrivate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebHTMLViewPrivate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebHTMLViewPrivate alloc() {
			return new WebHTMLViewPrivate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void clear() {
			RuntimeObject ___occuredException;
			NativeMethods.clear( Handle, CachedSelectors.clear, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void clear( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector clear = "clear";
			public static readonly Selector initialize = "initialize";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebIconDatabase : IEquatable<WebIconDatabase> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebIconDatabase;
		public static implicit operator IntPtr( WebIconDatabase value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebIconDatabase value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebIconDatabase?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebIconDatabase value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebIconDatabase value1, WebIconDatabase value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebIconDatabase value1, WebIconDatabase value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebIconDatabase( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebIconDatabase alloc() {
			return new WebIconDatabase( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void allowDatabaseCleanup() {
			RuntimeObject ___occuredException;
			NativeMethods.allowDatabaseCleanup( ClassHandle, CachedSelectors.allowDatabaseCleanup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void delayDatabaseCleanup() {
			RuntimeObject ___occuredException;
			NativeMethods.delayDatabaseCleanup( ClassHandle, CachedSelectors.delayDatabaseCleanup, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject sharedIconDatabase() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedIconDatabase( ClassHandle, CachedSelectors.sharedIconDatabase, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject @delegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@delegate( Handle, CachedSelectors.@delegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject iconURLForURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.iconURLForURL_( Handle, CachedSelectors.iconURLForURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void releaseIconForURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			NativeMethods.releaseIconForURL_( Handle, CachedSelectors.releaseIconForURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeAllIcons() {
			RuntimeObject ___occuredException;
			NativeMethods.removeAllIcons( Handle, CachedSelectors.removeAllIcons, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void retainIconForURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			NativeMethods.retainIconForURL_( Handle, CachedSelectors.retainIconForURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDelegate_( Handle, CachedSelectors.setDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void allowDatabaseCleanup( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void delayDatabaseCleanup( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @delegate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr iconURLForURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void releaseIconForURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeAllIcons( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void retainIconForURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedIconDatabase( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector allowDatabaseCleanup = "allowDatabaseCleanup";
			public static readonly Selector delayDatabaseCleanup = "delayDatabaseCleanup";
			public static readonly Selector @delegate = "delegate";
			public static readonly Selector iconURLForURL_ = "iconURLForURL:";
			public static readonly Selector releaseIconForURL_ = "releaseIconForURL:";
			public static readonly Selector removeAllIcons = "removeAllIcons";
			public static readonly Selector retainIconForURL_ = "retainIconForURL:";
			public static readonly Selector setDelegate_ = "setDelegate:";
			public static readonly Selector sharedIconDatabase = "sharedIconDatabase";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebIconDatabasePrivate : IEquatable<WebIconDatabasePrivate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebIconDatabasePrivate;
		public static implicit operator IntPtr( WebIconDatabasePrivate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebIconDatabasePrivate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebIconDatabasePrivate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebIconDatabasePrivate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebIconDatabasePrivate value1, WebIconDatabasePrivate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebIconDatabasePrivate value1, WebIconDatabasePrivate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebIconDatabasePrivate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebIconDatabasePrivate alloc() {
			return new WebIconDatabasePrivate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebImageRendererFactory : IEquatable<WebImageRendererFactory> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebImageRendererFactory;
		public static implicit operator IntPtr( WebImageRendererFactory value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebImageRendererFactory value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebImageRendererFactory?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebImageRendererFactory value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebImageRendererFactory value1, WebImageRendererFactory value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebImageRendererFactory value1, WebImageRendererFactory value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebImageRendererFactory( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebImageRendererFactory alloc() {
			return new WebImageRendererFactory( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void setShouldUseThreadedDecoding_( char decoding ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShouldUseThreadedDecoding_( ClassHandle, CachedSelectors.setShouldUseThreadedDecoding_, out ___occuredException, sizeof( char ), decoding );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static bool shouldUseThreadedDecoding() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shouldUseThreadedDecoding( ClassHandle, CachedSelectors.shouldUseThreadedDecoding, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setShouldUseThreadedDecoding_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char decoding );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool shouldUseThreadedDecoding( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector setShouldUseThreadedDecoding_ = "setShouldUseThreadedDecoding:";
			public static readonly Selector shouldUseThreadedDecoding = "shouldUseThreadedDecoding";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebInspector : IEquatable<WebInspector> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebInspector;
		public static implicit operator IntPtr( WebInspector value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebInspector value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebInspector?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebInspector value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebInspector value1, WebInspector value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebInspector value1, WebInspector value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebInspector( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebInspector alloc() {
			return new WebInspector( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject sharedWebInspector() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedWebInspector( ClassHandle, CachedSelectors.sharedWebInspector, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject webInspector() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webInspector( ClassHandle, CachedSelectors.webInspector, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void attach_( NObjective.RuntimeObject attach ) {
			RuntimeObject ___occuredException;
			NativeMethods.attach_( Handle, CachedSelectors.attach_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attach );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void close_( NObjective.RuntimeObject close ) {
			RuntimeObject ___occuredException;
			NativeMethods.close_( Handle, CachedSelectors.close_, out ___occuredException, sizeof( NObjective.RuntimeObject ), close );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void detach_( NObjective.RuntimeObject detach ) {
			RuntimeObject ___occuredException;
			NativeMethods.detach_( Handle, CachedSelectors.detach_, out ___occuredException, sizeof( NObjective.RuntimeObject ), detach );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithWebView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithWebView_( Handle, CachedSelectors.initWithWebView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setWebFrame_( NObjective.RuntimeObject frame ) {
			RuntimeObject ___occuredException;
			NativeMethods.setWebFrame_( Handle, CachedSelectors.setWebFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ), frame );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void show_( NObjective.RuntimeObject show ) {
			RuntimeObject ___occuredException;
			NativeMethods.show_( Handle, CachedSelectors.show_, out ___occuredException, sizeof( NObjective.RuntimeObject ), show );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showConsole_( NObjective.RuntimeObject console ) {
			RuntimeObject ___occuredException;
			NativeMethods.showConsole_( Handle, CachedSelectors.showConsole_, out ___occuredException, sizeof( NObjective.RuntimeObject ), console );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showTimeline_( NObjective.RuntimeObject timeline ) {
			RuntimeObject ___occuredException;
			NativeMethods.showTimeline_( Handle, CachedSelectors.showTimeline_, out ___occuredException, sizeof( NObjective.RuntimeObject ), timeline );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showWindow_( NObjective.RuntimeObject window ) {
			RuntimeObject ___occuredException;
			NativeMethods.showWindow_( Handle, CachedSelectors.showWindow_, out ___occuredException, sizeof( NObjective.RuntimeObject ), window );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webViewClosed() {
			RuntimeObject ___occuredException;
			NativeMethods.webViewClosed( Handle, CachedSelectors.webViewClosed, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject window() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.window( Handle, CachedSelectors.window, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void attach_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attach );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void close_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject close );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void detach_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject detach );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithWebView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setWebFrame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject frame );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedWebInspector( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void show_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject show );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void showConsole_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject console );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void showTimeline_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject timeline );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void showWindow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject window );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr webInspector( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webViewClosed( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr window( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector attach_ = "attach:";
			public static readonly Selector close_ = "close:";
			public static readonly Selector detach_ = "detach:";
			public static readonly Selector initWithWebView_ = "initWithWebView:";
			public static readonly Selector setWebFrame_ = "setWebFrame:";
			public static readonly Selector sharedWebInspector = "sharedWebInspector";
			public static readonly Selector show_ = "show:";
			public static readonly Selector showConsole_ = "showConsole:";
			public static readonly Selector showTimeline_ = "showTimeline:";
			public static readonly Selector showWindow_ = "showWindow:";
			public static readonly Selector webInspector = "webInspector";
			public static readonly Selector webViewClosed = "webViewClosed";
			public static readonly Selector window = "window";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSWindowController ) )]
	public struct WebInspectorWindowController : IEquatable<WebInspectorWindowController> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebInspectorWindowController;
		public static implicit operator IntPtr( WebInspectorWindowController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebInspectorWindowController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebInspectorWindowController?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebInspectorWindowController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebInspectorWindowController value1, WebInspectorWindowController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebInspectorWindowController value1, WebInspectorWindowController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebInspectorWindowController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebInspectorWindowController alloc() {
			return new WebInspectorWindowController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void animationDidEnd_( NObjective.RuntimeObject end ) {
			RuntimeObject ___occuredException;
			NativeMethods.animationDidEnd_( Handle, CachedSelectors.animationDidEnd_, out ___occuredException, sizeof( NObjective.RuntimeObject ), end );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void attach() {
			RuntimeObject ___occuredException;
			NativeMethods.attach( Handle, CachedSelectors.attach, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void detach() {
			RuntimeObject ___occuredException;
			NativeMethods.detach( Handle, CachedSelectors.detach, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void hideHighlight() {
			RuntimeObject ___occuredException;
			NativeMethods.hideHighlight( Handle, CachedSelectors.hideHighlight, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void highlightAndScrollToNode_( NObjective.RuntimeObject node ) {
			RuntimeObject ___occuredException;
			NativeMethods.highlightAndScrollToNode_( Handle, CachedSelectors.highlightAndScrollToNode_, out ___occuredException, sizeof( NObjective.RuntimeObject ), node );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void highlightNode_( NObjective.RuntimeObject node ) {
			RuntimeObject ___occuredException;
			NativeMethods.highlightNode_( Handle, CachedSelectors.highlightNode_, out ___occuredException, sizeof( NObjective.RuntimeObject ), node );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithInspectedWebView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithInspectedWebView_( Handle, CachedSelectors.initWithInspectedWebView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char inspectorVisible() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.inspectorVisible( Handle, CachedSelectors.inspectorVisible, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void showErrorConsole_( NObjective.RuntimeObject console ) {
			RuntimeObject ___occuredException;
			NativeMethods.showErrorConsole_( Handle, CachedSelectors.showErrorConsole_, out ___occuredException, sizeof( NObjective.RuntimeObject ), console );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showNetworkTimeline_( NObjective.RuntimeObject timeline ) {
			RuntimeObject ___occuredException;
			NativeMethods.showNetworkTimeline_( Handle, CachedSelectors.showNetworkTimeline_, out ___occuredException, sizeof( NObjective.RuntimeObject ), timeline );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showWebInspector_( NObjective.RuntimeObject inspector ) {
			RuntimeObject ___occuredException;
			NativeMethods.showWebInspector_( Handle, CachedSelectors.showWebInspector_, out ___occuredException, sizeof( NObjective.RuntimeObject ), inspector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject webView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webView( Handle, CachedSelectors.webView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char windowShouldClose_( NObjective.RuntimeObject close ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.windowShouldClose_( Handle, CachedSelectors.windowShouldClose_, out ___occuredException, sizeof( NObjective.RuntimeObject ), close );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void animationDidEnd_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject end );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void attach( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void detach( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void hideHighlight( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void highlightAndScrollToNode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject node );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void highlightNode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject node );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithInspectedWebView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char inspectorVisible( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void showErrorConsole_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject console );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void showNetworkTimeline_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject timeline );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void showWebInspector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject inspector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr webView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char windowShouldClose_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject close );
		}
		static internal class CachedSelectors {
			public static readonly Selector animationDidEnd_ = "animationDidEnd:";
			public static readonly Selector attach = "attach";
			public static readonly Selector detach = "detach";
			public static readonly Selector hideHighlight = "hideHighlight";
			public static readonly Selector highlightAndScrollToNode_ = "highlightAndScrollToNode:";
			public static readonly Selector highlightNode_ = "highlightNode:";
			public static readonly Selector initWithInspectedWebView_ = "initWithInspectedWebView:";
			public static readonly Selector inspectorVisible = "inspectorVisible";
			public static readonly Selector showErrorConsole_ = "showErrorConsole:";
			public static readonly Selector showNetworkTimeline_ = "showNetworkTimeline:";
			public static readonly Selector showWebInspector_ = "showWebInspector:";
			public static readonly Selector webView = "webView";
			public static readonly Selector windowShouldClose_ = "windowShouldClose:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSWindowController ) )]
	public struct WebJavaScriptTextInputPanel : IEquatable<WebJavaScriptTextInputPanel> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebJavaScriptTextInputPanel;
		public static implicit operator IntPtr( WebJavaScriptTextInputPanel value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebJavaScriptTextInputPanel value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebJavaScriptTextInputPanel?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebJavaScriptTextInputPanel value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebJavaScriptTextInputPanel value1, WebJavaScriptTextInputPanel value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebJavaScriptTextInputPanel value1, WebJavaScriptTextInputPanel value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebJavaScriptTextInputPanel( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebJavaScriptTextInputPanel alloc() {
			return new WebJavaScriptTextInputPanel( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithPrompt_text_( NObjective.RuntimeObject prompt, NObjective.RuntimeObject text ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithPrompt_text_( Handle, CachedSelectors.initWithPrompt_text_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), prompt, text );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void pressedCancel_( NObjective.RuntimeObject cancel ) {
			RuntimeObject ___occuredException;
			NativeMethods.pressedCancel_( Handle, CachedSelectors.pressedCancel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cancel );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void pressedOK_( NObjective.RuntimeObject ok ) {
			RuntimeObject ___occuredException;
			NativeMethods.pressedOK_( Handle, CachedSelectors.pressedOK_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ok );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject text() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.text( Handle, CachedSelectors.text, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithPrompt_text_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject prompt, NObjective.RuntimeObject text );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pressedCancel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cancel );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pressedOK_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ok );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr text( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithPrompt_text_ = "initWithPrompt:text:";
			public static readonly Selector pressedCancel_ = "pressedCancel:";
			public static readonly Selector pressedOK_ = "pressedOK:";
			public static readonly Selector text = "text";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( WebCoreKeyGenerator ) )]
	public struct WebKeyGenerator : IEquatable<WebKeyGenerator> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebKeyGenerator;
		public static implicit operator IntPtr( WebKeyGenerator value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebKeyGenerator value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebKeyGenerator?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebKeyGenerator value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebKeyGenerator value1, WebKeyGenerator value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebKeyGenerator value1, WebKeyGenerator value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebKeyGenerator( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebKeyGenerator alloc() {
			return new WebKeyGenerator( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void createSharedGenerator() {
			RuntimeObject ___occuredException;
			NativeMethods.createSharedGenerator( ClassHandle, CachedSelectors.createSharedGenerator, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int addCertificatesToKeychainFromData_( NObjective.RuntimeObject data ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addCertificatesToKeychainFromData_( Handle, CachedSelectors.addCertificatesToKeychainFromData_, out ___occuredException, sizeof( NObjective.RuntimeObject ), data );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int addCertificatesToKeychainFromData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void createSharedGenerator( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addCertificatesToKeychainFromData_ = "addCertificatesToKeychainFromData:";
			public static readonly Selector createSharedGenerator = "createSharedGenerator";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSView ) )]
	public struct WebKitPluginContainerView : IEquatable<WebKitPluginContainerView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebKitPluginContainerView;
		public static implicit operator IntPtr( WebKitPluginContainerView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebKitPluginContainerView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebKitPluginContainerView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebKitPluginContainerView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebKitPluginContainerView value1, WebKitPluginContainerView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebKitPluginContainerView value1, WebKitPluginContainerView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebKitPluginContainerView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebKitPluginContainerView alloc() {
			return new WebKitPluginContainerView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject objectForWebScript() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectForWebScript( Handle, CachedSelectors.objectForWebScript, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr objectForWebScript( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector objectForWebScript = "objectForWebScript";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebKitRenderTreeCopier : IEquatable<WebKitRenderTreeCopier> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebKitRenderTreeCopier;
		public static implicit operator IntPtr( WebKitRenderTreeCopier value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebKitRenderTreeCopier value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebKitRenderTreeCopier?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebKitRenderTreeCopier value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebKitRenderTreeCopier value1, WebKitRenderTreeCopier value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebKitRenderTreeCopier value1, WebKitRenderTreeCopier value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebKitRenderTreeCopier( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebKitRenderTreeCopier alloc() {
			return new WebKitRenderTreeCopier( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebKitStatistics : IEquatable<WebKitStatistics> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebKitStatistics;
		public static implicit operator IntPtr( WebKitStatistics value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebKitStatistics value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebKitStatistics?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebKitStatistics value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebKitStatistics value1, WebKitStatistics value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebKitStatistics value1, WebKitStatistics value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebKitStatistics( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebKitStatistics alloc() {
			return new WebKitStatistics( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static int bridgeCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bridgeCount( ClassHandle, CachedSelectors.bridgeCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int dataSourceCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.dataSourceCount( ClassHandle, CachedSelectors.dataSourceCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int frameCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.frameCount( ClassHandle, CachedSelectors.frameCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int HTMLRepresentationCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.HTMLRepresentationCount( ClassHandle, CachedSelectors.HTMLRepresentationCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int viewCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.viewCount( ClassHandle, CachedSelectors.viewCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static int webViewCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webViewCount( ClassHandle, CachedSelectors.webViewCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int bridgeCount( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int dataSourceCount( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int frameCount( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int HTMLRepresentationCount( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int viewCount( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int webViewCount( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector bridgeCount = "bridgeCount";
			public static readonly Selector dataSourceCount = "dataSourceCount";
			public static readonly Selector frameCount = "frameCount";
			public static readonly Selector HTMLRepresentationCount = "HTMLRepresentationCount";
			public static readonly Selector viewCount = "viewCount";
			public static readonly Selector webViewCount = "webViewCount";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( WebBaseNetscapePluginView ) )]
	public struct WebNetscapePluginDocumentView : IEquatable<WebNetscapePluginDocumentView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebNetscapePluginDocumentView;
		public static implicit operator IntPtr( WebNetscapePluginDocumentView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebNetscapePluginDocumentView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebNetscapePluginDocumentView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebNetscapePluginDocumentView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebNetscapePluginDocumentView value1, WebNetscapePluginDocumentView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebNetscapePluginDocumentView value1, WebNetscapePluginDocumentView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebNetscapePluginDocumentView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebNetscapePluginDocumentView alloc() {
			return new WebNetscapePluginDocumentView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( WebBasePluginPackage ) )]
	public struct WebNetscapePluginPackage : IEquatable<WebNetscapePluginPackage> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebNetscapePluginPackage;
		public static implicit operator IntPtr( WebNetscapePluginPackage value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebNetscapePluginPackage value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebNetscapePluginPackage?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebNetscapePluginPackage value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebNetscapePluginPackage value1, WebNetscapePluginPackage value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebNetscapePluginPackage value1, WebNetscapePluginPackage value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebNetscapePluginPackage( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebNetscapePluginPackage alloc() {
			return new WebNetscapePluginPackage( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void close() {
			RuntimeObject ___occuredException;
			NativeMethods.close( Handle, CachedSelectors.close, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void closeResourceFile_( short file ) {
			RuntimeObject ___occuredException;
			NativeMethods.closeResourceFile_( Handle, CachedSelectors.closeResourceFile_, out ___occuredException, sizeof( short ), file );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int executableType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.executableType( Handle, CachedSelectors.executableType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char getPluginInfoFromResources() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getPluginInfoFromResources( Handle, CachedSelectors.getPluginInfoFromResources, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void launchRealPlayer() {
			RuntimeObject ___occuredException;
			NativeMethods.launchRealPlayer( Handle, CachedSelectors.launchRealPlayer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void open() {
			RuntimeObject ___occuredException;
			NativeMethods.open( Handle, CachedSelectors.open, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public short openResourceFile() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.openResourceFile( Handle, CachedSelectors.openResourceFile, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject stringForStringListID_andIndex_( short id, short andIndex ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.stringForStringListID_andIndex_( Handle, CachedSelectors.stringForStringListID_andIndex_, out ___occuredException, sizeof( short ) + sizeof( short ), id, andIndex );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void close( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void closeResourceFile_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, short file );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int executableType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char getPluginInfoFromResources( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void launchRealPlayer( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void open( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern short openResourceFile( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringForStringListID_andIndex_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, short id, short andIndex );
		}
		static internal class CachedSelectors {
			public static readonly Selector close = "close";
			public static readonly Selector closeResourceFile_ = "closeResourceFile:";
			public static readonly Selector executableType = "executableType";
			public static readonly Selector getPluginInfoFromResources = "getPluginInfoFromResources";
			public static readonly Selector launchRealPlayer = "launchRealPlayer";
			public static readonly Selector open = "open";
			public static readonly Selector openResourceFile = "openResourceFile";
			public static readonly Selector stringForStringListID_andIndex_ = "stringForStringListID:andIndex:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( WebBaseNetscapePluginStream ) )]
	public struct WebNetscapePluginStream : IEquatable<WebNetscapePluginStream> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebNetscapePluginStream;
		public static implicit operator IntPtr( WebNetscapePluginStream value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebNetscapePluginStream value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebNetscapePluginStream?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebNetscapePluginStream value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebNetscapePluginStream value1, WebNetscapePluginStream value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebNetscapePluginStream value1, WebNetscapePluginStream value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebNetscapePluginStream( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebNetscapePluginStream alloc() {
			return new WebNetscapePluginStream( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void start() {
			RuntimeObject ___occuredException;
			NativeMethods.start( Handle, CachedSelectors.start, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void stop() {
			RuntimeObject ___occuredException;
			NativeMethods.stop( Handle, CachedSelectors.stop, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void start( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void stop( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector start = "start";
			public static readonly Selector stop = "stop";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebNodeHighlight : IEquatable<WebNodeHighlight> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebNodeHighlight;
		public static implicit operator IntPtr( WebNodeHighlight value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebNodeHighlight value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebNodeHighlight?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebNodeHighlight value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebNodeHighlight value1, WebNodeHighlight value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebNodeHighlight value1, WebNodeHighlight value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebNodeHighlight( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebNodeHighlight alloc() {
			return new WebNodeHighlight( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void animationDidEnd_( NObjective.RuntimeObject end ) {
			RuntimeObject ___occuredException;
			NativeMethods.animationDidEnd_( Handle, CachedSelectors.animationDidEnd_, out ___occuredException, sizeof( NObjective.RuntimeObject ), end );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void attachHighlight() {
			RuntimeObject ___occuredException;
			NativeMethods.attachHighlight( Handle, CachedSelectors.attachHighlight, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject @delegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@delegate( Handle, CachedSelectors.@delegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void detachHighlight() {
			RuntimeObject ___occuredException;
			NativeMethods.detachHighlight( Handle, CachedSelectors.detachHighlight, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void hide() {
			RuntimeObject ___occuredException;
			NativeMethods.hide( Handle, CachedSelectors.hide, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject highlightedNode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.highlightedNode( Handle, CachedSelectors.highlightedNode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject highlightView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.highlightView( Handle, CachedSelectors.highlightView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char ignoresMouseEvents() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.ignoresMouseEvents( Handle, CachedSelectors.ignoresMouseEvents, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject initWithTargetView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithTargetView_( Handle, CachedSelectors.initWithTargetView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDelegate_( Handle, CachedSelectors.setDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHighlightedNode_( NObjective.RuntimeObject node ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHighlightedNode_( Handle, CachedSelectors.setHighlightedNode_, out ___occuredException, sizeof( NObjective.RuntimeObject ), node );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setIgnoresMouseEvents_( char events ) {
			RuntimeObject ___occuredException;
			NativeMethods.setIgnoresMouseEvents_( Handle, CachedSelectors.setIgnoresMouseEvents_, out ___occuredException, sizeof( char ), events );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void show() {
			RuntimeObject ___occuredException;
			NativeMethods.show( Handle, CachedSelectors.show, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject targetView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.targetView( Handle, CachedSelectors.targetView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void animationDidEnd_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject end );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void attachHighlight( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @delegate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void detachHighlight( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void hide( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr highlightedNode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr highlightView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char ignoresMouseEvents( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithTargetView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHighlightedNode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject node );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setIgnoresMouseEvents_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char events );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void show( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr targetView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector animationDidEnd_ = "animationDidEnd:";
			public static readonly Selector attachHighlight = "attachHighlight";
			public static readonly Selector @delegate = "delegate";
			public static readonly Selector detachHighlight = "detachHighlight";
			public static readonly Selector hide = "hide";
			public static readonly Selector highlightedNode = "highlightedNode";
			public static readonly Selector highlightView = "highlightView";
			public static readonly Selector ignoresMouseEvents = "ignoresMouseEvents";
			public static readonly Selector initWithTargetView_ = "initWithTargetView:";
			public static readonly Selector setDelegate_ = "setDelegate:";
			public static readonly Selector setHighlightedNode_ = "setHighlightedNode:";
			public static readonly Selector setIgnoresMouseEvents_ = "setIgnoresMouseEvents:";
			public static readonly Selector show = "show";
			public static readonly Selector targetView = "targetView";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSAnimation ) )]
	public struct WebNodeHighlightFadeInAnimation : IEquatable<WebNodeHighlightFadeInAnimation> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebNodeHighlightFadeInAnimation;
		public static implicit operator IntPtr( WebNodeHighlightFadeInAnimation value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebNodeHighlightFadeInAnimation value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebNodeHighlightFadeInAnimation?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebNodeHighlightFadeInAnimation value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebNodeHighlightFadeInAnimation value1, WebNodeHighlightFadeInAnimation value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebNodeHighlightFadeInAnimation value1, WebNodeHighlightFadeInAnimation value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebNodeHighlightFadeInAnimation( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebNodeHighlightFadeInAnimation alloc() {
			return new WebNodeHighlightFadeInAnimation( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSView ) )]
	public struct WebNodeHighlightView : IEquatable<WebNodeHighlightView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebNodeHighlightView;
		public static implicit operator IntPtr( WebNodeHighlightView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebNodeHighlightView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebNodeHighlightView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebNodeHighlightView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebNodeHighlightView value1, WebNodeHighlightView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebNodeHighlightView value1, WebNodeHighlightView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebNodeHighlightView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebNodeHighlightView alloc() {
			return new WebNodeHighlightView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void detachFromWebNodeHighlight() {
			RuntimeObject ___occuredException;
			NativeMethods.detachFromWebNodeHighlight( Handle, CachedSelectors.detachFromWebNodeHighlight, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float fractionFadedIn() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fractionFadedIn( Handle, CachedSelectors.fractionFadedIn, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject initWithWebNodeHighlight_( NObjective.RuntimeObject highlight ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithWebNodeHighlight_( Handle, CachedSelectors.initWithWebNodeHighlight_, out ___occuredException, sizeof( NObjective.RuntimeObject ), highlight );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setFractionFadedIn_( float @in ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFractionFadedIn_( Handle, CachedSelectors.setFractionFadedIn_, out ___occuredException, sizeof( float ), @in );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject webNodeHighlight() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webNodeHighlight( Handle, CachedSelectors.webNodeHighlight, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void detachFromWebNodeHighlight( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float fractionFadedIn( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithWebNodeHighlight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject highlight );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFractionFadedIn_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float @in );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr webNodeHighlight( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector detachFromWebNodeHighlight = "detachFromWebNodeHighlight";
			public static readonly Selector fractionFadedIn = "fractionFadedIn";
			public static readonly Selector initWithWebNodeHighlight_ = "initWithWebNodeHighlight:";
			public static readonly Selector setFractionFadedIn_ = "setFractionFadedIn:";
			public static readonly Selector webNodeHighlight = "webNodeHighlight";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSImageView ) )]
	public struct WebNullPluginView : IEquatable<WebNullPluginView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebNullPluginView;
		public static implicit operator IntPtr( WebNullPluginView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebNullPluginView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebNullPluginView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebNullPluginView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebNullPluginView value1, WebNullPluginView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebNullPluginView value1, WebNullPluginView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebNullPluginView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebNullPluginView alloc() {
			return new WebNullPluginView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void reportFailure() {
			RuntimeObject ___occuredException;
			NativeMethods.reportFailure( Handle, CachedSelectors.reportFailure, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void reportFailure( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector reportFailure = "reportFailure";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebPanelAuthenticationHandler : IEquatable<WebPanelAuthenticationHandler> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebPanelAuthenticationHandler;
		public static implicit operator IntPtr( WebPanelAuthenticationHandler value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebPanelAuthenticationHandler value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebPanelAuthenticationHandler?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebPanelAuthenticationHandler value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebPanelAuthenticationHandler value1, WebPanelAuthenticationHandler value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebPanelAuthenticationHandler value1, WebPanelAuthenticationHandler value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebPanelAuthenticationHandler( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebPanelAuthenticationHandler alloc() {
			return new WebPanelAuthenticationHandler( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject sharedHandler() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedHandler( ClassHandle, CachedSelectors.sharedHandler, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void cancelAuthentication_( NObjective.RuntimeObject authentication ) {
			RuntimeObject ___occuredException;
			NativeMethods.cancelAuthentication_( Handle, CachedSelectors.cancelAuthentication_, out ___occuredException, sizeof( NObjective.RuntimeObject ), authentication );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void enqueueChallenge_forWindow_( NObjective.RuntimeObject challenge, NObjective.RuntimeObject forWindow ) {
			RuntimeObject ___occuredException;
			NativeMethods.enqueueChallenge_forWindow_( Handle, CachedSelectors.enqueueChallenge_forWindow_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), challenge, forWindow );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void startAuthentication_window_( NObjective.RuntimeObject authentication, NObjective.RuntimeObject window ) {
			RuntimeObject ___occuredException;
			NativeMethods.startAuthentication_window_( Handle, CachedSelectors.startAuthentication_window_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), authentication, window );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void tryNextChallengeForWindow_( NObjective.RuntimeObject window ) {
			RuntimeObject ___occuredException;
			NativeMethods.tryNextChallengeForWindow_( Handle, CachedSelectors.tryNextChallengeForWindow_, out ___occuredException, sizeof( NObjective.RuntimeObject ), window );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancelAuthentication_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject authentication );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void enqueueChallenge_forWindow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject challenge, NObjective.RuntimeObject forWindow );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedHandler( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void startAuthentication_window_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject authentication, NObjective.RuntimeObject window );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void tryNextChallengeForWindow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject window );
		}
		static internal class CachedSelectors {
			public static readonly Selector cancelAuthentication_ = "cancelAuthentication:";
			public static readonly Selector enqueueChallenge_forWindow_ = "enqueueChallenge:forWindow:";
			public static readonly Selector sharedHandler = "sharedHandler";
			public static readonly Selector startAuthentication_window_ = "startAuthentication:window:";
			public static readonly Selector tryNextChallengeForWindow_ = "tryNextChallengeForWindow:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebPDFRepresentation : IEquatable<WebPDFRepresentation> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebPDFRepresentation;
		public static implicit operator IntPtr( WebPDFRepresentation value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebPDFRepresentation value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebPDFRepresentation?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebPDFRepresentation value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebPDFRepresentation value1, WebPDFRepresentation value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebPDFRepresentation value1, WebPDFRepresentation value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebPDFRepresentation( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebPDFRepresentation alloc() {
			return new WebPDFRepresentation( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeClass PDFDocumentClass() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.PDFDocumentClass( ClassHandle, CachedSelectors.PDFDocumentClass, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject postScriptMIMETypes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.postScriptMIMETypes( ClassHandle, CachedSelectors.postScriptMIMETypes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject supportedMIMETypes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.supportedMIMETypes( ClassHandle, CachedSelectors.supportedMIMETypes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char canProvideDocumentSource() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canProvideDocumentSource( Handle, CachedSelectors.canProvideDocumentSource, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject convertPostScriptDataSourceToPDF_( NObjective.RuntimeObject pdf ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.convertPostScriptDataSourceToPDF_( Handle, CachedSelectors.convertPostScriptDataSourceToPDF_, out ___occuredException, sizeof( NObjective.RuntimeObject ), pdf );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject documentSource() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.documentSource( Handle, CachedSelectors.documentSource, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void finishedLoadingWithDataSource_( NObjective.RuntimeObject source ) {
			RuntimeObject ___occuredException;
			NativeMethods.finishedLoadingWithDataSource_( Handle, CachedSelectors.finishedLoadingWithDataSource_, out ___occuredException, sizeof( NObjective.RuntimeObject ), source );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void receivedData_withDataSource_( NObjective.RuntimeObject data, NObjective.RuntimeObject withDataSource ) {
			RuntimeObject ___occuredException;
			NativeMethods.receivedData_withDataSource_( Handle, CachedSelectors.receivedData_withDataSource_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), data, withDataSource );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void receivedError_withDataSource_( NObjective.RuntimeObject error, NObjective.RuntimeObject withDataSource ) {
			RuntimeObject ___occuredException;
			NativeMethods.receivedError_withDataSource_( Handle, CachedSelectors.receivedError_withDataSource_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), error, withDataSource );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDataSource_( NObjective.RuntimeObject source ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDataSource_( Handle, CachedSelectors.setDataSource_, out ___occuredException, sizeof( NObjective.RuntimeObject ), source );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject title() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.title( Handle, CachedSelectors.title, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char canProvideDocumentSource( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr convertPostScriptDataSourceToPDF_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject pdf );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr documentSource( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void finishedLoadingWithDataSource_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject source );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass PDFDocumentClass( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr postScriptMIMETypes( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void receivedData_withDataSource_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject data, NObjective.RuntimeObject withDataSource );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void receivedError_withDataSource_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject error, NObjective.RuntimeObject withDataSource );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDataSource_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject source );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr supportedMIMETypes( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr title( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector canProvideDocumentSource = "canProvideDocumentSource";
			public static readonly Selector convertPostScriptDataSourceToPDF_ = "convertPostScriptDataSourceToPDF:";
			public static readonly Selector documentSource = "documentSource";
			public static readonly Selector finishedLoadingWithDataSource_ = "finishedLoadingWithDataSource:";
			public static readonly Selector PDFDocumentClass = "PDFDocumentClass";
			public static readonly Selector postScriptMIMETypes = "postScriptMIMETypes";
			public static readonly Selector receivedData_withDataSource_ = "receivedData:withDataSource:";
			public static readonly Selector receivedError_withDataSource_ = "receivedError:withDataSource:";
			public static readonly Selector setDataSource_ = "setDataSource:";
			public static readonly Selector supportedMIMETypes = "supportedMIMETypes";
			public static readonly Selector title = "title";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSView ) )]
	public struct WebPDFView : IEquatable<WebPDFView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebPDFView;
		public static implicit operator IntPtr( WebPDFView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebPDFView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebPDFView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebPDFView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebPDFView value1, WebPDFView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebPDFView value1, WebPDFView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebPDFView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebPDFView alloc() {
			return new WebPDFView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject PDFKitBundle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.PDFKitBundle( ClassHandle, CachedSelectors.PDFKitBundle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject supportedMIMETypes() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.supportedMIMETypes( ClassHandle, CachedSelectors.supportedMIMETypes, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject attributedString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.attributedString( Handle, CachedSelectors.attributedString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char canPrintHeadersAndFooters() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canPrintHeadersAndFooters( Handle, CachedSelectors.canPrintHeadersAndFooters, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void centerSelectionInVisibleArea_( NObjective.RuntimeObject area ) {
			RuntimeObject ___occuredException;
			NativeMethods.centerSelectionInVisibleArea_( Handle, CachedSelectors.centerSelectionInVisibleArea_, out ___occuredException, sizeof( NObjective.RuntimeObject ), area );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void copy_( NObjective.RuntimeObject copy ) {
			RuntimeObject ___occuredException;
			NativeMethods.copy_( Handle, CachedSelectors.copy_, out ___occuredException, sizeof( NObjective.RuntimeObject ), copy );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void dataSourceUpdated_( NObjective.RuntimeObject updated ) {
			RuntimeObject ___occuredException;
			NativeMethods.dataSourceUpdated_( Handle, CachedSelectors.dataSourceUpdated_, out ___occuredException, sizeof( NObjective.RuntimeObject ), updated );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deselectAll() {
			RuntimeObject ___occuredException;
			NativeMethods.deselectAll( Handle, CachedSelectors.deselectAll, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void jumpToSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.jumpToSelection_( Handle, CachedSelectors.jumpToSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void layout() {
			RuntimeObject ___occuredException;
			NativeMethods.layout( Handle, CachedSelectors.layout, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint markAllMatchesForText_caseSensitive_limit_( NObjective.RuntimeObject text, char caseSensitive, uint limit ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.markAllMatchesForText_caseSensitive_limit_( Handle, CachedSelectors.markAllMatchesForText_caseSensitive_limit_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( uint ), text, caseSensitive, limit );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public char markedTextMatchesAreHighlighted() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.markedTextMatchesAreHighlighted( Handle, CachedSelectors.markedTextMatchesAreHighlighted, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject pasteboardTypesForSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pasteboardTypesForSelection( Handle, CachedSelectors.pasteboardTypesForSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void PDFViewOpenPDFInNativeApplication_( NObjective.RuntimeObject application ) {
			RuntimeObject ___occuredException;
			NativeMethods.PDFViewOpenPDFInNativeApplication_( Handle, CachedSelectors.PDFViewOpenPDFInNativeApplication_, out ___occuredException, sizeof( NObjective.RuntimeObject ), application );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void PDFViewSavePDFToDownloadFolder_( NObjective.RuntimeObject folder ) {
			RuntimeObject ___occuredException;
			NativeMethods.PDFViewSavePDFToDownloadFolder_( Handle, CachedSelectors.PDFViewSavePDFToDownloadFolder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), folder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void PDFViewWillClickOnLink_withURL_( NObjective.RuntimeObject link, NObjective.RuntimeObject withURL ) {
			RuntimeObject ___occuredException;
			NativeMethods.PDFViewWillClickOnLink_withURL_( Handle, CachedSelectors.PDFViewWillClickOnLink_withURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), link, withURL );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject printOperationWithPrintInfo_( NObjective.RuntimeObject info ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.printOperationWithPrintInfo_( Handle, CachedSelectors.printOperationWithPrintInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), info );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject rectsForTextMatches() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rectsForTextMatches( Handle, CachedSelectors.rectsForTextMatches, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void scrollLineDown_( NObjective.RuntimeObject down ) {
			RuntimeObject ___occuredException;
			NativeMethods.scrollLineDown_( Handle, CachedSelectors.scrollLineDown_, out ___occuredException, sizeof( NObjective.RuntimeObject ), down );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scrollLineUp_( NObjective.RuntimeObject up ) {
			RuntimeObject ___occuredException;
			NativeMethods.scrollLineUp_( Handle, CachedSelectors.scrollLineUp_, out ___occuredException, sizeof( NObjective.RuntimeObject ), up );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scrollPageDown_( NObjective.RuntimeObject down ) {
			RuntimeObject ___occuredException;
			NativeMethods.scrollPageDown_( Handle, CachedSelectors.scrollPageDown_, out ___occuredException, sizeof( NObjective.RuntimeObject ), down );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scrollPageUp_( NObjective.RuntimeObject up ) {
			RuntimeObject ___occuredException;
			NativeMethods.scrollPageUp_( Handle, CachedSelectors.scrollPageUp_, out ___occuredException, sizeof( NObjective.RuntimeObject ), up );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scrollToBeginningOfDocument_( NObjective.RuntimeObject document ) {
			RuntimeObject ___occuredException;
			NativeMethods.scrollToBeginningOfDocument_( Handle, CachedSelectors.scrollToBeginningOfDocument_, out ___occuredException, sizeof( NObjective.RuntimeObject ), document );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scrollToEndOfDocument_( NObjective.RuntimeObject document ) {
			RuntimeObject ___occuredException;
			NativeMethods.scrollToEndOfDocument_( Handle, CachedSelectors.scrollToEndOfDocument_, out ___occuredException, sizeof( NObjective.RuntimeObject ), document );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char searchFor_direction_caseSensitive_wrap_( NObjective.RuntimeObject @for, char direction, char caseSensitive, char wrap ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchFor_direction_caseSensitive_wrap_( Handle, CachedSelectors.searchFor_direction_caseSensitive_wrap_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ) + sizeof( char ), @for, direction, caseSensitive, wrap );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char searchFor_direction_caseSensitive_wrap_startInSelection_( NObjective.RuntimeObject @for, char direction, char caseSensitive, char wrap, char startInSelection ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchFor_direction_caseSensitive_wrap_startInSelection_( Handle, CachedSelectors.searchFor_direction_caseSensitive_wrap_startInSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ) + sizeof( char ) + sizeof( char ), @for, direction, caseSensitive, wrap, startInSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void selectAll() {
			RuntimeObject ___occuredException;
			NativeMethods.selectAll( Handle, CachedSelectors.selectAll, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject selectedAttributedString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedAttributedString( Handle, CachedSelectors.selectedAttributedString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedString( Handle, CachedSelectors.selectedString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectionImageForcingBlackText_( char text ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectionImageForcingBlackText_( Handle, CachedSelectors.selectionImageForcingBlackText_, out ___occuredException, sizeof( char ), text );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectionImageForcingWhiteText_( char text ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectionImageForcingWhiteText_( Handle, CachedSelectors.selectionImageForcingWhiteText_, out ___occuredException, sizeof( char ), text );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectionTextRects() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectionTextRects( Handle, CachedSelectors.selectionTextRects, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectionView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectionView( Handle, CachedSelectors.selectionView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setDataSource_( NObjective.RuntimeObject source ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDataSource_( Handle, CachedSelectors.setDataSource_, out ___occuredException, sizeof( NObjective.RuntimeObject ), source );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMarkedTextMatchesAreHighlighted_( char highlighted ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMarkedTextMatchesAreHighlighted_( Handle, CachedSelectors.setMarkedTextMatchesAreHighlighted_, out ___occuredException, sizeof( char ), highlighted );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setNeedsLayout_( char layout ) {
			RuntimeObject ___occuredException;
			NativeMethods.setNeedsLayout_( Handle, CachedSelectors.setNeedsLayout_, out ___occuredException, sizeof( char ), layout );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPDFDocument_( NObjective.RuntimeObject document ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPDFDocument_( Handle, CachedSelectors.setPDFDocument_, out ___occuredException, sizeof( NObjective.RuntimeObject ), document );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setViewState_( NObjective.RuntimeObject state ) {
			RuntimeObject ___occuredException;
			NativeMethods.setViewState_( Handle, CachedSelectors.setViewState_, out ___occuredException, sizeof( NObjective.RuntimeObject ), state );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject @string() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.@string( Handle, CachedSelectors.@string, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char supportsTextEncoding() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.supportsTextEncoding( Handle, CachedSelectors.supportsTextEncoding, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void takeFindStringFromSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.takeFindStringFromSelection_( Handle, CachedSelectors.takeFindStringFromSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void unmarkAllTextMatches() {
			RuntimeObject ___occuredException;
			NativeMethods.unmarkAllTextMatches( Handle, CachedSelectors.unmarkAllTextMatches, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char validateUserInterfaceItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validateUserInterfaceItem_( Handle, CachedSelectors.validateUserInterfaceItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char validateUserInterfaceItemWithoutDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validateUserInterfaceItemWithoutDelegate_( Handle, CachedSelectors.validateUserInterfaceItemWithoutDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void viewDidMoveToHostWindow() {
			RuntimeObject ___occuredException;
			NativeMethods.viewDidMoveToHostWindow( Handle, CachedSelectors.viewDidMoveToHostWindow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject viewState() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.viewState( Handle, CachedSelectors.viewState, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void viewWillMoveToHostWindow_( NObjective.RuntimeObject window ) {
			RuntimeObject ___occuredException;
			NativeMethods.viewWillMoveToHostWindow_( Handle, CachedSelectors.viewWillMoveToHostWindow_, out ___occuredException, sizeof( NObjective.RuntimeObject ), window );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void writeSelectionWithPasteboardTypes_toPasteboard_( NObjective.RuntimeObject types, NObjective.RuntimeObject toPasteboard ) {
			RuntimeObject ___occuredException;
			NativeMethods.writeSelectionWithPasteboardTypes_toPasteboard_( Handle, CachedSelectors.writeSelectionWithPasteboardTypes_toPasteboard_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), types, toPasteboard );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr attributedString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char canPrintHeadersAndFooters( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void centerSelectionInVisibleArea_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject area );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void copy_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject copy );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void dataSourceUpdated_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject updated );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deselectAll( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void jumpToSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void layout( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint markAllMatchesForText_caseSensitive_limit_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject text, char caseSensitive, uint limit );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char markedTextMatchesAreHighlighted( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pasteboardTypesForSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr PDFKitBundle( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void PDFViewOpenPDFInNativeApplication_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject application );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void PDFViewSavePDFToDownloadFolder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject folder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void PDFViewWillClickOnLink_withURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject link, NObjective.RuntimeObject withURL );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr printOperationWithPrintInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject info );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rectsForTextMatches( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scrollLineDown_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject down );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scrollLineUp_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject up );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scrollPageDown_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject down );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scrollPageUp_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject up );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scrollToBeginningOfDocument_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject document );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scrollToEndOfDocument_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject document );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char searchFor_direction_caseSensitive_wrap_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @for, char direction, char caseSensitive, char wrap );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char searchFor_direction_caseSensitive_wrap_startInSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @for, char direction, char caseSensitive, char wrap, char startInSelection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectAll( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedAttributedString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectionImageForcingBlackText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char text );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectionImageForcingWhiteText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char text );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectionTextRects( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectionView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDataSource_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject source );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMarkedTextMatchesAreHighlighted_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char highlighted );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setNeedsLayout_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char layout );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPDFDocument_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject document );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setViewState_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject state );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr @string( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr supportedMIMETypes( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char supportsTextEncoding( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void takeFindStringFromSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unmarkAllTextMatches( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char validateUserInterfaceItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char validateUserInterfaceItemWithoutDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void viewDidMoveToHostWindow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr viewState( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void viewWillMoveToHostWindow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject window );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void writeSelectionWithPasteboardTypes_toPasteboard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject types, NObjective.RuntimeObject toPasteboard );
		}
		static internal class CachedSelectors {
			public static readonly Selector attributedString = "attributedString";
			public static readonly Selector canPrintHeadersAndFooters = "canPrintHeadersAndFooters";
			public static readonly Selector centerSelectionInVisibleArea_ = "centerSelectionInVisibleArea:";
			public static readonly Selector copy_ = "copy:";
			public static readonly Selector dataSourceUpdated_ = "dataSourceUpdated:";
			public static readonly Selector deselectAll = "deselectAll";
			public static readonly Selector jumpToSelection_ = "jumpToSelection:";
			public static readonly Selector layout = "layout";
			public static readonly Selector markAllMatchesForText_caseSensitive_limit_ = "markAllMatchesForText:caseSensitive:limit:";
			public static readonly Selector markedTextMatchesAreHighlighted = "markedTextMatchesAreHighlighted";
			public static readonly Selector pasteboardTypesForSelection = "pasteboardTypesForSelection";
			public static readonly Selector PDFKitBundle = "PDFKitBundle";
			public static readonly Selector PDFViewOpenPDFInNativeApplication_ = "PDFViewOpenPDFInNativeApplication:";
			public static readonly Selector PDFViewSavePDFToDownloadFolder_ = "PDFViewSavePDFToDownloadFolder:";
			public static readonly Selector PDFViewWillClickOnLink_withURL_ = "PDFViewWillClickOnLink:withURL:";
			public static readonly Selector printOperationWithPrintInfo_ = "printOperationWithPrintInfo:";
			public static readonly Selector rectsForTextMatches = "rectsForTextMatches";
			public static readonly Selector scrollLineDown_ = "scrollLineDown:";
			public static readonly Selector scrollLineUp_ = "scrollLineUp:";
			public static readonly Selector scrollPageDown_ = "scrollPageDown:";
			public static readonly Selector scrollPageUp_ = "scrollPageUp:";
			public static readonly Selector scrollToBeginningOfDocument_ = "scrollToBeginningOfDocument:";
			public static readonly Selector scrollToEndOfDocument_ = "scrollToEndOfDocument:";
			public static readonly Selector searchFor_direction_caseSensitive_wrap_ = "searchFor:direction:caseSensitive:wrap:";
			public static readonly Selector searchFor_direction_caseSensitive_wrap_startInSelection_ = "searchFor:direction:caseSensitive:wrap:startInSelection:";
			public static readonly Selector selectAll = "selectAll";
			public static readonly Selector selectedAttributedString = "selectedAttributedString";
			public static readonly Selector selectedString = "selectedString";
			public static readonly Selector selectionImageForcingBlackText_ = "selectionImageForcingBlackText:";
			public static readonly Selector selectionImageForcingWhiteText_ = "selectionImageForcingWhiteText:";
			public static readonly Selector selectionTextRects = "selectionTextRects";
			public static readonly Selector selectionView = "selectionView";
			public static readonly Selector setDataSource_ = "setDataSource:";
			public static readonly Selector setMarkedTextMatchesAreHighlighted_ = "setMarkedTextMatchesAreHighlighted:";
			public static readonly Selector setNeedsLayout_ = "setNeedsLayout:";
			public static readonly Selector setPDFDocument_ = "setPDFDocument:";
			public static readonly Selector setViewState_ = "setViewState:";
			public static readonly Selector @string = "string";
			public static readonly Selector supportedMIMETypes = "supportedMIMETypes";
			public static readonly Selector supportsTextEncoding = "supportsTextEncoding";
			public static readonly Selector takeFindStringFromSelection_ = "takeFindStringFromSelection:";
			public static readonly Selector unmarkAllTextMatches = "unmarkAllTextMatches";
			public static readonly Selector validateUserInterfaceItem_ = "validateUserInterfaceItem:";
			public static readonly Selector validateUserInterfaceItemWithoutDelegate_ = "validateUserInterfaceItemWithoutDelegate:";
			public static readonly Selector viewDidMoveToHostWindow = "viewDidMoveToHostWindow";
			public static readonly Selector viewState = "viewState";
			public static readonly Selector viewWillMoveToHostWindow_ = "viewWillMoveToHostWindow:";
			public static readonly Selector writeSelectionWithPasteboardTypes_toPasteboard_ = "writeSelectionWithPasteboardTypes:toPasteboard:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebPluginContainerCheck : IEquatable<WebPluginContainerCheck> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebPluginContainerCheck;
		public static implicit operator IntPtr( WebPluginContainerCheck value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebPluginContainerCheck value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebPluginContainerCheck?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebPluginContainerCheck value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebPluginContainerCheck value1, WebPluginContainerCheck value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebPluginContainerCheck value1, WebPluginContainerCheck value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebPluginContainerCheck( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebPluginContainerCheck alloc() {
			return new WebPluginContainerCheck( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject checkWithRequest_target_resultObject_selector_controller_( NObjective.RuntimeObject request, NObjective.RuntimeObject target, NObjective.RuntimeObject resultObject, NObjective.Selector selector, NObjective.RuntimeObject controller ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.checkWithRequest_target_resultObject_selector_controller_( ClassHandle, CachedSelectors.checkWithRequest_target_resultObject_selector_controller_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ), request, target, resultObject, selector, controller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void cancel() {
			RuntimeObject ___occuredException;
			NativeMethods.cancel( Handle, CachedSelectors.cancel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithRequest_target_resultObject_selector_controller_( NObjective.RuntimeObject request, NObjective.RuntimeObject target, NObjective.RuntimeObject resultObject, NObjective.Selector selector, NObjective.RuntimeObject controller ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithRequest_target_resultObject_selector_controller_( Handle, CachedSelectors.initWithRequest_target_resultObject_selector_controller_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ) + sizeof( NObjective.RuntimeObject ), request, target, resultObject, selector, controller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void start() {
			RuntimeObject ___occuredException;
			NativeMethods.start( Handle, CachedSelectors.start, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cancel( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr checkWithRequest_target_resultObject_selector_controller_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject request, NObjective.RuntimeObject target, NObjective.RuntimeObject resultObject, NObjective.Selector selector, NObjective.RuntimeObject controller );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithRequest_target_resultObject_selector_controller_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject request, NObjective.RuntimeObject target, NObjective.RuntimeObject resultObject, NObjective.Selector selector, NObjective.RuntimeObject controller );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void start( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector cancel = "cancel";
			public static readonly Selector checkWithRequest_target_resultObject_selector_controller_ = "checkWithRequest:target:resultObject:selector:controller:";
			public static readonly Selector initWithRequest_target_resultObject_selector_controller_ = "initWithRequest:target:resultObject:selector:controller:";
			public static readonly Selector start = "start";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebPluginController : IEquatable<WebPluginController> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebPluginController;
		public static implicit operator IntPtr( WebPluginController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebPluginController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebPluginController?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebPluginController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebPluginController value1, WebPluginController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebPluginController value1, WebPluginController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebPluginController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebPluginController alloc() {
			return new WebPluginController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static bool isPlugInView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isPlugInView_( ClassHandle, CachedSelectors.isPlugInView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NObjective.RuntimeObject plugInViewWithArguments_fromPluginPackage_( NObjective.RuntimeObject arguments, NObjective.RuntimeObject fromPluginPackage ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.plugInViewWithArguments_fromPluginPackage_( ClassHandle, CachedSelectors.plugInViewWithArguments_fromPluginPackage_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), arguments, fromPluginPackage );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addPlugin_( NObjective.RuntimeObject plugin ) {
			RuntimeObject ___occuredException;
			NativeMethods.addPlugin_( Handle, CachedSelectors.addPlugin_, out ___occuredException, sizeof( NObjective.RuntimeObject ), plugin );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject bridge() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bridge( Handle, CachedSelectors.bridge, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void destroyAllPlugins() {
			RuntimeObject ___occuredException;
			NativeMethods.destroyAllPlugins( Handle, CachedSelectors.destroyAllPlugins, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void destroyPlugin_( NObjective.RuntimeObject plugin ) {
			RuntimeObject ___occuredException;
			NativeMethods.destroyPlugin_( Handle, CachedSelectors.destroyPlugin_, out ___occuredException, sizeof( NObjective.RuntimeObject ), plugin );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithDocumentView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithDocumentView_( Handle, CachedSelectors.initWithDocumentView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void pluginView_receivedData_( NObjective.RuntimeObject view, NObjective.RuntimeObject receivedData ) {
			RuntimeObject ___occuredException;
			NativeMethods.pluginView_receivedData_( Handle, CachedSelectors.pluginView_receivedData_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, receivedData );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void pluginView_receivedError_( NObjective.RuntimeObject view, NObjective.RuntimeObject receivedError ) {
			RuntimeObject ___occuredException;
			NativeMethods.pluginView_receivedError_( Handle, CachedSelectors.pluginView_receivedError_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, receivedError );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void pluginView_receivedResponse_( NObjective.RuntimeObject view, NObjective.RuntimeObject receivedResponse ) {
			RuntimeObject ___occuredException;
			NativeMethods.pluginView_receivedResponse_( Handle, CachedSelectors.pluginView_receivedResponse_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, receivedResponse );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void pluginViewFinishedLoading_( NObjective.RuntimeObject loading ) {
			RuntimeObject ___occuredException;
			NativeMethods.pluginViewFinishedLoading_( Handle, CachedSelectors.pluginViewFinishedLoading_, out ___occuredException, sizeof( NObjective.RuntimeObject ), loading );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject selectionColor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectionColor( Handle, CachedSelectors.selectionColor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setDataSource_( NObjective.RuntimeObject source ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDataSource_( Handle, CachedSelectors.setDataSource_, out ___occuredException, sizeof( NObjective.RuntimeObject ), source );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showStatus_( NObjective.RuntimeObject status ) {
			RuntimeObject ___occuredException;
			NativeMethods.showStatus_( Handle, CachedSelectors.showStatus_, out ___occuredException, sizeof( NObjective.RuntimeObject ), status );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void showURL_inFrame_( NObjective.RuntimeObject url, NObjective.RuntimeObject inFrame ) {
			RuntimeObject ___occuredException;
			NativeMethods.showURL_inFrame_( Handle, CachedSelectors.showURL_inFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), url, inFrame );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void startAllPlugins() {
			RuntimeObject ___occuredException;
			NativeMethods.startAllPlugins( Handle, CachedSelectors.startAllPlugins, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void stopAllPlugins() {
			RuntimeObject ___occuredException;
			NativeMethods.stopAllPlugins( Handle, CachedSelectors.stopAllPlugins, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject URLPolicyCheckReferrer() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.URLPolicyCheckReferrer( Handle, CachedSelectors.URLPolicyCheckReferrer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject webFrame() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webFrame( Handle, CachedSelectors.webFrame, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void webPlugInContainerLoadRequest_inFrame_( NObjective.RuntimeObject request, NObjective.RuntimeObject inFrame ) {
			RuntimeObject ___occuredException;
			NativeMethods.webPlugInContainerLoadRequest_inFrame_( Handle, CachedSelectors.webPlugInContainerLoadRequest_inFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), request, inFrame );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject webPlugInContainerSelectionColor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webPlugInContainerSelectionColor( Handle, CachedSelectors.webPlugInContainerSelectionColor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void webPlugInContainerShowStatus_( NObjective.RuntimeObject status ) {
			RuntimeObject ___occuredException;
			NativeMethods.webPlugInContainerShowStatus_( Handle, CachedSelectors.webPlugInContainerShowStatus_, out ___occuredException, sizeof( NObjective.RuntimeObject ), status );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject webView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webView( Handle, CachedSelectors.webView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addPlugin_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject plugin );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr bridge( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void destroyAllPlugins( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void destroyPlugin_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject plugin );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithDocumentView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isPlugInView_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pluginView_receivedData_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject receivedData );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pluginView_receivedError_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject receivedError );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pluginView_receivedResponse_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject receivedResponse );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pluginViewFinishedLoading_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject loading );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr plugInViewWithArguments_fromPluginPackage_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject arguments, NObjective.RuntimeObject fromPluginPackage );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectionColor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDataSource_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject source );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void showStatus_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject status );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void showURL_inFrame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url, NObjective.RuntimeObject inFrame );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void startAllPlugins( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void stopAllPlugins( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr URLPolicyCheckReferrer( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr webFrame( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webPlugInContainerLoadRequest_inFrame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject request, NObjective.RuntimeObject inFrame );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr webPlugInContainerSelectionColor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webPlugInContainerShowStatus_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject status );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr webView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector addPlugin_ = "addPlugin:";
			public static readonly Selector bridge = "bridge";
			public static readonly Selector destroyAllPlugins = "destroyAllPlugins";
			public static readonly Selector destroyPlugin_ = "destroyPlugin:";
			public static readonly Selector initWithDocumentView_ = "initWithDocumentView:";
			public static readonly Selector isPlugInView_ = "isPlugInView:";
			public static readonly Selector pluginView_receivedData_ = "pluginView:receivedData:";
			public static readonly Selector pluginView_receivedError_ = "pluginView:receivedError:";
			public static readonly Selector pluginView_receivedResponse_ = "pluginView:receivedResponse:";
			public static readonly Selector pluginViewFinishedLoading_ = "pluginViewFinishedLoading:";
			public static readonly Selector plugInViewWithArguments_fromPluginPackage_ = "plugInViewWithArguments:fromPluginPackage:";
			public static readonly Selector selectionColor = "selectionColor";
			public static readonly Selector setDataSource_ = "setDataSource:";
			public static readonly Selector showStatus_ = "showStatus:";
			public static readonly Selector showURL_inFrame_ = "showURL:inFrame:";
			public static readonly Selector startAllPlugins = "startAllPlugins";
			public static readonly Selector stopAllPlugins = "stopAllPlugins";
			public static readonly Selector URLPolicyCheckReferrer = "URLPolicyCheckReferrer";
			public static readonly Selector webFrame = "webFrame";
			public static readonly Selector webPlugInContainerLoadRequest_inFrame_ = "webPlugInContainerLoadRequest:inFrame:";
			public static readonly Selector webPlugInContainerSelectionColor = "webPlugInContainerSelectionColor";
			public static readonly Selector webPlugInContainerShowStatus_ = "webPlugInContainerShowStatus:";
			public static readonly Selector webView = "webView";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebPluginDatabase : IEquatable<WebPluginDatabase> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebPluginDatabase;
		public static implicit operator IntPtr( WebPluginDatabase value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebPluginDatabase value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebPluginDatabase?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebPluginDatabase value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebPluginDatabase value1, WebPluginDatabase value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebPluginDatabase value1, WebPluginDatabase value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebPluginDatabase( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebPluginDatabase alloc() {
			return new WebPluginDatabase( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void closeSharedDatabase() {
			RuntimeObject ___occuredException;
			NativeMethods.closeSharedDatabase( ClassHandle, CachedSelectors.closeSharedDatabase, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void setAdditionalWebPlugInPaths_( NObjective.RuntimeObject paths ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAdditionalWebPlugInPaths_( ClassHandle, CachedSelectors.setAdditionalWebPlugInPaths_, out ___occuredException, sizeof( NObjective.RuntimeObject ), paths );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject sharedDatabase() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedDatabase( ClassHandle, CachedSelectors.sharedDatabase, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void close() {
			RuntimeObject ___occuredException;
			NativeMethods.close( Handle, CachedSelectors.close, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool isMIMETypeRegistered_( NObjective.RuntimeObject registered ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isMIMETypeRegistered_( Handle, CachedSelectors.isMIMETypeRegistered_, out ___occuredException, sizeof( NObjective.RuntimeObject ), registered );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject pluginForExtension_( NObjective.RuntimeObject extension ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pluginForExtension_( Handle, CachedSelectors.pluginForExtension_, out ___occuredException, sizeof( NObjective.RuntimeObject ), extension );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject pluginForKey_withEnumeratorSelector_( NObjective.RuntimeObject key, NObjective.Selector withEnumeratorSelector ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pluginForKey_withEnumeratorSelector_( Handle, CachedSelectors.pluginForKey_withEnumeratorSelector_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ), key, withEnumeratorSelector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject pluginForMIMEType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pluginForMIMEType_( Handle, CachedSelectors.pluginForMIMEType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject plugins() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.plugins( Handle, CachedSelectors.plugins, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void refresh() {
			RuntimeObject ___occuredException;
			NativeMethods.refresh( Handle, CachedSelectors.refresh, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPlugInPaths_( NObjective.RuntimeObject paths ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPlugInPaths_( Handle, CachedSelectors.setPlugInPaths_, out ___occuredException, sizeof( NObjective.RuntimeObject ), paths );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void close( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void closeSharedDatabase( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isMIMETypeRegistered_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject registered );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pluginForExtension_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject extension );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pluginForKey_withEnumeratorSelector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key, NObjective.Selector withEnumeratorSelector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pluginForMIMEType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr plugins( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void refresh( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAdditionalWebPlugInPaths_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject paths );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPlugInPaths_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject paths );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedDatabase( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector close = "close";
			public static readonly Selector closeSharedDatabase = "closeSharedDatabase";
			public static readonly Selector isMIMETypeRegistered_ = "isMIMETypeRegistered:";
			public static readonly Selector pluginForExtension_ = "pluginForExtension:";
			public static readonly Selector pluginForKey_withEnumeratorSelector_ = "pluginForKey:withEnumeratorSelector:";
			public static readonly Selector pluginForMIMEType_ = "pluginForMIMEType:";
			public static readonly Selector plugins = "plugins";
			public static readonly Selector refresh = "refresh";
			public static readonly Selector setAdditionalWebPlugInPaths_ = "setAdditionalWebPlugInPaths:";
			public static readonly Selector setPlugInPaths_ = "setPlugInPaths:";
			public static readonly Selector sharedDatabase = "sharedDatabase";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( WebBasePluginPackage ) )]
	public struct WebPluginPackage : IEquatable<WebPluginPackage> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebPluginPackage;
		public static implicit operator IntPtr( WebPluginPackage value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebPluginPackage value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebPluginPackage?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebPluginPackage value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebPluginPackage value1, WebPluginPackage value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebPluginPackage value1, WebPluginPackage value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebPluginPackage( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebPluginPackage alloc() {
			return new WebPluginPackage( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeClass viewFactory() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.viewFactory( Handle, CachedSelectors.viewFactory, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern NObjective.RuntimeClass viewFactory( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector viewFactory = "viewFactory";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebPluginRequest : IEquatable<WebPluginRequest> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebPluginRequest;
		public static implicit operator IntPtr( WebPluginRequest value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebPluginRequest value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebPluginRequest?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebPluginRequest value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebPluginRequest value1, WebPluginRequest value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebPluginRequest value1, WebPluginRequest value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebPluginRequest( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebPluginRequest alloc() {
			return new WebPluginRequest( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject frameName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.frameName( Handle, CachedSelectors.frameName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithRequest_frameName_notifyData_sendNotification_didStartFromUserGesture_( NObjective.RuntimeObject request, NObjective.RuntimeObject frameName, System.IntPtr notifyData, char sendNotification, char didStartFromUserGesture ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithRequest_frameName_notifyData_sendNotification_didStartFromUserGesture_( Handle, CachedSelectors.initWithRequest_frameName_notifyData_sendNotification_didStartFromUserGesture_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( System.IntPtr ) + sizeof( char ) + sizeof( char ), request, frameName, notifyData, sendNotification, didStartFromUserGesture );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isCurrentEventUserGesture() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isCurrentEventUserGesture( Handle, CachedSelectors.isCurrentEventUserGesture, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public System.IntPtr notifyData() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.notifyData( Handle, CachedSelectors.notifyData, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject request() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.request( Handle, CachedSelectors.request, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char sendNotification() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sendNotification( Handle, CachedSelectors.sendNotification, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr frameName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithRequest_frameName_notifyData_sendNotification_didStartFromUserGesture_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject request, NObjective.RuntimeObject frameName, System.IntPtr notifyData, char sendNotification, char didStartFromUserGesture );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isCurrentEventUserGesture( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern System.IntPtr notifyData( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr request( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char sendNotification( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector frameName = "frameName";
			public static readonly Selector initWithRequest_frameName_notifyData_sendNotification_didStartFromUserGesture_ = "initWithRequest:frameName:notifyData:sendNotification:didStartFromUserGesture:";
			public static readonly Selector isCurrentEventUserGesture = "isCurrentEventUserGesture";
			public static readonly Selector notifyData = "notifyData";
			public static readonly Selector request = "request";
			public static readonly Selector sendNotification = "sendNotification";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebPolicyDecisionListener : IEquatable<WebPolicyDecisionListener> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebPolicyDecisionListener;
		public static implicit operator IntPtr( WebPolicyDecisionListener value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebPolicyDecisionListener value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebPolicyDecisionListener?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebPolicyDecisionListener value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebPolicyDecisionListener value1, WebPolicyDecisionListener value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebPolicyDecisionListener value1, WebPolicyDecisionListener value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebPolicyDecisionListener( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebPolicyDecisionListener alloc() {
			return new WebPolicyDecisionListener( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void download() {
			RuntimeObject ___occuredException;
			NativeMethods.download( Handle, CachedSelectors.download, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void ignore() {
			RuntimeObject ___occuredException;
			NativeMethods.ignore( Handle, CachedSelectors.ignore, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void use() {
			RuntimeObject ___occuredException;
			NativeMethods.use( Handle, CachedSelectors.use, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void download( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void ignore( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void use( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector download = "download";
			public static readonly Selector ignore = "ignore";
			public static readonly Selector use = "use";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebPolicyDecisionListenerPrivate : IEquatable<WebPolicyDecisionListenerPrivate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebPolicyDecisionListenerPrivate;
		public static implicit operator IntPtr( WebPolicyDecisionListenerPrivate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebPolicyDecisionListenerPrivate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebPolicyDecisionListenerPrivate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebPolicyDecisionListenerPrivate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebPolicyDecisionListenerPrivate value1, WebPolicyDecisionListenerPrivate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebPolicyDecisionListenerPrivate value1, WebPolicyDecisionListenerPrivate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebPolicyDecisionListenerPrivate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebPolicyDecisionListenerPrivate alloc() {
			return new WebPolicyDecisionListenerPrivate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject initWithTarget_action_( NObjective.RuntimeObject target, NObjective.Selector action ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithTarget_action_( Handle, CachedSelectors.initWithTarget_action_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ), target, action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithTarget_action_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject target, NObjective.Selector action );
		}
		static internal class CachedSelectors {
			public static readonly Selector initWithTarget_action_ = "initWithTarget:action:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebPreferences : IEquatable<WebPreferences> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebPreferences;
		public static implicit operator IntPtr( WebPreferences value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebPreferences value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebPreferences?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebPreferences value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebPreferences value1, WebPreferences value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebPreferences value1, WebPreferences value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebPreferences( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebPreferences alloc() {
			return new WebPreferences( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static WebPreferences standardPreferences() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.standardPreferences( ClassHandle, CachedSelectors.standardPreferences, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebPreferences( ___result );
		}
		unsafe public bool allowsAnimatedImageLooping() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsAnimatedImageLooping( Handle, CachedSelectors.allowsAnimatedImageLooping, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool allowsAnimatedImages() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsAnimatedImages( Handle, CachedSelectors.allowsAnimatedImages, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool arePlugInsEnabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.arePlugInsEnabled( Handle, CachedSelectors.arePlugInsEnabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char authorAndUserStylesEnabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.authorAndUserStylesEnabled( Handle, CachedSelectors.authorAndUserStylesEnabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char automaticallyDetectsCacheModel() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.automaticallyDetectsCacheModel( Handle, CachedSelectors.automaticallyDetectsCacheModel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool autosaves() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.autosaves( Handle, CachedSelectors.autosaves, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public WebCacheModel cacheModel() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cacheModel( Handle, CachedSelectors.cacheModel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( WebCacheModel ) ___result;
		}
		unsafe public string cursiveFontFamily() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.cursiveFontFamily( Handle, CachedSelectors.cursiveFontFamily, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public int defaultFixedFontSize() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultFixedFontSize( Handle, CachedSelectors.defaultFixedFontSize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int defaultFontSize() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultFontSize( Handle, CachedSelectors.defaultFontSize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string defaultTextEncodingName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultTextEncodingName( Handle, CachedSelectors.defaultTextEncodingName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public char developerExtrasEnabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.developerExtrasEnabled( Handle, CachedSelectors.developerExtrasEnabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void didRemoveFromWebView() {
			RuntimeObject ___occuredException;
			NativeMethods.didRemoveFromWebView( Handle, CachedSelectors.didRemoveFromWebView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public int editableLinkBehavior() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.editableLinkBehavior( Handle, CachedSelectors.editableLinkBehavior, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string fantasyFontFamily() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fantasyFontFamily( Handle, CachedSelectors.fantasyFontFamily, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string fixedFontFamily() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fixedFontFamily( Handle, CachedSelectors.fixedFontFamily, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string identifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.identifier( Handle, CachedSelectors.identifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithIdentifier_( string identifier ) {
			RuntimeObject ___occuredException;
			var ___wrappedidentifier = Runtime.CreateStringProxy( identifier );
			var ___result = NativeMethods.initWithIdentifier_( Handle, CachedSelectors.initWithIdentifier_, out ___occuredException, sizeof( IntPtr ), ___wrappedidentifier );
			Runtime.ReleaseNativeObject( ___wrappedidentifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isDOMPasteAllowed() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isDOMPasteAllowed( Handle, CachedSelectors.isDOMPasteAllowed, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isJavaEnabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isJavaEnabled( Handle, CachedSelectors.isJavaEnabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isJavaScriptEnabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isJavaScriptEnabled( Handle, CachedSelectors.isJavaScriptEnabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool javaScriptCanOpenWindowsAutomatically() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.javaScriptCanOpenWindowsAutomatically( Handle, CachedSelectors.javaScriptCanOpenWindowsAutomatically, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool loadsImagesAutomatically() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.loadsImagesAutomatically( Handle, CachedSelectors.loadsImagesAutomatically, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int minimumFontSize() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.minimumFontSize( Handle, CachedSelectors.minimumFontSize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int minimumLogicalFontSize() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.minimumLogicalFontSize( Handle, CachedSelectors.minimumLogicalFontSize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int PDFDisplayMode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.PDFDisplayMode( Handle, CachedSelectors.PDFDisplayMode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public float PDFScaleFactor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.PDFScaleFactor( Handle, CachedSelectors.PDFScaleFactor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool privateBrowsingEnabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.privateBrowsingEnabled( Handle, CachedSelectors.privateBrowsingEnabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char respectStandardStyleKeyEquivalents() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.respectStandardStyleKeyEquivalents( Handle, CachedSelectors.respectStandardStyleKeyEquivalents, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string sansSerifFontFamily() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sansSerifFontFamily( Handle, CachedSelectors.sansSerifFontFamily, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string serifFontFamily() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.serifFontFamily( Handle, CachedSelectors.serifFontFamily, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void setAllowsAnimatedImageLooping_( bool looping ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsAnimatedImageLooping_( Handle, CachedSelectors.setAllowsAnimatedImageLooping_, out ___occuredException, sizeof( bool ), looping );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsAnimatedImages_( bool images ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsAnimatedImages_( Handle, CachedSelectors.setAllowsAnimatedImages_, out ___occuredException, sizeof( bool ), images );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAuthorAndUserStylesEnabled_( char enabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAuthorAndUserStylesEnabled_( Handle, CachedSelectors.setAuthorAndUserStylesEnabled_, out ___occuredException, sizeof( char ), enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAutomaticallyDetectsCacheModel_( char model ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAutomaticallyDetectsCacheModel_( Handle, CachedSelectors.setAutomaticallyDetectsCacheModel_, out ___occuredException, sizeof( char ), model );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAutosaves_( bool autosaves ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAutosaves_( Handle, CachedSelectors.setAutosaves_, out ___occuredException, sizeof( bool ), autosaves );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCacheModel_( WebCacheModel model ) {
			RuntimeObject ___occuredException;
			NativeMethods.setCacheModel_( Handle, CachedSelectors.setCacheModel_, out ___occuredException, sizeof( WebCacheModel ), model );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCursiveFontFamily_( string family ) {
			RuntimeObject ___occuredException;
			var ___wrappedfamily = Runtime.CreateStringProxy( family );
			NativeMethods.setCursiveFontFamily_( Handle, CachedSelectors.setCursiveFontFamily_, out ___occuredException, sizeof( IntPtr ), ___wrappedfamily );
			Runtime.ReleaseNativeObject( ___wrappedfamily );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDefaultFixedFontSize_( int size ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDefaultFixedFontSize_( Handle, CachedSelectors.setDefaultFixedFontSize_, out ___occuredException, sizeof( int ), size );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDefaultFontSize_( int size ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDefaultFontSize_( Handle, CachedSelectors.setDefaultFontSize_, out ___occuredException, sizeof( int ), size );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDefaultTextEncodingName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			NativeMethods.setDefaultTextEncodingName_( Handle, CachedSelectors.setDefaultTextEncodingName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDeveloperExtrasEnabled_( char enabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDeveloperExtrasEnabled_( Handle, CachedSelectors.setDeveloperExtrasEnabled_, out ___occuredException, sizeof( char ), enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDOMPasteAllowed_( char allowed ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDOMPasteAllowed_( Handle, CachedSelectors.setDOMPasteAllowed_, out ___occuredException, sizeof( char ), allowed );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEditableLinkBehavior_( int behavior ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEditableLinkBehavior_( Handle, CachedSelectors.setEditableLinkBehavior_, out ___occuredException, sizeof( int ), behavior );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFantasyFontFamily_( string family ) {
			RuntimeObject ___occuredException;
			var ___wrappedfamily = Runtime.CreateStringProxy( family );
			NativeMethods.setFantasyFontFamily_( Handle, CachedSelectors.setFantasyFontFamily_, out ___occuredException, sizeof( IntPtr ), ___wrappedfamily );
			Runtime.ReleaseNativeObject( ___wrappedfamily );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFixedFontFamily_( string family ) {
			RuntimeObject ___occuredException;
			var ___wrappedfamily = Runtime.CreateStringProxy( family );
			NativeMethods.setFixedFontFamily_( Handle, CachedSelectors.setFixedFontFamily_, out ___occuredException, sizeof( IntPtr ), ___wrappedfamily );
			Runtime.ReleaseNativeObject( ___wrappedfamily );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setJavaEnabled_( bool enabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setJavaEnabled_( Handle, CachedSelectors.setJavaEnabled_, out ___occuredException, sizeof( bool ), enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setJavaScriptCanOpenWindowsAutomatically_( bool automatically ) {
			RuntimeObject ___occuredException;
			NativeMethods.setJavaScriptCanOpenWindowsAutomatically_( Handle, CachedSelectors.setJavaScriptCanOpenWindowsAutomatically_, out ___occuredException, sizeof( bool ), automatically );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setJavaScriptEnabled_( bool enabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setJavaScriptEnabled_( Handle, CachedSelectors.setJavaScriptEnabled_, out ___occuredException, sizeof( bool ), enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setLoadsImagesAutomatically_( bool automatically ) {
			RuntimeObject ___occuredException;
			NativeMethods.setLoadsImagesAutomatically_( Handle, CachedSelectors.setLoadsImagesAutomatically_, out ___occuredException, sizeof( bool ), automatically );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMinimumFontSize_( int size ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMinimumFontSize_( Handle, CachedSelectors.setMinimumFontSize_, out ___occuredException, sizeof( int ), size );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMinimumLogicalFontSize_( int size ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMinimumLogicalFontSize_( Handle, CachedSelectors.setMinimumLogicalFontSize_, out ___occuredException, sizeof( int ), size );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPDFDisplayMode_( int mode ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPDFDisplayMode_( Handle, CachedSelectors.setPDFDisplayMode_, out ___occuredException, sizeof( int ), mode );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPDFScaleFactor_( float factor ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPDFScaleFactor_( Handle, CachedSelectors.setPDFScaleFactor_, out ___occuredException, sizeof( float ), factor );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPlugInsEnabled_( bool enabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPlugInsEnabled_( Handle, CachedSelectors.setPlugInsEnabled_, out ___occuredException, sizeof( bool ), enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPrivateBrowsingEnabled_( bool enabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPrivateBrowsingEnabled_( Handle, CachedSelectors.setPrivateBrowsingEnabled_, out ___occuredException, sizeof( bool ), enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setRespectStandardStyleKeyEquivalents_( char equivalents ) {
			RuntimeObject ___occuredException;
			NativeMethods.setRespectStandardStyleKeyEquivalents_( Handle, CachedSelectors.setRespectStandardStyleKeyEquivalents_, out ___occuredException, sizeof( char ), equivalents );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSansSerifFontFamily_( string family ) {
			RuntimeObject ___occuredException;
			var ___wrappedfamily = Runtime.CreateStringProxy( family );
			NativeMethods.setSansSerifFontFamily_( Handle, CachedSelectors.setSansSerifFontFamily_, out ___occuredException, sizeof( IntPtr ), ___wrappedfamily );
			Runtime.ReleaseNativeObject( ___wrappedfamily );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSerifFontFamily_( string family ) {
			RuntimeObject ___occuredException;
			var ___wrappedfamily = Runtime.CreateStringProxy( family );
			NativeMethods.setSerifFontFamily_( Handle, CachedSelectors.setSerifFontFamily_, out ___occuredException, sizeof( IntPtr ), ___wrappedfamily );
			Runtime.ReleaseNativeObject( ___wrappedfamily );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShouldPrintBackgrounds_( bool backgrounds ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShouldPrintBackgrounds_( Handle, CachedSelectors.setShouldPrintBackgrounds_, out ___occuredException, sizeof( bool ), backgrounds );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShowsURLsInToolTips_( char tips ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShowsURLsInToolTips_( Handle, CachedSelectors.setShowsURLsInToolTips_, out ___occuredException, sizeof( char ), tips );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShrinksStandaloneImagesToFit_( char fit ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShrinksStandaloneImagesToFit_( Handle, CachedSelectors.setShrinksStandaloneImagesToFit_, out ___occuredException, sizeof( char ), fit );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setStandardFontFamily_( string family ) {
			RuntimeObject ___occuredException;
			var ___wrappedfamily = Runtime.CreateStringProxy( family );
			NativeMethods.setStandardFontFamily_( Handle, CachedSelectors.setStandardFontFamily_, out ___occuredException, sizeof( IntPtr ), ___wrappedfamily );
			Runtime.ReleaseNativeObject( ___wrappedfamily );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTabsToLinks_( bool links ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTabsToLinks_( Handle, CachedSelectors.setTabsToLinks_, out ___occuredException, sizeof( bool ), links );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTextAreasAreResizable_( char resizable ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTextAreasAreResizable_( Handle, CachedSelectors.setTextAreasAreResizable_, out ___occuredException, sizeof( char ), resizable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUserStyleSheetEnabled_( bool enabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUserStyleSheetEnabled_( Handle, CachedSelectors.setUserStyleSheetEnabled_, out ___occuredException, sizeof( bool ), enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUserStyleSheetLocation_( NSURL location ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUserStyleSheetLocation_( Handle, CachedSelectors.setUserStyleSheetLocation_, out ___occuredException, sizeof( NSURL ), location );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUsesPageCache_( bool cache ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUsesPageCache_( Handle, CachedSelectors.setUsesPageCache_, out ___occuredException, sizeof( bool ), cache );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool shouldPrintBackgrounds() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shouldPrintBackgrounds( Handle, CachedSelectors.shouldPrintBackgrounds, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char showsURLsInToolTips() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.showsURLsInToolTips( Handle, CachedSelectors.showsURLsInToolTips, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char shrinksStandaloneImagesToFit() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shrinksStandaloneImagesToFit( Handle, CachedSelectors.shrinksStandaloneImagesToFit, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string standardFontFamily() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.standardFontFamily( Handle, CachedSelectors.standardFontFamily, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public bool tabsToLinks() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tabsToLinks( Handle, CachedSelectors.tabsToLinks, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char textAreasAreResizable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textAreasAreResizable( Handle, CachedSelectors.textAreasAreResizable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool userStyleSheetEnabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.userStyleSheetEnabled( Handle, CachedSelectors.userStyleSheetEnabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NSURL userStyleSheetLocation() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.userStyleSheetLocation( Handle, CachedSelectors.userStyleSheetLocation, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURL( ___result );
		}
		unsafe public bool usesPageCache() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.usesPageCache( Handle, CachedSelectors.usesPageCache, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void willAddToWebView() {
			RuntimeObject ___occuredException;
			NativeMethods.willAddToWebView( Handle, CachedSelectors.willAddToWebView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool allowsAnimatedImageLooping( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool allowsAnimatedImages( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool arePlugInsEnabled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char authorAndUserStylesEnabled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char automaticallyDetectsCacheModel( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool autosaves( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint cacheModel( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr cursiveFontFamily( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int defaultFixedFontSize( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int defaultFontSize( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultTextEncodingName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char developerExtrasEnabled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void didRemoveFromWebView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int editableLinkBehavior( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fantasyFontFamily( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fixedFontFamily( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr identifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr identifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isDOMPasteAllowed( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isJavaEnabled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isJavaScriptEnabled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool javaScriptCanOpenWindowsAutomatically( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool loadsImagesAutomatically( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int minimumFontSize( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int minimumLogicalFontSize( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int PDFDisplayMode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float PDFScaleFactor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool privateBrowsingEnabled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char respectStandardStyleKeyEquivalents( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sansSerifFontFamily( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr serifFontFamily( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowsAnimatedImageLooping_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool looping );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowsAnimatedImages_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool images );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAuthorAndUserStylesEnabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char enabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAutomaticallyDetectsCacheModel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char model );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAutosaves_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool autosaves );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCacheModel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, WebCacheModel model );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCursiveFontFamily_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr family );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDefaultFixedFontSize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int size );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDefaultFontSize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int size );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDefaultTextEncodingName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDeveloperExtrasEnabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char enabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDOMPasteAllowed_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char allowed );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEditableLinkBehavior_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int behavior );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFantasyFontFamily_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr family );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFixedFontFamily_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr family );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setJavaEnabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool enabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setJavaScriptCanOpenWindowsAutomatically_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool automatically );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setJavaScriptEnabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool enabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setLoadsImagesAutomatically_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool automatically );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMinimumFontSize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int size );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMinimumLogicalFontSize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int size );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPDFDisplayMode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, int mode );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPDFScaleFactor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float factor );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPlugInsEnabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool enabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPrivateBrowsingEnabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool enabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setRespectStandardStyleKeyEquivalents_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char equivalents );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSansSerifFontFamily_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr family );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSerifFontFamily_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr family );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setShouldPrintBackgrounds_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool backgrounds );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setShowsURLsInToolTips_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char tips );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setShrinksStandaloneImagesToFit_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char fit );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setStandardFontFamily_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr family );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTabsToLinks_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool links );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTextAreasAreResizable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char resizable );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUserStyleSheetEnabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool enabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUserStyleSheetLocation_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL location );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUsesPageCache_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool cache );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool shouldPrintBackgrounds( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char showsURLsInToolTips( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char shrinksStandaloneImagesToFit( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr standardFontFamily( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr standardPreferences( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool tabsToLinks( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char textAreasAreResizable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool userStyleSheetEnabled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr userStyleSheetLocation( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool usesPageCache( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void willAddToWebView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector allowsAnimatedImageLooping = "allowsAnimatedImageLooping";
			public static readonly Selector allowsAnimatedImages = "allowsAnimatedImages";
			public static readonly Selector arePlugInsEnabled = "arePlugInsEnabled";
			public static readonly Selector authorAndUserStylesEnabled = "authorAndUserStylesEnabled";
			public static readonly Selector automaticallyDetectsCacheModel = "automaticallyDetectsCacheModel";
			public static readonly Selector autosaves = "autosaves";
			public static readonly Selector cacheModel = "cacheModel";
			public static readonly Selector cursiveFontFamily = "cursiveFontFamily";
			public static readonly Selector defaultFixedFontSize = "defaultFixedFontSize";
			public static readonly Selector defaultFontSize = "defaultFontSize";
			public static readonly Selector defaultTextEncodingName = "defaultTextEncodingName";
			public static readonly Selector developerExtrasEnabled = "developerExtrasEnabled";
			public static readonly Selector didRemoveFromWebView = "didRemoveFromWebView";
			public static readonly Selector editableLinkBehavior = "editableLinkBehavior";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector fantasyFontFamily = "fantasyFontFamily";
			public static readonly Selector fixedFontFamily = "fixedFontFamily";
			public static readonly Selector identifier = "identifier";
			public static readonly Selector initialize = "initialize";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithIdentifier_ = "initWithIdentifier:";
			public static readonly Selector isDOMPasteAllowed = "isDOMPasteAllowed";
			public static readonly Selector isJavaEnabled = "isJavaEnabled";
			public static readonly Selector isJavaScriptEnabled = "isJavaScriptEnabled";
			public static readonly Selector javaScriptCanOpenWindowsAutomatically = "javaScriptCanOpenWindowsAutomatically";
			public static readonly Selector loadsImagesAutomatically = "loadsImagesAutomatically";
			public static readonly Selector minimumFontSize = "minimumFontSize";
			public static readonly Selector minimumLogicalFontSize = "minimumLogicalFontSize";
			public static readonly Selector PDFDisplayMode = "PDFDisplayMode";
			public static readonly Selector PDFScaleFactor = "PDFScaleFactor";
			public static readonly Selector privateBrowsingEnabled = "privateBrowsingEnabled";
			public static readonly Selector respectStandardStyleKeyEquivalents = "respectStandardStyleKeyEquivalents";
			public static readonly Selector sansSerifFontFamily = "sansSerifFontFamily";
			public static readonly Selector serifFontFamily = "serifFontFamily";
			public static readonly Selector setAllowsAnimatedImageLooping_ = "setAllowsAnimatedImageLooping:";
			public static readonly Selector setAllowsAnimatedImages_ = "setAllowsAnimatedImages:";
			public static readonly Selector setAuthorAndUserStylesEnabled_ = "setAuthorAndUserStylesEnabled:";
			public static readonly Selector setAutomaticallyDetectsCacheModel_ = "setAutomaticallyDetectsCacheModel:";
			public static readonly Selector setAutosaves_ = "setAutosaves:";
			public static readonly Selector setCacheModel_ = "setCacheModel:";
			public static readonly Selector setCursiveFontFamily_ = "setCursiveFontFamily:";
			public static readonly Selector setDefaultFixedFontSize_ = "setDefaultFixedFontSize:";
			public static readonly Selector setDefaultFontSize_ = "setDefaultFontSize:";
			public static readonly Selector setDefaultTextEncodingName_ = "setDefaultTextEncodingName:";
			public static readonly Selector setDeveloperExtrasEnabled_ = "setDeveloperExtrasEnabled:";
			public static readonly Selector setDOMPasteAllowed_ = "setDOMPasteAllowed:";
			public static readonly Selector setEditableLinkBehavior_ = "setEditableLinkBehavior:";
			public static readonly Selector setFantasyFontFamily_ = "setFantasyFontFamily:";
			public static readonly Selector setFixedFontFamily_ = "setFixedFontFamily:";
			public static readonly Selector setJavaEnabled_ = "setJavaEnabled:";
			public static readonly Selector setJavaScriptCanOpenWindowsAutomatically_ = "setJavaScriptCanOpenWindowsAutomatically:";
			public static readonly Selector setJavaScriptEnabled_ = "setJavaScriptEnabled:";
			public static readonly Selector setLoadsImagesAutomatically_ = "setLoadsImagesAutomatically:";
			public static readonly Selector setMinimumFontSize_ = "setMinimumFontSize:";
			public static readonly Selector setMinimumLogicalFontSize_ = "setMinimumLogicalFontSize:";
			public static readonly Selector setPDFDisplayMode_ = "setPDFDisplayMode:";
			public static readonly Selector setPDFScaleFactor_ = "setPDFScaleFactor:";
			public static readonly Selector setPlugInsEnabled_ = "setPlugInsEnabled:";
			public static readonly Selector setPrivateBrowsingEnabled_ = "setPrivateBrowsingEnabled:";
			public static readonly Selector setRespectStandardStyleKeyEquivalents_ = "setRespectStandardStyleKeyEquivalents:";
			public static readonly Selector setSansSerifFontFamily_ = "setSansSerifFontFamily:";
			public static readonly Selector setSerifFontFamily_ = "setSerifFontFamily:";
			public static readonly Selector setShouldPrintBackgrounds_ = "setShouldPrintBackgrounds:";
			public static readonly Selector setShowsURLsInToolTips_ = "setShowsURLsInToolTips:";
			public static readonly Selector setShrinksStandaloneImagesToFit_ = "setShrinksStandaloneImagesToFit:";
			public static readonly Selector setStandardFontFamily_ = "setStandardFontFamily:";
			public static readonly Selector setTabsToLinks_ = "setTabsToLinks:";
			public static readonly Selector setTextAreasAreResizable_ = "setTextAreasAreResizable:";
			public static readonly Selector setUserStyleSheetEnabled_ = "setUserStyleSheetEnabled:";
			public static readonly Selector setUserStyleSheetLocation_ = "setUserStyleSheetLocation:";
			public static readonly Selector setUsesPageCache_ = "setUsesPageCache:";
			public static readonly Selector shouldPrintBackgrounds = "shouldPrintBackgrounds";
			public static readonly Selector showsURLsInToolTips = "showsURLsInToolTips";
			public static readonly Selector shrinksStandaloneImagesToFit = "shrinksStandaloneImagesToFit";
			public static readonly Selector standardFontFamily = "standardFontFamily";
			public static readonly Selector standardPreferences = "standardPreferences";
			public static readonly Selector tabsToLinks = "tabsToLinks";
			public static readonly Selector textAreasAreResizable = "textAreasAreResizable";
			public static readonly Selector userStyleSheetEnabled = "userStyleSheetEnabled";
			public static readonly Selector userStyleSheetLocation = "userStyleSheetLocation";
			public static readonly Selector usesPageCache = "usesPageCache";
			public static readonly Selector willAddToWebView = "willAddToWebView";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebPreferencesPrivate : IEquatable<WebPreferencesPrivate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebPreferencesPrivate;
		public static implicit operator IntPtr( WebPreferencesPrivate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebPreferencesPrivate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebPreferencesPrivate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebPreferencesPrivate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebPreferencesPrivate value1, WebPreferencesPrivate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebPreferencesPrivate value1, WebPreferencesPrivate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebPreferencesPrivate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebPreferencesPrivate alloc() {
			return new WebPreferencesPrivate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebProgressItem : IEquatable<WebProgressItem> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebProgressItem;
		public static implicit operator IntPtr( WebProgressItem value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebProgressItem value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebProgressItem?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebProgressItem value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebProgressItem value1, WebProgressItem value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebProgressItem value1, WebProgressItem value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebProgressItem( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebProgressItem alloc() {
			return new WebProgressItem( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebRenderNode : IEquatable<WebRenderNode> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebRenderNode;
		public static implicit operator IntPtr( WebRenderNode value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebRenderNode value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebRenderNode?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebRenderNode value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebRenderNode value1, WebRenderNode value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebRenderNode value1, WebRenderNode value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebRenderNode( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebRenderNode alloc() {
			return new WebRenderNode( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject absolutePositionString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.absolutePositionString( Handle, CachedSelectors.absolutePositionString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject children() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.children( Handle, CachedSelectors.children, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject heightString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.heightString( Handle, CachedSelectors.heightString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithWebFrameView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithWebFrameView_( Handle, CachedSelectors.initWithWebFrameView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject name() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.name( Handle, CachedSelectors.name, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject positionString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.positionString( Handle, CachedSelectors.positionString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject widthString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.widthString( Handle, CachedSelectors.widthString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr absolutePositionString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr children( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr heightString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithWebFrameView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr name( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr positionString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr widthString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector absolutePositionString = "absolutePositionString";
			public static readonly Selector children = "children";
			public static readonly Selector heightString = "heightString";
			public static readonly Selector initWithWebFrameView_ = "initWithWebFrameView:";
			public static readonly Selector name = "name";
			public static readonly Selector positionString = "positionString";
			public static readonly Selector widthString = "widthString";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebResource : IEquatable<WebResource> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebResource;
		public static implicit operator IntPtr( WebResource value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebResource value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebResource?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebResource value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebResource value1, WebResource value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebResource value1, WebResource value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebResource( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebResource alloc() {
			return new WebResource( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NSData data() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.data( Handle, CachedSelectors.data, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSData( ___result );
		}
		unsafe public void encodeWithCoder_( NSCoder coder ) {
			RuntimeObject ___occuredException;
			NativeMethods.encodeWithCoder_( Handle, CachedSelectors.encodeWithCoder_, out ___occuredException, sizeof( NSCoder ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string frameName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.frameName( Handle, CachedSelectors.frameName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithCoder_( NObjective.RuntimeObject coder ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithCoder_( Handle, CachedSelectors.initWithCoder_, out ___occuredException, sizeof( NObjective.RuntimeObject ), coder );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithData_URL_MIMEType_textEncodingName_frameName_( NSData data, NSURL URL, string MIMEType, string textEncodingName, string frameName ) {
			RuntimeObject ___occuredException;
			var ___wrappedMIMEType = Runtime.CreateStringProxy( MIMEType );
			var ___wrappedtextEncodingName = Runtime.CreateStringProxy( textEncodingName );
			var ___wrappedframeName = Runtime.CreateStringProxy( frameName );
			var ___result = NativeMethods.initWithData_URL_MIMEType_textEncodingName_frameName_( Handle, CachedSelectors.initWithData_URL_MIMEType_textEncodingName_frameName_, out ___occuredException, sizeof( NSData ) + sizeof( NSURL ) + sizeof( IntPtr ) + sizeof( IntPtr ) + sizeof( IntPtr ), data, URL, ___wrappedMIMEType, ___wrappedtextEncodingName, ___wrappedframeName );
			Runtime.ReleaseNativeObject( ___wrappedMIMEType );
			Runtime.ReleaseNativeObject( ___wrappedtextEncodingName );
			Runtime.ReleaseNativeObject( ___wrappedframeName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public string MIMEType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.MIMEType( Handle, CachedSelectors.MIMEType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string textEncodingName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textEncodingName( Handle, CachedSelectors.textEncodingName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NSURL URL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.URL( Handle, CachedSelectors.URL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURL( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr data( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void encodeWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSCoder coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr frameName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithCoder_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject coder );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithData_URL_MIMEType_textEncodingName_frameName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSData data, NSURL URL, IntPtr MIMEType, IntPtr textEncodingName, IntPtr frameName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr MIMEType( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr textEncodingName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr URL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector data = "data";
			public static readonly Selector encodeWithCoder_ = "encodeWithCoder:";
			public static readonly Selector frameName = "frameName";
			public static readonly Selector initWithCoder_ = "initWithCoder:";
			public static readonly Selector initWithData_URL_MIMEType_textEncodingName_frameName_ = "initWithData:URL:MIMEType:textEncodingName:frameName:";
			public static readonly Selector MIMEType = "MIMEType";
			public static readonly Selector textEncodingName = "textEncodingName";
			public static readonly Selector URL = "URL";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebResourcePrivate : IEquatable<WebResourcePrivate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebResourcePrivate;
		public static implicit operator IntPtr( WebResourcePrivate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebResourcePrivate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebResourcePrivate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebResourcePrivate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebResourcePrivate value1, WebResourcePrivate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebResourcePrivate value1, WebResourcePrivate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebResourcePrivate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebResourcePrivate alloc() {
			return new WebResourcePrivate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebScriptCallFrame : IEquatable<WebScriptCallFrame> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebScriptCallFrame;
		public static implicit operator IntPtr( WebScriptCallFrame value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebScriptCallFrame value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebScriptCallFrame?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebScriptCallFrame value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebScriptCallFrame value1, WebScriptCallFrame value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebScriptCallFrame value1, WebScriptCallFrame value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebScriptCallFrame( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebScriptCallFrame alloc() {
			return new WebScriptCallFrame( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject caller() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.caller( Handle, CachedSelectors.caller, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject evaluateWebScript_( NObjective.RuntimeObject script ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.evaluateWebScript_( Handle, CachedSelectors.evaluateWebScript_, out ___occuredException, sizeof( NObjective.RuntimeObject ), script );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject exception() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.exception( Handle, CachedSelectors.exception, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject functionName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.functionName( Handle, CachedSelectors.functionName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject scopeChain() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scopeChain( Handle, CachedSelectors.scopeChain, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void setUserInfo_( NObjective.RuntimeObject info ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUserInfo_( Handle, CachedSelectors.setUserInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ), info );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject userInfo() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.userInfo( Handle, CachedSelectors.userInfo, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr caller( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr evaluateWebScript_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject script );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr exception( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr functionName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr scopeChain( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUserInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject info );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr userInfo( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector caller = "caller";
			public static readonly Selector evaluateWebScript_ = "evaluateWebScript:";
			public static readonly Selector exception = "exception";
			public static readonly Selector functionName = "functionName";
			public static readonly Selector scopeChain = "scopeChain";
			public static readonly Selector setUserInfo_ = "setUserInfo:";
			public static readonly Selector userInfo = "userInfo";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebScriptDebugger : IEquatable<WebScriptDebugger> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebScriptDebugger;
		public static implicit operator IntPtr( WebScriptDebugger value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebScriptDebugger value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebScriptDebugger?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebScriptDebugger value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebScriptDebugger value1, WebScriptDebugger value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebScriptDebugger value1, WebScriptDebugger value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebScriptDebugger( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebScriptDebugger alloc() {
			return new WebScriptDebugger( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void enteredFrame_sourceId_line_( NObjective.RuntimeObject frame, int sourceId, int line ) {
			RuntimeObject ___occuredException;
			NativeMethods.enteredFrame_sourceId_line_( Handle, CachedSelectors.enteredFrame_sourceId_line_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( int ), frame, sourceId, line );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void exceptionRaised_sourceId_line_( NObjective.RuntimeObject raised, int sourceId, int line ) {
			RuntimeObject ___occuredException;
			NativeMethods.exceptionRaised_sourceId_line_( Handle, CachedSelectors.exceptionRaised_sourceId_line_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( int ), raised, sourceId, line );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject globalObject() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.globalObject( Handle, CachedSelectors.globalObject, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void hitStatement_sourceId_line_( NObjective.RuntimeObject statement, int sourceId, int line ) {
			RuntimeObject ___occuredException;
			NativeMethods.hitStatement_sourceId_line_( Handle, CachedSelectors.hitStatement_sourceId_line_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( int ), statement, sourceId, line );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithWebFrame_( NObjective.RuntimeObject frame ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithWebFrame_( Handle, CachedSelectors.initWithWebFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ), frame );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void leavingFrame_sourceId_line_( NObjective.RuntimeObject frame, int sourceId, int line ) {
			RuntimeObject ___occuredException;
			NativeMethods.leavingFrame_sourceId_line_( Handle, CachedSelectors.leavingFrame_sourceId_line_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( int ), frame, sourceId, line );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject newWrapperForFrame_( NObjective.RuntimeObject frame ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.newWrapperForFrame_( Handle, CachedSelectors.newWrapperForFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ), frame );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void parsedSource_fromURL_sourceId_startLine_errorLine_errorMessage_( NObjective.RuntimeObject source, NObjective.RuntimeObject fromURL, int sourceId, int startLine, int errorLine, NObjective.RuntimeObject errorMessage ) {
			RuntimeObject ___occuredException;
			NativeMethods.parsedSource_fromURL_sourceId_startLine_errorLine_errorMessage_( Handle, CachedSelectors.parsedSource_fromURL_sourceId_startLine_errorLine_errorMessage_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( int ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), source, fromURL, sourceId, startLine, errorLine, errorMessage
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void enteredFrame_sourceId_line_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject frame, int sourceId, int line );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void exceptionRaised_sourceId_line_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject raised, int sourceId, int line );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr globalObject( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void hitStatement_sourceId_line_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject statement, int sourceId, int line );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithWebFrame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject frame );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void leavingFrame_sourceId_line_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject frame, int sourceId, int line );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr newWrapperForFrame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject frame );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void parsedSource_fromURL_sourceId_startLine_errorLine_errorMessage_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject source, NObjective.RuntimeObject fromURL, int sourceId, int startLine, int errorLine, NObjective.RuntimeObject errorMessage
			 );
		}
		static internal class CachedSelectors {
			public static readonly Selector enteredFrame_sourceId_line_ = "enteredFrame:sourceId:line:";
			public static readonly Selector exceptionRaised_sourceId_line_ = "exceptionRaised:sourceId:line:";
			public static readonly Selector globalObject = "globalObject";
			public static readonly Selector hitStatement_sourceId_line_ = "hitStatement:sourceId:line:";
			public static readonly Selector initWithWebFrame_ = "initWithWebFrame:";
			public static readonly Selector leavingFrame_sourceId_line_ = "leavingFrame:sourceId:line:";
			public static readonly Selector newWrapperForFrame_ = "newWrapperForFrame:";
			public static readonly Selector parsedSource_fromURL_sourceId_startLine_errorLine_errorMessage_ = "parsedSource:fromURL:sourceId:startLine:errorLine:errorMessage:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebScriptDebugServer : IEquatable<WebScriptDebugServer> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebScriptDebugServer;
		public static implicit operator IntPtr( WebScriptDebugServer value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebScriptDebugServer value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebScriptDebugServer?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebScriptDebugServer value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebScriptDebugServer value1, WebScriptDebugServer value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebScriptDebugServer value1, WebScriptDebugServer value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebScriptDebugServer( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebScriptDebugServer alloc() {
			return new WebScriptDebugServer( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static uint listenerCount() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.listenerCount( ClassHandle, CachedSelectors.listenerCount, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public static NObjective.RuntimeObject sharedScriptDebugServer() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.sharedScriptDebugServer( ClassHandle, CachedSelectors.sharedScriptDebugServer, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void addListener_( NObjective.RuntimeObject listener ) {
			RuntimeObject ___occuredException;
			NativeMethods.addListener_( Handle, CachedSelectors.addListener_, out ___occuredException, sizeof( NObjective.RuntimeObject ), listener );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void applicationTerminating_( NObjective.RuntimeObject terminating ) {
			RuntimeObject ___occuredException;
			NativeMethods.applicationTerminating_( Handle, CachedSelectors.applicationTerminating_, out ___occuredException, sizeof( NObjective.RuntimeObject ), terminating );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void attachScriptDebuggerToAllWebViews() {
			RuntimeObject ___occuredException;
			NativeMethods.attachScriptDebuggerToAllWebViews( Handle, CachedSelectors.attachScriptDebuggerToAllWebViews, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void detachScriptDebuggerFromAllWebViews() {
			RuntimeObject ___occuredException;
			NativeMethods.detachScriptDebuggerFromAllWebViews( Handle, CachedSelectors.detachScriptDebuggerFromAllWebViews, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool isPaused() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isPaused( Handle, CachedSelectors.isPaused, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void listenerConnectionDidDie_( NObjective.RuntimeObject die ) {
			RuntimeObject ___occuredException;
			NativeMethods.listenerConnectionDidDie_( Handle, CachedSelectors.listenerConnectionDidDie_, out ___occuredException, sizeof( NObjective.RuntimeObject ), die );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void pause() {
			RuntimeObject ___occuredException;
			NativeMethods.pause( Handle, CachedSelectors.pause, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeListener_( NObjective.RuntimeObject listener ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeListener_( Handle, CachedSelectors.removeListener_, out ___occuredException, sizeof( NObjective.RuntimeObject ), listener );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void resume() {
			RuntimeObject ___occuredException;
			NativeMethods.resume( Handle, CachedSelectors.resume, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void serverQuery_( NObjective.RuntimeObject query ) {
			RuntimeObject ___occuredException;
			NativeMethods.serverQuery_( Handle, CachedSelectors.serverQuery_, out ___occuredException, sizeof( NObjective.RuntimeObject ), query );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void step() {
			RuntimeObject ___occuredException;
			NativeMethods.step( Handle, CachedSelectors.step, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void suspendProcessIfPaused() {
			RuntimeObject ___occuredException;
			NativeMethods.suspendProcessIfPaused( Handle, CachedSelectors.suspendProcessIfPaused, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webView_didEnterCallFrame_sourceId_line_forWebFrame_( NObjective.RuntimeObject view, NObjective.RuntimeObject didEnterCallFrame, int sourceId, int line, NObjective.RuntimeObject forWebFrame ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_didEnterCallFrame_sourceId_line_forWebFrame_( Handle, CachedSelectors.webView_didEnterCallFrame_sourceId_line_forWebFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), view, didEnterCallFrame, sourceId, line, forWebFrame );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webView_didLoadMainResourceForDataSource_( NObjective.RuntimeObject view, NObjective.RuntimeObject didLoadMainResourceForDataSource ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_didLoadMainResourceForDataSource_( Handle, CachedSelectors.webView_didLoadMainResourceForDataSource_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, didLoadMainResourceForDataSource );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webView_didParseSource_baseLineNumber_fromURL_sourceId_forWebFrame_( NObjective.RuntimeObject view, NObjective.RuntimeObject didParseSource, uint baseLineNumber, NObjective.RuntimeObject fromURL, int sourceId, NObjective.RuntimeObject forWebFrame ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_didParseSource_baseLineNumber_fromURL_sourceId_forWebFrame_( Handle, CachedSelectors.webView_didParseSource_baseLineNumber_fromURL_sourceId_forWebFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), view, didParseSource, baseLineNumber, fromURL, sourceId, forWebFrame
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webView_exceptionWasRaised_sourceId_line_forWebFrame_( NObjective.RuntimeObject view, NObjective.RuntimeObject exceptionWasRaised, int sourceId, int line, NObjective.RuntimeObject forWebFrame ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_exceptionWasRaised_sourceId_line_forWebFrame_( Handle, CachedSelectors.webView_exceptionWasRaised_sourceId_line_forWebFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), view, exceptionWasRaised, sourceId, line, forWebFrame );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webView_failedToParseSource_baseLineNumber_fromURL_withError_forWebFrame_( NObjective.RuntimeObject view, NObjective.RuntimeObject failedToParseSource, uint baseLineNumber, NObjective.RuntimeObject fromURL, NObjective.RuntimeObject withError, NObjective.RuntimeObject forWebFrame ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_failedToParseSource_baseLineNumber_fromURL_withError_forWebFrame_( Handle, CachedSelectors.webView_failedToParseSource_baseLineNumber_fromURL_withError_forWebFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), view, failedToParseSource, baseLineNumber, fromURL, withError, forWebFrame
			 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webView_willExecuteStatement_sourceId_line_forWebFrame_( NObjective.RuntimeObject view, NObjective.RuntimeObject willExecuteStatement, int sourceId, int line, NObjective.RuntimeObject forWebFrame ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_willExecuteStatement_sourceId_line_forWebFrame_( Handle, CachedSelectors.webView_willExecuteStatement_sourceId_line_forWebFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), view, willExecuteStatement, sourceId, line, forWebFrame );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void webView_willLeaveCallFrame_sourceId_line_forWebFrame_( NObjective.RuntimeObject view, NObjective.RuntimeObject willLeaveCallFrame, int sourceId, int line, NObjective.RuntimeObject forWebFrame ) {
			RuntimeObject ___occuredException;
			NativeMethods.webView_willLeaveCallFrame_sourceId_line_forWebFrame_( Handle, CachedSelectors.webView_willLeaveCallFrame_sourceId_line_forWebFrame_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ) + sizeof( int ) + sizeof( NObjective.RuntimeObject ), view, willLeaveCallFrame, sourceId, line, forWebFrame );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addListener_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject listener );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void applicationTerminating_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject terminating );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void attachScriptDebuggerToAllWebViews( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void detachScriptDebuggerFromAllWebViews( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isPaused( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void listenerConnectionDidDie_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject die );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint listenerCount( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pause( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeListener_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject listener );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void resume( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void serverQuery_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject query );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr sharedScriptDebugServer( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void step( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void suspendProcessIfPaused( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_didEnterCallFrame_sourceId_line_forWebFrame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject didEnterCallFrame, int sourceId, int line, NObjective.RuntimeObject forWebFrame );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_didLoadMainResourceForDataSource_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject didLoadMainResourceForDataSource );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_didParseSource_baseLineNumber_fromURL_sourceId_forWebFrame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject didParseSource, uint baseLineNumber, NObjective.RuntimeObject fromURL, int sourceId, NObjective.RuntimeObject forWebFrame
			 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_exceptionWasRaised_sourceId_line_forWebFrame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject exceptionWasRaised, int sourceId, int line, NObjective.RuntimeObject forWebFrame );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_failedToParseSource_baseLineNumber_fromURL_withError_forWebFrame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject failedToParseSource, uint baseLineNumber, NObjective.RuntimeObject fromURL, NObjective.RuntimeObject withError, NObjective.RuntimeObject forWebFrame
			 );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_willExecuteStatement_sourceId_line_forWebFrame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject willExecuteStatement, int sourceId, int line, NObjective.RuntimeObject forWebFrame );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void webView_willLeaveCallFrame_sourceId_line_forWebFrame_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject willLeaveCallFrame, int sourceId, int line, NObjective.RuntimeObject forWebFrame );
		}
		static internal class CachedSelectors {
			public static readonly Selector addListener_ = "addListener:";
			public static readonly Selector applicationTerminating_ = "applicationTerminating:";
			public static readonly Selector attachScriptDebuggerToAllWebViews = "attachScriptDebuggerToAllWebViews";
			public static readonly Selector detachScriptDebuggerFromAllWebViews = "detachScriptDebuggerFromAllWebViews";
			public static readonly Selector isPaused = "isPaused";
			public static readonly Selector listenerConnectionDidDie_ = "listenerConnectionDidDie:";
			public static readonly Selector listenerCount = "listenerCount";
			public static readonly Selector pause = "pause";
			public static readonly Selector removeListener_ = "removeListener:";
			public static readonly Selector resume = "resume";
			public static readonly Selector serverQuery_ = "serverQuery:";
			public static readonly Selector sharedScriptDebugServer = "sharedScriptDebugServer";
			public static readonly Selector step = "step";
			public static readonly Selector suspendProcessIfPaused = "suspendProcessIfPaused";
			public static readonly Selector webView_didEnterCallFrame_sourceId_line_forWebFrame_ = "webView:didEnterCallFrame:sourceId:line:forWebFrame:";
			public static readonly Selector webView_didLoadMainResourceForDataSource_ = "webView:didLoadMainResourceForDataSource:";
			public static readonly Selector webView_didParseSource_baseLineNumber_fromURL_sourceId_forWebFrame_ = "webView:didParseSource:baseLineNumber:fromURL:sourceId:forWebFrame:";
			public static readonly Selector webView_exceptionWasRaised_sourceId_line_forWebFrame_ = "webView:exceptionWasRaised:sourceId:line:forWebFrame:";
			public static readonly Selector webView_failedToParseSource_baseLineNumber_fromURL_withError_forWebFrame_ = "webView:failedToParseSource:baseLineNumber:fromURL:withError:forWebFrame:";
			public static readonly Selector webView_willExecuteStatement_sourceId_line_forWebFrame_ = "webView:willExecuteStatement:sourceId:line:forWebFrame:";
			public static readonly Selector webView_willLeaveCallFrame_sourceId_line_forWebFrame_ = "webView:willLeaveCallFrame:sourceId:line:forWebFrame:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSTextView ) )]
	public struct WebSearchableTextView : IEquatable<WebSearchableTextView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebSearchableTextView;
		public static implicit operator IntPtr( WebSearchableTextView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebSearchableTextView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebSearchableTextView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebSearchableTextView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebSearchableTextView value1, WebSearchableTextView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebSearchableTextView value1, WebSearchableTextView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebSearchableTextView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebSearchableTextView alloc() {
			return new WebSearchableTextView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void deselectAll() {
			RuntimeObject ___occuredException;
			NativeMethods.deselectAll( Handle, CachedSelectors.deselectAll, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject pasteboardTypesForSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pasteboardTypesForSelection( Handle, CachedSelectors.pasteboardTypesForSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char searchFor_direction_caseSensitive_wrap_( NObjective.RuntimeObject @for, char direction, char caseSensitive, char wrap ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchFor_direction_caseSensitive_wrap_( Handle, CachedSelectors.searchFor_direction_caseSensitive_wrap_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ) + sizeof( char ), @for, direction, caseSensitive, wrap );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void selectAll() {
			RuntimeObject ___occuredException;
			NativeMethods.selectAll( Handle, CachedSelectors.selectAll, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject selectedAttributedString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedAttributedString( Handle, CachedSelectors.selectedAttributedString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectedString() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedString( Handle, CachedSelectors.selectedString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectionImageForcingBlackText_( char text ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectionImageForcingBlackText_( Handle, CachedSelectors.selectionImageForcingBlackText_, out ___occuredException, sizeof( char ), text );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectionImageForcingWhiteText_( char text ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectionImageForcingWhiteText_( Handle, CachedSelectors.selectionImageForcingWhiteText_, out ___occuredException, sizeof( char ), text );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectionTextRects() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectionTextRects( Handle, CachedSelectors.selectionTextRects, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject selectionView() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectionView( Handle, CachedSelectors.selectionView, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char supportsTextEncoding() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.supportsTextEncoding( Handle, CachedSelectors.supportsTextEncoding, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void writeSelectionWithPasteboardTypes_toPasteboard_( NObjective.RuntimeObject types, NObjective.RuntimeObject toPasteboard ) {
			RuntimeObject ___occuredException;
			NativeMethods.writeSelectionWithPasteboardTypes_toPasteboard_( Handle, CachedSelectors.writeSelectionWithPasteboardTypes_toPasteboard_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), types, toPasteboard );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deselectAll( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pasteboardTypesForSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char searchFor_direction_caseSensitive_wrap_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @for, char direction, char caseSensitive, char wrap );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectAll( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedAttributedString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectionImageForcingBlackText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char text );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectionImageForcingWhiteText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char text );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectionTextRects( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectionView( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char supportsTextEncoding( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void writeSelectionWithPasteboardTypes_toPasteboard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject types, NObjective.RuntimeObject toPasteboard );
		}
		static internal class CachedSelectors {
			public static readonly Selector deselectAll = "deselectAll";
			public static readonly Selector pasteboardTypesForSelection = "pasteboardTypesForSelection";
			public static readonly Selector searchFor_direction_caseSensitive_wrap_ = "searchFor:direction:caseSensitive:wrap:";
			public static readonly Selector selectAll = "selectAll";
			public static readonly Selector selectedAttributedString = "selectedAttributedString";
			public static readonly Selector selectedString = "selectedString";
			public static readonly Selector selectionImageForcingBlackText_ = "selectionImageForcingBlackText:";
			public static readonly Selector selectionImageForcingWhiteText_ = "selectionImageForcingWhiteText:";
			public static readonly Selector selectionTextRects = "selectionTextRects";
			public static readonly Selector selectionView = "selectionView";
			public static readonly Selector supportsTextEncoding = "supportsTextEncoding";
			public static readonly Selector writeSelectionWithPasteboardTypes_toPasteboard_ = "writeSelectionWithPasteboardTypes:toPasteboard:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebSecurityOrigin : IEquatable<WebSecurityOrigin> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebSecurityOrigin;
		public static implicit operator IntPtr( WebSecurityOrigin value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebSecurityOrigin value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebSecurityOrigin?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebSecurityOrigin value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebSecurityOrigin value1, WebSecurityOrigin value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebSecurityOrigin value1, WebSecurityOrigin value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebSecurityOrigin( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebSecurityOrigin alloc() {
			return new WebSecurityOrigin( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public NObjective.RuntimeObject domain() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.domain( Handle, CachedSelectors.domain, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithProtocol_domain_( NObjective.RuntimeObject protocol, NObjective.RuntimeObject domain ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithProtocol_domain_( Handle, CachedSelectors.initWithProtocol_domain_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), protocol, domain );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject initWithProtocol_domain_port_( NObjective.RuntimeObject protocol, NObjective.RuntimeObject domain, ushort port ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithProtocol_domain_port_( Handle, CachedSelectors.initWithProtocol_domain_port_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( ushort ), protocol, domain, port );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public ushort port() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.port( Handle, CachedSelectors.port, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject protocol() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.protocol( Handle, CachedSelectors.protocol, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public ulong quota() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.quota( Handle, CachedSelectors.quota, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void setQuota_( ulong quota ) {
			RuntimeObject ___occuredException;
			NativeMethods.setQuota_( Handle, CachedSelectors.setQuota_, out ___occuredException, sizeof( ulong ), quota );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public ulong usage() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.usage( Handle, CachedSelectors.usage, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr domain( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithProtocol_domain_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject protocol, NObjective.RuntimeObject domain );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithProtocol_domain_port_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject protocol, NObjective.RuntimeObject domain, ushort port );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ushort port( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr protocol( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ulong quota( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setQuota_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, ulong quota );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern ulong usage( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector domain = "domain";
			public static readonly Selector initWithProtocol_domain_ = "initWithProtocol:domain:";
			public static readonly Selector initWithProtocol_domain_port_ = "initWithProtocol:domain:port:";
			public static readonly Selector port = "port";
			public static readonly Selector protocol = "protocol";
			public static readonly Selector quota = "quota";
			public static readonly Selector setQuota_ = "setQuota:";
			public static readonly Selector usage = "usage";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebStringTruncator : IEquatable<WebStringTruncator> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebStringTruncator;
		public static implicit operator IntPtr( WebStringTruncator value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebStringTruncator value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebStringTruncator?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebStringTruncator value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebStringTruncator value1, WebStringTruncator value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebStringTruncator value1, WebStringTruncator value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebStringTruncator( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebStringTruncator alloc() {
			return new WebStringTruncator( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject centerTruncateString_toWidth_( NObjective.RuntimeObject @string, float toWidth ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.centerTruncateString_toWidth_( ClassHandle, CachedSelectors.centerTruncateString_toWidth_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( float ), @string, toWidth );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject centerTruncateString_toWidth_withFont_( NObjective.RuntimeObject @string, float toWidth, NObjective.RuntimeObject withFont ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.centerTruncateString_toWidth_withFont_( ClassHandle, CachedSelectors.centerTruncateString_toWidth_withFont_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( float ) + sizeof( NObjective.RuntimeObject ), @string, toWidth, withFont );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject rightTruncateString_toWidth_withFont_( NObjective.RuntimeObject @string, float toWidth, NObjective.RuntimeObject withFont ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rightTruncateString_toWidth_withFont_( ClassHandle, CachedSelectors.rightTruncateString_toWidth_withFont_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( float ) + sizeof( NObjective.RuntimeObject ), @string, toWidth, withFont );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static float widthOfString_font_( NObjective.RuntimeObject @string, NObjective.RuntimeObject font ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.widthOfString_font_( ClassHandle, CachedSelectors.widthOfString_font_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), @string, font );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr centerTruncateString_toWidth_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, float toWidth );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr centerTruncateString_toWidth_withFont_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, float toWidth, NObjective.RuntimeObject withFont );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rightTruncateString_toWidth_withFont_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, float toWidth, NObjective.RuntimeObject withFont );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float widthOfString_font_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string, NObjective.RuntimeObject font );
		}
		static internal class CachedSelectors {
			public static readonly Selector centerTruncateString_toWidth_ = "centerTruncateString:toWidth:";
			public static readonly Selector centerTruncateString_toWidth_withFont_ = "centerTruncateString:toWidth:withFont:";
			public static readonly Selector initialize = "initialize";
			public static readonly Selector rightTruncateString_toWidth_withFont_ = "rightTruncateString:toWidth:withFont:";
			public static readonly Selector widthOfString_font_ = "widthOfString:font:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebTextCompleteController : IEquatable<WebTextCompleteController> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebTextCompleteController;
		public static implicit operator IntPtr( WebTextCompleteController value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebTextCompleteController value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebTextCompleteController?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebTextCompleteController value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebTextCompleteController value1, WebTextCompleteController value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebTextCompleteController value1, WebTextCompleteController value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebTextCompleteController( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebTextCompleteController alloc() {
			return new WebTextCompleteController( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void doCompletion() {
			RuntimeObject ___occuredException;
			NativeMethods.doCompletion( Handle, CachedSelectors.doCompletion, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void endRevertingChange_moveLeft_( char change, char moveLeft ) {
			RuntimeObject ___occuredException;
			NativeMethods.endRevertingChange_moveLeft_( Handle, CachedSelectors.endRevertingChange_moveLeft_, out ___occuredException, sizeof( char ) + sizeof( char ), change, moveLeft );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char filterKeyDown_( NObjective.RuntimeObject down ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.filterKeyDown_( Handle, CachedSelectors.filterKeyDown_, out ___occuredException, sizeof( NObjective.RuntimeObject ), down );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject initWithHTMLView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.initWithHTMLView_( Handle, CachedSelectors.initWithHTMLView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public int numberOfRowsInTableView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.numberOfRowsInTableView_( Handle, CachedSelectors.numberOfRowsInTableView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char popupWindowIsOpen() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.popupWindowIsOpen( Handle, CachedSelectors.popupWindowIsOpen, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void tableAction_( NObjective.RuntimeObject action ) {
			RuntimeObject ___occuredException;
			NativeMethods.tableAction_( Handle, CachedSelectors.tableAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject tableView_objectValueForTableColumn_row_( NObjective.RuntimeObject view, NObjective.RuntimeObject objectValueForTableColumn, int row ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tableView_objectValueForTableColumn_row_( Handle, CachedSelectors.tableView_objectValueForTableColumn_row_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( int ), view, objectValueForTableColumn, row );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void tableViewSelectionDidChange_( NObjective.RuntimeObject change ) {
			RuntimeObject ___occuredException;
			NativeMethods.tableViewSelectionDidChange_( Handle, CachedSelectors.tableViewSelectionDidChange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), change );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void doCompletion( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void endRevertingChange_moveLeft_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char change, char moveLeft );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char filterKeyDown_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject down );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithHTMLView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int numberOfRowsInTableView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char popupWindowIsOpen( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void tableAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject action );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr tableView_objectValueForTableColumn_row_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view, NObjective.RuntimeObject objectValueForTableColumn, int row );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void tableViewSelectionDidChange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject change );
		}
		static internal class CachedSelectors {
			public static readonly Selector doCompletion = "doCompletion";
			public static readonly Selector endRevertingChange_moveLeft_ = "endRevertingChange:moveLeft:";
			public static readonly Selector filterKeyDown_ = "filterKeyDown:";
			public static readonly Selector initWithHTMLView_ = "initWithHTMLView:";
			public static readonly Selector numberOfRowsInTableView_ = "numberOfRowsInTableView:";
			public static readonly Selector popupWindowIsOpen = "popupWindowIsOpen";
			public static readonly Selector tableAction_ = "tableAction:";
			public static readonly Selector tableView_objectValueForTableColumn_row_ = "tableView:objectValueForTableColumn:row:";
			public static readonly Selector tableViewSelectionDidChange_ = "tableViewSelectionDidChange:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebUnarchivingState : IEquatable<WebUnarchivingState> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebUnarchivingState;
		public static implicit operator IntPtr( WebUnarchivingState value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebUnarchivingState value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebUnarchivingState?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebUnarchivingState value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebUnarchivingState value1, WebUnarchivingState value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebUnarchivingState value1, WebUnarchivingState value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebUnarchivingState( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebUnarchivingState alloc() {
			return new WebUnarchivingState( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void addArchive_( NObjective.RuntimeObject archive ) {
			RuntimeObject ___occuredException;
			NativeMethods.addArchive_( Handle, CachedSelectors.addArchive_, out ___occuredException, sizeof( NObjective.RuntimeObject ), archive );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void addResource_( NObjective.RuntimeObject resource ) {
			RuntimeObject ___occuredException;
			NativeMethods.addResource_( Handle, CachedSelectors.addResource_, out ___occuredException, sizeof( NObjective.RuntimeObject ), resource );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject archivedResourceForURL_( NObjective.RuntimeObject url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.archivedResourceForURL_( Handle, CachedSelectors.archivedResourceForURL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject popSubframeArchiveWithFrameName_( NObjective.RuntimeObject name ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.popSubframeArchiveWithFrameName_( Handle, CachedSelectors.popSubframeArchiveWithFrameName_, out ___occuredException, sizeof( NObjective.RuntimeObject ), name );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addArchive_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject archive );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addResource_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject resource );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr archivedResourceForURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr popSubframeArchiveWithFrameName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name );
		}
		static internal class CachedSelectors {
			public static readonly Selector addArchive_ = "addArchive:";
			public static readonly Selector addResource_ = "addResource:";
			public static readonly Selector archivedResourceForURL_ = "archivedResourceForURL:";
			public static readonly Selector popSubframeArchiveWithFrameName_ = "popSubframeArchiveWithFrameName:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebURLsWithTitles : IEquatable<WebURLsWithTitles> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebURLsWithTitles;
		public static implicit operator IntPtr( WebURLsWithTitles value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebURLsWithTitles value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebURLsWithTitles?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebURLsWithTitles value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebURLsWithTitles value1, WebURLsWithTitles value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebURLsWithTitles value1, WebURLsWithTitles value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebURLsWithTitles( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebURLsWithTitles alloc() {
			return new WebURLsWithTitles( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static NObjective.RuntimeObject arrayWithIFURLsWithTitlesPboardType() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.arrayWithIFURLsWithTitlesPboardType( ClassHandle, CachedSelectors.arrayWithIFURLsWithTitlesPboardType, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject titlesFromPasteboard_( NObjective.RuntimeObject pasteboard ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.titlesFromPasteboard_( ClassHandle, CachedSelectors.titlesFromPasteboard_, out ___occuredException, sizeof( NObjective.RuntimeObject ), pasteboard );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NObjective.RuntimeObject URLsFromPasteboard_( NObjective.RuntimeObject pasteboard ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.URLsFromPasteboard_( ClassHandle, CachedSelectors.URLsFromPasteboard_, out ___occuredException, sizeof( NObjective.RuntimeObject ), pasteboard );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static void writeURLs_andTitles_toPasteboard_( NObjective.RuntimeObject ls, NObjective.RuntimeObject andTitles, NObjective.RuntimeObject toPasteboard ) {
			RuntimeObject ___occuredException;
			NativeMethods.writeURLs_andTitles_toPasteboard_( ClassHandle, CachedSelectors.writeURLs_andTitles_toPasteboard_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), ls, andTitles, toPasteboard );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr arrayWithIFURLsWithTitlesPboardType( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr titlesFromPasteboard_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject pasteboard );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr URLsFromPasteboard_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject pasteboard );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void writeURLs_andTitles_toPasteboard_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ls, NObjective.RuntimeObject andTitles, NObjective.RuntimeObject toPasteboard );
		}
		static internal class CachedSelectors {
			public static readonly Selector arrayWithIFURLsWithTitlesPboardType = "arrayWithIFURLsWithTitlesPboardType";
			public static readonly Selector titlesFromPasteboard_ = "titlesFromPasteboard:";
			public static readonly Selector URLsFromPasteboard_ = "URLsFromPasteboard:";
			public static readonly Selector writeURLs_andTitles_toPasteboard_ = "writeURLs:andTitles:toPasteboard:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSView ) )]
	public struct WebView : IEquatable<WebView> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebView;
		public static implicit operator IntPtr( WebView value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebView value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebView?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebView value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebView value1, WebView value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebView value1, WebView value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebView( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebView alloc() {
			return new WebView( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static char automaticallyNotifiesObserversForKey_( NObjective.RuntimeObject key ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.automaticallyNotifiesObserversForKey_( ClassHandle, CachedSelectors.automaticallyNotifiesObserversForKey_, out ___occuredException, sizeof( NObjective.RuntimeObject ), key );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static char canShowFile_( NObjective.RuntimeObject file ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canShowFile_( ClassHandle, CachedSelectors.canShowFile_, out ___occuredException, sizeof( NObjective.RuntimeObject ), file );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static bool canShowMIMEType_( string type ) {
			RuntimeObject ___occuredException;
			var ___wrappedtype = Runtime.CreateStringProxy( type );
			var ___result = NativeMethods.canShowMIMEType_( ClassHandle, CachedSelectors.canShowMIMEType_, out ___occuredException, sizeof( IntPtr ), ___wrappedtype );
			Runtime.ReleaseNativeObject( ___wrappedtype );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static bool canShowMIMETypeAsHTML_( string html ) {
			RuntimeObject ___occuredException;
			var ___wrappedhtml = Runtime.CreateStringProxy( html );
			var ___result = NativeMethods.canShowMIMETypeAsHTML_( ClassHandle, CachedSelectors.canShowMIMETypeAsHTML_, out ___occuredException, sizeof( IntPtr ), ___wrappedhtml );
			Runtime.ReleaseNativeObject( ___wrappedhtml );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static NSArray MIMETypesShownAsHTML() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.MIMETypesShownAsHTML( ClassHandle, CachedSelectors.MIMETypesShownAsHTML, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public static void registerURLSchemeAsLocal_( string local ) {
			RuntimeObject ___occuredException;
			var ___wrappedlocal = Runtime.CreateStringProxy( local );
			NativeMethods.registerURLSchemeAsLocal_( ClassHandle, CachedSelectors.registerURLSchemeAsLocal_, out ___occuredException, sizeof( IntPtr ), ___wrappedlocal );
			Runtime.ReleaseNativeObject( ___wrappedlocal );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void registerViewClass_representationClass_forMIMEType_( NObjective.RuntimeClass @class, NObjective.RuntimeClass representationClass, string forMIMEType ) {
			RuntimeObject ___occuredException;
			var ___wrappedforMIMEType = Runtime.CreateStringProxy( forMIMEType );
			NativeMethods.registerViewClass_representationClass_forMIMEType_( ClassHandle, CachedSelectors.registerViewClass_representationClass_forMIMEType_, out ___occuredException, sizeof( NObjective.RuntimeClass ) + sizeof( NObjective.RuntimeClass ) + sizeof( IntPtr ), @class, representationClass, ___wrappedforMIMEType );
			Runtime.ReleaseNativeObject( ___wrappedforMIMEType );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void setMIMETypesShownAsHTML_( NSArray html ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMIMETypesShownAsHTML_( ClassHandle, CachedSelectors.setMIMETypesShownAsHTML_, out ___occuredException, sizeof( NSArray ), html );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static NObjective.RuntimeObject suggestedFileExtensionForMIMEType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.suggestedFileExtensionForMIMEType_( ClassHandle, CachedSelectors.suggestedFileExtensionForMIMEType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static NSURL URLFromPasteboard_( NSPasteboard pasteboard ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.URLFromPasteboard_( ClassHandle, CachedSelectors.URLFromPasteboard_, out ___occuredException, sizeof( NSPasteboard ), pasteboard );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURL( ___result );
		}
		unsafe public static string URLTitleFromPasteboard_( NSPasteboard pasteboard ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.URLTitleFromPasteboard_( ClassHandle, CachedSelectors.URLTitleFromPasteboard_, out ___occuredException, sizeof( NSPasteboard ), pasteboard );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void addObserver_forKeyPath_options_context_( NObjective.RuntimeObject observer, NObjective.RuntimeObject forKeyPath, uint options, System.IntPtr context ) {
			RuntimeObject ___occuredException;
			NativeMethods.addObserver_forKeyPath_options_context_( Handle, CachedSelectors.addObserver_forKeyPath_options_context_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ) + sizeof( System.IntPtr ), observer, forKeyPath, options, context );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject aeDescByEvaluatingJavaScriptFromString_( NObjective.RuntimeObject @string ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.aeDescByEvaluatingJavaScriptFromString_( Handle, CachedSelectors.aeDescByEvaluatingJavaScriptFromString_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @string );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void alignCenter_( NObjective.RuntimeObject center ) {
			RuntimeObject ___occuredException;
			NativeMethods.alignCenter_( Handle, CachedSelectors.alignCenter_, out ___occuredException, sizeof( NObjective.RuntimeObject ), center );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void alignJustified_( NObjective.RuntimeObject justified ) {
			RuntimeObject ___occuredException;
			NativeMethods.alignJustified_( Handle, CachedSelectors.alignJustified_, out ___occuredException, sizeof( NObjective.RuntimeObject ), justified );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void alignLeft_( NObjective.RuntimeObject left ) {
			RuntimeObject ___occuredException;
			NativeMethods.alignLeft_( Handle, CachedSelectors.alignLeft_, out ___occuredException, sizeof( NObjective.RuntimeObject ), left );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void alignRight_( NObjective.RuntimeObject right ) {
			RuntimeObject ___occuredException;
			NativeMethods.alignRight_( Handle, CachedSelectors.alignRight_, out ___occuredException, sizeof( NObjective.RuntimeObject ), right );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char allowsUndo() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.allowsUndo( Handle, CachedSelectors.allowsUndo, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char alwaysShowHorizontalScroller() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.alwaysShowHorizontalScroller( Handle, CachedSelectors.alwaysShowHorizontalScroller, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char alwaysShowVerticalScroller() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.alwaysShowVerticalScroller( Handle, CachedSelectors.alwaysShowVerticalScroller, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string applicationNameForUserAgent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.applicationNameForUserAgent( Handle, CachedSelectors.applicationNameForUserAgent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void applyStyle_( DOMCSSStyleDeclaration style ) {
			RuntimeObject ___occuredException;
			NativeMethods.applyStyle_( Handle, CachedSelectors.applyStyle_, out ___occuredException, sizeof( DOMCSSStyleDeclaration ), style );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public WebBackForwardList backForwardList() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backForwardList( Handle, CachedSelectors.backForwardList, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebBackForwardList( ___result );
		}
		unsafe public NObjective.RuntimeObject backgroundColor() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.backgroundColor( Handle, CachedSelectors.backgroundColor, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool canGoBack() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canGoBack( Handle, CachedSelectors.canGoBack, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool canGoForward() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canGoForward( Handle, CachedSelectors.canGoForward, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool canMakeTextLarger() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canMakeTextLarger( Handle, CachedSelectors.canMakeTextLarger, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool canMakeTextSmaller() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canMakeTextSmaller( Handle, CachedSelectors.canMakeTextSmaller, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool canMakeTextStandardSize() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canMakeTextStandardSize( Handle, CachedSelectors.canMakeTextStandardSize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char canMarkAllTextMatches() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.canMarkAllTextMatches( Handle, CachedSelectors.canMarkAllTextMatches, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void capitalizeWord_( NObjective.RuntimeObject word ) {
			RuntimeObject ___occuredException;
			NativeMethods.capitalizeWord_( Handle, CachedSelectors.capitalizeWord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), word );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void centerSelectionInVisibleArea_( NObjective.RuntimeObject area ) {
			RuntimeObject ___occuredException;
			NativeMethods.centerSelectionInVisibleArea_( Handle, CachedSelectors.centerSelectionInVisibleArea_, out ___occuredException, sizeof( NObjective.RuntimeObject ), area );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changeAttributes_( NObjective.RuntimeObject attributes ) {
			RuntimeObject ___occuredException;
			NativeMethods.changeAttributes_( Handle, CachedSelectors.changeAttributes_, out ___occuredException, sizeof( NObjective.RuntimeObject ), attributes );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changeBaseWritingDirection_( NObjective.RuntimeObject direction ) {
			RuntimeObject ___occuredException;
			NativeMethods.changeBaseWritingDirection_( Handle, CachedSelectors.changeBaseWritingDirection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), direction );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changeBaseWritingDirectionToLTR_( NObjective.RuntimeObject ltr ) {
			RuntimeObject ___occuredException;
			NativeMethods.changeBaseWritingDirectionToLTR_( Handle, CachedSelectors.changeBaseWritingDirectionToLTR_, out ___occuredException, sizeof( NObjective.RuntimeObject ), ltr );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changeBaseWritingDirectionToRTL_( NObjective.RuntimeObject rtl ) {
			RuntimeObject ___occuredException;
			NativeMethods.changeBaseWritingDirectionToRTL_( Handle, CachedSelectors.changeBaseWritingDirectionToRTL_, out ___occuredException, sizeof( NObjective.RuntimeObject ), rtl );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changeColor_( NObjective.RuntimeObject color ) {
			RuntimeObject ___occuredException;
			NativeMethods.changeColor_( Handle, CachedSelectors.changeColor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), color );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changeDocumentBackgroundColor_( NObjective.RuntimeObject color ) {
			RuntimeObject ___occuredException;
			NativeMethods.changeDocumentBackgroundColor_( Handle, CachedSelectors.changeDocumentBackgroundColor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), color );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changeFont_( NObjective.RuntimeObject font ) {
			RuntimeObject ___occuredException;
			NativeMethods.changeFont_( Handle, CachedSelectors.changeFont_, out ___occuredException, sizeof( NObjective.RuntimeObject ), font );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void changeSpelling_( NObjective.RuntimeObject spelling ) {
			RuntimeObject ___occuredException;
			NativeMethods.changeSpelling_( Handle, CachedSelectors.changeSpelling_, out ___occuredException, sizeof( NObjective.RuntimeObject ), spelling );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void checkSpelling_( NObjective.RuntimeObject spelling ) {
			RuntimeObject ___occuredException;
			NativeMethods.checkSpelling_( Handle, CachedSelectors.checkSpelling_, out ___occuredException, sizeof( NObjective.RuntimeObject ), spelling );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void close() {
			RuntimeObject ___occuredException;
			NativeMethods.close( Handle, CachedSelectors.close, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void complete_( NObjective.RuntimeObject complete ) {
			RuntimeObject ___occuredException;
			NativeMethods.complete_( Handle, CachedSelectors.complete_, out ___occuredException, sizeof( NObjective.RuntimeObject ), complete );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public DOMCSSStyleDeclaration computedStyleForElement_pseudoElement_( DOMElement element, string pseudoElement ) {
			RuntimeObject ___occuredException;
			var ___wrappedpseudoElement = Runtime.CreateStringProxy( pseudoElement );
			var ___result = NativeMethods.computedStyleForElement_pseudoElement_( Handle, CachedSelectors.computedStyleForElement_pseudoElement_, out ___occuredException, sizeof( DOMElement ) + sizeof( IntPtr ), element, ___wrappedpseudoElement );
			Runtime.ReleaseNativeObject( ___wrappedpseudoElement );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMCSSStyleDeclaration( ___result );
		}
		unsafe public void copy_( NObjective.RuntimeObject copy ) {
			RuntimeObject ___occuredException;
			NativeMethods.copy_( Handle, CachedSelectors.copy_, out ___occuredException, sizeof( NObjective.RuntimeObject ), copy );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void copyFont_( NObjective.RuntimeObject font ) {
			RuntimeObject ___occuredException;
			NativeMethods.copyFont_( Handle, CachedSelectors.copyFont_, out ___occuredException, sizeof( NObjective.RuntimeObject ), font );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string customTextEncodingName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.customTextEncodingName( Handle, CachedSelectors.customTextEncodingName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string customUserAgent() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.customUserAgent( Handle, CachedSelectors.customUserAgent, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void cut_( NObjective.RuntimeObject cut ) {
			RuntimeObject ___occuredException;
			NativeMethods.cut_( Handle, CachedSelectors.cut_, out ___occuredException, sizeof( NObjective.RuntimeObject ), cut );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char defersCallbacks() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defersCallbacks( Handle, CachedSelectors.defersCallbacks, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void delete_( NObjective.RuntimeObject delete ) {
			RuntimeObject ___occuredException;
			NativeMethods.delete_( Handle, CachedSelectors.delete_, out ___occuredException, sizeof( NObjective.RuntimeObject ), delete );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteBackward_( NObjective.RuntimeObject backward ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteBackward_( Handle, CachedSelectors.deleteBackward_, out ___occuredException, sizeof( NObjective.RuntimeObject ), backward );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteBackwardByDecomposingPreviousCharacter_( NObjective.RuntimeObject character ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteBackwardByDecomposingPreviousCharacter_( Handle, CachedSelectors.deleteBackwardByDecomposingPreviousCharacter_, out ___occuredException, sizeof( NObjective.RuntimeObject ), character );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteForward_( NObjective.RuntimeObject forward ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteForward_( Handle, CachedSelectors.deleteForward_, out ___occuredException, sizeof( NObjective.RuntimeObject ), forward );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteSelection() {
			RuntimeObject ___occuredException;
			NativeMethods.deleteSelection( Handle, CachedSelectors.deleteSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteToBeginningOfLine_( NObjective.RuntimeObject line ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteToBeginningOfLine_( Handle, CachedSelectors.deleteToBeginningOfLine_, out ___occuredException, sizeof( NObjective.RuntimeObject ), line );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteToBeginningOfParagraph_( NObjective.RuntimeObject paragraph ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteToBeginningOfParagraph_( Handle, CachedSelectors.deleteToBeginningOfParagraph_, out ___occuredException, sizeof( NObjective.RuntimeObject ), paragraph );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteToEndOfLine_( NObjective.RuntimeObject line ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteToEndOfLine_( Handle, CachedSelectors.deleteToEndOfLine_, out ___occuredException, sizeof( NObjective.RuntimeObject ), line );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteToEndOfParagraph_( NObjective.RuntimeObject paragraph ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteToEndOfParagraph_( Handle, CachedSelectors.deleteToEndOfParagraph_, out ___occuredException, sizeof( NObjective.RuntimeObject ), paragraph );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteToMark_( NObjective.RuntimeObject mark ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteToMark_( Handle, CachedSelectors.deleteToMark_, out ___occuredException, sizeof( NObjective.RuntimeObject ), mark );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteWordBackward_( NObjective.RuntimeObject backward ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteWordBackward_( Handle, CachedSelectors.deleteWordBackward_, out ___occuredException, sizeof( NObjective.RuntimeObject ), backward );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void deleteWordForward_( NObjective.RuntimeObject forward ) {
			RuntimeObject ___occuredException;
			NativeMethods.deleteWordForward_( Handle, CachedSelectors.deleteWordForward_, out ___occuredException, sizeof( NObjective.RuntimeObject ), forward );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject downloadDelegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.downloadDelegate( Handle, CachedSelectors.downloadDelegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool drawsBackground() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.drawsBackground( Handle, CachedSelectors.drawsBackground, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public DOMRange editableDOMRangeForPoint_( _NSPoint point ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.editableDOMRangeForPoint_( Handle, CachedSelectors.editableDOMRangeForPoint_, out ___occuredException, sizeof( _NSPoint ), point );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMRange( ___result );
		}
		unsafe public NObjective.RuntimeObject editingDelegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.editingDelegate( Handle, CachedSelectors.editingDelegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NSDictionary elementAtPoint_( _NSPoint point ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.elementAtPoint_( Handle, CachedSelectors.elementAtPoint_, out ___occuredException, sizeof( _NSPoint ), point );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSDictionary( ___result );
		}
		unsafe public double estimatedProgress() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.estimatedProgress( Handle, CachedSelectors.estimatedProgress, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject frameLoadDelegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.frameLoadDelegate( Handle, CachedSelectors.frameLoadDelegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool goBack() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.goBack( Handle, CachedSelectors.goBack, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void goBack_( NObjective.RuntimeObject back ) {
			RuntimeObject ___occuredException;
			NativeMethods.goBack_( Handle, CachedSelectors.goBack_, out ___occuredException, sizeof( NObjective.RuntimeObject ), back );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool goForward() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.goForward( Handle, CachedSelectors.goForward, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void goForward_( NObjective.RuntimeObject forward ) {
			RuntimeObject ___occuredException;
			NativeMethods.goForward_( Handle, CachedSelectors.goForward_, out ___occuredException, sizeof( NObjective.RuntimeObject ), forward );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool goToBackForwardItem_( WebHistoryItem item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.goToBackForwardItem_( Handle, CachedSelectors.goToBackForwardItem_, out ___occuredException, sizeof( WebHistoryItem ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public string groupName() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.groupName( Handle, CachedSelectors.groupName, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void handleAuthenticationForResource_challenge_fromDataSource_( NObjective.RuntimeObject resource, NObjective.RuntimeObject challenge, NObjective.RuntimeObject fromDataSource ) {
			RuntimeObject ___occuredException;
			NativeMethods.handleAuthenticationForResource_challenge_fromDataSource_( Handle, CachedSelectors.handleAuthenticationForResource_challenge_fromDataSource_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), resource, challenge, fromDataSource );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSWindow hostWindow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.hostWindow( Handle, CachedSelectors.hostWindow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSWindow( ___result );
		}
		unsafe public void ignoreSpelling_( NObjective.RuntimeObject spelling ) {
			RuntimeObject ___occuredException;
			NativeMethods.ignoreSpelling_( Handle, CachedSelectors.ignoreSpelling_, out ___occuredException, sizeof( NObjective.RuntimeObject ), spelling );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void indent_( NObjective.RuntimeObject indent ) {
			RuntimeObject ___occuredException;
			NativeMethods.indent_( Handle, CachedSelectors.indent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), indent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject initWithFrame_frameName_groupName_( _NSRect frame, string frameName, string groupName ) {
			RuntimeObject ___occuredException;
			var ___wrappedframeName = Runtime.CreateStringProxy( frameName );
			var ___wrappedgroupName = Runtime.CreateStringProxy( groupName );
			var ___result = NativeMethods.initWithFrame_frameName_groupName_( Handle, CachedSelectors.initWithFrame_frameName_groupName_, out ___occuredException, sizeof( _NSRect ) + sizeof( IntPtr ) + sizeof( IntPtr ), frame, ___wrappedframeName, ___wrappedgroupName );
			Runtime.ReleaseNativeObject( ___wrappedframeName );
			Runtime.ReleaseNativeObject( ___wrappedgroupName );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void insertBacktab_( NObjective.RuntimeObject backtab ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertBacktab_( Handle, CachedSelectors.insertBacktab_, out ___occuredException, sizeof( NObjective.RuntimeObject ), backtab );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void insertLineBreak_( NObjective.RuntimeObject @break ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertLineBreak_( Handle, CachedSelectors.insertLineBreak_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @break );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void insertNewline_( NObjective.RuntimeObject newline ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertNewline_( Handle, CachedSelectors.insertNewline_, out ___occuredException, sizeof( NObjective.RuntimeObject ), newline );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void insertNewlineIgnoringFieldEditor_( NObjective.RuntimeObject editor ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertNewlineIgnoringFieldEditor_( Handle, CachedSelectors.insertNewlineIgnoringFieldEditor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), editor );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void insertParagraphSeparator_( NObjective.RuntimeObject separator ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertParagraphSeparator_( Handle, CachedSelectors.insertParagraphSeparator_, out ___occuredException, sizeof( NObjective.RuntimeObject ), separator );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void insertTab_( NObjective.RuntimeObject tab ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertTab_( Handle, CachedSelectors.insertTab_, out ___occuredException, sizeof( NObjective.RuntimeObject ), tab );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void insertTabIgnoringFieldEditor_( NObjective.RuntimeObject editor ) {
			RuntimeObject ___occuredException;
			NativeMethods.insertTabIgnoringFieldEditor_( Handle, CachedSelectors.insertTabIgnoringFieldEditor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), editor );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject inspector() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.inspector( Handle, CachedSelectors.inspector, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public bool isContinuousSpellCheckingEnabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isContinuousSpellCheckingEnabled( Handle, CachedSelectors.isContinuousSpellCheckingEnabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isEditable() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isEditable( Handle, CachedSelectors.isEditable, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isGrammarCheckingEnabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isGrammarCheckingEnabled( Handle, CachedSelectors.isGrammarCheckingEnabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isHoverFeedbackSuspended() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isHoverFeedbackSuspended( Handle, CachedSelectors.isHoverFeedbackSuspended, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool isLoading() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isLoading( Handle, CachedSelectors.isLoading, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void lowercaseWord_( NObjective.RuntimeObject word ) {
			RuntimeObject ___occuredException;
			NativeMethods.lowercaseWord_( Handle, CachedSelectors.lowercaseWord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), word );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public WebFrame mainFrame() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mainFrame( Handle, CachedSelectors.mainFrame, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebFrame( ___result );
		}
		unsafe public DOMDocument mainFrameDocument() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mainFrameDocument( Handle, CachedSelectors.mainFrameDocument, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMDocument( ___result );
		}
		unsafe public NSImage mainFrameIcon() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mainFrameIcon( Handle, CachedSelectors.mainFrameIcon, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSImage( ___result );
		}
		unsafe public string mainFrameTitle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mainFrameTitle( Handle, CachedSelectors.mainFrameTitle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public string mainFrameURL() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mainFrameURL( Handle, CachedSelectors.mainFrameURL, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public bool maintainsInactiveSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.maintainsInactiveSelection( Handle, CachedSelectors.maintainsInactiveSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void makeTextLarger_( NObjective.RuntimeObject larger ) {
			RuntimeObject ___occuredException;
			NativeMethods.makeTextLarger_( Handle, CachedSelectors.makeTextLarger_, out ___occuredException, sizeof( NObjective.RuntimeObject ), larger );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void makeTextSmaller_( NObjective.RuntimeObject smaller ) {
			RuntimeObject ___occuredException;
			NativeMethods.makeTextSmaller_( Handle, CachedSelectors.makeTextSmaller_, out ___occuredException, sizeof( NObjective.RuntimeObject ), smaller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void makeTextStandardSize_( NObjective.RuntimeObject size ) {
			RuntimeObject ___occuredException;
			NativeMethods.makeTextStandardSize_( Handle, CachedSelectors.makeTextStandardSize_, out ___occuredException, sizeof( NObjective.RuntimeObject ), size );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public uint markAllMatchesForText_caseSensitive_highlight_limit_( NObjective.RuntimeObject text, char caseSensitive, char highlight, uint limit ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.markAllMatchesForText_caseSensitive_highlight_limit_( Handle, CachedSelectors.markAllMatchesForText_caseSensitive_highlight_limit_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ) + sizeof( uint ), text, caseSensitive, highlight, limit );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( uint ) ___result;
		}
		unsafe public string mediaStyle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.mediaStyle( Handle, CachedSelectors.mediaStyle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public void moveBackward_( NObjective.RuntimeObject backward ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveBackward_( Handle, CachedSelectors.moveBackward_, out ___occuredException, sizeof( NObjective.RuntimeObject ), backward );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveBackwardAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveBackwardAndModifySelection_( Handle, CachedSelectors.moveBackwardAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveDown_( NObjective.RuntimeObject down ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveDown_( Handle, CachedSelectors.moveDown_, out ___occuredException, sizeof( NObjective.RuntimeObject ), down );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveDownAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveDownAndModifySelection_( Handle, CachedSelectors.moveDownAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveDragCaretToPoint_( _NSPoint point ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveDragCaretToPoint_( Handle, CachedSelectors.moveDragCaretToPoint_, out ___occuredException, sizeof( _NSPoint ), point );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveForward_( NObjective.RuntimeObject forward ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveForward_( Handle, CachedSelectors.moveForward_, out ___occuredException, sizeof( NObjective.RuntimeObject ), forward );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveForwardAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveForwardAndModifySelection_( Handle, CachedSelectors.moveForwardAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveLeft_( NObjective.RuntimeObject left ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveLeft_( Handle, CachedSelectors.moveLeft_, out ___occuredException, sizeof( NObjective.RuntimeObject ), left );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveLeftAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveLeftAndModifySelection_( Handle, CachedSelectors.moveLeftAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveParagraphBackwardAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveParagraphBackwardAndModifySelection_( Handle, CachedSelectors.moveParagraphBackwardAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveParagraphForwardAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveParagraphForwardAndModifySelection_( Handle, CachedSelectors.moveParagraphForwardAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveRight_( NObjective.RuntimeObject right ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveRight_( Handle, CachedSelectors.moveRight_, out ___occuredException, sizeof( NObjective.RuntimeObject ), right );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveRightAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveRightAndModifySelection_( Handle, CachedSelectors.moveRightAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToBeginningOfDocument_( NObjective.RuntimeObject document ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToBeginningOfDocument_( Handle, CachedSelectors.moveToBeginningOfDocument_, out ___occuredException, sizeof( NObjective.RuntimeObject ), document );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToBeginningOfDocumentAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToBeginningOfDocumentAndModifySelection_( Handle, CachedSelectors.moveToBeginningOfDocumentAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToBeginningOfLine_( NObjective.RuntimeObject line ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToBeginningOfLine_( Handle, CachedSelectors.moveToBeginningOfLine_, out ___occuredException, sizeof( NObjective.RuntimeObject ), line );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToBeginningOfLineAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToBeginningOfLineAndModifySelection_( Handle, CachedSelectors.moveToBeginningOfLineAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToBeginningOfParagraph_( NObjective.RuntimeObject paragraph ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToBeginningOfParagraph_( Handle, CachedSelectors.moveToBeginningOfParagraph_, out ___occuredException, sizeof( NObjective.RuntimeObject ), paragraph );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToBeginningOfParagraphAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToBeginningOfParagraphAndModifySelection_( Handle, CachedSelectors.moveToBeginningOfParagraphAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToBeginningOfSentence_( NObjective.RuntimeObject sentence ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToBeginningOfSentence_( Handle, CachedSelectors.moveToBeginningOfSentence_, out ___occuredException, sizeof( NObjective.RuntimeObject ), sentence );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToBeginningOfSentenceAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToBeginningOfSentenceAndModifySelection_( Handle, CachedSelectors.moveToBeginningOfSentenceAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToEndOfDocument_( NObjective.RuntimeObject document ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToEndOfDocument_( Handle, CachedSelectors.moveToEndOfDocument_, out ___occuredException, sizeof( NObjective.RuntimeObject ), document );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToEndOfDocumentAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToEndOfDocumentAndModifySelection_( Handle, CachedSelectors.moveToEndOfDocumentAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToEndOfLine_( NObjective.RuntimeObject line ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToEndOfLine_( Handle, CachedSelectors.moveToEndOfLine_, out ___occuredException, sizeof( NObjective.RuntimeObject ), line );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToEndOfLineAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToEndOfLineAndModifySelection_( Handle, CachedSelectors.moveToEndOfLineAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToEndOfParagraph_( NObjective.RuntimeObject paragraph ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToEndOfParagraph_( Handle, CachedSelectors.moveToEndOfParagraph_, out ___occuredException, sizeof( NObjective.RuntimeObject ), paragraph );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToEndOfParagraphAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToEndOfParagraphAndModifySelection_( Handle, CachedSelectors.moveToEndOfParagraphAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToEndOfSentence_( NObjective.RuntimeObject sentence ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToEndOfSentence_( Handle, CachedSelectors.moveToEndOfSentence_, out ___occuredException, sizeof( NObjective.RuntimeObject ), sentence );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveToEndOfSentenceAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveToEndOfSentenceAndModifySelection_( Handle, CachedSelectors.moveToEndOfSentenceAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveUp_( NObjective.RuntimeObject up ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveUp_( Handle, CachedSelectors.moveUp_, out ___occuredException, sizeof( NObjective.RuntimeObject ), up );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveUpAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveUpAndModifySelection_( Handle, CachedSelectors.moveUpAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveWordBackward_( NObjective.RuntimeObject backward ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveWordBackward_( Handle, CachedSelectors.moveWordBackward_, out ___occuredException, sizeof( NObjective.RuntimeObject ), backward );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveWordBackwardAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveWordBackwardAndModifySelection_( Handle, CachedSelectors.moveWordBackwardAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveWordForward_( NObjective.RuntimeObject forward ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveWordForward_( Handle, CachedSelectors.moveWordForward_, out ___occuredException, sizeof( NObjective.RuntimeObject ), forward );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveWordForwardAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveWordForwardAndModifySelection_( Handle, CachedSelectors.moveWordForwardAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveWordLeft_( NObjective.RuntimeObject left ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveWordLeft_( Handle, CachedSelectors.moveWordLeft_, out ___occuredException, sizeof( NObjective.RuntimeObject ), left );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveWordLeftAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveWordLeftAndModifySelection_( Handle, CachedSelectors.moveWordLeftAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveWordRight_( NObjective.RuntimeObject right ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveWordRight_( Handle, CachedSelectors.moveWordRight_, out ___occuredException, sizeof( NObjective.RuntimeObject ), right );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void moveWordRightAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.moveWordRightAndModifySelection_( Handle, CachedSelectors.moveWordRightAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public System.IntPtr observationInfo() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.observationInfo( Handle, CachedSelectors.observationInfo, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void outdent_( NObjective.RuntimeObject outdent ) {
			RuntimeObject ___occuredException;
			NativeMethods.outdent_( Handle, CachedSelectors.outdent_, out ___occuredException, sizeof( NObjective.RuntimeObject ), outdent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void pageDown_( NObjective.RuntimeObject down ) {
			RuntimeObject ___occuredException;
			NativeMethods.pageDown_( Handle, CachedSelectors.pageDown_, out ___occuredException, sizeof( NObjective.RuntimeObject ), down );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void pageDownAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.pageDownAndModifySelection_( Handle, CachedSelectors.pageDownAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void pageUp_( NObjective.RuntimeObject up ) {
			RuntimeObject ___occuredException;
			NativeMethods.pageUp_( Handle, CachedSelectors.pageUp_, out ___occuredException, sizeof( NObjective.RuntimeObject ), up );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void pageUpAndModifySelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.pageUpAndModifySelection_( Handle, CachedSelectors.pageUpAndModifySelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void paste_( NObjective.RuntimeObject paste ) {
			RuntimeObject ___occuredException;
			NativeMethods.paste_( Handle, CachedSelectors.paste_, out ___occuredException, sizeof( NObjective.RuntimeObject ), paste );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void pasteAsPlainText_( NObjective.RuntimeObject text ) {
			RuntimeObject ___occuredException;
			NativeMethods.pasteAsPlainText_( Handle, CachedSelectors.pasteAsPlainText_, out ___occuredException, sizeof( NObjective.RuntimeObject ), text );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void pasteAsRichText_( NObjective.RuntimeObject text ) {
			RuntimeObject ___occuredException;
			NativeMethods.pasteAsRichText_( Handle, CachedSelectors.pasteAsRichText_, out ___occuredException, sizeof( NObjective.RuntimeObject ), text );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NSArray pasteboardTypesForElement_( NSDictionary element ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pasteboardTypesForElement_( Handle, CachedSelectors.pasteboardTypesForElement_, out ___occuredException, sizeof( NSDictionary ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public NSArray pasteboardTypesForSelection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pasteboardTypesForSelection( Handle, CachedSelectors.pasteboardTypesForSelection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSArray( ___result );
		}
		unsafe public void pasteFont_( NObjective.RuntimeObject font ) {
			RuntimeObject ___occuredException;
			NativeMethods.pasteFont_( Handle, CachedSelectors.pasteFont_, out ___occuredException, sizeof( NObjective.RuntimeObject ), font );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void performFindPanelAction_( NObjective.RuntimeObject action ) {
			RuntimeObject ___occuredException;
			NativeMethods.performFindPanelAction_( Handle, CachedSelectors.performFindPanelAction_, out ___occuredException, sizeof( NObjective.RuntimeObject ), action );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject policyDelegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.policyDelegate( Handle, CachedSelectors.policyDelegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public WebPreferences preferences() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.preferences( Handle, CachedSelectors.preferences, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebPreferences( ___result );
		}
		unsafe public string preferencesIdentifier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.preferencesIdentifier( Handle, CachedSelectors.preferencesIdentifier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public NObjective.RuntimeObject rectsForTextMatches() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.rectsForTextMatches( Handle, CachedSelectors.rectsForTextMatches, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void registerForEditingDelegateNotification_selector_( NObjective.RuntimeObject notification, NObjective.Selector selector ) {
			RuntimeObject ___occuredException;
			NativeMethods.registerForEditingDelegateNotification_selector_( Handle, CachedSelectors.registerForEditingDelegateNotification_selector_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ), notification, selector );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void reload_( NObjective.RuntimeObject reload ) {
			RuntimeObject ___occuredException;
			NativeMethods.reload_( Handle, CachedSelectors.reload_, out ___occuredException, sizeof( NObjective.RuntimeObject ), reload );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeDragCaret() {
			RuntimeObject ___occuredException;
			NativeMethods.removeDragCaret( Handle, CachedSelectors.removeDragCaret, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void removeObserver_forKeyPath_( NObjective.RuntimeObject observer, NObjective.RuntimeObject forKeyPath ) {
			RuntimeObject ___occuredException;
			NativeMethods.removeObserver_forKeyPath_( Handle, CachedSelectors.removeObserver_forKeyPath_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), observer, forKeyPath );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void replaceSelectionWithArchive_( WebArchive archive ) {
			RuntimeObject ___occuredException;
			NativeMethods.replaceSelectionWithArchive_( Handle, CachedSelectors.replaceSelectionWithArchive_, out ___occuredException, sizeof( WebArchive ), archive );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void replaceSelectionWithMarkupString_( string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			NativeMethods.replaceSelectionWithMarkupString_( Handle, CachedSelectors.replaceSelectionWithMarkupString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void replaceSelectionWithNode_( DOMNode node ) {
			RuntimeObject ___occuredException;
			NativeMethods.replaceSelectionWithNode_( Handle, CachedSelectors.replaceSelectionWithNode_, out ___occuredException, sizeof( DOMNode ), node );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void replaceSelectionWithText_( string text ) {
			RuntimeObject ___occuredException;
			var ___wrappedtext = Runtime.CreateStringProxy( text );
			NativeMethods.replaceSelectionWithText_( Handle, CachedSelectors.replaceSelectionWithText_, out ___occuredException, sizeof( IntPtr ), ___wrappedtext );
			Runtime.ReleaseNativeObject( ___wrappedtext );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject resourceLoadDelegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.resourceLoadDelegate( Handle, CachedSelectors.resourceLoadDelegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject scriptDebugDelegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.scriptDebugDelegate( Handle, CachedSelectors.scriptDebugDelegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void scrollDOMRangeToVisible_( NObjective.RuntimeObject visible ) {
			RuntimeObject ___occuredException;
			NativeMethods.scrollDOMRangeToVisible_( Handle, CachedSelectors.scrollDOMRangeToVisible_, out ___occuredException, sizeof( NObjective.RuntimeObject ), visible );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scrollLineDown_( NObjective.RuntimeObject down ) {
			RuntimeObject ___occuredException;
			NativeMethods.scrollLineDown_( Handle, CachedSelectors.scrollLineDown_, out ___occuredException, sizeof( NObjective.RuntimeObject ), down );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scrollLineUp_( NObjective.RuntimeObject up ) {
			RuntimeObject ___occuredException;
			NativeMethods.scrollLineUp_( Handle, CachedSelectors.scrollLineUp_, out ___occuredException, sizeof( NObjective.RuntimeObject ), up );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scrollPageDown_( NObjective.RuntimeObject down ) {
			RuntimeObject ___occuredException;
			NativeMethods.scrollPageDown_( Handle, CachedSelectors.scrollPageDown_, out ___occuredException, sizeof( NObjective.RuntimeObject ), down );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scrollPageUp_( NObjective.RuntimeObject up ) {
			RuntimeObject ___occuredException;
			NativeMethods.scrollPageUp_( Handle, CachedSelectors.scrollPageUp_, out ___occuredException, sizeof( NObjective.RuntimeObject ), up );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scrollToBeginningOfDocument_( NObjective.RuntimeObject document ) {
			RuntimeObject ___occuredException;
			NativeMethods.scrollToBeginningOfDocument_( Handle, CachedSelectors.scrollToBeginningOfDocument_, out ___occuredException, sizeof( NObjective.RuntimeObject ), document );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void scrollToEndOfDocument_( NObjective.RuntimeObject document ) {
			RuntimeObject ___occuredException;
			NativeMethods.scrollToEndOfDocument_( Handle, CachedSelectors.scrollToEndOfDocument_, out ___occuredException, sizeof( NObjective.RuntimeObject ), document );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool searchFor_direction_caseSensitive_wrap_( string @for, bool direction, bool caseSensitive, bool wrap ) {
			RuntimeObject ___occuredException;
			var ___wrappedfor = Runtime.CreateStringProxy( @for );
			var ___result = NativeMethods.searchFor_direction_caseSensitive_wrap_( Handle, CachedSelectors.searchFor_direction_caseSensitive_wrap_, out ___occuredException, sizeof( IntPtr ) + sizeof( bool ) + sizeof( bool ) + sizeof( bool ), ___wrappedfor, direction, caseSensitive, wrap );
			Runtime.ReleaseNativeObject( ___wrappedfor );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char searchFor_direction_caseSensitive_wrap_startInSelection_( NObjective.RuntimeObject @for, char direction, char caseSensitive, char wrap, char startInSelection ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchFor_direction_caseSensitive_wrap_startInSelection_( Handle, CachedSelectors.searchFor_direction_caseSensitive_wrap_startInSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( char ) + sizeof( char ) + sizeof( char ) + sizeof( char ), @for, direction, caseSensitive, wrap, startInSelection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void selectAll_( NObjective.RuntimeObject all ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectAll_( Handle, CachedSelectors.selectAll_, out ___occuredException, sizeof( NObjective.RuntimeObject ), all );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public DOMRange selectedDOMRange() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedDOMRange( Handle, CachedSelectors.selectedDOMRange, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMRange( ___result );
		}
		unsafe public WebFrame selectedFrame() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectedFrame( Handle, CachedSelectors.selectedFrame, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebFrame( ___result );
		}
		unsafe public NSSelectionAffinity selectionAffinity() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.selectionAffinity( Handle, CachedSelectors.selectionAffinity, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ( NSSelectionAffinity ) ___result;
		}
		unsafe public void selectLine_( NObjective.RuntimeObject line ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectLine_( Handle, CachedSelectors.selectLine_, out ___occuredException, sizeof( NObjective.RuntimeObject ), line );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectParagraph_( NObjective.RuntimeObject paragraph ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectParagraph_( Handle, CachedSelectors.selectParagraph_, out ___occuredException, sizeof( NObjective.RuntimeObject ), paragraph );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectSentence_( NObjective.RuntimeObject sentence ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectSentence_( Handle, CachedSelectors.selectSentence_, out ___occuredException, sizeof( NObjective.RuntimeObject ), sentence );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectToMark_( NObjective.RuntimeObject mark ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectToMark_( Handle, CachedSelectors.selectToMark_, out ___occuredException, sizeof( NObjective.RuntimeObject ), mark );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void selectWord_( NObjective.RuntimeObject word ) {
			RuntimeObject ___occuredException;
			NativeMethods.selectWord_( Handle, CachedSelectors.selectWord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), word );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAllowsUndo_( char undo ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAllowsUndo_( Handle, CachedSelectors.setAllowsUndo_, out ___occuredException, sizeof( char ), undo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAlwaysShowHorizontalScroller_( char scroller ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlwaysShowHorizontalScroller_( Handle, CachedSelectors.setAlwaysShowHorizontalScroller_, out ___occuredException, sizeof( char ), scroller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setAlwaysShowVerticalScroller_( char scroller ) {
			RuntimeObject ___occuredException;
			NativeMethods.setAlwaysShowVerticalScroller_( Handle, CachedSelectors.setAlwaysShowVerticalScroller_, out ___occuredException, sizeof( char ), scroller );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setApplicationNameForUserAgent_( string agent ) {
			RuntimeObject ___occuredException;
			var ___wrappedagent = Runtime.CreateStringProxy( agent );
			NativeMethods.setApplicationNameForUserAgent_( Handle, CachedSelectors.setApplicationNameForUserAgent_, out ___occuredException, sizeof( IntPtr ), ___wrappedagent );
			Runtime.ReleaseNativeObject( ___wrappedagent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setBackgroundColor_( NObjective.RuntimeObject color ) {
			RuntimeObject ___occuredException;
			NativeMethods.setBackgroundColor_( Handle, CachedSelectors.setBackgroundColor_, out ___occuredException, sizeof( NObjective.RuntimeObject ), color );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setContinuousSpellCheckingEnabled_( bool enabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setContinuousSpellCheckingEnabled_( Handle, CachedSelectors.setContinuousSpellCheckingEnabled_, out ___occuredException, sizeof( bool ), enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCustomTextEncodingName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			NativeMethods.setCustomTextEncodingName_( Handle, CachedSelectors.setCustomTextEncodingName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setCustomUserAgent_( string agent ) {
			RuntimeObject ___occuredException;
			var ___wrappedagent = Runtime.CreateStringProxy( agent );
			NativeMethods.setCustomUserAgent_( Handle, CachedSelectors.setCustomUserAgent_, out ___occuredException, sizeof( IntPtr ), ___wrappedagent );
			Runtime.ReleaseNativeObject( ___wrappedagent );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDefersCallbacks_( char callbacks ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDefersCallbacks_( Handle, CachedSelectors.setDefersCallbacks_, out ___occuredException, sizeof( char ), callbacks );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDownloadDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDownloadDelegate_( Handle, CachedSelectors.setDownloadDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setDrawsBackground_( bool background ) {
			RuntimeObject ___occuredException;
			NativeMethods.setDrawsBackground_( Handle, CachedSelectors.setDrawsBackground_, out ___occuredException, sizeof( bool ), background );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEditable_( bool editable ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEditable_( Handle, CachedSelectors.setEditable_, out ___occuredException, sizeof( bool ), editable );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setEditingDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setEditingDelegate_( Handle, CachedSelectors.setEditingDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setFrameLoadDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setFrameLoadDelegate_( Handle, CachedSelectors.setFrameLoadDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setGrammarCheckingEnabled_( char enabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setGrammarCheckingEnabled_( Handle, CachedSelectors.setGrammarCheckingEnabled_, out ___occuredException, sizeof( char ), enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setGroupName_( string name ) {
			RuntimeObject ___occuredException;
			var ___wrappedname = Runtime.CreateStringProxy( name );
			NativeMethods.setGroupName_( Handle, CachedSelectors.setGroupName_, out ___occuredException, sizeof( IntPtr ), ___wrappedname );
			Runtime.ReleaseNativeObject( ___wrappedname );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHostWindow_( NSWindow window ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHostWindow_( Handle, CachedSelectors.setHostWindow_, out ___occuredException, sizeof( NSWindow ), window );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setHoverFeedbackSuspended_( char suspended ) {
			RuntimeObject ___occuredException;
			NativeMethods.setHoverFeedbackSuspended_( Handle, CachedSelectors.setHoverFeedbackSuspended_, out ___occuredException, sizeof( char ), suspended );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMainFrameDocumentReady_( char ready ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMainFrameDocumentReady_( Handle, CachedSelectors.setMainFrameDocumentReady_, out ___occuredException, sizeof( char ), ready );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMainFrameURL_( string url ) {
			RuntimeObject ___occuredException;
			var ___wrappedurl = Runtime.CreateStringProxy( url );
			NativeMethods.setMainFrameURL_( Handle, CachedSelectors.setMainFrameURL_, out ___occuredException, sizeof( IntPtr ), ___wrappedurl );
			Runtime.ReleaseNativeObject( ___wrappedurl );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMaintainsBackForwardList_( bool list ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMaintainsBackForwardList_( Handle, CachedSelectors.setMaintainsBackForwardList_, out ___occuredException, sizeof( bool ), list );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMark_( NObjective.RuntimeObject mark ) {
			RuntimeObject ___occuredException;
			NativeMethods.setMark_( Handle, CachedSelectors.setMark_, out ___occuredException, sizeof( NObjective.RuntimeObject ), mark );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setMediaStyle_( string style ) {
			RuntimeObject ___occuredException;
			var ___wrappedstyle = Runtime.CreateStringProxy( style );
			NativeMethods.setMediaStyle_( Handle, CachedSelectors.setMediaStyle_, out ___occuredException, sizeof( IntPtr ), ___wrappedstyle );
			Runtime.ReleaseNativeObject( ___wrappedstyle );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setObservationInfo_( System.IntPtr info ) {
			RuntimeObject ___occuredException;
			NativeMethods.setObservationInfo_( Handle, CachedSelectors.setObservationInfo_, out ___occuredException, sizeof( System.IntPtr ), info );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPolicyDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPolicyDelegate_( Handle, CachedSelectors.setPolicyDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPreferences_( WebPreferences preferences ) {
			RuntimeObject ___occuredException;
			NativeMethods.setPreferences_( Handle, CachedSelectors.setPreferences_, out ___occuredException, sizeof( WebPreferences ), preferences );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setPreferencesIdentifier_( string identifier ) {
			RuntimeObject ___occuredException;
			var ___wrappedidentifier = Runtime.CreateStringProxy( identifier );
			NativeMethods.setPreferencesIdentifier_( Handle, CachedSelectors.setPreferencesIdentifier_, out ___occuredException, sizeof( IntPtr ), ___wrappedidentifier );
			Runtime.ReleaseNativeObject( ___wrappedidentifier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setProhibitsMainFrameScrolling_( char scrolling ) {
			RuntimeObject ___occuredException;
			NativeMethods.setProhibitsMainFrameScrolling_( Handle, CachedSelectors.setProhibitsMainFrameScrolling_, out ___occuredException, sizeof( char ), scrolling );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setResourceLoadDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setResourceLoadDelegate_( Handle, CachedSelectors.setResourceLoadDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setScriptDebugDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setScriptDebugDelegate_( Handle, CachedSelectors.setScriptDebugDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSelectedDOMRange_affinity_( DOMRange range, NSSelectionAffinity affinity ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSelectedDOMRange_affinity_( Handle, CachedSelectors.setSelectedDOMRange_affinity_, out ___occuredException, sizeof( DOMRange ) + sizeof( NSSelectionAffinity ), range, affinity );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setShouldCloseWithWindow_( bool window ) {
			RuntimeObject ___occuredException;
			NativeMethods.setShouldCloseWithWindow_( Handle, CachedSelectors.setShouldCloseWithWindow_, out ___occuredException, sizeof( bool ), window );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setSmartInsertDeleteEnabled_( bool enabled ) {
			RuntimeObject ___occuredException;
			NativeMethods.setSmartInsertDeleteEnabled_( Handle, CachedSelectors.setSmartInsertDeleteEnabled_, out ___occuredException, sizeof( bool ), enabled );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTabKeyCyclesThroughElements_( char elements ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTabKeyCyclesThroughElements_( Handle, CachedSelectors.setTabKeyCyclesThroughElements_, out ___occuredException, sizeof( char ), elements );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTextSizeMultiplier_( float multiplier ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTextSizeMultiplier_( Handle, CachedSelectors.setTextSizeMultiplier_, out ___occuredException, sizeof( float ), multiplier );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setTypingStyle_( DOMCSSStyleDeclaration style ) {
			RuntimeObject ___occuredException;
			NativeMethods.setTypingStyle_( Handle, CachedSelectors.setTypingStyle_, out ___occuredException, sizeof( DOMCSSStyleDeclaration ), style );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUIDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUIDelegate_( Handle, CachedSelectors.setUIDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void setUsesPageCache_( char cache ) {
			RuntimeObject ___occuredException;
			NativeMethods.setUsesPageCache_( Handle, CachedSelectors.setUsesPageCache_, out ___occuredException, sizeof( char ), cache );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool shouldClose() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shouldClose( Handle, CachedSelectors.shouldClose, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public bool shouldCloseWithWindow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.shouldCloseWithWindow( Handle, CachedSelectors.shouldCloseWithWindow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void showGuessPanel_( NObjective.RuntimeObject panel ) {
			RuntimeObject ___occuredException;
			NativeMethods.showGuessPanel_( Handle, CachedSelectors.showGuessPanel_, out ___occuredException, sizeof( NObjective.RuntimeObject ), panel );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool smartInsertDeleteEnabled() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.smartInsertDeleteEnabled( Handle, CachedSelectors.smartInsertDeleteEnabled, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public int spellCheckerDocumentTag() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.spellCheckerDocumentTag( Handle, CachedSelectors.spellCheckerDocumentTag, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void startSpeaking_( NObjective.RuntimeObject speaking ) {
			RuntimeObject ___occuredException;
			NativeMethods.startSpeaking_( Handle, CachedSelectors.startSpeaking_, out ___occuredException, sizeof( NObjective.RuntimeObject ), speaking );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void stopLoading_( NObjective.RuntimeObject loading ) {
			RuntimeObject ___occuredException;
			NativeMethods.stopLoading_( Handle, CachedSelectors.stopLoading_, out ___occuredException, sizeof( NObjective.RuntimeObject ), loading );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void stopSpeaking_( NObjective.RuntimeObject speaking ) {
			RuntimeObject ___occuredException;
			NativeMethods.stopSpeaking_( Handle, CachedSelectors.stopSpeaking_, out ___occuredException, sizeof( NObjective.RuntimeObject ), speaking );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string stringByEvaluatingJavaScriptFromString_( string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.stringByEvaluatingJavaScriptFromString_( Handle, CachedSelectors.stringByEvaluatingJavaScriptFromString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public DOMCSSStyleDeclaration styleDeclarationWithText_( string text ) {
			RuntimeObject ___occuredException;
			var ___wrappedtext = Runtime.CreateStringProxy( text );
			var ___result = NativeMethods.styleDeclarationWithText_( Handle, CachedSelectors.styleDeclarationWithText_, out ___occuredException, sizeof( IntPtr ), ___wrappedtext );
			Runtime.ReleaseNativeObject( ___wrappedtext );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMCSSStyleDeclaration( ___result );
		}
		unsafe public void subscript_( NObjective.RuntimeObject subscript ) {
			RuntimeObject ___occuredException;
			NativeMethods.subscript_( Handle, CachedSelectors.subscript_, out ___occuredException, sizeof( NObjective.RuntimeObject ), subscript );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void superscript_( NObjective.RuntimeObject superscript ) {
			RuntimeObject ___occuredException;
			NativeMethods.superscript_( Handle, CachedSelectors.superscript_, out ___occuredException, sizeof( NObjective.RuntimeObject ), superscript );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public bool supportsTextEncoding() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.supportsTextEncoding( Handle, CachedSelectors.supportsTextEncoding, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void swapWithMark_( NObjective.RuntimeObject mark ) {
			RuntimeObject ___occuredException;
			NativeMethods.swapWithMark_( Handle, CachedSelectors.swapWithMark_, out ___occuredException, sizeof( NObjective.RuntimeObject ), mark );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public char tabKeyCyclesThroughElements() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.tabKeyCyclesThroughElements( Handle, CachedSelectors.tabKeyCyclesThroughElements, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void takeFindStringFromSelection_( NObjective.RuntimeObject selection ) {
			RuntimeObject ___occuredException;
			NativeMethods.takeFindStringFromSelection_( Handle, CachedSelectors.takeFindStringFromSelection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), selection );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void takeStringURLFrom_( NObjective.RuntimeObject @from ) {
			RuntimeObject ___occuredException;
			NativeMethods.takeStringURLFrom_( Handle, CachedSelectors.takeStringURLFrom_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @from );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public float textSizeMultiplier() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textSizeMultiplier( Handle, CachedSelectors.textSizeMultiplier, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void toggleBaseWritingDirection_( NObjective.RuntimeObject direction ) {
			RuntimeObject ___occuredException;
			NativeMethods.toggleBaseWritingDirection_( Handle, CachedSelectors.toggleBaseWritingDirection_, out ___occuredException, sizeof( NObjective.RuntimeObject ), direction );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void toggleContinuousSpellChecking_( NObjective.RuntimeObject checking ) {
			RuntimeObject ___occuredException;
			NativeMethods.toggleContinuousSpellChecking_( Handle, CachedSelectors.toggleContinuousSpellChecking_, out ___occuredException, sizeof( NObjective.RuntimeObject ), checking );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void toggleGrammarChecking_( NObjective.RuntimeObject checking ) {
			RuntimeObject ___occuredException;
			NativeMethods.toggleGrammarChecking_( Handle, CachedSelectors.toggleGrammarChecking_, out ___occuredException, sizeof( NObjective.RuntimeObject ), checking );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void toggleSmartInsertDelete_( NObjective.RuntimeObject delete ) {
			RuntimeObject ___occuredException;
			NativeMethods.toggleSmartInsertDelete_( Handle, CachedSelectors.toggleSmartInsertDelete_, out ___occuredException, sizeof( NObjective.RuntimeObject ), delete );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void transpose_( NObjective.RuntimeObject transpose ) {
			RuntimeObject ___occuredException;
			NativeMethods.transpose_( Handle, CachedSelectors.transpose_, out ___occuredException, sizeof( NObjective.RuntimeObject ), transpose );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public DOMCSSStyleDeclaration typingStyle() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.typingStyle( Handle, CachedSelectors.typingStyle, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new DOMCSSStyleDeclaration( ___result );
		}
		unsafe public NObjective.RuntimeObject UIDelegate() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.UIDelegate( Handle, CachedSelectors.UIDelegate, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void underline_( NObjective.RuntimeObject underline ) {
			RuntimeObject ___occuredException;
			NativeMethods.underline_( Handle, CachedSelectors.underline_, out ___occuredException, sizeof( NObjective.RuntimeObject ), underline );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void unmarkAllTextMatches() {
			RuntimeObject ___occuredException;
			NativeMethods.unmarkAllTextMatches( Handle, CachedSelectors.unmarkAllTextMatches, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void unscript_( NObjective.RuntimeObject unscript ) {
			RuntimeObject ___occuredException;
			NativeMethods.unscript_( Handle, CachedSelectors.unscript_, out ___occuredException, sizeof( NObjective.RuntimeObject ), unscript );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void uppercaseWord_( NObjective.RuntimeObject word ) {
			RuntimeObject ___occuredException;
			NativeMethods.uppercaseWord_( Handle, CachedSelectors.uppercaseWord_, out ___occuredException, sizeof( NObjective.RuntimeObject ), word );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public string userAgentForURL_( NSURL url ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.userAgentForURL_( Handle, CachedSelectors.userAgentForURL_, out ___occuredException, sizeof( NSURL ), url );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public char usesPageCache() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.usesPageCache( Handle, CachedSelectors.usesPageCache, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char validateUserInterfaceItem_( NObjective.RuntimeObject item ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validateUserInterfaceItem_( Handle, CachedSelectors.validateUserInterfaceItem_, out ___occuredException, sizeof( NObjective.RuntimeObject ), item );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char validateUserInterfaceItemWithoutDelegate_( NObjective.RuntimeObject @delegate ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.validateUserInterfaceItemWithoutDelegate_( Handle, CachedSelectors.validateUserInterfaceItemWithoutDelegate_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @delegate );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public WebScriptObject windowScriptObject() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.windowScriptObject( Handle, CachedSelectors.windowScriptObject, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebScriptObject( ___result );
		}
		unsafe public void writeElement_withPasteboardTypes_toPasteboard_( NSDictionary element, NSArray withPasteboardTypes, NSPasteboard toPasteboard ) {
			RuntimeObject ___occuredException;
			NativeMethods.writeElement_withPasteboardTypes_toPasteboard_( Handle, CachedSelectors.writeElement_withPasteboardTypes_toPasteboard_, out ___occuredException, sizeof( NSDictionary ) + sizeof( NSArray ) + sizeof( NSPasteboard ), element, withPasteboardTypes, toPasteboard );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void writeSelectionWithPasteboardTypes_toPasteboard_( NSArray types, NSPasteboard toPasteboard ) {
			RuntimeObject ___occuredException;
			NativeMethods.writeSelectionWithPasteboardTypes_toPasteboard_( Handle, CachedSelectors.writeSelectionWithPasteboardTypes_toPasteboard_, out ___occuredException, sizeof( NSArray ) + sizeof( NSPasteboard ), types, toPasteboard );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void yank_( NObjective.RuntimeObject yank ) {
			RuntimeObject ___occuredException;
			NativeMethods.yank_( Handle, CachedSelectors.yank_, out ___occuredException, sizeof( NObjective.RuntimeObject ), yank );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void yankAndSelect_( NObjective.RuntimeObject @select ) {
			RuntimeObject ___occuredException;
			NativeMethods.yankAndSelect_( Handle, CachedSelectors.yankAndSelect_, out ___occuredException, sizeof( NObjective.RuntimeObject ), @select );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void addObserver_forKeyPath_options_context_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject observer, NObjective.RuntimeObject forKeyPath, uint options, System.IntPtr context );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr aeDescByEvaluatingJavaScriptFromString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void alignCenter_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject center );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void alignJustified_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject justified );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void alignLeft_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject left );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void alignRight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject right );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char allowsUndo( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char alwaysShowHorizontalScroller( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char alwaysShowVerticalScroller( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr applicationNameForUserAgent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void applyStyle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMCSSStyleDeclaration style );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char automaticallyNotifiesObserversForKey_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject key );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr backForwardList( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr backgroundColor( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool canGoBack( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool canGoForward( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool canMakeTextLarger( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool canMakeTextSmaller( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool canMakeTextStandardSize( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char canMarkAllTextMatches( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char canShowFile_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject file );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool canShowMIMEType_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool canShowMIMETypeAsHTML_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr html );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void capitalizeWord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject word );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void centerSelectionInVisibleArea_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject area );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void changeAttributes_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject attributes );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void changeBaseWritingDirection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject direction );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void changeBaseWritingDirectionToLTR_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject ltr );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void changeBaseWritingDirectionToRTL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject rtl );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void changeColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject color );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void changeDocumentBackgroundColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject color );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void changeFont_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject font );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void changeSpelling_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject spelling );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void checkSpelling_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject spelling );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void close( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void complete_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject complete );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr computedStyleForElement_pseudoElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMElement element, IntPtr pseudoElement );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void copy_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject copy );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void copyFont_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject font );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr customTextEncodingName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr customUserAgent( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void cut_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject cut );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char defersCallbacks( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void delete_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject delete );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteBackward_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject backward );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteBackwardByDecomposingPreviousCharacter_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject character );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteForward_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject forward );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteToBeginningOfLine_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject line );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteToBeginningOfParagraph_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject paragraph );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteToEndOfLine_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject line );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteToEndOfParagraph_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject paragraph );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteToMark_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject mark );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteWordBackward_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject backward );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void deleteWordForward_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject forward );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr downloadDelegate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool drawsBackground( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr editableDOMRangeForPoint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSPoint point );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr editingDelegate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr elementAtPoint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSPoint point );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern double estimatedProgress( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr frameLoadDelegate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool goBack( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void goBack_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject back );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool goForward( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void goForward_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject forward );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool goToBackForwardItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, WebHistoryItem item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr groupName( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void handleAuthenticationForResource_challenge_fromDataSource_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject resource, NObjective.RuntimeObject challenge, NObjective.RuntimeObject fromDataSource );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr hostWindow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void ignoreSpelling_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject spelling );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void indent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject indent );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr initWithFrame_frameName_groupName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSRect frame, IntPtr frameName, IntPtr groupName );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertBacktab_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject backtab );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertLineBreak_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @break );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertNewline_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject newline );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertNewlineIgnoringFieldEditor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject editor );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertParagraphSeparator_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject separator );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertTab_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject tab );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void insertTabIgnoringFieldEditor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject editor );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr inspector( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isContinuousSpellCheckingEnabled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isEditable( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isGrammarCheckingEnabled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isHoverFeedbackSuspended( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isLoading( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void lowercaseWord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject word );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mainFrame( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mainFrameDocument( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mainFrameIcon( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mainFrameTitle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mainFrameURL( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool maintainsInactiveSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void makeTextLarger_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject larger );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void makeTextSmaller_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject smaller );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void makeTextStandardSize_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject size );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint markAllMatchesForText_caseSensitive_highlight_limit_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject text, char caseSensitive, char highlight, uint limit );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr mediaStyle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr MIMETypesShownAsHTML( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveBackward_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject backward );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveBackwardAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveDown_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject down );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveDownAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveDragCaretToPoint_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, _NSPoint point );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveForward_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject forward );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveForwardAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveLeft_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject left );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveLeftAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveParagraphBackwardAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveParagraphForwardAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveRight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject right );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveRightAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToBeginningOfDocument_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject document );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToBeginningOfDocumentAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToBeginningOfLine_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject line );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToBeginningOfLineAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToBeginningOfParagraph_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject paragraph );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToBeginningOfParagraphAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToBeginningOfSentence_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject sentence );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToBeginningOfSentenceAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToEndOfDocument_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject document );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToEndOfDocumentAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToEndOfLine_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject line );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToEndOfLineAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToEndOfParagraph_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject paragraph );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToEndOfParagraphAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToEndOfSentence_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject sentence );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveToEndOfSentenceAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveUp_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject up );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveUpAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveWordBackward_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject backward );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveWordBackwardAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveWordForward_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject forward );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveWordForwardAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveWordLeft_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject left );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveWordLeftAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveWordRight_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject right );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void moveWordRightAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern System.IntPtr observationInfo( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void outdent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject outdent );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pageDown_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject down );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pageDownAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pageUp_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject up );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pageUpAndModifySelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void paste_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject paste );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pasteAsPlainText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject text );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pasteAsRichText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject text );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pasteboardTypesForElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary element );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pasteboardTypesForSelection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void pasteFont_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject font );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void performFindPanelAction_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject action );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr policyDelegate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr preferences( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr preferencesIdentifier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr rectsForTextMatches( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void registerForEditingDelegateNotification_selector_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject notification, NObjective.Selector selector );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void registerURLSchemeAsLocal_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr local );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void registerViewClass_representationClass_forMIMEType_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeClass @class, NObjective.RuntimeClass representationClass, IntPtr forMIMEType );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void reload_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject reload );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeDragCaret( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void removeObserver_forKeyPath_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject observer, NObjective.RuntimeObject forKeyPath );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceSelectionWithArchive_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, WebArchive archive );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceSelectionWithMarkupString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceSelectionWithNode_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMNode node );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void replaceSelectionWithText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr text );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr resourceLoadDelegate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr scriptDebugDelegate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scrollDOMRangeToVisible_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject visible );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scrollLineDown_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject down );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scrollLineUp_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject up );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scrollPageDown_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject down );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scrollPageUp_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject up );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scrollToBeginningOfDocument_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject document );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void scrollToEndOfDocument_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject document );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool searchFor_direction_caseSensitive_wrap_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @for, bool direction, bool caseSensitive, bool wrap );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char searchFor_direction_caseSensitive_wrap_startInSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @for, char direction, char caseSensitive, char wrap, char startInSelection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectAll_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject all );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedDOMRange( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr selectedFrame( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern uint selectionAffinity( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectLine_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject line );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectParagraph_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject paragraph );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectSentence_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject sentence );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectToMark_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject mark );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void selectWord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject word );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAllowsUndo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char undo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlwaysShowHorizontalScroller_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char scroller );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setAlwaysShowVerticalScroller_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char scroller );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setApplicationNameForUserAgent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr agent );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setBackgroundColor_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject color );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setContinuousSpellCheckingEnabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool enabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCustomTextEncodingName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setCustomUserAgent_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr agent );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDefersCallbacks_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char callbacks );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDownloadDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setDrawsBackground_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool background );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEditable_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool editable );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setEditingDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setFrameLoadDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setGrammarCheckingEnabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char enabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setGroupName_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr name );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHostWindow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSWindow window );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setHoverFeedbackSuspended_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char suspended );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMainFrameDocumentReady_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char ready );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMainFrameURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMaintainsBackForwardList_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool list );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMark_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject mark );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMediaStyle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr style );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setMIMETypesShownAsHTML_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray html );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setObservationInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr info );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPolicyDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPreferences_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, WebPreferences preferences );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setPreferencesIdentifier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr identifier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setProhibitsMainFrameScrolling_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char scrolling );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setResourceLoadDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setScriptDebugDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSelectedDOMRange_affinity_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMRange range, NSSelectionAffinity affinity );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setShouldCloseWithWindow_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool window );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setSmartInsertDeleteEnabled_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool enabled );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTabKeyCyclesThroughElements_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char elements );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTextSizeMultiplier_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, float multiplier );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setTypingStyle_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, DOMCSSStyleDeclaration style );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUIDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void setUsesPageCache_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char cache );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool shouldClose( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool shouldCloseWithWindow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void showGuessPanel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject panel );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool smartInsertDeleteEnabled( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern int spellCheckerDocumentTag( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void startSpeaking_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject speaking );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void stopLoading_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject loading );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void stopSpeaking_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject speaking );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr stringByEvaluatingJavaScriptFromString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr styleDeclarationWithText_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr text );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void subscript_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject subscript );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr suggestedFileExtensionForMIMEType_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void superscript_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject superscript );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool supportsTextEncoding( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void swapWithMark_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject mark );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char tabKeyCyclesThroughElements( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void takeFindStringFromSelection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject selection );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void takeStringURLFrom_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @from );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_fpret_eh2" )]
			public static extern float textSizeMultiplier( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void toggleBaseWritingDirection_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject direction );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void toggleContinuousSpellChecking_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject checking );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void toggleGrammarChecking_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject checking );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void toggleSmartInsertDelete_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject delete );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void transpose_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject transpose );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr typingStyle( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr UIDelegate( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void underline_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject underline );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unmarkAllTextMatches( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unscript_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject unscript );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void uppercaseWord_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject word );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr URLFromPasteboard_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSPasteboard pasteboard );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr URLTitleFromPasteboard_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSPasteboard pasteboard );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr userAgentForURL_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSURL url );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char usesPageCache( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char validateUserInterfaceItem_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject item );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char validateUserInterfaceItemWithoutDelegate_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @delegate );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr windowScriptObject( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void writeElement_withPasteboardTypes_toPasteboard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSDictionary element, NSArray withPasteboardTypes, NSPasteboard toPasteboard );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void writeSelectionWithPasteboardTypes_toPasteboard_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NSArray types, NSPasteboard toPasteboard );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void yank_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject yank );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void yankAndSelect_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject @select );
		}
		static internal class CachedSelectors {
			public static readonly Selector addObserver_forKeyPath_options_context_ = "addObserver:forKeyPath:options:context:";
			public static readonly Selector aeDescByEvaluatingJavaScriptFromString_ = "aeDescByEvaluatingJavaScriptFromString:";
			public static readonly Selector alignCenter_ = "alignCenter:";
			public static readonly Selector alignJustified_ = "alignJustified:";
			public static readonly Selector alignLeft_ = "alignLeft:";
			public static readonly Selector alignRight_ = "alignRight:";
			public static readonly Selector allowsUndo = "allowsUndo";
			public static readonly Selector alwaysShowHorizontalScroller = "alwaysShowHorizontalScroller";
			public static readonly Selector alwaysShowVerticalScroller = "alwaysShowVerticalScroller";
			public static readonly Selector applicationNameForUserAgent = "applicationNameForUserAgent";
			public static readonly Selector applyStyle_ = "applyStyle:";
			public static readonly Selector automaticallyNotifiesObserversForKey_ = "automaticallyNotifiesObserversForKey:";
			public static readonly Selector backForwardList = "backForwardList";
			public static readonly Selector backgroundColor = "backgroundColor";
			public static readonly Selector canGoBack = "canGoBack";
			public static readonly Selector canGoForward = "canGoForward";
			public static readonly Selector canMakeTextLarger = "canMakeTextLarger";
			public static readonly Selector canMakeTextSmaller = "canMakeTextSmaller";
			public static readonly Selector canMakeTextStandardSize = "canMakeTextStandardSize";
			public static readonly Selector canMarkAllTextMatches = "canMarkAllTextMatches";
			public static readonly Selector canShowFile_ = "canShowFile:";
			public static readonly Selector canShowMIMEType_ = "canShowMIMEType:";
			public static readonly Selector canShowMIMETypeAsHTML_ = "canShowMIMETypeAsHTML:";
			public static readonly Selector capitalizeWord_ = "capitalizeWord:";
			public static readonly Selector centerSelectionInVisibleArea_ = "centerSelectionInVisibleArea:";
			public static readonly Selector changeAttributes_ = "changeAttributes:";
			public static readonly Selector changeBaseWritingDirection_ = "changeBaseWritingDirection:";
			public static readonly Selector changeBaseWritingDirectionToLTR_ = "changeBaseWritingDirectionToLTR:";
			public static readonly Selector changeBaseWritingDirectionToRTL_ = "changeBaseWritingDirectionToRTL:";
			public static readonly Selector changeColor_ = "changeColor:";
			public static readonly Selector changeDocumentBackgroundColor_ = "changeDocumentBackgroundColor:";
			public static readonly Selector changeFont_ = "changeFont:";
			public static readonly Selector changeSpelling_ = "changeSpelling:";
			public static readonly Selector checkSpelling_ = "checkSpelling:";
			public static readonly Selector close = "close";
			public static readonly Selector complete_ = "complete:";
			public static readonly Selector computedStyleForElement_pseudoElement_ = "computedStyleForElement:pseudoElement:";
			public static readonly Selector copy_ = "copy:";
			public static readonly Selector copyFont_ = "copyFont:";
			public static readonly Selector customTextEncodingName = "customTextEncodingName";
			public static readonly Selector customUserAgent = "customUserAgent";
			public static readonly Selector cut_ = "cut:";
			public static readonly Selector defersCallbacks = "defersCallbacks";
			public static readonly Selector delete_ = "delete:";
			public static readonly Selector deleteBackward_ = "deleteBackward:";
			public static readonly Selector deleteBackwardByDecomposingPreviousCharacter_ = "deleteBackwardByDecomposingPreviousCharacter:";
			public static readonly Selector deleteForward_ = "deleteForward:";
			public static readonly Selector deleteSelection = "deleteSelection";
			public static readonly Selector deleteToBeginningOfLine_ = "deleteToBeginningOfLine:";
			public static readonly Selector deleteToBeginningOfParagraph_ = "deleteToBeginningOfParagraph:";
			public static readonly Selector deleteToEndOfLine_ = "deleteToEndOfLine:";
			public static readonly Selector deleteToEndOfParagraph_ = "deleteToEndOfParagraph:";
			public static readonly Selector deleteToMark_ = "deleteToMark:";
			public static readonly Selector deleteWordBackward_ = "deleteWordBackward:";
			public static readonly Selector deleteWordForward_ = "deleteWordForward:";
			public static readonly Selector downloadDelegate = "downloadDelegate";
			public static readonly Selector drawsBackground = "drawsBackground";
			public static readonly Selector editableDOMRangeForPoint_ = "editableDOMRangeForPoint:";
			public static readonly Selector editingDelegate = "editingDelegate";
			public static readonly Selector elementAtPoint_ = "elementAtPoint:";
			public static readonly Selector estimatedProgress = "estimatedProgress";
			public static readonly Selector frameLoadDelegate = "frameLoadDelegate";
			public static readonly Selector goBack = "goBack";
			public static readonly Selector goBack_ = "goBack:";
			public static readonly Selector goForward = "goForward";
			public static readonly Selector goForward_ = "goForward:";
			public static readonly Selector goToBackForwardItem_ = "goToBackForwardItem:";
			public static readonly Selector groupName = "groupName";
			public static readonly Selector handleAuthenticationForResource_challenge_fromDataSource_ = "handleAuthenticationForResource:challenge:fromDataSource:";
			public static readonly Selector hostWindow = "hostWindow";
			public static readonly Selector ignoreSpelling_ = "ignoreSpelling:";
			public static readonly Selector indent_ = "indent:";
			public static readonly Selector initWithFrame_frameName_groupName_ = "initWithFrame:frameName:groupName:";
			public static readonly Selector insertBacktab_ = "insertBacktab:";
			public static readonly Selector insertLineBreak_ = "insertLineBreak:";
			public static readonly Selector insertNewline_ = "insertNewline:";
			public static readonly Selector insertNewlineIgnoringFieldEditor_ = "insertNewlineIgnoringFieldEditor:";
			public static readonly Selector insertParagraphSeparator_ = "insertParagraphSeparator:";
			public static readonly Selector insertTab_ = "insertTab:";
			public static readonly Selector insertTabIgnoringFieldEditor_ = "insertTabIgnoringFieldEditor:";
			public static readonly Selector inspector = "inspector";
			public static readonly Selector isContinuousSpellCheckingEnabled = "isContinuousSpellCheckingEnabled";
			public static readonly Selector isEditable = "isEditable";
			public static readonly Selector isGrammarCheckingEnabled = "isGrammarCheckingEnabled";
			public static readonly Selector isHoverFeedbackSuspended = "isHoverFeedbackSuspended";
			public static readonly Selector isLoading = "isLoading";
			public static readonly Selector lowercaseWord_ = "lowercaseWord:";
			public static readonly Selector mainFrame = "mainFrame";
			public static readonly Selector mainFrameDocument = "mainFrameDocument";
			public static readonly Selector mainFrameIcon = "mainFrameIcon";
			public static readonly Selector mainFrameTitle = "mainFrameTitle";
			public static readonly Selector mainFrameURL = "mainFrameURL";
			public static readonly Selector maintainsInactiveSelection = "maintainsInactiveSelection";
			public static readonly Selector makeTextLarger_ = "makeTextLarger:";
			public static readonly Selector makeTextSmaller_ = "makeTextSmaller:";
			public static readonly Selector makeTextStandardSize_ = "makeTextStandardSize:";
			public static readonly Selector markAllMatchesForText_caseSensitive_highlight_limit_ = "markAllMatchesForText:caseSensitive:highlight:limit:";
			public static readonly Selector mediaStyle = "mediaStyle";
			public static readonly Selector MIMETypesShownAsHTML = "MIMETypesShownAsHTML";
			public static readonly Selector moveBackward_ = "moveBackward:";
			public static readonly Selector moveBackwardAndModifySelection_ = "moveBackwardAndModifySelection:";
			public static readonly Selector moveDown_ = "moveDown:";
			public static readonly Selector moveDownAndModifySelection_ = "moveDownAndModifySelection:";
			public static readonly Selector moveDragCaretToPoint_ = "moveDragCaretToPoint:";
			public static readonly Selector moveForward_ = "moveForward:";
			public static readonly Selector moveForwardAndModifySelection_ = "moveForwardAndModifySelection:";
			public static readonly Selector moveLeft_ = "moveLeft:";
			public static readonly Selector moveLeftAndModifySelection_ = "moveLeftAndModifySelection:";
			public static readonly Selector moveParagraphBackwardAndModifySelection_ = "moveParagraphBackwardAndModifySelection:";
			public static readonly Selector moveParagraphForwardAndModifySelection_ = "moveParagraphForwardAndModifySelection:";
			public static readonly Selector moveRight_ = "moveRight:";
			public static readonly Selector moveRightAndModifySelection_ = "moveRightAndModifySelection:";
			public static readonly Selector moveToBeginningOfDocument_ = "moveToBeginningOfDocument:";
			public static readonly Selector moveToBeginningOfDocumentAndModifySelection_ = "moveToBeginningOfDocumentAndModifySelection:";
			public static readonly Selector moveToBeginningOfLine_ = "moveToBeginningOfLine:";
			public static readonly Selector moveToBeginningOfLineAndModifySelection_ = "moveToBeginningOfLineAndModifySelection:";
			public static readonly Selector moveToBeginningOfParagraph_ = "moveToBeginningOfParagraph:";
			public static readonly Selector moveToBeginningOfParagraphAndModifySelection_ = "moveToBeginningOfParagraphAndModifySelection:";
			public static readonly Selector moveToBeginningOfSentence_ = "moveToBeginningOfSentence:";
			public static readonly Selector moveToBeginningOfSentenceAndModifySelection_ = "moveToBeginningOfSentenceAndModifySelection:";
			public static readonly Selector moveToEndOfDocument_ = "moveToEndOfDocument:";
			public static readonly Selector moveToEndOfDocumentAndModifySelection_ = "moveToEndOfDocumentAndModifySelection:";
			public static readonly Selector moveToEndOfLine_ = "moveToEndOfLine:";
			public static readonly Selector moveToEndOfLineAndModifySelection_ = "moveToEndOfLineAndModifySelection:";
			public static readonly Selector moveToEndOfParagraph_ = "moveToEndOfParagraph:";
			public static readonly Selector moveToEndOfParagraphAndModifySelection_ = "moveToEndOfParagraphAndModifySelection:";
			public static readonly Selector moveToEndOfSentence_ = "moveToEndOfSentence:";
			public static readonly Selector moveToEndOfSentenceAndModifySelection_ = "moveToEndOfSentenceAndModifySelection:";
			public static readonly Selector moveUp_ = "moveUp:";
			public static readonly Selector moveUpAndModifySelection_ = "moveUpAndModifySelection:";
			public static readonly Selector moveWordBackward_ = "moveWordBackward:";
			public static readonly Selector moveWordBackwardAndModifySelection_ = "moveWordBackwardAndModifySelection:";
			public static readonly Selector moveWordForward_ = "moveWordForward:";
			public static readonly Selector moveWordForwardAndModifySelection_ = "moveWordForwardAndModifySelection:";
			public static readonly Selector moveWordLeft_ = "moveWordLeft:";
			public static readonly Selector moveWordLeftAndModifySelection_ = "moveWordLeftAndModifySelection:";
			public static readonly Selector moveWordRight_ = "moveWordRight:";
			public static readonly Selector moveWordRightAndModifySelection_ = "moveWordRightAndModifySelection:";
			public static readonly Selector observationInfo = "observationInfo";
			public static readonly Selector outdent_ = "outdent:";
			public static readonly Selector pageDown_ = "pageDown:";
			public static readonly Selector pageDownAndModifySelection_ = "pageDownAndModifySelection:";
			public static readonly Selector pageUp_ = "pageUp:";
			public static readonly Selector pageUpAndModifySelection_ = "pageUpAndModifySelection:";
			public static readonly Selector paste_ = "paste:";
			public static readonly Selector pasteAsPlainText_ = "pasteAsPlainText:";
			public static readonly Selector pasteAsRichText_ = "pasteAsRichText:";
			public static readonly Selector pasteboardTypesForElement_ = "pasteboardTypesForElement:";
			public static readonly Selector pasteboardTypesForSelection = "pasteboardTypesForSelection";
			public static readonly Selector pasteFont_ = "pasteFont:";
			public static readonly Selector performFindPanelAction_ = "performFindPanelAction:";
			public static readonly Selector policyDelegate = "policyDelegate";
			public static readonly Selector preferences = "preferences";
			public static readonly Selector preferencesIdentifier = "preferencesIdentifier";
			public static readonly Selector rectsForTextMatches = "rectsForTextMatches";
			public static readonly Selector registerForEditingDelegateNotification_selector_ = "registerForEditingDelegateNotification:selector:";
			public static readonly Selector registerURLSchemeAsLocal_ = "registerURLSchemeAsLocal:";
			public static readonly Selector registerViewClass_representationClass_forMIMEType_ = "registerViewClass:representationClass:forMIMEType:";
			public static readonly Selector reload_ = "reload:";
			public static readonly Selector removeDragCaret = "removeDragCaret";
			public static readonly Selector removeObserver_forKeyPath_ = "removeObserver:forKeyPath:";
			public static readonly Selector replaceSelectionWithArchive_ = "replaceSelectionWithArchive:";
			public static readonly Selector replaceSelectionWithMarkupString_ = "replaceSelectionWithMarkupString:";
			public static readonly Selector replaceSelectionWithNode_ = "replaceSelectionWithNode:";
			public static readonly Selector replaceSelectionWithText_ = "replaceSelectionWithText:";
			public static readonly Selector resourceLoadDelegate = "resourceLoadDelegate";
			public static readonly Selector scriptDebugDelegate = "scriptDebugDelegate";
			public static readonly Selector scrollDOMRangeToVisible_ = "scrollDOMRangeToVisible:";
			public static readonly Selector scrollLineDown_ = "scrollLineDown:";
			public static readonly Selector scrollLineUp_ = "scrollLineUp:";
			public static readonly Selector scrollPageDown_ = "scrollPageDown:";
			public static readonly Selector scrollPageUp_ = "scrollPageUp:";
			public static readonly Selector scrollToBeginningOfDocument_ = "scrollToBeginningOfDocument:";
			public static readonly Selector scrollToEndOfDocument_ = "scrollToEndOfDocument:";
			public static readonly Selector searchFor_direction_caseSensitive_wrap_ = "searchFor:direction:caseSensitive:wrap:";
			public static readonly Selector searchFor_direction_caseSensitive_wrap_startInSelection_ = "searchFor:direction:caseSensitive:wrap:startInSelection:";
			public static readonly Selector selectAll_ = "selectAll:";
			public static readonly Selector selectedDOMRange = "selectedDOMRange";
			public static readonly Selector selectedFrame = "selectedFrame";
			public static readonly Selector selectionAffinity = "selectionAffinity";
			public static readonly Selector selectLine_ = "selectLine:";
			public static readonly Selector selectParagraph_ = "selectParagraph:";
			public static readonly Selector selectSentence_ = "selectSentence:";
			public static readonly Selector selectToMark_ = "selectToMark:";
			public static readonly Selector selectWord_ = "selectWord:";
			public static readonly Selector setAllowsUndo_ = "setAllowsUndo:";
			public static readonly Selector setAlwaysShowHorizontalScroller_ = "setAlwaysShowHorizontalScroller:";
			public static readonly Selector setAlwaysShowVerticalScroller_ = "setAlwaysShowVerticalScroller:";
			public static readonly Selector setApplicationNameForUserAgent_ = "setApplicationNameForUserAgent:";
			public static readonly Selector setBackgroundColor_ = "setBackgroundColor:";
			public static readonly Selector setContinuousSpellCheckingEnabled_ = "setContinuousSpellCheckingEnabled:";
			public static readonly Selector setCustomTextEncodingName_ = "setCustomTextEncodingName:";
			public static readonly Selector setCustomUserAgent_ = "setCustomUserAgent:";
			public static readonly Selector setDefersCallbacks_ = "setDefersCallbacks:";
			public static readonly Selector setDownloadDelegate_ = "setDownloadDelegate:";
			public static readonly Selector setDrawsBackground_ = "setDrawsBackground:";
			public static readonly Selector setEditable_ = "setEditable:";
			public static readonly Selector setEditingDelegate_ = "setEditingDelegate:";
			public static readonly Selector setFrameLoadDelegate_ = "setFrameLoadDelegate:";
			public static readonly Selector setGrammarCheckingEnabled_ = "setGrammarCheckingEnabled:";
			public static readonly Selector setGroupName_ = "setGroupName:";
			public static readonly Selector setHostWindow_ = "setHostWindow:";
			public static readonly Selector setHoverFeedbackSuspended_ = "setHoverFeedbackSuspended:";
			public static readonly Selector setMainFrameDocumentReady_ = "setMainFrameDocumentReady:";
			public static readonly Selector setMainFrameURL_ = "setMainFrameURL:";
			public static readonly Selector setMaintainsBackForwardList_ = "setMaintainsBackForwardList:";
			public static readonly Selector setMark_ = "setMark:";
			public static readonly Selector setMediaStyle_ = "setMediaStyle:";
			public static readonly Selector setMIMETypesShownAsHTML_ = "setMIMETypesShownAsHTML:";
			public static readonly Selector setObservationInfo_ = "setObservationInfo:";
			public static readonly Selector setPolicyDelegate_ = "setPolicyDelegate:";
			public static readonly Selector setPreferences_ = "setPreferences:";
			public static readonly Selector setPreferencesIdentifier_ = "setPreferencesIdentifier:";
			public static readonly Selector setProhibitsMainFrameScrolling_ = "setProhibitsMainFrameScrolling:";
			public static readonly Selector setResourceLoadDelegate_ = "setResourceLoadDelegate:";
			public static readonly Selector setScriptDebugDelegate_ = "setScriptDebugDelegate:";
			public static readonly Selector setSelectedDOMRange_affinity_ = "setSelectedDOMRange:affinity:";
			public static readonly Selector setShouldCloseWithWindow_ = "setShouldCloseWithWindow:";
			public static readonly Selector setSmartInsertDeleteEnabled_ = "setSmartInsertDeleteEnabled:";
			public static readonly Selector setTabKeyCyclesThroughElements_ = "setTabKeyCyclesThroughElements:";
			public static readonly Selector setTextSizeMultiplier_ = "setTextSizeMultiplier:";
			public static readonly Selector setTypingStyle_ = "setTypingStyle:";
			public static readonly Selector setUIDelegate_ = "setUIDelegate:";
			public static readonly Selector setUsesPageCache_ = "setUsesPageCache:";
			public static readonly Selector shouldClose = "shouldClose";
			public static readonly Selector shouldCloseWithWindow = "shouldCloseWithWindow";
			public static readonly Selector showGuessPanel_ = "showGuessPanel:";
			public static readonly Selector smartInsertDeleteEnabled = "smartInsertDeleteEnabled";
			public static readonly Selector spellCheckerDocumentTag = "spellCheckerDocumentTag";
			public static readonly Selector startSpeaking_ = "startSpeaking:";
			public static readonly Selector stopLoading_ = "stopLoading:";
			public static readonly Selector stopSpeaking_ = "stopSpeaking:";
			public static readonly Selector stringByEvaluatingJavaScriptFromString_ = "stringByEvaluatingJavaScriptFromString:";
			public static readonly Selector styleDeclarationWithText_ = "styleDeclarationWithText:";
			public static readonly Selector subscript_ = "subscript:";
			public static readonly Selector suggestedFileExtensionForMIMEType_ = "suggestedFileExtensionForMIMEType:";
			public static readonly Selector superscript_ = "superscript:";
			public static readonly Selector supportsTextEncoding = "supportsTextEncoding";
			public static readonly Selector swapWithMark_ = "swapWithMark:";
			public static readonly Selector tabKeyCyclesThroughElements = "tabKeyCyclesThroughElements";
			public static readonly Selector takeFindStringFromSelection_ = "takeFindStringFromSelection:";
			public static readonly Selector takeStringURLFrom_ = "takeStringURLFrom:";
			public static readonly Selector textSizeMultiplier = "textSizeMultiplier";
			public static readonly Selector toggleBaseWritingDirection_ = "toggleBaseWritingDirection:";
			public static readonly Selector toggleContinuousSpellChecking_ = "toggleContinuousSpellChecking:";
			public static readonly Selector toggleGrammarChecking_ = "toggleGrammarChecking:";
			public static readonly Selector toggleSmartInsertDelete_ = "toggleSmartInsertDelete:";
			public static readonly Selector transpose_ = "transpose:";
			public static readonly Selector typingStyle = "typingStyle";
			public static readonly Selector UIDelegate = "UIDelegate";
			public static readonly Selector underline_ = "underline:";
			public static readonly Selector unmarkAllTextMatches = "unmarkAllTextMatches";
			public static readonly Selector unscript_ = "unscript:";
			public static readonly Selector uppercaseWord_ = "uppercaseWord:";
			public static readonly Selector URLFromPasteboard_ = "URLFromPasteboard:";
			public static readonly Selector URLTitleFromPasteboard_ = "URLTitleFromPasteboard:";
			public static readonly Selector userAgentForURL_ = "userAgentForURL:";
			public static readonly Selector usesPageCache = "usesPageCache";
			public static readonly Selector validateUserInterfaceItem_ = "validateUserInterfaceItem:";
			public static readonly Selector validateUserInterfaceItemWithoutDelegate_ = "validateUserInterfaceItemWithoutDelegate:";
			public static readonly Selector windowScriptObject = "windowScriptObject";
			public static readonly Selector writeElement_withPasteboardTypes_toPasteboard_ = "writeElement:withPasteboardTypes:toPasteboard:";
			public static readonly Selector writeSelectionWithPasteboardTypes_toPasteboard_ = "writeSelectionWithPasteboardTypes:toPasteboard:";
			public static readonly Selector yank_ = "yank:";
			public static readonly Selector yankAndSelect_ = "yankAndSelect:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( WebCoreViewFactory ) )]
	public struct WebViewFactory : IEquatable<WebViewFactory> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebViewFactory;
		public static implicit operator IntPtr( WebViewFactory value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebViewFactory value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebViewFactory?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebViewFactory value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebViewFactory value1, WebViewFactory value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebViewFactory value1, WebViewFactory value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebViewFactory( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebViewFactory alloc() {
			return new WebViewFactory( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void createSharedFactory() {
			RuntimeObject ___occuredException;
			NativeMethods.createSharedFactory( ClassHandle, CachedSelectors.createSharedFactory, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public void accessibilityHandleFocusChanged() {
			RuntimeObject ___occuredException;
			NativeMethods.accessibilityHandleFocusChanged( Handle, CachedSelectors.accessibilityHandleFocusChanged, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject AXHeadingText() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.AXHeadingText( Handle, CachedSelectors.AXHeadingText, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject AXImageMapText() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.AXImageMapText( Handle, CachedSelectors.AXImageMapText, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject AXLinkText() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.AXLinkText( Handle, CachedSelectors.AXLinkText, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject AXListMarkerText() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.AXListMarkerText( Handle, CachedSelectors.AXListMarkerText, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject AXWebAreaText() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.AXWebAreaText( Handle, CachedSelectors.AXWebAreaText, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject bridgeForView_( NObjective.RuntimeObject view ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.bridgeForView_( Handle, CachedSelectors.bridgeForView_, out ___occuredException, sizeof( NObjective.RuntimeObject ), view );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagBold() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagBold( Handle, CachedSelectors.contextMenuItemTagBold, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagCheckGrammarWithSpelling() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagCheckGrammarWithSpelling( Handle, CachedSelectors.contextMenuItemTagCheckGrammarWithSpelling, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagCheckSpelling() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagCheckSpelling( Handle, CachedSelectors.contextMenuItemTagCheckSpelling, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagCheckSpellingWhileTyping() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagCheckSpellingWhileTyping( Handle, CachedSelectors.contextMenuItemTagCheckSpellingWhileTyping, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagCopy() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagCopy( Handle, CachedSelectors.contextMenuItemTagCopy, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagCopyImageToClipboard() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagCopyImageToClipboard( Handle, CachedSelectors.contextMenuItemTagCopyImageToClipboard, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagCopyLinkToClipboard() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagCopyLinkToClipboard( Handle, CachedSelectors.contextMenuItemTagCopyLinkToClipboard, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagCut() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagCut( Handle, CachedSelectors.contextMenuItemTagCut, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagDefaultDirection() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagDefaultDirection( Handle, CachedSelectors.contextMenuItemTagDefaultDirection, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagDownloadImageToDisk() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagDownloadImageToDisk( Handle, CachedSelectors.contextMenuItemTagDownloadImageToDisk, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagDownloadLinkToDisk() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagDownloadLinkToDisk( Handle, CachedSelectors.contextMenuItemTagDownloadLinkToDisk, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagFontMenu() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagFontMenu( Handle, CachedSelectors.contextMenuItemTagFontMenu, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagGoBack() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagGoBack( Handle, CachedSelectors.contextMenuItemTagGoBack, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagGoForward() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagGoForward( Handle, CachedSelectors.contextMenuItemTagGoForward, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagIgnoreGrammar() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagIgnoreGrammar( Handle, CachedSelectors.contextMenuItemTagIgnoreGrammar, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagIgnoreSpelling() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagIgnoreSpelling( Handle, CachedSelectors.contextMenuItemTagIgnoreSpelling, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagInspectElement() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagInspectElement( Handle, CachedSelectors.contextMenuItemTagInspectElement, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagItalic() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagItalic( Handle, CachedSelectors.contextMenuItemTagItalic, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagLearnSpelling() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagLearnSpelling( Handle, CachedSelectors.contextMenuItemTagLearnSpelling, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagLeftToRight() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagLeftToRight( Handle, CachedSelectors.contextMenuItemTagLeftToRight, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagLookUpInDictionary() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagLookUpInDictionary( Handle, CachedSelectors.contextMenuItemTagLookUpInDictionary, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagNoGuessesFound() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagNoGuessesFound( Handle, CachedSelectors.contextMenuItemTagNoGuessesFound, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagOpenFrameInNewWindow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagOpenFrameInNewWindow( Handle, CachedSelectors.contextMenuItemTagOpenFrameInNewWindow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagOpenImageInNewWindow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagOpenImageInNewWindow( Handle, CachedSelectors.contextMenuItemTagOpenImageInNewWindow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagOpenLink() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagOpenLink( Handle, CachedSelectors.contextMenuItemTagOpenLink, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagOpenLinkInNewWindow() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagOpenLinkInNewWindow( Handle, CachedSelectors.contextMenuItemTagOpenLinkInNewWindow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagOutline() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagOutline( Handle, CachedSelectors.contextMenuItemTagOutline, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagPaste() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagPaste( Handle, CachedSelectors.contextMenuItemTagPaste, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagReload() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagReload( Handle, CachedSelectors.contextMenuItemTagReload, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagRightToLeft() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagRightToLeft( Handle, CachedSelectors.contextMenuItemTagRightToLeft, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagSearchInSpotlight() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagSearchInSpotlight( Handle, CachedSelectors.contextMenuItemTagSearchInSpotlight, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagSearchWeb() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagSearchWeb( Handle, CachedSelectors.contextMenuItemTagSearchWeb, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagShowColors() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagShowColors( Handle, CachedSelectors.contextMenuItemTagShowColors, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagShowFonts() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagShowFonts( Handle, CachedSelectors.contextMenuItemTagShowFonts, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagShowSpellingPanel_( bool panel ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagShowSpellingPanel_( Handle, CachedSelectors.contextMenuItemTagShowSpellingPanel_, out ___occuredException, sizeof( bool ), panel );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagSpeechMenu() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagSpeechMenu( Handle, CachedSelectors.contextMenuItemTagSpeechMenu, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagSpellingMenu() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagSpellingMenu( Handle, CachedSelectors.contextMenuItemTagSpellingMenu, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagStartSpeaking() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagStartSpeaking( Handle, CachedSelectors.contextMenuItemTagStartSpeaking, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagStop() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagStop( Handle, CachedSelectors.contextMenuItemTagStop, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagStopSpeaking() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagStopSpeaking( Handle, CachedSelectors.contextMenuItemTagStopSpeaking, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagStyles() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagStyles( Handle, CachedSelectors.contextMenuItemTagStyles, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagUnderline() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagUnderline( Handle, CachedSelectors.contextMenuItemTagUnderline, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject contextMenuItemTagWritingDirectionMenu() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contextMenuItemTagWritingDirectionMenu( Handle, CachedSelectors.contextMenuItemTagWritingDirectionMenu, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject copyImageUnknownFileLabel() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.copyImageUnknownFileLabel( Handle, CachedSelectors.copyImageUnknownFileLabel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject defaultLanguageCode() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.defaultLanguageCode( Handle, CachedSelectors.defaultLanguageCode, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject endOfTextMarkerRange_( NObjective.RuntimeObject range ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.endOfTextMarkerRange_( Handle, CachedSelectors.endOfTextMarkerRange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject fileButtonChooseFileLabel() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileButtonChooseFileLabel( Handle, CachedSelectors.fileButtonChooseFileLabel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject fileButtonNoFileSelectedLabel() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.fileButtonNoFileSelectedLabel( Handle, CachedSelectors.fileButtonNoFileSelectedLabel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char getBytes_fromTextMarker_length_( System.IntPtr bytes, NObjective.RuntimeObject fromTextMarker, uint length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.getBytes_fromTextMarker_length_( Handle, CachedSelectors.getBytes_fromTextMarker_length_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( NObjective.RuntimeObject ) + sizeof( uint ), bytes, fromTextMarker, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject inputElementAltText() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.inputElementAltText( Handle, CachedSelectors.inputElementAltText, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char objectIsTextMarker_( NObjective.RuntimeObject marker ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectIsTextMarker_( Handle, CachedSelectors.objectIsTextMarker_, out ___occuredException, sizeof( NObjective.RuntimeObject ), marker );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public char objectIsTextMarkerRange_( NObjective.RuntimeObject range ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.objectIsTextMarkerRange_( Handle, CachedSelectors.objectIsTextMarkerRange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public NObjective.RuntimeObject pluginNameForMIMEType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pluginNameForMIMEType_( Handle, CachedSelectors.pluginNameForMIMEType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject pluginsInfo() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pluginsInfo( Handle, CachedSelectors.pluginsInfo, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public char pluginSupportsMIMEType_( NObjective.RuntimeObject type ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.pluginSupportsMIMEType_( Handle, CachedSelectors.pluginSupportsMIMEType_, out ___occuredException, sizeof( NObjective.RuntimeObject ), type );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public void refreshPlugins_( char plugins ) {
			RuntimeObject ___occuredException;
			NativeMethods.refreshPlugins_( Handle, CachedSelectors.refreshPlugins_, out ___occuredException, sizeof( char ), plugins );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public NObjective.RuntimeObject resetButtonDefaultLabel() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.resetButtonDefaultLabel( Handle, CachedSelectors.resetButtonDefaultLabel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject searchableIndexIntroduction() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchableIndexIntroduction( Handle, CachedSelectors.searchableIndexIntroduction, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject searchMenuClearRecentSearchesText() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchMenuClearRecentSearchesText( Handle, CachedSelectors.searchMenuClearRecentSearchesText, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject searchMenuNoRecentSearchesText() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchMenuNoRecentSearchesText( Handle, CachedSelectors.searchMenuNoRecentSearchesText, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject searchMenuRecentSearchesText() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.searchMenuRecentSearchesText( Handle, CachedSelectors.searchMenuRecentSearchesText, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject startOfTextMarkerRange_( NObjective.RuntimeObject range ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.startOfTextMarkerRange_( Handle, CachedSelectors.startOfTextMarkerRange_, out ___occuredException, sizeof( NObjective.RuntimeObject ), range );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject submitButtonDefaultLabel() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.submitButtonDefaultLabel( Handle, CachedSelectors.submitButtonDefaultLabel, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject textMarkerRangeWithStart_end_( NObjective.RuntimeObject start, NObjective.RuntimeObject end ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textMarkerRangeWithStart_end_( Handle, CachedSelectors.textMarkerRangeWithStart_end_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), start, end );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject textMarkerWithBytes_length_( System.IntPtr bytes, uint length ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.textMarkerWithBytes_length_( Handle, CachedSelectors.textMarkerWithBytes_length_, out ___occuredException, sizeof( System.IntPtr ) + sizeof( uint ), bytes, length );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public NObjective.RuntimeObject unknownFileSizeText() {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.unknownFileSizeText( Handle, CachedSelectors.unknownFileSizeText, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public void unregisterUniqueIdForUIElement_( NObjective.RuntimeObject element ) {
			RuntimeObject ___occuredException;
			NativeMethods.unregisterUniqueIdForUIElement_( Handle, CachedSelectors.unregisterUniqueIdForUIElement_, out ___occuredException, sizeof( NObjective.RuntimeObject ), element );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void accessibilityHandleFocusChanged( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr AXHeadingText( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr AXImageMapText( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr AXLinkText( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr AXListMarkerText( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr AXWebAreaText( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr bridgeForView_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject view );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagBold( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagCheckGrammarWithSpelling( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagCheckSpelling( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagCheckSpellingWhileTyping( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagCopy( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagCopyImageToClipboard( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagCopyLinkToClipboard( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagCut( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagDefaultDirection( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagDownloadImageToDisk( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagDownloadLinkToDisk( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagFontMenu( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagGoBack( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagGoForward( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagIgnoreGrammar( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagIgnoreSpelling( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagInspectElement( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagItalic( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagLearnSpelling( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagLeftToRight( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagLookUpInDictionary( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagNoGuessesFound( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagOpenFrameInNewWindow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagOpenImageInNewWindow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagOpenLink( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagOpenLinkInNewWindow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagOutline( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagPaste( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagReload( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagRightToLeft( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagSearchInSpotlight( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagSearchWeb( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagShowColors( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagShowFonts( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagShowSpellingPanel_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, bool panel );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagSpeechMenu( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagSpellingMenu( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagStartSpeaking( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagStop( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagStopSpeaking( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagStyles( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagUnderline( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contextMenuItemTagWritingDirectionMenu( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr copyImageUnknownFileLabel( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void createSharedFactory( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr defaultLanguageCode( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr endOfTextMarkerRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fileButtonChooseFileLabel( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr fileButtonNoFileSelectedLabel( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char getBytes_fromTextMarker_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr bytes, NObjective.RuntimeObject fromTextMarker, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr inputElementAltText( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char objectIsTextMarker_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject marker );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char objectIsTextMarkerRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pluginNameForMIMEType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr pluginsInfo( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern char pluginSupportsMIMEType_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject type );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void refreshPlugins_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, char plugins );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr resetButtonDefaultLabel( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr searchableIndexIntroduction( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr searchMenuClearRecentSearchesText( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr searchMenuNoRecentSearchesText( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr searchMenuRecentSearchesText( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr startOfTextMarkerRange_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject range );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr submitButtonDefaultLabel( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr textMarkerRangeWithStart_end_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject start, NObjective.RuntimeObject end );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr textMarkerWithBytes_length_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, System.IntPtr bytes, uint length );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr unknownFileSizeText( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void unregisterUniqueIdForUIElement_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject element );
		}
		static internal class CachedSelectors {
			public static readonly Selector accessibilityHandleFocusChanged = "accessibilityHandleFocusChanged";
			public static readonly Selector AXHeadingText = "AXHeadingText";
			public static readonly Selector AXImageMapText = "AXImageMapText";
			public static readonly Selector AXLinkText = "AXLinkText";
			public static readonly Selector AXListMarkerText = "AXListMarkerText";
			public static readonly Selector AXWebAreaText = "AXWebAreaText";
			public static readonly Selector bridgeForView_ = "bridgeForView:";
			public static readonly Selector contextMenuItemTagBold = "contextMenuItemTagBold";
			public static readonly Selector contextMenuItemTagCheckGrammarWithSpelling = "contextMenuItemTagCheckGrammarWithSpelling";
			public static readonly Selector contextMenuItemTagCheckSpelling = "contextMenuItemTagCheckSpelling";
			public static readonly Selector contextMenuItemTagCheckSpellingWhileTyping = "contextMenuItemTagCheckSpellingWhileTyping";
			public static readonly Selector contextMenuItemTagCopy = "contextMenuItemTagCopy";
			public static readonly Selector contextMenuItemTagCopyImageToClipboard = "contextMenuItemTagCopyImageToClipboard";
			public static readonly Selector contextMenuItemTagCopyLinkToClipboard = "contextMenuItemTagCopyLinkToClipboard";
			public static readonly Selector contextMenuItemTagCut = "contextMenuItemTagCut";
			public static readonly Selector contextMenuItemTagDefaultDirection = "contextMenuItemTagDefaultDirection";
			public static readonly Selector contextMenuItemTagDownloadImageToDisk = "contextMenuItemTagDownloadImageToDisk";
			public static readonly Selector contextMenuItemTagDownloadLinkToDisk = "contextMenuItemTagDownloadLinkToDisk";
			public static readonly Selector contextMenuItemTagFontMenu = "contextMenuItemTagFontMenu";
			public static readonly Selector contextMenuItemTagGoBack = "contextMenuItemTagGoBack";
			public static readonly Selector contextMenuItemTagGoForward = "contextMenuItemTagGoForward";
			public static readonly Selector contextMenuItemTagIgnoreGrammar = "contextMenuItemTagIgnoreGrammar";
			public static readonly Selector contextMenuItemTagIgnoreSpelling = "contextMenuItemTagIgnoreSpelling";
			public static readonly Selector contextMenuItemTagInspectElement = "contextMenuItemTagInspectElement";
			public static readonly Selector contextMenuItemTagItalic = "contextMenuItemTagItalic";
			public static readonly Selector contextMenuItemTagLearnSpelling = "contextMenuItemTagLearnSpelling";
			public static readonly Selector contextMenuItemTagLeftToRight = "contextMenuItemTagLeftToRight";
			public static readonly Selector contextMenuItemTagLookUpInDictionary = "contextMenuItemTagLookUpInDictionary";
			public static readonly Selector contextMenuItemTagNoGuessesFound = "contextMenuItemTagNoGuessesFound";
			public static readonly Selector contextMenuItemTagOpenFrameInNewWindow = "contextMenuItemTagOpenFrameInNewWindow";
			public static readonly Selector contextMenuItemTagOpenImageInNewWindow = "contextMenuItemTagOpenImageInNewWindow";
			public static readonly Selector contextMenuItemTagOpenLink = "contextMenuItemTagOpenLink";
			public static readonly Selector contextMenuItemTagOpenLinkInNewWindow = "contextMenuItemTagOpenLinkInNewWindow";
			public static readonly Selector contextMenuItemTagOutline = "contextMenuItemTagOutline";
			public static readonly Selector contextMenuItemTagPaste = "contextMenuItemTagPaste";
			public static readonly Selector contextMenuItemTagReload = "contextMenuItemTagReload";
			public static readonly Selector contextMenuItemTagRightToLeft = "contextMenuItemTagRightToLeft";
			public static readonly Selector contextMenuItemTagSearchInSpotlight = "contextMenuItemTagSearchInSpotlight";
			public static readonly Selector contextMenuItemTagSearchWeb = "contextMenuItemTagSearchWeb";
			public static readonly Selector contextMenuItemTagShowColors = "contextMenuItemTagShowColors";
			public static readonly Selector contextMenuItemTagShowFonts = "contextMenuItemTagShowFonts";
			public static readonly Selector contextMenuItemTagShowSpellingPanel_ = "contextMenuItemTagShowSpellingPanel:";
			public static readonly Selector contextMenuItemTagSpeechMenu = "contextMenuItemTagSpeechMenu";
			public static readonly Selector contextMenuItemTagSpellingMenu = "contextMenuItemTagSpellingMenu";
			public static readonly Selector contextMenuItemTagStartSpeaking = "contextMenuItemTagStartSpeaking";
			public static readonly Selector contextMenuItemTagStop = "contextMenuItemTagStop";
			public static readonly Selector contextMenuItemTagStopSpeaking = "contextMenuItemTagStopSpeaking";
			public static readonly Selector contextMenuItemTagStyles = "contextMenuItemTagStyles";
			public static readonly Selector contextMenuItemTagUnderline = "contextMenuItemTagUnderline";
			public static readonly Selector contextMenuItemTagWritingDirectionMenu = "contextMenuItemTagWritingDirectionMenu";
			public static readonly Selector copyImageUnknownFileLabel = "copyImageUnknownFileLabel";
			public static readonly Selector createSharedFactory = "createSharedFactory";
			public static readonly Selector defaultLanguageCode = "defaultLanguageCode";
			public static readonly Selector endOfTextMarkerRange_ = "endOfTextMarkerRange:";
			public static readonly Selector fileButtonChooseFileLabel = "fileButtonChooseFileLabel";
			public static readonly Selector fileButtonNoFileSelectedLabel = "fileButtonNoFileSelectedLabel";
			public static readonly Selector getBytes_fromTextMarker_length_ = "getBytes:fromTextMarker:length:";
			public static readonly Selector inputElementAltText = "inputElementAltText";
			public static readonly Selector objectIsTextMarker_ = "objectIsTextMarker:";
			public static readonly Selector objectIsTextMarkerRange_ = "objectIsTextMarkerRange:";
			public static readonly Selector pluginNameForMIMEType_ = "pluginNameForMIMEType:";
			public static readonly Selector pluginsInfo = "pluginsInfo";
			public static readonly Selector pluginSupportsMIMEType_ = "pluginSupportsMIMEType:";
			public static readonly Selector refreshPlugins_ = "refreshPlugins:";
			public static readonly Selector resetButtonDefaultLabel = "resetButtonDefaultLabel";
			public static readonly Selector searchableIndexIntroduction = "searchableIndexIntroduction";
			public static readonly Selector searchMenuClearRecentSearchesText = "searchMenuClearRecentSearchesText";
			public static readonly Selector searchMenuNoRecentSearchesText = "searchMenuNoRecentSearchesText";
			public static readonly Selector searchMenuRecentSearchesText = "searchMenuRecentSearchesText";
			public static readonly Selector startOfTextMarkerRange_ = "startOfTextMarkerRange:";
			public static readonly Selector submitButtonDefaultLabel = "submitButtonDefaultLabel";
			public static readonly Selector textMarkerRangeWithStart_end_ = "textMarkerRangeWithStart:end:";
			public static readonly Selector textMarkerWithBytes_length_ = "textMarkerWithBytes:length:";
			public static readonly Selector unknownFileSizeText = "unknownFileSizeText";
			public static readonly Selector unregisterUniqueIdForUIElement_ = "unregisterUniqueIdForUIElement:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebViewPrivate : IEquatable<WebViewPrivate> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebViewPrivate;
		public static implicit operator IntPtr( WebViewPrivate value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebViewPrivate value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebViewPrivate?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebViewPrivate value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebViewPrivate value1, WebViewPrivate value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebViewPrivate value1, WebViewPrivate value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebViewPrivate( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebViewPrivate alloc() {
			return new WebViewPrivate( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public static void initialize() {
			RuntimeObject ___occuredException;
			NativeMethods.initialize( ClassHandle, CachedSelectors.initialize, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void initialize( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector initialize = "initialize";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	[ProxyBaseClass( typeof( NSObject ) )]
	public struct WebWindowWatcher : IEquatable<WebWindowWatcher> {
		[FieldOffsetAttribute( 0 )]
		private NObjective.RuntimeObject Handle;
		public static readonly RuntimeClass ClassHandle = WebKitCachedClasses.WebWindowWatcher;
		public static implicit operator IntPtr( WebWindowWatcher value ) {
			return value.Handle;
		}
		public static implicit operator NObjective.RuntimeObject( WebWindowWatcher value ) {
			return value.Handle;
		}
		public override bool Equals( object value ) {
			var compareTo = value as WebWindowWatcher?;
			return compareTo != null && Handle == compareTo.Value.Handle;
		}
		public bool Equals( WebWindowWatcher value ) {
			return Handle == value.Handle;
		}
		public static bool operator ==( WebWindowWatcher value1, WebWindowWatcher value2 ) {
			return value1.Handle == value2.Handle;
		}
		public static bool operator !=( WebWindowWatcher value1, WebWindowWatcher value2 ) {
			return value1.Handle != value2.Handle;
		}
		public WebWindowWatcher( IntPtr value ) {
			this.Handle = new RuntimeObject( value );
		}
		public static WebWindowWatcher alloc() {
			return new WebWindowWatcher( ClassHandle.InvokeIntPtr( Selectors.alloc ) );
		}
		unsafe public void windowWillClose_( NObjective.RuntimeObject close ) {
			RuntimeObject ___occuredException;
			NativeMethods.windowWillClose_( Handle, CachedSelectors.windowWillClose_, out ___occuredException, sizeof( NObjective.RuntimeObject ), close );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void windowWillClose_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject close );
		}
		static internal class CachedSelectors {
			public static readonly Selector windowWillClose_ = "windowWillClose:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class WebKitExtensionsOfDOMDocument {
		private static int ___lazyLoad = WebKitCachedClasses.___lazyLoad;
		unsafe public static NSURL URLWithAttributeString_( this DOMDocument ___this, string @string ) {
			RuntimeObject ___occuredException;
			var ___wrappedstring = Runtime.CreateStringProxy( @string );
			var ___result = NativeMethods.URLWithAttributeString_( ___this, CachedSelectors.URLWithAttributeString_, out ___occuredException, sizeof( IntPtr ), ___wrappedstring );
			Runtime.ReleaseNativeObject( ___wrappedstring );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NSURL( ___result );
		}
		unsafe public static WebFrame webFrame( this DOMDocument ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webFrame( ___this, CachedSelectors.webFrame, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebFrame( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr URLWithAttributeString_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr @string );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr webFrame( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector URLWithAttributeString_ = "URLWithAttributeString:";
			public static readonly Selector webFrame = "webFrame";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class WebKitExtensionsOfNSControl {
		private static int ___lazyLoad = WebKitCachedClasses.___lazyLoad;
		unsafe public static void sizeToFitAndAdjustWindowHeight( this NSControl ___this ) {
			RuntimeObject ___occuredException;
			NativeMethods.sizeToFitAndAdjustWindowHeight( ___this, CachedSelectors.sizeToFitAndAdjustWindowHeight, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void sizeToFitAndAdjustWindowHeight( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector sizeToFitAndAdjustWindowHeight = "sizeToFitAndAdjustWindowHeight";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class WebKitExtensionsOfNSWindow {
		private static int ___lazyLoad = WebKitCachedClasses.___lazyLoad;
		unsafe public static void centerOverMainWindow( this NSWindow ___this ) {
			RuntimeObject ___occuredException;
			NativeMethods.centerOverMainWindow( ___this, CachedSelectors.centerOverMainWindow, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void centerOverMainWindow( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector centerOverMainWindow = "centerOverMainWindow";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class WebKitExtensionsOfNSMenu {
		private static int ___lazyLoad = WebKitCachedClasses.___lazyLoad;
		unsafe public static NObjective.RuntimeObject addItemWithTitle_action_tag_( this NSMenu ___this, NObjective.RuntimeObject title, NObjective.Selector action, int tag ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.addItemWithTitle_action_tag_( ___this, CachedSelectors.addItemWithTitle_action_tag_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.Selector ) + sizeof( int ), title, action, tag );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr addItemWithTitle_action_tag_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject title, NObjective.Selector action, int tag );
		}
		static internal class CachedSelectors {
			public static readonly Selector addItemWithTitle_action_tag_ = "addItemWithTitle:action:tag:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class WebKitExtensionsOfDOMHTMLIFrameElement {
		private static int ___lazyLoad = WebKitCachedClasses.___lazyLoad;
		unsafe public static WebFrame contentFrame( this DOMHTMLIFrameElement ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contentFrame( ___this, CachedSelectors.contentFrame, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebFrame( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contentFrame( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector contentFrame = "contentFrame";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class WebKitExtensionsOfNSObject {
		private static int ___lazyLoad = WebKitCachedClasses.___lazyLoad;
		unsafe public static bool isKeyExcludedFromWebScript_( IntPtr script ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isKeyExcludedFromWebScript_( NSObject.ClassHandle, CachedSelectors.isKeyExcludedFromWebScript_, out ___occuredException, sizeof( IntPtr ), script );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		unsafe public static bool isSelectorExcludedFromWebScript_( NObjective.Selector script ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.isSelectorExcludedFromWebScript_( NSObject.ClassHandle, CachedSelectors.isSelectorExcludedFromWebScript_, out ___occuredException, sizeof( NObjective.Selector ), script );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return ___result;
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isKeyExcludedFromWebScript_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, IntPtr script );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern bool isSelectorExcludedFromWebScript_( RuntimeClass ___class, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.Selector script );
		}
		static internal class CachedSelectors {
			public static readonly Selector isKeyExcludedFromWebScript_ = "isKeyExcludedFromWebScript:";
			public static readonly Selector isSelectorExcludedFromWebScript_ = "isSelectorExcludedFromWebScript:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class WebKitExtensionsOfDOMHTMLObjectElement {
		private static int ___lazyLoad = WebKitCachedClasses.___lazyLoad;
		unsafe public static WebFrame contentFrame( this DOMHTMLObjectElement ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contentFrame( ___this, CachedSelectors.contentFrame, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebFrame( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contentFrame( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector contentFrame = "contentFrame";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class WebKitExtensionsOfDOMHTMLFrameElement {
		private static int ___lazyLoad = WebKitCachedClasses.___lazyLoad;
		unsafe public static WebFrame contentFrame( this DOMHTMLFrameElement ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.contentFrame( ___this, CachedSelectors.contentFrame, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebFrame( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr contentFrame( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector contentFrame = "contentFrame";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class WebKitExtensionsOfDOMRange {
		private static int ___lazyLoad = WebKitCachedClasses.___lazyLoad;
		unsafe public static string markupString( this DOMRange ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.markupString( ___this, CachedSelectors.markupString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return Runtime.UnwrapNSString( ___result );
		}
		unsafe public static WebArchive webArchive( this DOMRange ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webArchive( ___this, CachedSelectors.webArchive, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebArchive( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr markupString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr webArchive( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector markupString = "markupString";
			public static readonly Selector webArchive = "webArchive";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class WebKitExtensionsOfNSNotificationCenter {
		private static int ___lazyLoad = WebKitCachedClasses.___lazyLoad;
		unsafe public static void postNotificationOnMainThreadWithName_object_( this NSNotificationCenter ___this, NObjective.RuntimeObject name, NObjective.RuntimeObject @object ) {
			RuntimeObject ___occuredException;
			NativeMethods.postNotificationOnMainThreadWithName_object_( ___this, CachedSelectors.postNotificationOnMainThreadWithName_object_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), name, @object );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void postNotificationOnMainThreadWithName_object_userInfo_( this NSNotificationCenter ___this, NObjective.RuntimeObject name, NObjective.RuntimeObject @object, NObjective.RuntimeObject userInfo ) {
			RuntimeObject ___occuredException;
			NativeMethods.postNotificationOnMainThreadWithName_object_userInfo_( ___this, CachedSelectors.postNotificationOnMainThreadWithName_object_userInfo_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ), name, @object, userInfo );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		unsafe public static void postNotificationOnMainThreadWithName_object_userInfo_waitUntilDone_( this NSNotificationCenter ___this, NObjective.RuntimeObject name, NObjective.RuntimeObject @object, NObjective.RuntimeObject userInfo, char waitUntilDone ) {
			RuntimeObject ___occuredException;
			NativeMethods.postNotificationOnMainThreadWithName_object_userInfo_waitUntilDone_( ___this, CachedSelectors.postNotificationOnMainThreadWithName_object_userInfo_waitUntilDone_, out ___occuredException, sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( NObjective.RuntimeObject ) + sizeof( char ), name, @object, userInfo, waitUntilDone );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void postNotificationOnMainThreadWithName_object_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, NObjective.RuntimeObject @object );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void postNotificationOnMainThreadWithName_object_userInfo_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, NObjective.RuntimeObject @object, NObjective.RuntimeObject userInfo );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern void postNotificationOnMainThreadWithName_object_userInfo_waitUntilDone_( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize, NObjective.RuntimeObject name, NObjective.RuntimeObject @object, NObjective.RuntimeObject userInfo, char waitUntilDone );
		}
		static internal class CachedSelectors {
			public static readonly Selector postNotificationOnMainThreadWithName_object_ = "postNotificationOnMainThreadWithName:object:";
			public static readonly Selector postNotificationOnMainThreadWithName_object_userInfo_ = "postNotificationOnMainThreadWithName:object:userInfo:";
			public static readonly Selector postNotificationOnMainThreadWithName_object_userInfo_waitUntilDone_ = "postNotificationOnMainThreadWithName:object:userInfo:waitUntilDone:";
		}
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class WebKitExtensionsOfNSString {
		private static int ___lazyLoad = WebKitCachedClasses.___lazyLoad;
	}
	[StructLayoutAttribute( LayoutKind.Explicit )]
	public static class WebKitExtensionsOfDOMNode {
		private static int ___lazyLoad = WebKitCachedClasses.___lazyLoad;
		unsafe public static NObjective.RuntimeObject markupString( this DOMNode ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.markupString( ___this, CachedSelectors.markupString, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new NObjective.RuntimeObject( ___result );
		}
		unsafe public static WebArchive webArchive( this DOMNode ___this ) {
			RuntimeObject ___occuredException;
			var ___result = NativeMethods.webArchive( ___this, CachedSelectors.webArchive, out ___occuredException, 0 );
			if( ___occuredException != RuntimeObject.Null ) throw RuntimeException.Create( ___occuredException ); 
			return new WebArchive( ___result );
		}
		private static class NativeMethods {
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr markupString( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
			[DllImport( Runtime.InteropLibrary, EntryPoint = "objc_msgSend_eh2" )]
			public static extern IntPtr webArchive( RuntimeObject ___object, Selector ___selector, out RuntimeObject ___occuredException, int ___stackSize );
		}
		static internal class CachedSelectors {
			public static readonly Selector markupString = "markupString";
			public static readonly Selector webArchive = "webArchive";
		}
	}
	static internal class WebKitCachedClasses {
		static internal int ___lazyLoad = Platform.NativeMethods.dlopen( "/System/Library/Frameworks/WebKit.framework/Versions/A/WebKit" );
		public static readonly RuntimeClass _WebCoreHistoryProvider = "_WebCoreHistoryProvider";
		public static readonly RuntimeClass _WebSafeForwarder = "_WebSafeForwarder";
		public static readonly RuntimeClass CarbonWindowAdapter = "CarbonWindowAdapter";
		public static readonly RuntimeClass CarbonWindowContentView = "CarbonWindowContentView";
		public static readonly RuntimeClass CarbonWindowFrame = "CarbonWindowFrame";
		public static readonly RuntimeClass HIViewAdapter = "HIViewAdapter";
		public static readonly RuntimeClass MenuItemProxy = "MenuItemProxy";
		public static readonly RuntimeClass NonBlockingPanel = "NonBlockingPanel";
		public static readonly RuntimeClass PDFPrefUpdatingProxy = "PDFPrefUpdatingProxy";
		public static readonly RuntimeClass ThreadEnabler = "ThreadEnabler";
		public static readonly RuntimeClass WebArchive = "WebArchive";
		public static readonly RuntimeClass WebArchivePrivate = "WebArchivePrivate";
		public static readonly RuntimeClass WebArchiver = "WebArchiver";
		public static readonly RuntimeClass WebAuthenticationPanel = "WebAuthenticationPanel";
		public static readonly RuntimeClass WebBackForwardList = "WebBackForwardList";
		public static readonly RuntimeClass WebBaseNetscapePluginStream = "WebBaseNetscapePluginStream";
		public static readonly RuntimeClass WebBaseNetscapePluginView = "WebBaseNetscapePluginView";
		public static readonly RuntimeClass WebBasePluginPackage = "WebBasePluginPackage";
		public static readonly RuntimeClass WebCache = "WebCache";
		public static readonly RuntimeClass WebClipView = "WebClipView";
		public static readonly RuntimeClass WebCoreScrollView = "WebCoreScrollView";
		public static readonly RuntimeClass WebCoreStatistics = "WebCoreStatistics";
		public static readonly RuntimeClass WebDatabaseManager = "WebDatabaseManager";
		public static readonly RuntimeClass WebDataSource = "WebDataSource";
		public static readonly RuntimeClass WebDataSourcePrivate = "WebDataSourcePrivate";
		public static readonly RuntimeClass WebDefaultEditingDelegate = "WebDefaultEditingDelegate";
		public static readonly RuntimeClass WebDefaultPolicyDelegate = "WebDefaultPolicyDelegate";
		public static readonly RuntimeClass WebDefaultScriptDebugDelegate = "WebDefaultScriptDebugDelegate";
		public static readonly RuntimeClass WebDefaultUIDelegate = "WebDefaultUIDelegate";
		public static readonly RuntimeClass WebDownload = "WebDownload";
		public static readonly RuntimeClass WebDownloadInternal = "WebDownloadInternal";
		public static readonly RuntimeClass WebDynamicScrollBarsView = "WebDynamicScrollBarsView";
		public static readonly RuntimeClass WebEditCommand = "WebEditCommand";
		public static readonly RuntimeClass WebEditorUndoTarget = "WebEditorUndoTarget";
		public static readonly RuntimeClass WebElementDictionary = "WebElementDictionary";
		public static readonly RuntimeClass WebFormDelegate = "WebFormDelegate";
		public static readonly RuntimeClass WebFrame = "WebFrame";
		public static readonly RuntimeClass WebFrameBridge = "WebFrameBridge";
		public static readonly RuntimeClass WebFramePolicyListener = "WebFramePolicyListener";
		public static readonly RuntimeClass WebFramePrivate = "WebFramePrivate";
		public static readonly RuntimeClass WebFrameView = "WebFrameView";
		public static readonly RuntimeClass WebFrameViewPrivate = "WebFrameViewPrivate";
		public static readonly RuntimeClass WebHistory = "WebHistory";
		public static readonly RuntimeClass WebHistoryItem = "WebHistoryItem";
		public static readonly RuntimeClass WebHistoryPrivate = "WebHistoryPrivate";
		public static readonly RuntimeClass WebHTMLRepresentation = "WebHTMLRepresentation";
		public static readonly RuntimeClass WebHTMLRepresentationPrivate = "WebHTMLRepresentationPrivate";
		public static readonly RuntimeClass WebHTMLView = "WebHTMLView";
		public static readonly RuntimeClass WebHTMLViewPrivate = "WebHTMLViewPrivate";
		public static readonly RuntimeClass WebIconDatabase = "WebIconDatabase";
		public static readonly RuntimeClass WebIconDatabasePrivate = "WebIconDatabasePrivate";
		public static readonly RuntimeClass WebImageRendererFactory = "WebImageRendererFactory";
		public static readonly RuntimeClass WebInspector = "WebInspector";
		public static readonly RuntimeClass WebInspectorWindowController = "WebInspectorWindowController";
		public static readonly RuntimeClass WebJavaScriptTextInputPanel = "WebJavaScriptTextInputPanel";
		public static readonly RuntimeClass WebKeyGenerator = "WebKeyGenerator";
		public static readonly RuntimeClass WebKitPluginContainerView = "WebKitPluginContainerView";
		public static readonly RuntimeClass WebKitRenderTreeCopier = "WebKitRenderTreeCopier";
		public static readonly RuntimeClass WebKitStatistics = "WebKitStatistics";
		public static readonly RuntimeClass WebNetscapePluginDocumentView = "WebNetscapePluginDocumentView";
		public static readonly RuntimeClass WebNetscapePluginPackage = "WebNetscapePluginPackage";
		public static readonly RuntimeClass WebNetscapePluginStream = "WebNetscapePluginStream";
		public static readonly RuntimeClass WebNodeHighlight = "WebNodeHighlight";
		public static readonly RuntimeClass WebNodeHighlightFadeInAnimation = "WebNodeHighlightFadeInAnimation";
		public static readonly RuntimeClass WebNodeHighlightView = "WebNodeHighlightView";
		public static readonly RuntimeClass WebNullPluginView = "WebNullPluginView";
		public static readonly RuntimeClass WebPanelAuthenticationHandler = "WebPanelAuthenticationHandler";
		public static readonly RuntimeClass WebPDFRepresentation = "WebPDFRepresentation";
		public static readonly RuntimeClass WebPDFView = "WebPDFView";
		public static readonly RuntimeClass WebPluginContainerCheck = "WebPluginContainerCheck";
		public static readonly RuntimeClass WebPluginController = "WebPluginController";
		public static readonly RuntimeClass WebPluginDatabase = "WebPluginDatabase";
		public static readonly RuntimeClass WebPluginPackage = "WebPluginPackage";
		public static readonly RuntimeClass WebPluginRequest = "WebPluginRequest";
		public static readonly RuntimeClass WebPolicyDecisionListener = "WebPolicyDecisionListener";
		public static readonly RuntimeClass WebPolicyDecisionListenerPrivate = "WebPolicyDecisionListenerPrivate";
		public static readonly RuntimeClass WebPreferences = "WebPreferences";
		public static readonly RuntimeClass WebPreferencesPrivate = "WebPreferencesPrivate";
		public static readonly RuntimeClass WebProgressItem = "WebProgressItem";
		public static readonly RuntimeClass WebRenderNode = "WebRenderNode";
		public static readonly RuntimeClass WebResource = "WebResource";
		public static readonly RuntimeClass WebResourcePrivate = "WebResourcePrivate";
		public static readonly RuntimeClass WebScriptCallFrame = "WebScriptCallFrame";
		public static readonly RuntimeClass WebScriptDebugger = "WebScriptDebugger";
		public static readonly RuntimeClass WebScriptDebugServer = "WebScriptDebugServer";
		public static readonly RuntimeClass WebSearchableTextView = "WebSearchableTextView";
		public static readonly RuntimeClass WebSecurityOrigin = "WebSecurityOrigin";
		public static readonly RuntimeClass WebStringTruncator = "WebStringTruncator";
		public static readonly RuntimeClass WebTextCompleteController = "WebTextCompleteController";
		public static readonly RuntimeClass WebUnarchivingState = "WebUnarchivingState";
		public static readonly RuntimeClass WebURLsWithTitles = "WebURLsWithTitles";
		public static readonly RuntimeClass WebView = "WebView";
		public static readonly RuntimeClass WebViewFactory = "WebViewFactory";
		public static readonly RuntimeClass WebViewPrivate = "WebViewPrivate";
		public static readonly RuntimeClass WebWindowWatcher = "WebWindowWatcher";
		public static readonly RuntimeClass DOMDocument = "DOMDocument";
		public static readonly RuntimeClass NSControl = "NSControl";
		public static readonly RuntimeClass NSWindow = "NSWindow";
		public static readonly RuntimeClass NSMenu = "NSMenu";
		public static readonly RuntimeClass DOMHTMLIFrameElement = "DOMHTMLIFrameElement";
		public static readonly RuntimeClass NSObject = "NSObject";
		public static readonly RuntimeClass DOMHTMLObjectElement = "DOMHTMLObjectElement";
		public static readonly RuntimeClass DOMHTMLFrameElement = "DOMHTMLFrameElement";
		public static readonly RuntimeClass DOMRange = "DOMRange";
		public static readonly RuntimeClass NSNotificationCenter = "NSNotificationCenter";
		public static readonly RuntimeClass NSString = "NSString";
		public static readonly RuntimeClass DOMNode = "DOMNode";
	}
}
