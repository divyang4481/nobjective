//
// Copyright (C) 2008 Eugeny Grishul
//
// See license in License.txt
//
// This file is generated by RegenLexer project
//

using System;
using System.Collections.Generic;

namespace NObjectiveAST
{
	public partial class Lexer
	{
		public enum Tokens
		{
			EOF,
			Literal,
			Identifier,
			_long_double,
			_long_long,
			_unsigned_char,
			_unsigned_int,
			_unsigned_long,
			_unsigned_long_long,
			_unsigned_short,
			AddAssign,
			Assign,
			at_catch,
			at_class,
			at_end,
			at_finally,
			at_implementation,
			at_interface,
			at_optional,
			at_private,
			at_property,
			at_protected,
			at_protocol,
			at_public,
			at_required,
			at_throw,
			at_try,
			BitwiseAnd,
			BitwiseAndAssign,
			BitwiseComplement,
			BitwiseOr,
			BitwiseOrAssign,
			CloseCurlyBrace,
			CloseParenthesis,
			CloseSquareBracket,
			Colon,
			Comma,
			Decrement,
			Div,
			DivideAssign,
			Dot,
			Ellipsis,
			Equality,
			GreaterThan,
			GreaterThanOrEqual,
			Increment,
			Inequality,
			LessThan,
			LessThanOrEqual,
			LogicalAnd,
			LogicalOr,
			MemberSelection,
			Minus,
			Mod,
			ModulusAssign,
			Multiply,
			MultiplyAssign,
			Not,
			OpenCurlyBrace,
			OpenParenthesis,
			OpenSquareBracket,
			Plus,
			PointerToMemberAccessFromPointer,
			PointerToMemberAccessFromReference,
			Question,
			ScopeResolution,
			Semicolon,
			ShiftLeft,
			ShiftLeftAssign,
			SubtractAssign,
			Xor,
			XorAssign,
			___asm,
			___asm__,
			___attribute__,
			___inline,
			___inline__,
			___restrict,
			___forceinline,
			_asm,
			_auto,
			_bool,
			_break,
			_byte,
			_case,
			_catch,
			_char,
			_unsigned,
			_class,
			_const,
			_const_cast,
			_continue,
			_default,
			_delete,
			_do,
			_double,
			_dynamic_cast,
			_else,
			_enum,
			_explicit,
			_extern,
			_false,
			_float,
			_for,
			_goto,
			_if,
			_inline,
			_int,
			_long,
			_namespace,
			_new,
			_operator,
			_private,
			_protected,
			_public,
			_register,
			_reinterpret_cast,
			_return,
			_restrict,
			_short,
			_signed,
			_sizeof,
			_static,
			_static_cast,
			_struct,
			_switch,
			_template,
			_this,
			_throw,
			_true,
			_try,
			_typedef,
			_typeid,
			_typename,
			_union,
			_using,
			_virtual,
			_void,
			_volatile,
			_while,
		}

		private static readonly int[] HexValue = new[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, };
		private static readonly bool[] IsIdentifierCharacter = new[] { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, };
		private static readonly bool[] IsIdentifierStartCharacter = new[] { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, };

		public static string GetTokenString( Tokens token )
		{
			switch( token )
			{
				case Tokens._long_double: return "long double";
				case Tokens._long_long: return "long long";
				case Tokens._unsigned_char: return "unsigned char";
				case Tokens._unsigned_int: return "unsigned int";
				case Tokens._unsigned_long: return "unsigned long";
				case Tokens._unsigned_long_long: return "unsigned long long";
				case Tokens._unsigned_short: return "unsigned short";
				case Tokens.AddAssign: return "+=";
				case Tokens.Assign: return "=";
				case Tokens.at_catch: return "@catch";
				case Tokens.at_class: return "@class";
				case Tokens.at_end: return "@end";
				case Tokens.at_finally: return "@finally";
				case Tokens.at_implementation: return "@implementation";
				case Tokens.at_interface: return "@interface";
				case Tokens.at_optional: return "@optional";
				case Tokens.at_private: return "@private";
				case Tokens.at_property: return "@property";
				case Tokens.at_protected: return "@protected";
				case Tokens.at_protocol: return "@protocol";
				case Tokens.at_public: return "@public";
				case Tokens.at_required: return "@required";
				case Tokens.at_throw: return "@throw";
				case Tokens.at_try: return "@try";
				case Tokens.BitwiseAnd: return "&";
				case Tokens.BitwiseAndAssign: return "&=";
				case Tokens.BitwiseComplement: return "~";
				case Tokens.BitwiseOr: return "|";
				case Tokens.BitwiseOrAssign: return "|=";
				case Tokens.CloseCurlyBrace: return "}";
				case Tokens.CloseParenthesis: return ")";
				case Tokens.CloseSquareBracket: return "]";
				case Tokens.Colon: return ":";
				case Tokens.Comma: return ",";
				case Tokens.Decrement: return "--";
				case Tokens.Div: return "/";
				case Tokens.DivideAssign: return "/=";
				case Tokens.Dot: return ".";
				case Tokens.Ellipsis: return "...";
				case Tokens.Equality: return "==";
				case Tokens.GreaterThan: return ">";
				case Tokens.GreaterThanOrEqual: return ">=";
				case Tokens.Increment: return "++";
				case Tokens.Inequality: return "!=";
				case Tokens.LessThan: return "<";
				case Tokens.LessThanOrEqual: return "<=";
				case Tokens.LogicalAnd: return "&&";
				case Tokens.LogicalOr: return "||";
				case Tokens.MemberSelection: return "->";
				case Tokens.Minus: return "-";
				case Tokens.Mod: return "%";
				case Tokens.ModulusAssign: return "%=";
				case Tokens.Multiply: return "*";
				case Tokens.MultiplyAssign: return "*=";
				case Tokens.Not: return "!";
				case Tokens.OpenCurlyBrace: return "{";
				case Tokens.OpenParenthesis: return "(";
				case Tokens.OpenSquareBracket: return "[";
				case Tokens.Plus: return "+";
				case Tokens.PointerToMemberAccessFromPointer: return "->*";
				case Tokens.PointerToMemberAccessFromReference: return ".*";
				case Tokens.Question: return "?";
				case Tokens.ScopeResolution: return "::";
				case Tokens.Semicolon: return ";";
				case Tokens.ShiftLeft: return "<<";
				case Tokens.ShiftLeftAssign: return "<<=";
				case Tokens.SubtractAssign: return "-=";
				case Tokens.Xor: return "^";
				case Tokens.XorAssign: return "^=";
				case Tokens.___asm: return "__asm";
				case Tokens.___asm__: return "__asm__";
				case Tokens.___attribute__: return "__attribute__";
				case Tokens.___inline: return "__inline";
				case Tokens.___inline__: return "__inline__";
				case Tokens.___restrict: return "__restrict";
				case Tokens.___forceinline: return "__forceinline";
				case Tokens._asm: return "asm";
				case Tokens._auto: return "auto";
				case Tokens._bool: return "bool";
				case Tokens._break: return "break";
				case Tokens._byte: return "byte";
				case Tokens._case: return "case";
				case Tokens._catch: return "catch";
				case Tokens._char: return "char";
				case Tokens._unsigned: return "unsigned";
				case Tokens._class: return "class";
				case Tokens._const: return "const";
				case Tokens._const_cast: return "const_cast";
				case Tokens._continue: return "continue";
				case Tokens._default: return "default";
				case Tokens._delete: return "delete";
				case Tokens._do: return "do";
				case Tokens._double: return "double";
				case Tokens._dynamic_cast: return "dynamic_cast";
				case Tokens._else: return "else";
				case Tokens._enum: return "enum";
				case Tokens._explicit: return "explicit";
				case Tokens._extern: return "extern";
				case Tokens._false: return "false";
				case Tokens._float: return "float";
				case Tokens._for: return "for";
				case Tokens._goto: return "goto";
				case Tokens._if: return "if";
				case Tokens._inline: return "inline";
				case Tokens._int: return "int";
				case Tokens._long: return "long";
				case Tokens._namespace: return "namespace";
				case Tokens._new: return "new";
				case Tokens._operator: return "operator";
				case Tokens._private: return "private";
				case Tokens._protected: return "protected";
				case Tokens._public: return "public";
				case Tokens._register: return "register";
				case Tokens._reinterpret_cast: return "reinterpret_cast";
				case Tokens._return: return "return";
				case Tokens._restrict: return "restrict";
				case Tokens._short: return "short";
				case Tokens._signed: return "signed";
				case Tokens._sizeof: return "sizeof";
				case Tokens._static: return "static";
				case Tokens._static_cast: return "static_cast";
				case Tokens._struct: return "struct";
				case Tokens._switch: return "switch";
				case Tokens._template: return "template";
				case Tokens._this: return "this";
				case Tokens._throw: return "throw";
				case Tokens._true: return "true";
				case Tokens._try: return "try";
				case Tokens._typedef: return "typedef";
				case Tokens._typeid: return "typeid";
				case Tokens._typename: return "typename";
				case Tokens._union: return "union";
				case Tokens._using: return "using";
				case Tokens._virtual: return "virtual";
				case Tokens._void: return "void";
				case Tokens._volatile: return "volatile";
				case Tokens._while: return "while";
			}
			throw new ArgumentException( "token" );
		}

		private void TokenizeWord()
		{
			if( _readIndex + 0 >= _text.Length )
				goto default_recognizer;
			switch( ( byte ) _text[_readIndex + 0] )
			{
				case ( byte ) '_':
				if( _readIndex + 1 >= _text.Length )
					goto default_recognizer;
				switch( ( byte ) _text[_readIndex + 1] )
				{
					case ( byte ) '_':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'a':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 's':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'm':
								if( _readIndex + 5 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 5]] )
								{
									NewToken( Tokens.___asm );
									_readIndex += 5;
									return;
									
								}
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) '_':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) '_':
										if( _readIndex + 7 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 7]] )
										{
											NewToken( Tokens.___asm__ );
											_readIndex += 7;
											return;
											
										}
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							case ( byte ) 't':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 't':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'r':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 'i':
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										switch( ( byte ) _text[_readIndex + 7] )
										{
											case ( byte ) 'b':
											if( _readIndex + 8 >= _text.Length )
												goto default_recognizer;
											switch( ( byte ) _text[_readIndex + 8] )
											{
												case ( byte ) 'u':
												if( _readIndex + 9 >= _text.Length )
													goto default_recognizer;
												switch( ( byte ) _text[_readIndex + 9] )
												{
													case ( byte ) 't':
													if( _readIndex + 10 >= _text.Length )
														goto default_recognizer;
													switch( ( byte ) _text[_readIndex + 10] )
													{
														case ( byte ) 'e':
														if( _readIndex + 11 >= _text.Length )
															goto default_recognizer;
														switch( ( byte ) _text[_readIndex + 11] )
														{
															case ( byte ) '_':
															if( _readIndex + 12 >= _text.Length )
																goto default_recognizer;
															switch( ( byte ) _text[_readIndex + 12] )
															{
																case ( byte ) '_':
																if( _readIndex + 13 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 13]] )
																{
																	NewToken( Tokens.___attribute__ );
																	_readIndex += 13;
																	return;
																	
																}
																if( _readIndex + 13 >= _text.Length )
																	goto default_recognizer;
																break;
																
															}
															break;
															
														}
														break;
														
													}
													break;
													
												}
												break;
												
											}
											break;
											
										}
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						case ( byte ) 'i':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'n':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'l':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'i':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 'n':
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										switch( ( byte ) _text[_readIndex + 7] )
										{
											case ( byte ) 'e':
											if( _readIndex + 8 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 8]] )
											{
												NewToken( Tokens.___inline );
												_readIndex += 8;
												return;
												
											}
											if( _readIndex + 8 >= _text.Length )
												goto default_recognizer;
											switch( ( byte ) _text[_readIndex + 8] )
											{
												case ( byte ) '_':
												if( _readIndex + 9 >= _text.Length )
													goto default_recognizer;
												switch( ( byte ) _text[_readIndex + 9] )
												{
													case ( byte ) '_':
													if( _readIndex + 10 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 10]] )
													{
														NewToken( Tokens.___inline__ );
														_readIndex += 10;
														return;
														
													}
													if( _readIndex + 10 >= _text.Length )
														goto default_recognizer;
													break;
													
												}
												break;
												
											}
											break;
											
										}
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						case ( byte ) 'r':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'e':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 's':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 't':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 'r':
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										switch( ( byte ) _text[_readIndex + 7] )
										{
											case ( byte ) 'i':
											if( _readIndex + 8 >= _text.Length )
												goto default_recognizer;
											switch( ( byte ) _text[_readIndex + 8] )
											{
												case ( byte ) 'c':
												if( _readIndex + 9 >= _text.Length )
													goto default_recognizer;
												switch( ( byte ) _text[_readIndex + 9] )
												{
													case ( byte ) 't':
													if( _readIndex + 10 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 10]] )
													{
														NewToken( Tokens.___restrict );
														_readIndex += 10;
														return;
														
													}
													if( _readIndex + 10 >= _text.Length )
														goto default_recognizer;
													break;
													
												}
												break;
												
											}
											break;
											
										}
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						case ( byte ) 'f':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'o':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'r':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'c':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 'e':
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										switch( ( byte ) _text[_readIndex + 7] )
										{
											case ( byte ) 'i':
											if( _readIndex + 8 >= _text.Length )
												goto default_recognizer;
											switch( ( byte ) _text[_readIndex + 8] )
											{
												case ( byte ) 'n':
												if( _readIndex + 9 >= _text.Length )
													goto default_recognizer;
												switch( ( byte ) _text[_readIndex + 9] )
												{
													case ( byte ) 'l':
													if( _readIndex + 10 >= _text.Length )
														goto default_recognizer;
													switch( ( byte ) _text[_readIndex + 10] )
													{
														case ( byte ) 'i':
														if( _readIndex + 11 >= _text.Length )
															goto default_recognizer;
														switch( ( byte ) _text[_readIndex + 11] )
														{
															case ( byte ) 'n':
															if( _readIndex + 12 >= _text.Length )
																goto default_recognizer;
															switch( ( byte ) _text[_readIndex + 12] )
															{
																case ( byte ) 'e':
																if( _readIndex + 13 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 13]] )
																{
																	NewToken( Tokens.___forceinline );
																	_readIndex += 13;
																	return;
																	
																}
																if( _readIndex + 13 >= _text.Length )
																	goto default_recognizer;
																break;
																
															}
															break;
															
														}
														break;
														
													}
													break;
													
												}
												break;
												
											}
											break;
											
										}
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					
				}
				break;
				case ( byte ) 'a':
				if( _readIndex + 1 >= _text.Length )
					goto default_recognizer;
				switch( ( byte ) _text[_readIndex + 1] )
				{
					case ( byte ) 's':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'm':
						if( _readIndex + 3 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 3]] )
						{
							NewToken( Tokens._asm );
							_readIndex += 3;
							return;
							
						}
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						break;
						
					}
					break;
					case ( byte ) 'u':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 't':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'o':
							if( _readIndex + 4 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 4]] )
							{
								NewToken( Tokens._auto );
								_readIndex += 4;
								return;
								
							}
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							break;
							
						}
						break;
						
					}
					break;
					
				}
				break;
				case ( byte ) 'b':
				if( _readIndex + 1 >= _text.Length )
					goto default_recognizer;
				switch( ( byte ) _text[_readIndex + 1] )
				{
					case ( byte ) 'o':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'o':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'l':
							if( _readIndex + 4 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 4]] )
							{
								NewToken( Tokens._bool );
								_readIndex += 4;
								return;
								
							}
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							break;
							
						}
						break;
						
					}
					break;
					case ( byte ) 'r':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'e':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'a':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'k':
								if( _readIndex + 5 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 5]] )
								{
									NewToken( Tokens._break );
									_readIndex += 5;
									return;
									
								}
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					case ( byte ) 'y':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 't':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'e':
							if( _readIndex + 4 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 4]] )
							{
								NewToken( Tokens._byte );
								_readIndex += 4;
								return;
								
							}
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							break;
							
						}
						break;
						
					}
					break;
					
				}
				break;
				case ( byte ) 'c':
				if( _readIndex + 1 >= _text.Length )
					goto default_recognizer;
				switch( ( byte ) _text[_readIndex + 1] )
				{
					case ( byte ) 'a':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 's':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'e':
							if( _readIndex + 4 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 4]] )
							{
								NewToken( Tokens._case );
								_readIndex += 4;
								return;
								
							}
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							break;
							
						}
						break;
						case ( byte ) 't':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'c':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'h':
								if( _readIndex + 5 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 5]] )
								{
									NewToken( Tokens._catch );
									_readIndex += 5;
									return;
									
								}
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					case ( byte ) 'h':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'a':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'r':
							if( _readIndex + 4 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 4]] )
							{
								if( _writeIndex >= 1 && _tokens[_writeIndex - 1].Type == Tokens._signed ) _writeIndex--;
								if( _writeIndex >= 1 && _tokens[_writeIndex - 1].Type == Tokens._unsigned )
								{
									_tokens[_writeIndex - 1].Type = Tokens._unsigned_char;
									_readIndex += 4;
									return;
									
								}
								NewToken( Tokens._char );
								_readIndex += 4;
								return;
								
							}
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							break;
							
						}
						break;
						
					}
					break;
					case ( byte ) 'l':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'a':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 's':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 's':
								if( _readIndex + 5 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 5]] )
								{
									NewToken( Tokens._class );
									_readIndex += 5;
									return;
									
								}
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					case ( byte ) 'o':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'n':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 's':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 't':
								if( _readIndex + 5 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 5]] )
								{
									NewToken( Tokens._const );
									_readIndex += 5;
									return;
									
								}
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) '_':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 'c':
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										switch( ( byte ) _text[_readIndex + 7] )
										{
											case ( byte ) 'a':
											if( _readIndex + 8 >= _text.Length )
												goto default_recognizer;
											switch( ( byte ) _text[_readIndex + 8] )
											{
												case ( byte ) 's':
												if( _readIndex + 9 >= _text.Length )
													goto default_recognizer;
												switch( ( byte ) _text[_readIndex + 9] )
												{
													case ( byte ) 't':
													if( _readIndex + 10 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 10]] )
													{
														NewToken( Tokens._const_cast );
														_readIndex += 10;
														return;
														
													}
													if( _readIndex + 10 >= _text.Length )
														goto default_recognizer;
													break;
													
												}
												break;
												
											}
											break;
											
										}
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							case ( byte ) 't':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'i':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'n':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 'u':
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										switch( ( byte ) _text[_readIndex + 7] )
										{
											case ( byte ) 'e':
											if( _readIndex + 8 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 8]] )
											{
												NewToken( Tokens._continue );
												_readIndex += 8;
												return;
												
											}
											if( _readIndex + 8 >= _text.Length )
												goto default_recognizer;
											break;
											
										}
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					
				}
				break;
				case ( byte ) 'u':
				if( _readIndex + 1 >= _text.Length )
					goto default_recognizer;
				switch( ( byte ) _text[_readIndex + 1] )
				{
					case ( byte ) 'n':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 's':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'i':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'g':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'n':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 'e':
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										switch( ( byte ) _text[_readIndex + 7] )
										{
											case ( byte ) 'd':
											if( _readIndex + 8 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 8]] )
											{
												if( _writeIndex >= 1 && _tokens[_writeIndex - 1].Type == Tokens._char ) { _tokens[_writeIndex - 1].Type = Tokens._unsigned_char; _readIndex += 8; return; }
												if( _writeIndex >= 1 && _tokens[_writeIndex - 1].Type == Tokens._short ) { _tokens[_writeIndex - 1].Type = Tokens._unsigned_short; _readIndex += 8; return; }
												if( _writeIndex >= 1 && _tokens[_writeIndex - 1].Type == Tokens._int ) { _tokens[_writeIndex - 1].Type = Tokens._unsigned_int; _readIndex += 8; return; }
												if( _writeIndex >= 1 && _tokens[_writeIndex - 1].Type == Tokens._long ) { _tokens[_writeIndex - 1].Type = Tokens._unsigned_long; _readIndex += 8; return; }
												if( _writeIndex >= 1 && _tokens[_writeIndex - 1].Type == Tokens._long_long ) { _tokens[_writeIndex - 1].Type = Tokens._unsigned_long_long; _readIndex += 8; return; }
												NewToken( Tokens._unsigned );
												_readIndex += 8;
												return;
												
											}
											if( _readIndex + 8 >= _text.Length )
												goto default_recognizer;
											break;
											
										}
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						case ( byte ) 'i':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'o':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'n':
								if( _readIndex + 5 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 5]] )
								{
									NewToken( Tokens._union );
									_readIndex += 5;
									return;
									
								}
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					case ( byte ) 's':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'i':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'n':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'g':
								if( _readIndex + 5 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 5]] )
								{
									NewToken( Tokens._using );
									_readIndex += 5;
									return;
									
								}
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					
				}
				break;
				case ( byte ) 'd':
				if( _readIndex + 1 >= _text.Length )
					goto default_recognizer;
				switch( ( byte ) _text[_readIndex + 1] )
				{
					case ( byte ) 'e':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'f':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'a':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'u':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'l':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 't':
										if( _readIndex + 7 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 7]] )
										{
											NewToken( Tokens._default );
											_readIndex += 7;
											return;
											
										}
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						case ( byte ) 'l':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'e':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 't':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'e':
									if( _readIndex + 6 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 6]] )
									{
										NewToken( Tokens._delete );
										_readIndex += 6;
										return;
										
									}
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					case ( byte ) 'o':
					if( _readIndex + 2 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 2]] )
					{
						NewToken( Tokens._do );
						_readIndex += 2;
						return;
						
					}
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'u':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'b':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'l':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'e':
									if( _readIndex + 6 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 6]] )
									{
										if( _writeIndex >= 1 && _tokens[_writeIndex - 1].Type == Tokens._long )
										{
											_writeIndex--;
											NewToken( Tokens._long_double );
											_readIndex += 6;
											return;
											
										}
										NewToken( Tokens._double );
										_readIndex += 6;
										return;
										
									}
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					case ( byte ) 'y':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'n':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'a':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'm':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'i':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 'c':
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										switch( ( byte ) _text[_readIndex + 7] )
										{
											case ( byte ) '_':
											if( _readIndex + 8 >= _text.Length )
												goto default_recognizer;
											switch( ( byte ) _text[_readIndex + 8] )
											{
												case ( byte ) 'c':
												if( _readIndex + 9 >= _text.Length )
													goto default_recognizer;
												switch( ( byte ) _text[_readIndex + 9] )
												{
													case ( byte ) 'a':
													if( _readIndex + 10 >= _text.Length )
														goto default_recognizer;
													switch( ( byte ) _text[_readIndex + 10] )
													{
														case ( byte ) 's':
														if( _readIndex + 11 >= _text.Length )
															goto default_recognizer;
														switch( ( byte ) _text[_readIndex + 11] )
														{
															case ( byte ) 't':
															if( _readIndex + 12 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 12]] )
															{
																NewToken( Tokens._dynamic_cast );
																_readIndex += 12;
																return;
																
															}
															if( _readIndex + 12 >= _text.Length )
																goto default_recognizer;
															break;
															
														}
														break;
														
													}
													break;
													
												}
												break;
												
											}
											break;
											
										}
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					
				}
				break;
				case ( byte ) 'e':
				if( _readIndex + 1 >= _text.Length )
					goto default_recognizer;
				switch( ( byte ) _text[_readIndex + 1] )
				{
					case ( byte ) 'l':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 's':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'e':
							if( _readIndex + 4 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 4]] )
							{
								NewToken( Tokens._else );
								_readIndex += 4;
								return;
								
							}
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							break;
							
						}
						break;
						
					}
					break;
					case ( byte ) 'n':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'u':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'm':
							if( _readIndex + 4 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 4]] )
							{
								NewToken( Tokens._enum );
								_readIndex += 4;
								return;
								
							}
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							break;
							
						}
						break;
						
					}
					break;
					case ( byte ) 'x':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'p':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'l':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'i':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'c':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 'i':
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										switch( ( byte ) _text[_readIndex + 7] )
										{
											case ( byte ) 't':
											if( _readIndex + 8 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 8]] )
											{
												NewToken( Tokens._explicit );
												_readIndex += 8;
												return;
												
											}
											if( _readIndex + 8 >= _text.Length )
												goto default_recognizer;
											break;
											
										}
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						case ( byte ) 't':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'e':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'r':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'n':
									if( _readIndex + 6 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 6]] )
									{
										NewToken( Tokens._extern );
										_readIndex += 6;
										return;
										
									}
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					
				}
				break;
				case ( byte ) 'f':
				if( _readIndex + 1 >= _text.Length )
					goto default_recognizer;
				switch( ( byte ) _text[_readIndex + 1] )
				{
					case ( byte ) 'a':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'l':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 's':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'e':
								if( _readIndex + 5 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 5]] )
								{
									NewToken( Tokens._false );
									_readIndex += 5;
									return;
									
								}
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					case ( byte ) 'l':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'o':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'a':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 't':
								if( _readIndex + 5 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 5]] )
								{
									NewToken( Tokens._float );
									_readIndex += 5;
									return;
									
								}
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					case ( byte ) 'o':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'r':
						if( _readIndex + 3 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 3]] )
						{
							NewToken( Tokens._for );
							_readIndex += 3;
							return;
							
						}
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						break;
						
					}
					break;
					
				}
				break;
				case ( byte ) 'g':
				if( _readIndex + 1 >= _text.Length )
					goto default_recognizer;
				switch( ( byte ) _text[_readIndex + 1] )
				{
					case ( byte ) 'o':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 't':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'o':
							if( _readIndex + 4 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 4]] )
							{
								NewToken( Tokens._goto );
								_readIndex += 4;
								return;
								
							}
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							break;
							
						}
						break;
						
					}
					break;
					
				}
				break;
				case ( byte ) 'i':
				if( _readIndex + 1 >= _text.Length )
					goto default_recognizer;
				switch( ( byte ) _text[_readIndex + 1] )
				{
					case ( byte ) 'f':
					if( _readIndex + 2 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 2]] )
					{
						NewToken( Tokens._if );
						_readIndex += 2;
						return;
						
					}
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					break;
					case ( byte ) 'n':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'l':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'i':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'n':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'e':
									if( _readIndex + 6 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 6]] )
									{
										NewToken( Tokens._inline );
										_readIndex += 6;
										return;
										
									}
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						case ( byte ) 't':
						if( _readIndex + 3 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 3]] )
						{
							if( _writeIndex >= 1 && _tokens[_writeIndex - 1].Type == Tokens._signed ) _writeIndex--;
							if( _writeIndex >= 1 && _tokens[_writeIndex - 1].Type == Tokens._unsigned )
							{
								_tokens[_writeIndex - 1].Type = Tokens._unsigned_int;
								_readIndex += 3;
								return;
								
							}
							if( _writeIndex >= 1 && ( _tokens[_writeIndex - 1].Type == Tokens._long || _tokens[_writeIndex - 1].Type == Tokens._unsigned_long || _tokens[_writeIndex - 1].Type == Tokens._long_long || _tokens[_writeIndex - 1].Type == Tokens._unsigned_long_long ) )
							{
								_readIndex += 3;
								return;
								
							}
							NewToken( Tokens._int );
							_readIndex += 3;
							return;
							
						}
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						break;
						
					}
					break;
					
				}
				break;
				case ( byte ) 'l':
				if( _readIndex + 1 >= _text.Length )
					goto default_recognizer;
				switch( ( byte ) _text[_readIndex + 1] )
				{
					case ( byte ) 'o':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'n':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'g':
							if( _readIndex + 4 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 4]] )
							{
								if( _writeIndex >= 1 && _tokens[_writeIndex - 1].Type == Tokens._signed ) _writeIndex--;
								if( _writeIndex >= 1 && _tokens[_writeIndex - 1].Type == Tokens._unsigned )
								{
									_tokens[_writeIndex - 1].Type = Tokens._unsigned_long;
									_readIndex += 4;
									return;
									
								}
								if( _writeIndex >= 1 && _tokens[_writeIndex - 1].Type == Tokens._long )
								{
									_writeIndex--;
									NewToken( Tokens._long_long );
									_readIndex += 4;
									return;
									
								}
								if( _writeIndex >= 1 && _tokens[_writeIndex - 1].Type == Tokens._unsigned_long )
								{
									_writeIndex--;
									NewToken( Tokens._unsigned_long_long );
									_readIndex += 4;
									return;
									
								}
								NewToken( Tokens._long );
								_readIndex += 4;
								return;
								
							}
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							break;
							
						}
						break;
						
					}
					break;
					
				}
				break;
				case ( byte ) 'n':
				if( _readIndex + 1 >= _text.Length )
					goto default_recognizer;
				switch( ( byte ) _text[_readIndex + 1] )
				{
					case ( byte ) 'a':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'm':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'e':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 's':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'p':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 'a':
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										switch( ( byte ) _text[_readIndex + 7] )
										{
											case ( byte ) 'c':
											if( _readIndex + 8 >= _text.Length )
												goto default_recognizer;
											switch( ( byte ) _text[_readIndex + 8] )
											{
												case ( byte ) 'e':
												if( _readIndex + 9 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 9]] )
												{
													NewToken( Tokens._namespace );
													_readIndex += 9;
													return;
													
												}
												if( _readIndex + 9 >= _text.Length )
													goto default_recognizer;
												break;
												
											}
											break;
											
										}
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					case ( byte ) 'e':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'w':
						if( _readIndex + 3 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 3]] )
						{
							NewToken( Tokens._new );
							_readIndex += 3;
							return;
							
						}
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						break;
						
					}
					break;
					
				}
				break;
				case ( byte ) 'o':
				if( _readIndex + 1 >= _text.Length )
					goto default_recognizer;
				switch( ( byte ) _text[_readIndex + 1] )
				{
					case ( byte ) 'p':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'e':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'r':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'a':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 't':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 'o':
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										switch( ( byte ) _text[_readIndex + 7] )
										{
											case ( byte ) 'r':
											if( _readIndex + 8 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 8]] )
											{
												NewToken( Tokens._operator );
												_readIndex += 8;
												return;
												
											}
											if( _readIndex + 8 >= _text.Length )
												goto default_recognizer;
											break;
											
										}
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					
				}
				break;
				case ( byte ) 'p':
				if( _readIndex + 1 >= _text.Length )
					goto default_recognizer;
				switch( ( byte ) _text[_readIndex + 1] )
				{
					case ( byte ) 'r':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'i':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'v':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'a':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 't':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 'e':
										if( _readIndex + 7 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 7]] )
										{
											NewToken( Tokens._private );
											_readIndex += 7;
											return;
											
										}
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						case ( byte ) 'o':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 't':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'e':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'c':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 't':
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										switch( ( byte ) _text[_readIndex + 7] )
										{
											case ( byte ) 'e':
											if( _readIndex + 8 >= _text.Length )
												goto default_recognizer;
											switch( ( byte ) _text[_readIndex + 8] )
											{
												case ( byte ) 'd':
												if( _readIndex + 9 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 9]] )
												{
													NewToken( Tokens._protected );
													_readIndex += 9;
													return;
													
												}
												if( _readIndex + 9 >= _text.Length )
													goto default_recognizer;
												break;
												
											}
											break;
											
										}
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					case ( byte ) 'u':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'b':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'l':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'i':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'c':
									if( _readIndex + 6 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 6]] )
									{
										NewToken( Tokens._public );
										_readIndex += 6;
										return;
										
									}
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					
				}
				break;
				case ( byte ) 'r':
				if( _readIndex + 1 >= _text.Length )
					goto default_recognizer;
				switch( ( byte ) _text[_readIndex + 1] )
				{
					case ( byte ) 'e':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'g':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'i':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 's':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 't':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 'e':
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										switch( ( byte ) _text[_readIndex + 7] )
										{
											case ( byte ) 'r':
											if( _readIndex + 8 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 8]] )
											{
												NewToken( Tokens._register );
												_readIndex += 8;
												return;
												
											}
											if( _readIndex + 8 >= _text.Length )
												goto default_recognizer;
											break;
											
										}
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						case ( byte ) 'i':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'n':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 't':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'e':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 'r':
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										switch( ( byte ) _text[_readIndex + 7] )
										{
											case ( byte ) 'p':
											if( _readIndex + 8 >= _text.Length )
												goto default_recognizer;
											switch( ( byte ) _text[_readIndex + 8] )
											{
												case ( byte ) 'r':
												if( _readIndex + 9 >= _text.Length )
													goto default_recognizer;
												switch( ( byte ) _text[_readIndex + 9] )
												{
													case ( byte ) 'e':
													if( _readIndex + 10 >= _text.Length )
														goto default_recognizer;
													switch( ( byte ) _text[_readIndex + 10] )
													{
														case ( byte ) 't':
														if( _readIndex + 11 >= _text.Length )
															goto default_recognizer;
														switch( ( byte ) _text[_readIndex + 11] )
														{
															case ( byte ) '_':
															if( _readIndex + 12 >= _text.Length )
																goto default_recognizer;
															switch( ( byte ) _text[_readIndex + 12] )
															{
																case ( byte ) 'c':
																if( _readIndex + 13 >= _text.Length )
																	goto default_recognizer;
																switch( ( byte ) _text[_readIndex + 13] )
																{
																	case ( byte ) 'a':
																	if( _readIndex + 14 >= _text.Length )
																		goto default_recognizer;
																	switch( ( byte ) _text[_readIndex + 14] )
																	{
																		case ( byte ) 's':
																		if( _readIndex + 15 >= _text.Length )
																			goto default_recognizer;
																		switch( ( byte ) _text[_readIndex + 15] )
																		{
																			case ( byte ) 't':
																			if( _readIndex + 16 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 16]] )
																			{
																				NewToken( Tokens._reinterpret_cast );
																				_readIndex += 16;
																				return;
																				
																			}
																			if( _readIndex + 16 >= _text.Length )
																				goto default_recognizer;
																			break;
																			
																		}
																		break;
																		
																	}
																	break;
																	
																}
																break;
																
															}
															break;
															
														}
														break;
														
													}
													break;
													
												}
												break;
												
											}
											break;
											
										}
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						case ( byte ) 't':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'u':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'r':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'n':
									if( _readIndex + 6 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 6]] )
									{
										NewToken( Tokens._return );
										_readIndex += 6;
										return;
										
									}
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						case ( byte ) 's':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 't':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'r':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'i':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 'c':
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										switch( ( byte ) _text[_readIndex + 7] )
										{
											case ( byte ) 't':
											if( _readIndex + 8 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 8]] )
											{
												NewToken( Tokens._restrict );
												_readIndex += 8;
												return;
												
											}
											if( _readIndex + 8 >= _text.Length )
												goto default_recognizer;
											break;
											
										}
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					
				}
				break;
				case ( byte ) 's':
				if( _readIndex + 1 >= _text.Length )
					goto default_recognizer;
				switch( ( byte ) _text[_readIndex + 1] )
				{
					case ( byte ) 'h':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'o':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'r':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 't':
								if( _readIndex + 5 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 5]] )
								{
									if( _writeIndex >= 1 && _tokens[_writeIndex - 1].Type == Tokens._signed ) _writeIndex--;
									if( _writeIndex >= 1 && _tokens[_writeIndex - 1].Type == Tokens._unsigned )
									{
										_tokens[_writeIndex - 1].Type = Tokens._unsigned_short;
										_readIndex += 5;
										return;
										
									}
									NewToken( Tokens._short );
									_readIndex += 5;
									return;
									
								}
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					case ( byte ) 'i':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'g':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'n':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'e':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'd':
									if( _readIndex + 6 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 6]] )
									{
										NewToken( Tokens._signed );
										_readIndex += 6;
										return;
										
									}
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						case ( byte ) 'z':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'e':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'o':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'f':
									if( _readIndex + 6 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 6]] )
									{
										NewToken( Tokens._sizeof );
										_readIndex += 6;
										return;
										
									}
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					case ( byte ) 't':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'a':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 't':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'i':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'c':
									if( _readIndex + 6 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 6]] )
									{
										NewToken( Tokens._static );
										_readIndex += 6;
										return;
										
									}
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) '_':
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										switch( ( byte ) _text[_readIndex + 7] )
										{
											case ( byte ) 'c':
											if( _readIndex + 8 >= _text.Length )
												goto default_recognizer;
											switch( ( byte ) _text[_readIndex + 8] )
											{
												case ( byte ) 'a':
												if( _readIndex + 9 >= _text.Length )
													goto default_recognizer;
												switch( ( byte ) _text[_readIndex + 9] )
												{
													case ( byte ) 's':
													if( _readIndex + 10 >= _text.Length )
														goto default_recognizer;
													switch( ( byte ) _text[_readIndex + 10] )
													{
														case ( byte ) 't':
														if( _readIndex + 11 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 11]] )
														{
															NewToken( Tokens._static_cast );
															_readIndex += 11;
															return;
															
														}
														if( _readIndex + 11 >= _text.Length )
															goto default_recognizer;
														break;
														
													}
													break;
													
												}
												break;
												
											}
											break;
											
										}
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						case ( byte ) 'r':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'u':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'c':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 't':
									if( _readIndex + 6 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 6]] )
									{
										NewToken( Tokens._struct );
										_readIndex += 6;
										return;
										
									}
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					case ( byte ) 'w':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'i':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 't':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'c':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'h':
									if( _readIndex + 6 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 6]] )
									{
										NewToken( Tokens._switch );
										_readIndex += 6;
										return;
										
									}
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					
				}
				break;
				case ( byte ) 't':
				if( _readIndex + 1 >= _text.Length )
					goto default_recognizer;
				switch( ( byte ) _text[_readIndex + 1] )
				{
					case ( byte ) 'e':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'm':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'p':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'l':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'a':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 't':
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										switch( ( byte ) _text[_readIndex + 7] )
										{
											case ( byte ) 'e':
											if( _readIndex + 8 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 8]] )
											{
												NewToken( Tokens._template );
												_readIndex += 8;
												return;
												
											}
											if( _readIndex + 8 >= _text.Length )
												goto default_recognizer;
											break;
											
										}
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					case ( byte ) 'h':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'i':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 's':
							if( _readIndex + 4 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 4]] )
							{
								NewToken( Tokens._this );
								_readIndex += 4;
								return;
								
							}
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							break;
							
						}
						break;
						case ( byte ) 'r':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'o':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'w':
								if( _readIndex + 5 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 5]] )
								{
									NewToken( Tokens._throw );
									_readIndex += 5;
									return;
									
								}
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					case ( byte ) 'r':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'u':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'e':
							if( _readIndex + 4 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 4]] )
							{
								NewToken( Tokens._true );
								_readIndex += 4;
								return;
								
							}
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							break;
							
						}
						break;
						case ( byte ) 'y':
						if( _readIndex + 3 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 3]] )
						{
							NewToken( Tokens._try );
							_readIndex += 3;
							return;
							
						}
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						break;
						
					}
					break;
					case ( byte ) 'y':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'p':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'e':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'd':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'e':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 'f':
										if( _readIndex + 7 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 7]] )
										{
											NewToken( Tokens._typedef );
											_readIndex += 7;
											return;
											
										}
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										break;
										
									}
									break;
									
								}
								break;
								case ( byte ) 'i':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'd':
									if( _readIndex + 6 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 6]] )
									{
										NewToken( Tokens._typeid );
										_readIndex += 6;
										return;
										
									}
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									break;
									
								}
								break;
								case ( byte ) 'n':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'a':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 'm':
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										switch( ( byte ) _text[_readIndex + 7] )
										{
											case ( byte ) 'e':
											if( _readIndex + 8 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 8]] )
											{
												NewToken( Tokens._typename );
												_readIndex += 8;
												return;
												
											}
											if( _readIndex + 8 >= _text.Length )
												goto default_recognizer;
											break;
											
										}
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					
				}
				break;
				case ( byte ) 'v':
				if( _readIndex + 1 >= _text.Length )
					goto default_recognizer;
				switch( ( byte ) _text[_readIndex + 1] )
				{
					case ( byte ) 'i':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'r':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 't':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'u':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'a':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 'l':
										if( _readIndex + 7 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 7]] )
										{
											NewToken( Tokens._virtual );
											_readIndex += 7;
											return;
											
										}
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					case ( byte ) 'o':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'i':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'd':
							if( _readIndex + 4 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 4]] )
							{
								NewToken( Tokens._void );
								_readIndex += 4;
								return;
								
							}
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							break;
							
						}
						break;
						case ( byte ) 'l':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'a':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 't':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'i':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 'l':
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										switch( ( byte ) _text[_readIndex + 7] )
										{
											case ( byte ) 'e':
											if( _readIndex + 8 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 8]] )
											{
												NewToken( Tokens._volatile );
												_readIndex += 8;
												return;
												
											}
											if( _readIndex + 8 >= _text.Length )
												goto default_recognizer;
											break;
											
										}
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					
				}
				break;
				case ( byte ) 'w':
				if( _readIndex + 1 >= _text.Length )
					goto default_recognizer;
				switch( ( byte ) _text[_readIndex + 1] )
				{
					case ( byte ) 'h':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'i':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'l':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'e':
								if( _readIndex + 5 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 5]] )
								{
									NewToken( Tokens._while );
									_readIndex += 5;
									return;
									
								}
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					
				}
				break;
				
			}
			default_recognizer:
			_tokens[_writeIndex].Type = Tokens.Identifier;
			_tokens[_writeIndex].Value = ReadIdentifier();
			_tokens[_writeIndex].Row = CurrentRow;
			_tokens[_writeIndex].Column = CurrentColumn;
			_writeIndex++;
			
		}
		
		private void TokenizeObjectiveWord()
		{
			if( _readIndex + 0 >= _text.Length )
				goto default_recognizer;
			switch( ( byte ) _text[_readIndex + 0] )
			{
				case ( byte ) 'c':
				if( _readIndex + 1 >= _text.Length )
					goto default_recognizer;
				switch( ( byte ) _text[_readIndex + 1] )
				{
					case ( byte ) 'a':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 't':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'c':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'h':
								if( _readIndex + 5 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 5]] )
								{
									NewToken( Tokens.at_catch );
									_readIndex += 5;
									return;
									
								}
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					case ( byte ) 'l':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'a':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 's':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 's':
								if( _readIndex + 5 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 5]] )
								{
									NewToken( Tokens.at_class );
									_readIndex += 5;
									return;
									
								}
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					
				}
				break;
				case ( byte ) 'e':
				if( _readIndex + 1 >= _text.Length )
					goto default_recognizer;
				switch( ( byte ) _text[_readIndex + 1] )
				{
					case ( byte ) 'n':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'd':
						if( _readIndex + 3 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 3]] )
						{
							NewToken( Tokens.at_end );
							_readIndex += 3;
							return;
							
						}
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						break;
						
					}
					break;
					
				}
				break;
				case ( byte ) 'f':
				if( _readIndex + 1 >= _text.Length )
					goto default_recognizer;
				switch( ( byte ) _text[_readIndex + 1] )
				{
					case ( byte ) 'i':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'n':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'a':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'l':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'l':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 'y':
										if( _readIndex + 7 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 7]] )
										{
											NewToken( Tokens.at_finally );
											_readIndex += 7;
											return;
											
										}
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					
				}
				break;
				case ( byte ) 'i':
				if( _readIndex + 1 >= _text.Length )
					goto default_recognizer;
				switch( ( byte ) _text[_readIndex + 1] )
				{
					case ( byte ) 'm':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'p':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'l':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'e':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'm':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 'e':
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										switch( ( byte ) _text[_readIndex + 7] )
										{
											case ( byte ) 'n':
											if( _readIndex + 8 >= _text.Length )
												goto default_recognizer;
											switch( ( byte ) _text[_readIndex + 8] )
											{
												case ( byte ) 't':
												if( _readIndex + 9 >= _text.Length )
													goto default_recognizer;
												switch( ( byte ) _text[_readIndex + 9] )
												{
													case ( byte ) 'a':
													if( _readIndex + 10 >= _text.Length )
														goto default_recognizer;
													switch( ( byte ) _text[_readIndex + 10] )
													{
														case ( byte ) 't':
														if( _readIndex + 11 >= _text.Length )
															goto default_recognizer;
														switch( ( byte ) _text[_readIndex + 11] )
														{
															case ( byte ) 'i':
															if( _readIndex + 12 >= _text.Length )
																goto default_recognizer;
															switch( ( byte ) _text[_readIndex + 12] )
															{
																case ( byte ) 'o':
																if( _readIndex + 13 >= _text.Length )
																	goto default_recognizer;
																switch( ( byte ) _text[_readIndex + 13] )
																{
																	case ( byte ) 'n':
																	if( _readIndex + 14 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 14]] )
																	{
																		NewToken( Tokens.at_implementation );
																		_readIndex += 14;
																		return;
																		
																	}
																	if( _readIndex + 14 >= _text.Length )
																		goto default_recognizer;
																	break;
																	
																}
																break;
																
															}
															break;
															
														}
														break;
														
													}
													break;
													
												}
												break;
												
											}
											break;
											
										}
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					case ( byte ) 'n':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 't':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'e':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'r':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'f':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 'a':
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										switch( ( byte ) _text[_readIndex + 7] )
										{
											case ( byte ) 'c':
											if( _readIndex + 8 >= _text.Length )
												goto default_recognizer;
											switch( ( byte ) _text[_readIndex + 8] )
											{
												case ( byte ) 'e':
												if( _readIndex + 9 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 9]] )
												{
													NewToken( Tokens.at_interface );
													_readIndex += 9;
													return;
													
												}
												if( _readIndex + 9 >= _text.Length )
													goto default_recognizer;
												break;
												
											}
											break;
											
										}
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					
				}
				break;
				case ( byte ) 'o':
				if( _readIndex + 1 >= _text.Length )
					goto default_recognizer;
				switch( ( byte ) _text[_readIndex + 1] )
				{
					case ( byte ) 'p':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 't':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'i':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'o':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'n':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 'a':
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										switch( ( byte ) _text[_readIndex + 7] )
										{
											case ( byte ) 'l':
											if( _readIndex + 8 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 8]] )
											{
												NewToken( Tokens.at_optional );
												_readIndex += 8;
												return;
												
											}
											if( _readIndex + 8 >= _text.Length )
												goto default_recognizer;
											break;
											
										}
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					
				}
				break;
				case ( byte ) 'p':
				if( _readIndex + 1 >= _text.Length )
					goto default_recognizer;
				switch( ( byte ) _text[_readIndex + 1] )
				{
					case ( byte ) 'r':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'i':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'v':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'a':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 't':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 'e':
										if( _readIndex + 7 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 7]] )
										{
											NewToken( Tokens.at_private );
											_readIndex += 7;
											return;
											
										}
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						case ( byte ) 'o':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'p':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'e':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'r':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 't':
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										switch( ( byte ) _text[_readIndex + 7] )
										{
											case ( byte ) 'y':
											if( _readIndex + 8 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 8]] )
											{
												NewToken( Tokens.at_property );
												_readIndex += 8;
												return;
												
											}
											if( _readIndex + 8 >= _text.Length )
												goto default_recognizer;
											break;
											
										}
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							case ( byte ) 't':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'e':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'c':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 't':
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										switch( ( byte ) _text[_readIndex + 7] )
										{
											case ( byte ) 'e':
											if( _readIndex + 8 >= _text.Length )
												goto default_recognizer;
											switch( ( byte ) _text[_readIndex + 8] )
											{
												case ( byte ) 'd':
												if( _readIndex + 9 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 9]] )
												{
													NewToken( Tokens.at_protected );
													_readIndex += 9;
													return;
													
												}
												if( _readIndex + 9 >= _text.Length )
													goto default_recognizer;
												break;
												
											}
											break;
											
										}
										break;
										
									}
									break;
									
								}
								break;
								case ( byte ) 'o':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'c':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 'o':
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										switch( ( byte ) _text[_readIndex + 7] )
										{
											case ( byte ) 'l':
											if( _readIndex + 8 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 8]] )
											{
												NewToken( Tokens.at_protocol );
												_readIndex += 8;
												return;
												
											}
											if( _readIndex + 8 >= _text.Length )
												goto default_recognizer;
											break;
											
										}
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					case ( byte ) 'u':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'b':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'l':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'i':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'c':
									if( _readIndex + 6 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 6]] )
									{
										NewToken( Tokens.at_public );
										_readIndex += 6;
										return;
										
									}
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					
				}
				break;
				case ( byte ) 'r':
				if( _readIndex + 1 >= _text.Length )
					goto default_recognizer;
				switch( ( byte ) _text[_readIndex + 1] )
				{
					case ( byte ) 'e':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'q':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'u':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'i':
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								switch( ( byte ) _text[_readIndex + 5] )
								{
									case ( byte ) 'r':
									if( _readIndex + 6 >= _text.Length )
										goto default_recognizer;
									switch( ( byte ) _text[_readIndex + 6] )
									{
										case ( byte ) 'e':
										if( _readIndex + 7 >= _text.Length )
											goto default_recognizer;
										switch( ( byte ) _text[_readIndex + 7] )
										{
											case ( byte ) 'd':
											if( _readIndex + 8 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 8]] )
											{
												NewToken( Tokens.at_required );
												_readIndex += 8;
												return;
												
											}
											if( _readIndex + 8 >= _text.Length )
												goto default_recognizer;
											break;
											
										}
										break;
										
									}
									break;
									
								}
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					
				}
				break;
				case ( byte ) 't':
				if( _readIndex + 1 >= _text.Length )
					goto default_recognizer;
				switch( ( byte ) _text[_readIndex + 1] )
				{
					case ( byte ) 'h':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'r':
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						switch( ( byte ) _text[_readIndex + 3] )
						{
							case ( byte ) 'o':
							if( _readIndex + 4 >= _text.Length )
								goto default_recognizer;
							switch( ( byte ) _text[_readIndex + 4] )
							{
								case ( byte ) 'w':
								if( _readIndex + 5 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 5]] )
								{
									NewToken( Tokens.at_throw );
									_readIndex += 5;
									return;
									
								}
								if( _readIndex + 5 >= _text.Length )
									goto default_recognizer;
								break;
								
							}
							break;
							
						}
						break;
						
					}
					break;
					case ( byte ) 'r':
					if( _readIndex + 2 >= _text.Length )
						goto default_recognizer;
					switch( ( byte ) _text[_readIndex + 2] )
					{
						case ( byte ) 'y':
						if( _readIndex + 3 >=_text.Length || !IsIdentifierCharacter[( byte ) _text[_readIndex + 3]] )
						{
							NewToken( Tokens.at_try );
							_readIndex += 3;
							return;
							
						}
						if( _readIndex + 3 >= _text.Length )
							goto default_recognizer;
						break;
						
					}
					break;
					
				}
				break;
				
			}
			default_recognizer:
		ThrowException( "Undefined objective-c keyword: {0}", ReadIdentifier() );
		}
	}
}
