//
// Copyright (C) 2008 Eugeny Grishul
//
// See license in License.txt
//
// This file is generated by RegenAST project
//

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;

namespace NObjectiveAST
{
	public partial interface IAstVisitor
	{
		object Visit( AssignmentExpression node );
		object Visit( BinaryOperatorExpression node );
		object Visit( BreakStatement node );
		object Visit( CaseLabel node );
		object Visit( CastExpression node );
		object Visit( CatchBlock node );
		object Visit( CommaExpression node );
		object Visit( ConditionalExpression node );
		object Visit( ConstructorDeclaration node );
		object Visit( ContinueStatement node );
		object Visit( DeclarationExpression node );
		object Visit( DeclarationNode node );
		object Visit( DestructorDeclaration node );
		object Visit( DoWhileStatement node );
		object Visit( EmptyExpression node );
		object Visit( EnumElementDeclaration node );
		object Visit( ExpressionStatement node );
		object Visit( ForStatement node );
		object Visit( FunctionDefinitionStatement node );
		object Visit( GotoStatement node );
		object Visit( IfStatement node );
		object Visit( InvocationExpression node );
		object Visit( LabeledStatement node );
		object Visit( MemberAccessSpecifier node );
		object Visit( MemberReferenceExpression node );
		object Visit( NamespaceDeclaration node );
		object Visit( NewExpression node );
		object Visit( NullStatement node );
		object Visit( ObjectiveMethodDeclarationStatement node );
		object Visit( ObjectiveParameterDeclaration node );
		object Visit( ObjectivePropertyDeclarationStatement node );
		object Visit( ObjectiveTypeDeclarationStatement node );
		object Visit( ObjectiveTypeForwardDeclarationStatement node );
		object Visit( ObjectiveTypeModifierStatement node );
		object Visit( ParameterDeclaration node );
		object Visit( ParenthesizedExpression node );
		object Visit( PrimitiveExpression node );
		object Visit( QualifiedName node );
		object Visit( QualifiedIdentifierExpression node );
		object Visit( QualifiedNestedName node );
		object Visit( ReturnStatement node );
		object Visit( ScopeStatement node );
		object Visit( SizeofExpression node );
		object Visit( SwitchStatement node );
		object Visit( TemplateParameterDeclaration node );
		object Visit( TemplateParametersDeclaration node );
		object Visit( ThisReferenceExpression node );
		object Visit( ThrowStatement node );
		object Visit( TranslationUnit node );
		object Visit( TryCatchStatement node );
		object Visit( TypeDeclarationExpression node );
		object Visit( TypedefStatement node );
		object Visit( TypeidExpression node );
		object Visit( TypeReference node );
		object Visit( UnaryOperatorExpression node );
		object Visit( UsingDeclarationStatement node );
		object Visit( UsingDirectiveStatement node );
		object Visit( WhileStatement node );
	}
	public partial class TraversalVisitor : IAstVisitor
	{
		public object Visit( Node node )
		{
			return node.AcceptVisitor( this );
		}
		public virtual object Visit( AssignmentExpression node )
		{
			if (node.Left != null) {
				BeginVisit( "Left", node.Left );
				node.Left.AcceptVisitor( this );
				EndVisit( "Left", node.Left );
			}
			if (node.Right != null) {
				BeginVisit( "Right", node.Right );
				node.Right.AcceptVisitor( this );
				EndVisit( "Right", node.Right );
			}
			return null;
		}
		public virtual object Visit( BinaryOperatorExpression node )
		{
			if (node.Left != null) {
				BeginVisit( "Left", node.Left );
				node.Left.AcceptVisitor( this );
				EndVisit( "Left", node.Left );
			}
			if (node.Right != null) {
				BeginVisit( "Right", node.Right );
				node.Right.AcceptVisitor( this );
				EndVisit( "Right", node.Right );
			}
			return null;
		}
		public virtual object Visit( BreakStatement node )
		{
			return null;
		}
		public virtual object Visit( CaseLabel node )
		{
			if (node.Expression != null) {
				BeginVisit( "Expression", node.Expression );
				node.Expression.AcceptVisitor( this );
				EndVisit( "Expression", node.Expression );
			}
			return null;
		}
		public virtual object Visit( CastExpression node )
		{
			if (node.Expression != null) {
				BeginVisit( "Expression", node.Expression );
				node.Expression.AcceptVisitor( this );
				EndVisit( "Expression", node.Expression );
			}
			if (node.TypeReference != null) {
				BeginVisit( "TypeReference", node.TypeReference );
				node.TypeReference.AcceptVisitor( this );
				EndVisit( "TypeReference", node.TypeReference );
			}
			return null;
		}
		public virtual object Visit( CatchBlock node )
		{
			if (node.ExceptionParameter != null) {
				BeginVisit( "ExceptionParameter", node.ExceptionParameter );
				node.ExceptionParameter.AcceptVisitor( this );
				EndVisit( "ExceptionParameter", node.ExceptionParameter );
			}
			if (node.Body != null) {
				BeginVisitChildren( "Body", node.Body );
				foreach (var item in node.Body) {
					BeginVisit( "Body", item );
					item.AcceptVisitor( this );
					EndVisit( "Body", item );
				}
				EndVisitChildren( "Body", node.Body );
			}
			return null;
		}
		public virtual object Visit( CommaExpression node )
		{
			if (node.Left != null) {
				BeginVisit( "Left", node.Left );
				node.Left.AcceptVisitor( this );
				EndVisit( "Left", node.Left );
			}
			if (node.Right != null) {
				BeginVisit( "Right", node.Right );
				node.Right.AcceptVisitor( this );
				EndVisit( "Right", node.Right );
			}
			return null;
		}
		public virtual object Visit( ConditionalExpression node )
		{
			if (node.ConditionExpression != null) {
				BeginVisit( "ConditionExpression", node.ConditionExpression );
				node.ConditionExpression.AcceptVisitor( this );
				EndVisit( "ConditionExpression", node.ConditionExpression );
			}
			if (node.FalseExpression != null) {
				BeginVisit( "FalseExpression", node.FalseExpression );
				node.FalseExpression.AcceptVisitor( this );
				EndVisit( "FalseExpression", node.FalseExpression );
			}
			if (node.TrueExpression != null) {
				BeginVisit( "TrueExpression", node.TrueExpression );
				node.TrueExpression.AcceptVisitor( this );
				EndVisit( "TrueExpression", node.TrueExpression );
			}
			return null;
		}
		public virtual object Visit( ConstructorDeclaration node )
		{
			if (node.ParameterDeclaration != null) {
				BeginVisit( "ParameterDeclaration", node.ParameterDeclaration );
				node.ParameterDeclaration.AcceptVisitor( this );
				EndVisit( "ParameterDeclaration", node.ParameterDeclaration );
			}
			if (node.Body != null) {
				BeginVisitChildren( "Body", node.Body );
				foreach (var item in node.Body) {
					BeginVisit( "Body", item );
					item.AcceptVisitor( this );
					EndVisit( "Body", item );
				}
				EndVisitChildren( "Body", node.Body );
			}
			return null;
		}
		public virtual object Visit( ContinueStatement node )
		{
			return null;
		}
		public virtual object Visit( DeclarationExpression node )
		{
			if (node.TypeDeclarationExpression != null) {
				BeginVisit( "TypeDeclarationExpression", node.TypeDeclarationExpression );
				node.TypeDeclarationExpression.AcceptVisitor( this );
				EndVisit( "TypeDeclarationExpression", node.TypeDeclarationExpression );
			}
			if (node.TypeReference != null) {
				BeginVisit( "TypeReference", node.TypeReference );
				node.TypeReference.AcceptVisitor( this );
				EndVisit( "TypeReference", node.TypeReference );
			}
			if (node.Declarations != null) {
				BeginVisitChildren( "Declarations", node.Declarations );
				foreach (var item in node.Declarations) {
					BeginVisit( "Declarations", item );
					item.AcceptVisitor( this );
					EndVisit( "Declarations", item );
				}
				EndVisitChildren( "Declarations", node.Declarations );
			}
			return null;
		}
		public virtual object Visit( DeclarationNode node )
		{
			if (node.InitializerExpression != null) {
				BeginVisit( "InitializerExpression", node.InitializerExpression );
				node.InitializerExpression.AcceptVisitor( this );
				EndVisit( "InitializerExpression", node.InitializerExpression );
			}
			if (node.TypeReference != null) {
				BeginVisit( "TypeReference", node.TypeReference );
				node.TypeReference.AcceptVisitor( this );
				EndVisit( "TypeReference", node.TypeReference );
			}
			return null;
		}
		public virtual object Visit( DestructorDeclaration node )
		{
			if (node.Body != null) {
				BeginVisitChildren( "Body", node.Body );
				foreach (var item in node.Body) {
					BeginVisit( "Body", item );
					item.AcceptVisitor( this );
					EndVisit( "Body", item );
				}
				EndVisitChildren( "Body", node.Body );
			}
			return null;
		}
		public virtual object Visit( DoWhileStatement node )
		{
			if (node.ConditionExpression != null) {
				BeginVisit( "ConditionExpression", node.ConditionExpression );
				node.ConditionExpression.AcceptVisitor( this );
				EndVisit( "ConditionExpression", node.ConditionExpression );
			}
			return null;
		}
		public virtual object Visit( EmptyExpression node )
		{
			return null;
		}
		public virtual object Visit( EnumElementDeclaration node )
		{
			if (node.InitializerExpression != null) {
				BeginVisit( "InitializerExpression", node.InitializerExpression );
				node.InitializerExpression.AcceptVisitor( this );
				EndVisit( "InitializerExpression", node.InitializerExpression );
			}
			return null;
		}
		public virtual object Visit( ExpressionStatement node )
		{
			if (node.Expression != null) {
				BeginVisit( "Expression", node.Expression );
				node.Expression.AcceptVisitor( this );
				EndVisit( "Expression", node.Expression );
			}
			return null;
		}
		public virtual object Visit( ForStatement node )
		{
			if (node.ConditionExpression != null) {
				BeginVisit( "ConditionExpression", node.ConditionExpression );
				node.ConditionExpression.AcceptVisitor( this );
				EndVisit( "ConditionExpression", node.ConditionExpression );
			}
			if (node.InitializationExpression != null) {
				BeginVisit( "InitializationExpression", node.InitializationExpression );
				node.InitializationExpression.AcceptVisitor( this );
				EndVisit( "InitializationExpression", node.InitializationExpression );
			}
			if (node.LoopExpression != null) {
				BeginVisit( "LoopExpression", node.LoopExpression );
				node.LoopExpression.AcceptVisitor( this );
				EndVisit( "LoopExpression", node.LoopExpression );
			}
			return null;
		}
		public virtual object Visit( FunctionDefinitionStatement node )
		{
			if (node.DeclarationNode != null) {
				BeginVisit( "DeclarationNode", node.DeclarationNode );
				node.DeclarationNode.AcceptVisitor( this );
				EndVisit( "DeclarationNode", node.DeclarationNode );
			}
			return null;
		}
		public virtual object Visit( GotoStatement node )
		{
			return null;
		}
		public virtual object Visit( IfStatement node )
		{
			if (node.ConditionExpression != null) {
				BeginVisit( "ConditionExpression", node.ConditionExpression );
				node.ConditionExpression.AcceptVisitor( this );
				EndVisit( "ConditionExpression", node.ConditionExpression );
			}
			if (node.ElseStatement != null) {
				BeginVisit( "ElseStatement", node.ElseStatement );
				node.ElseStatement.AcceptVisitor( this );
				EndVisit( "ElseStatement", node.ElseStatement );
			}
			return null;
		}
		public virtual object Visit( InvocationExpression node )
		{
			if (node.Expression != null) {
				BeginVisit( "Expression", node.Expression );
				node.Expression.AcceptVisitor( this );
				EndVisit( "Expression", node.Expression );
			}
			if (node.Arguments != null) {
				BeginVisitChildren( "Arguments", node.Arguments );
				foreach (var item in node.Arguments) {
					BeginVisit( "Arguments", item );
					item.AcceptVisitor( this );
					EndVisit( "Arguments", item );
				}
				EndVisitChildren( "Arguments", node.Arguments );
			}
			return null;
		}
		public virtual object Visit( LabeledStatement node )
		{
			return null;
		}
		public virtual object Visit( MemberAccessSpecifier node )
		{
			return null;
		}
		public virtual object Visit( MemberReferenceExpression node )
		{
			if (node.Node != null) {
				BeginVisit( "Node", node.Node );
				node.Node.AcceptVisitor( this );
				EndVisit( "Node", node.Node );
			}
			return null;
		}
		public virtual object Visit( NamespaceDeclaration node )
		{
			if (node.Body != null) {
				BeginVisitChildren( "Body", node.Body );
				foreach (var item in node.Body) {
					BeginVisit( "Body", item );
					item.AcceptVisitor( this );
					EndVisit( "Body", item );
				}
				EndVisitChildren( "Body", node.Body );
			}
			return null;
		}
		public virtual object Visit( NewExpression node )
		{
			return null;
		}
		public virtual object Visit( NullStatement node )
		{
			return null;
		}
		public virtual object Visit( ObjectiveMethodDeclarationStatement node )
		{
			if (node.ReturnType != null) {
				BeginVisit( "ReturnType", node.ReturnType );
				node.ReturnType.AcceptVisitor( this );
				EndVisit( "ReturnType", node.ReturnType );
			}
			if (node.Parameters != null) {
				BeginVisitChildren( "Parameters", node.Parameters );
				foreach (var item in node.Parameters) {
					BeginVisit( "Parameters", item );
					item.AcceptVisitor( this );
					EndVisit( "Parameters", item );
				}
				EndVisitChildren( "Parameters", node.Parameters );
			}
			return null;
		}
		public virtual object Visit( ObjectiveParameterDeclaration node )
		{
			if (node.TypeReference != null) {
				BeginVisit( "TypeReference", node.TypeReference );
				node.TypeReference.AcceptVisitor( this );
				EndVisit( "TypeReference", node.TypeReference );
			}
			return null;
		}
		public virtual object Visit( ObjectivePropertyDeclarationStatement node )
		{
			if (node.DeclarationExpression != null) {
				BeginVisit( "DeclarationExpression", node.DeclarationExpression );
				node.DeclarationExpression.AcceptVisitor( this );
				EndVisit( "DeclarationExpression", node.DeclarationExpression );
			}
			return null;
		}
		public virtual object Visit( ObjectiveTypeDeclarationStatement node )
		{
			if (node.Body != null) {
				BeginVisitChildren( "Body", node.Body );
				foreach (var item in node.Body) {
					BeginVisit( "Body", item );
					item.AcceptVisitor( this );
					EndVisit( "Body", item );
				}
				EndVisitChildren( "Body", node.Body );
			}
			if (node.InstanceVariableStatements != null) {
				BeginVisitChildren( "InstanceVariableStatements", node.InstanceVariableStatements );
				foreach (var item in node.InstanceVariableStatements) {
					BeginVisit( "InstanceVariableStatements", item );
					item.AcceptVisitor( this );
					EndVisit( "InstanceVariableStatements", item );
				}
				EndVisitChildren( "InstanceVariableStatements", node.InstanceVariableStatements );
			}
			return null;
		}
		public virtual object Visit( ObjectiveTypeForwardDeclarationStatement node )
		{
			return null;
		}
		public virtual object Visit( ObjectiveTypeModifierStatement node )
		{
			return null;
		}
		public virtual object Visit( ParameterDeclaration node )
		{
			if (node.Parameters != null) {
				BeginVisitChildren( "Parameters", node.Parameters );
				foreach (var item in node.Parameters) {
					BeginVisit( "Parameters", item );
					item.AcceptVisitor( this );
					EndVisit( "Parameters", item );
				}
				EndVisitChildren( "Parameters", node.Parameters );
			}
			return null;
		}
		public virtual object Visit( ParenthesizedExpression node )
		{
			if (node.Expression != null) {
				BeginVisit( "Expression", node.Expression );
				node.Expression.AcceptVisitor( this );
				EndVisit( "Expression", node.Expression );
			}
			return null;
		}
		public virtual object Visit( PrimitiveExpression node )
		{
			return null;
		}
		public virtual object Visit( QualifiedName node )
		{
			if (node.NestedNames != null) {
				BeginVisitChildren( "NestedNames", node.NestedNames );
				foreach (var item in node.NestedNames) {
					BeginVisit( "NestedNames", item );
					item.AcceptVisitor( this );
					EndVisit( "NestedNames", item );
				}
				EndVisitChildren( "NestedNames", node.NestedNames );
			}
			return null;
		}
		public virtual object Visit( QualifiedIdentifierExpression node )
		{
			if (node.Name != null) {
				BeginVisit( "Name", node.Name );
				node.Name.AcceptVisitor( this );
				EndVisit( "Name", node.Name );
			}
			return null;
		}
		public virtual object Visit( QualifiedNestedName node )
		{
			if (node.GenericArguments != null) {
				BeginVisitChildren( "GenericArguments", node.GenericArguments );
				foreach (var item in node.GenericArguments) {
					BeginVisit( "GenericArguments", item );
					item.AcceptVisitor( this );
					EndVisit( "GenericArguments", item );
				}
				EndVisitChildren( "GenericArguments", node.GenericArguments );
			}
			return null;
		}
		public virtual object Visit( ReturnStatement node )
		{
			if (node.Expression != null) {
				BeginVisit( "Expression", node.Expression );
				node.Expression.AcceptVisitor( this );
				EndVisit( "Expression", node.Expression );
			}
			return null;
		}
		public virtual object Visit( ScopeStatement node )
		{
			return null;
		}
		public virtual object Visit( SizeofExpression node )
		{
			if (node.Node != null) {
				BeginVisit( "Node", node.Node );
				node.Node.AcceptVisitor( this );
				EndVisit( "Node", node.Node );
			}
			return null;
		}
		public virtual object Visit( SwitchStatement node )
		{
			if (node.Expression != null) {
				BeginVisit( "Expression", node.Expression );
				node.Expression.AcceptVisitor( this );
				EndVisit( "Expression", node.Expression );
			}
			return null;
		}
		public virtual object Visit( TemplateParameterDeclaration node )
		{
			if (node.Initializer != null) {
				BeginVisit( "Initializer", node.Initializer );
				node.Initializer.AcceptVisitor( this );
				EndVisit( "Initializer", node.Initializer );
			}
			if (node.TemplateParametersDeclaration != null) {
				BeginVisit( "TemplateParametersDeclaration", node.TemplateParametersDeclaration );
				node.TemplateParametersDeclaration.AcceptVisitor( this );
				EndVisit( "TemplateParametersDeclaration", node.TemplateParametersDeclaration );
			}
			if (node.TypeReference != null) {
				BeginVisit( "TypeReference", node.TypeReference );
				node.TypeReference.AcceptVisitor( this );
				EndVisit( "TypeReference", node.TypeReference );
			}
			return null;
		}
		public virtual object Visit( TemplateParametersDeclaration node )
		{
			if (node.Parameters != null) {
				BeginVisitChildren( "Parameters", node.Parameters );
				foreach (var item in node.Parameters) {
					BeginVisit( "Parameters", item );
					item.AcceptVisitor( this );
					EndVisit( "Parameters", item );
				}
				EndVisitChildren( "Parameters", node.Parameters );
			}
			return null;
		}
		public virtual object Visit( ThisReferenceExpression node )
		{
			return null;
		}
		public virtual object Visit( ThrowStatement node )
		{
			if (node.Expression != null) {
				BeginVisit( "Expression", node.Expression );
				node.Expression.AcceptVisitor( this );
				EndVisit( "Expression", node.Expression );
			}
			return null;
		}
		public virtual object Visit( TranslationUnit node )
		{
			if (node.Body != null) {
				BeginVisitChildren( "Body", node.Body );
				foreach (var item in node.Body) {
					BeginVisit( "Body", item );
					item.AcceptVisitor( this );
					EndVisit( "Body", item );
				}
				EndVisitChildren( "Body", node.Body );
			}
			return null;
		}
		public virtual object Visit( TryCatchStatement node )
		{
			if (node.Body != null) {
				BeginVisitChildren( "Body", node.Body );
				foreach (var item in node.Body) {
					BeginVisit( "Body", item );
					item.AcceptVisitor( this );
					EndVisit( "Body", item );
				}
				EndVisitChildren( "Body", node.Body );
			}
			if (node.CatchBlocks != null) {
				BeginVisitChildren( "CatchBlocks", node.CatchBlocks );
				foreach (var item in node.CatchBlocks) {
					BeginVisit( "CatchBlocks", item );
					item.AcceptVisitor( this );
					EndVisit( "CatchBlocks", item );
				}
				EndVisitChildren( "CatchBlocks", node.CatchBlocks );
			}
			return null;
		}
		public virtual object Visit( TypeDeclarationExpression node )
		{
			if (node.Name != null) {
				BeginVisit( "Name", node.Name );
				node.Name.AcceptVisitor( this );
				EndVisit( "Name", node.Name );
			}
			if (node.TemplateParametersDeclaration != null) {
				BeginVisit( "TemplateParametersDeclaration", node.TemplateParametersDeclaration );
				node.TemplateParametersDeclaration.AcceptVisitor( this );
				EndVisit( "TemplateParametersDeclaration", node.TemplateParametersDeclaration );
			}
			if (node.Body != null) {
				BeginVisitChildren( "Body", node.Body );
				foreach (var item in node.Body) {
					BeginVisit( "Body", item );
					item.AcceptVisitor( this );
					EndVisit( "Body", item );
				}
				EndVisitChildren( "Body", node.Body );
			}
			return null;
		}
		public virtual object Visit( TypedefStatement node )
		{
			if (node.DeclarationExpression != null) {
				BeginVisit( "DeclarationExpression", node.DeclarationExpression );
				node.DeclarationExpression.AcceptVisitor( this );
				EndVisit( "DeclarationExpression", node.DeclarationExpression );
			}
			return null;
		}
		public virtual object Visit( TypeidExpression node )
		{
			if (node.Node != null) {
				BeginVisit( "Node", node.Node );
				node.Node.AcceptVisitor( this );
				EndVisit( "Node", node.Node );
			}
			return null;
		}
		public virtual object Visit( TypeReference node )
		{
			if (node.ElementType != null) {
				BeginVisit( "ElementType", node.ElementType );
				node.ElementType.AcceptVisitor( this );
				EndVisit( "ElementType", node.ElementType );
			}
			if (node.MemberOf != null) {
				BeginVisit( "MemberOf", node.MemberOf );
				node.MemberOf.AcceptVisitor( this );
				EndVisit( "MemberOf", node.MemberOf );
			}
			if (node.ParameterDeclaration != null) {
				BeginVisit( "ParameterDeclaration", node.ParameterDeclaration );
				node.ParameterDeclaration.AcceptVisitor( this );
				EndVisit( "ParameterDeclaration", node.ParameterDeclaration );
			}
			if (node.ReturnType != null) {
				BeginVisit( "ReturnType", node.ReturnType );
				node.ReturnType.AcceptVisitor( this );
				EndVisit( "ReturnType", node.ReturnType );
			}
			if (node.Size != null) {
				BeginVisit( "Size", node.Size );
				node.Size.AcceptVisitor( this );
				EndVisit( "Size", node.Size );
			}
			if (node.GenericArguments != null) {
				BeginVisitChildren( "GenericArguments", node.GenericArguments );
				foreach (var item in node.GenericArguments) {
					BeginVisit( "GenericArguments", item );
					item.AcceptVisitor( this );
					EndVisit( "GenericArguments", item );
				}
				EndVisitChildren( "GenericArguments", node.GenericArguments );
			}
			return null;
		}
		public virtual object Visit( UnaryOperatorExpression node )
		{
			if (node.Expression != null) {
				BeginVisit( "Expression", node.Expression );
				node.Expression.AcceptVisitor( this );
				EndVisit( "Expression", node.Expression );
			}
			return null;
		}
		public virtual object Visit( UsingDeclarationStatement node )
		{
			if (node.TypeReference != null) {
				BeginVisit( "TypeReference", node.TypeReference );
				node.TypeReference.AcceptVisitor( this );
				EndVisit( "TypeReference", node.TypeReference );
			}
			return null;
		}
		public virtual object Visit( UsingDirectiveStatement node )
		{
			return null;
		}
		public virtual object Visit( WhileStatement node )
		{
			if (node.ConditionExpression != null) {
				BeginVisit( "ConditionExpression", node.ConditionExpression );
				node.ConditionExpression.AcceptVisitor( this );
				EndVisit( "ConditionExpression", node.ConditionExpression );
			}
			return null;
		}
	}
	public partial class AssignmentExpression
	{
		public Expression Left {
			get { return _left; }
			set { _left = SetParent( value ); }
		}
		public Expression Right {
			get { return _right; }
			set { _right = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class BinaryOperatorExpression
	{
		public Expression Left {
			get { return _left; }
			set { _left = SetParent( value ); }
		}
		public Expression Right {
			get { return _right; }
			set { _right = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class BreakStatement
	{
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class CaseLabel
	{
		public Expression Expression {
			get { return _expression; }
			set { _expression = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class CastExpression
	{
		public TypeReference TypeReference {
			get { return _typeReference; }
			set { _typeReference = SetParent( value ); }
		}
		public Expression Expression {
			get { return _expression; }
			set { _expression = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class CatchBlock
	{
		public DeclarationNode ExceptionParameter {
			get { return _exceptionParameter; }
			set { _exceptionParameter = SetParent( value ); }
		}
		public List<Statement> Body {
			get { return _body; }
			set { _body = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class CommaExpression
	{
		public Expression Left {
			get { return _left; }
			set { _left = SetParent( value ); }
		}
		public Expression Right {
			get { return _right; }
			set { _right = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class ConditionalExpression
	{
		public Expression ConditionExpression {
			get { return _conditionExpression; }
			set { _conditionExpression = SetParent( value ); }
		}
		public Expression TrueExpression {
			get { return _trueExpression; }
			set { _trueExpression = SetParent( value ); }
		}
		public Expression FalseExpression {
			get { return _falseExpression; }
			set { _falseExpression = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class ConstructorDeclaration
	{
		public ParameterDeclaration ParameterDeclaration {
			get { return _parameterDeclaration; }
			set { _parameterDeclaration = SetParent( value ); }
		}
		public List<Statement> Body {
			get { return _body; }
			set { _body = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class ContinueStatement
	{
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class DeclarationExpression
	{
		public TypeReference TypeReference {
			get { return _typeReference; }
			set { _typeReference = SetParent( value ); }
		}
		public List<DeclarationNode> Declarations {
			get { return _declarations; }
			set { _declarations = SetParent( value ); }
		}
		public TypeDeclarationExpression TypeDeclarationExpression {
			get { return _typeDeclarationExpression; }
			set { _typeDeclarationExpression = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class DeclarationNode
	{
		public TypeReference TypeReference {
			get { return _typeReference; }
			set { _typeReference = SetParent( value ); }
		}
		public Expression InitializerExpression {
			get { return _initializerExpression; }
			set { _initializerExpression = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class DestructorDeclaration
	{
		public List<Statement> Body {
			get { return _body; }
			set { _body = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class DoWhileStatement
	{
		public Expression ConditionExpression {
			get { return _conditionExpression; }
			set { _conditionExpression = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class EmptyExpression
	{
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class EnumElementDeclaration
	{
		public Expression InitializerExpression {
			get { return _initializerExpression; }
			set { _initializerExpression = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class ExpressionStatement
	{
		public Expression Expression {
			get { return _expression; }
			set { _expression = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class ForStatement
	{
		public Expression InitializationExpression {
			get { return _initializationExpression; }
			set { _initializationExpression = SetParent( value ); }
		}
		public Expression ConditionExpression {
			get { return _conditionExpression; }
			set { _conditionExpression = SetParent( value ); }
		}
		public Expression LoopExpression {
			get { return _loopExpression; }
			set { _loopExpression = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class FunctionDefinitionStatement
	{
		public DeclarationNode DeclarationNode {
			get { return _declarationNode; }
			set { _declarationNode = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class GotoStatement
	{
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class IfStatement
	{
		public Expression ConditionExpression {
			get { return _conditionExpression; }
			set { _conditionExpression = SetParent( value ); }
		}
		public Statement ElseStatement {
			get { return _elseStatement; }
			set { _elseStatement = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class InvocationExpression
	{
		public Expression Expression {
			get { return _expression; }
			set { _expression = SetParent( value ); }
		}
		public List<Expression> Arguments {
			get { return _arguments; }
			set { _arguments = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class LabeledStatement
	{
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class MemberAccessSpecifier
	{
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class MemberReferenceExpression
	{
		public Node Node {
			get { return _node; }
			set { _node = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class NamespaceDeclaration
	{
		public List<Statement> Body {
			get { return _body; }
			set { _body = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class NewExpression
	{
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class NullStatement
	{
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class ObjectiveMethodDeclarationStatement
	{
		public TypeReference ReturnType {
			get { return _returnType; }
			set { _returnType = SetParent( value ); }
		}
		public List<ObjectiveParameterDeclaration> Parameters {
			get { return _parameters; }
			set { _parameters = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class ObjectiveParameterDeclaration
	{
		public TypeReference TypeReference {
			get { return _typeReference; }
			set { _typeReference = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class ObjectivePropertyDeclarationStatement
	{
		public DeclarationExpression DeclarationExpression {
			get { return _declarationExpression; }
			set { _declarationExpression = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class ObjectiveTypeDeclarationStatement
	{
		public List<Statement> InstanceVariableStatements {
			get { return _instanceVariableStatements; }
			set { _instanceVariableStatements = SetParent( value ); }
		}
		public List<Statement> Body {
			get { return _body; }
			set { _body = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class ObjectiveTypeForwardDeclarationStatement
	{
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class ObjectiveTypeModifierStatement
	{
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class ParameterDeclaration
	{
		public List<DeclarationNode> Parameters {
			get { return _parameters; }
			set { _parameters = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class ParenthesizedExpression
	{
		public Expression Expression {
			get { return _expression; }
			set { _expression = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class PrimitiveExpression
	{
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class QualifiedName
	{
		public List<QualifiedNestedName> NestedNames {
			get { return _nestedNames; }
			set { _nestedNames = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class QualifiedIdentifierExpression
	{
		public QualifiedName Name {
			get { return _qualifiedName; }
			set { _qualifiedName = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class QualifiedNestedName
	{
		public List<Node> GenericArguments {
			get { return _genericArguments; }
			set { _genericArguments = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class ReturnStatement
	{
		public Expression Expression {
			get { return _expression; }
			set { _expression = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class ScopeStatement
	{
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class SizeofExpression
	{
		public Node Node {
			get { return _node; }
			set { _node = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class SwitchStatement
	{
		public Expression Expression {
			get { return _expression; }
			set { _expression = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class TemplateParameterDeclaration
	{
		public Node Initializer {
			get { return _initializer; }
			set { _initializer = SetParent( value ); }
		}
		public TypeReference TypeReference {
			get { return _typeReference; }
			set { _typeReference = SetParent( value ); }
		}
		public TemplateParametersDeclaration TemplateParametersDeclaration {
			get { return _templateParametersDeclaration; }
			set { _templateParametersDeclaration = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class TemplateParametersDeclaration
	{
		public List<TemplateParameterDeclaration> Parameters {
			get { return _parameters; }
			set { _parameters = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class ThisReferenceExpression
	{
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class ThrowStatement
	{
		public Expression Expression {
			get { return _expression; }
			set { _expression = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class TranslationUnit
	{
		public List<Statement> Body {
			get { return _body; }
			set { _body = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class TryCatchStatement
	{
		public List<CatchBlock> CatchBlocks {
			get { return _catchBlocks; }
			set { _catchBlocks = SetParent( value ); }
		}
		public List<Statement> Body {
			get { return _body; }
			set { _body = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class TypeDeclarationExpression
	{
		public TemplateParametersDeclaration TemplateParametersDeclaration {
			get { return _templateParametersDeclaration; }
			set { _templateParametersDeclaration = SetParent( value ); }
		}
		public QualifiedName Name {
			get { return _name; }
			set { _name = SetParent( value ); }
		}
		public List<Statement> Body {
			get { return _body; }
			set { _body = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class TypedefStatement
	{
		public DeclarationExpression DeclarationExpression {
			get { return _declarationExpression; }
			set { _declarationExpression = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class TypeidExpression
	{
		public Node Node {
			get { return _node; }
			set { _node = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class TypeReference
	{
		public List<Node> GenericArguments {
			get { return _genericArguments; }
			set { _genericArguments = SetParent( value ); }
		}
		public TypeReference ElementType {
			get { return _elementType; }
			set { _elementType = SetParent( value ); }
		}
		public Expression Size {
			get { return _size; }
			set { _size = SetParent( value ); }
		}
		public QualifiedName MemberOf {
			get { return _memberOf; }
			set { _memberOf = SetParent( value ); }
		}
		public TypeReference ReturnType {
			get { return _returnType; }
			set { _returnType = SetParent( value ); }
		}
		public ParameterDeclaration ParameterDeclaration {
			get { return _parameterDeclaration; }
			set { _parameterDeclaration = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class UnaryOperatorExpression
	{
		public Expression Expression {
			get { return _expression; }
			set { _expression = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class UsingDeclarationStatement
	{
		public TypeReference TypeReference {
			get { return _typeReference; }
			set { _typeReference = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class UsingDirectiveStatement
	{
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
	public partial class WhileStatement
	{
		public Expression ConditionExpression {
			get { return _conditionExpression; }
			set { _conditionExpression = SetParent( value ); }
		}
		[DebuggerStepThroughAttribute()]
		public override object AcceptVisitor( IAstVisitor visitor )
		{
			return visitor.Visit( this );
		}
	}
}
